 Лекция 9. Алгоритмы пересечения геометрических объектов
Задача о пересечениях геометрических объектов
Задача о пересечениях состоит в установлении факта расположения нескольких объектов водном и том же месте. Проблемы с ее решением связаны обычно с большой размерностью задачи. Примеры областей, где возникает эта задача:- архитектурное проектирование (объем базы более 106 элементов);- машинная графика ( ( 105 векторов);- проектирование интегральных схем ( ( 106 компонентов).
При такой размерности даже алгоритмы сложности  O ( N 2) являются неприемлемыми.
Как правило, задача пересечения объектов сводится к проверке пересечения многоугольников или прямолинейных отрезков.
Задача 1 (пересечение отрезков). Даны  N  прямолинейных отрезков на плоскости. Надо определить факт пересечения хотя бы двух из них.
Задача 2 (пересечение простых многоугольников). Даны два простых многоугольника. Требуется определить, пересекаются ли они.
Задача 3 (проверка простоты многоугольника). Дан многоугольник на плоскости. Проверить, прост ли он.
Очевидно, что задачи 2 и 3 сводимы за линейное время к задаче 1.
Упорядочение отрезков на плоскости
Рассмотрим пару непересекающихся отрезков  s 1 и  s 2 на плоскости. Будем говорить, что эти отрезки сравнимы в абсциссе  x , если существует вертикальная прямая, пересекающая их обоих. При этом введем отношение порядка для сравнимых в  x  отрезков (обозначаемое > x  и называемое "выше").  Отрезок  s 1 лежит выше отрезка  s 2 в абсциссе  x  (т.е.   s 1 > x s 2), если ордината точки пересечения  s 1 с вертикальной прямой больше, чем ордината точки пересечения  s 2 с этой прямой. В примере на рисунке имеет место  s 2 > u s 1 и  s 3 > v s 2. 
Если рассмотреть движущуюся слева направо вертикальную прямую, то каждый отрезок из заданного множества отрезков в течении какого-то времени пересекается этой прямой.  В каждый момент времени отрезки, пересекаемые прямой, полностью упорядочены в смысле введенного отношения порядка. По мере перемещения прямой упорядочение может меняться в одном из трех случаев:
Встретился левый конец отрезка  s  (этот отрезок добавляется к множеству пересекаемых в данный момент отрезков);
Встретился правый конец отрезка  s  (этот отрезок удаляется из этого множества);
Обнаружена точка пересечения отрезков  s 1 и  s 2 (тогда эти отрезки меняются местами в смысле их упорядоченности).
Предположим, что множество отрезков устроено таким образом, что одновременное пересечение трех или более отрезков в одной точке невозможно. (Это предположение не очень сильно нарушает общность рассматриваемых алгоритмов, но упрощает их описание.) Тогда легко видеть, что справедливо следующее 
Необходимое условие пересечения пары отрезков: Если отрезки  s 1 и  s 2 пересекаются, то существует абсцисса x такая, что s1 и s2 являются смежными в упорядочении >x .
На этой идее строится эффективный алгоритм решения задачи пересечения множества отрезков.
 Алгоритмическая парадигма плоского заметания
Будем рассматривать динамический процесс, состоящий в перемещении вертикальной прямой слева направо (из -( в +(). Прямая называется "заметающей прямой". С этой прямой связана некоторая структура данных  L , называемая "статусом заметающей прямой", которая описывает упорядоченное множество отрезков, пересекаемых прямой в каждый момент времени. Очевидно, что статус представляет собой динамическую (т.е. изменяющуюся во времени) структуру данных. 
Отметим, что изменения в статусе заметающей прямой происходят в некоторые дискретные моменты времени, когда происходят упомянутые выше следующие события: прямая пересекает левый или правый конец отрезка, либо точку пересечения двух отрезков. В эти моменты меняется множество пересекаемых отрезков, либо их упорядоченность. Значения абсциссы  x , в которых происходят эти события, называются "точками событий". Поскольку с каждой точкой события связано значение  x  множество точек событий упорядоченно естественным образом по возрастанию  x . Множество точек событий будем описывать структурой данных  E , называемой "перечнем событий".
В алгоритмах, использующих идею плоского заметания, при появлении точки события происходит выполнение трех видов действий:
Редактирование перечня событий: занесение только что обнаруженных точек событий, удаление текущей точки события, а также всех других, которые стали ненужными.
Редактирование статуса заметающей прямой для представления изменений его состояния из-за нового положения прямой.
Решение остальных вопросов задачи, зависящих от конкретной постановки.
При плоском заметании общая задача на плоскости сводится к конечной серии аналогичных задач в одномерном пространстве на заметающей прямой. Эти задачи обычно решаются проще. А поскольку различия задач, относящихся к соседним событиям, обычно невелики, то при решении одномерных задач можно использовать одни и те же данные, что позволяет конструировать эффективные алгоритмы. 
Структуры данных
Рассмотрим структуру  L , описывающую статус заметающей прямой. Для нее необходимо обеспечить выполнение следующих операций над отрезком  s :
ВСТАВИТЬ (s,L) - установка отрезка в статус;
УДАЛИТЬ (s,L) - удаление отрезка из статуса;
НАД (s,L) - найти отрезок в статусе, смежный с s и лежащий выше его;
ПОД (s,L) - найти отрезок в статусе, смежный с s и лежащий ниже его.
Структура данных, позволяющая выполнять эти операции, известна как "словарь". Она может быть реализована в виде 2-3-дерева или АВЛ-дерева и в этом случае каждая их указанных операций будет выполняться за время  O ( m ), где  m  - максимальное число отрезков, находящихся одновременно в статусе.
Структура данных  E  для работы с перечнем событий должна обеспечить выполнение следующих операций над токами событий  x :
 MIN  ( E ) - определить минимальный элемент в  E  и удалить его;
ВСТАВИТЬ ( x , E ) - вставить абсциссу  x  в упорядоченное множество точек событий;
ЧЛЕН ( x , E ) - узнать, является ли абсцисса  x  членом множества  E .
Это множество операций обеспечивается структурой данных "очередь с приоритетом". Она также может быть реализована в виде 2-3-дерева или АВЛ-дерева и тогда эти операции будут выполняться за время  O ( m ), где  m  - максимальное число событий в перечне событий.
Алгоритм
Алгоритм включает следующие элементы:
Упорядочение концов отрезков (сортировка 2 N  точек) за время  O ( NlogN ).
Корректировка структуры  L   в каждой точке события за время  O ( log N ).
Все пары отрезков, которые становятся смежными при корректировке  L , проверяются на пересечение за время  O (1).
Если обнаруживается пересечение, то оно регистрируется и его абсцисса вставляется в перечень событий за время  O ( log M ), где  M  - общее число событий, т.е. 2 N + K ,  K  - число пересечений отрезков.
Обще время, необходимое в этом случае для решения задачи составляет
 O(N log N) + (2N+K)* O(log N) + (2N+K)* O(log (2N+K)) 
 или  O((N+K) log N).
 Эта оценка относится к тому случаю, когда необходимо найти все K пересечений в множестве отрезков. В том случае, когда нужно лишь установить факт пересечения, время решения составит O(N log N).
Ниже приводится текст алгоритма на псевдокоде для нахождения всех пересечений множества отрезков.

 PROCEDURE  Пересечение Отрезков;
 BEGIN  сортируем 2 N  концов отрезков лексикографически по  x  и  y  и помещаем их в очередь с приоритетом  E ;
 A := ( ; // A  - множество пересечений отрезков
 WHILE E(( DO 
 BEGIN p := MIN ( E ); // Очередное "текущее" событие
 	 IF  ( p  - левый конец отрезка)  THEN 
 	BEGIN  s :=отрезок, концом которого является  p ;
 		ВСТАВИТЬ( s , L );
 		 s1:= НАД (s,L);
		s2:= ПОД (s,L);
 	IF (s1 пересекает s) THEN поместить (s1,s)  в  A;
 	IF (s2 пересекает s) THEN поместить (s,s2)  в  A;
 END    ELSE IF (p -  правый конец отрезка ) THEN
 BEGIN s :=отрезок, концом которого является  p ;
 	 s1:= НАД (s,L);
	s2:= ПОД (s,L);
  	IF  ( s 1 пересекает  s 2 справа от  p )  THEN            поместить ( s 1, s 2) в  A ;
 	УДАЛИТЬ( s , L ); 	
  END 
  ELSE  //  p  - точка пересечения отрезков
  BEGIN 
 	( s 1, s 2):=отрезки, пересекающиеся в  p ;          // здесь  s 1=НАД( s , L )  s 2=ПОД( s , L ) слева от  p 
 	 s3:= НАД (s1,L);
	s4:= ПОД (s2,L);
 	IF (s3 пересекает s2) THEN поместить (s3,s2)  в  A;
 	IF (s1 пересекает s4) THEN поместить (s1,s4)  в  A;
 	 поменять местами  s 1 и  s 2 в  L ;
  END ;
   // теперь найденные пересечения нужно обработать
  WHILE (A(() DO
 BEGIN  взять очередную пару  (s1,s2) из  A;
 	x :=абсцисса точки пересечения ( s 1, s 2);
 	 IF  ЧЛЕН (x,E)=FALSE THEN
 	BEGIN  вывести( s 1, s 2); //например, на печать
 		ВСТАВИТЬ( x , E );
 	 END;
 END;
END;
END;
 


 x
 
 y
 
 s1
 
 s2
 
 s3
 
 u
 
 v
 


