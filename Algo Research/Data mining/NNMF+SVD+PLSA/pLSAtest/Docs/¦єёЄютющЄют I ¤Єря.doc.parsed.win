 Отчет Пустовойтова Н.Ю. по I этапу по теме №9
"Разработка сервиса поиска похожих пользователей в социальных сетях".
Во время выполнения первого года НИОКР был разработан прототип рекомендательного сервиса. Данный прототип был ориентирован на пользователей LiveJournal. Для сбора данных использовался специально написанный робот. За время работы проекта была накоплена выборка, содержащая несколько миллионов пользователей.
Для расчетов использовалось несколько известных адаптированных для рассматриваемой задачи алгоритмов кластеризации и вероятностных методов коллаборативной фильтрации. Также было предложено несколько вариантов алгоритмов на основе EM-алгоритма (Expectation-Maximization). Все эти алгоритмы тестировались на небольших выборках, содержащих до 70 тысяч пользователей. Однако при работе с выборкой на несколько миллионов пользователей стала понятна их не очень высокая производительность. Оптимизация алгоритмов и являлась основной целью работ этого этапа.
Целью оптимизации было не только ускорение циклов алгоритмов, но и их распараллеливание. На данном этапе распараллеливание выполнялось с помощью стандарта OpenMP, поддерживаемого компиляторами C++. Однако основной проблемой является то, что такой массив данных не помещается целиком в оперативную память. При выполнении этого этапа данная проблема была решена с помощью сбрасывания ненужных в данный момент данных на жесткий диск и чтения их оттуда через механизм Memory-mapped файлов.
Еще одна проблема, которая возникает на данных такого объема - это проблема вычисления функционала качества. Так как в рассматриваемой нами задаче есть информация только об объектах, понравившихся пользователю и отсутствует информация о его отрицательных ощущениях, нельзя использовать популярный для коллаборативной фильтрации функционал, основанный на разнице между истинным значением матрицы и предсказанным алгоритмом. Поэтому для вычисления используется функционал качества на основе оценки попадания в топ, как в обычных поисковых задачах (например, DCG, Mean Average Error, Precision@N, Recall@N, F1@N). Такой функционал требует вычисления оценок близости между каждой парой элементов из разных множеств. Хотя это и не требует много памяти, однако вычислительно накладно. Сначала данная часть программы была распараллелена с помощью OpenMP. В настоящее время ведутся работы по переносу этой части вычислений на платформу NVIDIA CUDA. Заметим, что вычисление близостей между всевозможными парами требуется и для финального расчета, чтобы передать результаты на непосредственно рекомендательный сервис. Однако задача расчета функционалов требуется гораздо чаще. Несмотря на небольшое число алгоритмов, каждый из них имеет набор параметров, и необходимо сравнивать между собой разные версии алгоритмов (путем вычисления формальных функционалов) для определения того, удалось ли повысить качество работы. Общее число сравниваемых алгоритмов в одном прогоне составляет порядка сотни.
В следующем этапе планируется довести перенос расчета функционалов на  CUDA и доработать сайт рекомендательного сервиса. 
