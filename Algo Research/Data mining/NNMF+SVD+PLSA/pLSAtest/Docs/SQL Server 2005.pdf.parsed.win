
William R. Stanek Administrator's Pocket Consultant Microsoftr SQL Serverтм 2005
Москва 2006 Уильям Р. Станек Справочник администратора Microsoftr SQL Serverтм 2005
УДК 004.738.5 ББК 32.973.202 С 76 ISBN 0-7356-2107-1 (англ.) ISBN 978-5-7502-0281-2 Станек Уильям Р. С76 Microsoft SQL Server 2005. Справочник администратора /Пер. с англ. - М.: Издатель ство "Рус ская Ре дак ция", 2008. - 544 с.: ил. ISBN 978-5-7502-0281-2 Данная книга - краткий и исчерпывающий справочник, посвященный Microsoft SQL Server 2005. Здесь рассматриваются все основные вопросы, связанные с выполнением стан-дартных задач администрирования серверов баз данных, в том числе настройка, оптимизация работы, обеспечение безопасности и многие другие насущные вопросы. Книга адресована системным администраторам Microsoft SQL Server 2005, администра-торам Windows, желающим изучить Microsoft SQL Server 2005, администраторам, переходя-щим на SQL Server 2005 с предыдущих версий Microsoft SQL Server и других платформ, а также менеджерам, отвечающим за управление базами данных или занимающимся другими вопросами работы Microsoft SQL Server 2005 в организации. Издание богато иллюстрировано, состоит из 15 глав. УДК 004.738.5 ББК 32.973.202 Подготовлено к изданию по лицензионному соглашению с Microsoft Corporation, Редмонд, Вашингтон, США. Active Directory, ActiveSync, Hotmail, Links, Microsoft, Microsoft Press, MSN, Natural, NetMeeting, Outlook, Powerpoint, Win32 и Windows являются товарными знаками или охраняемыми товарными знаками Microsoft Corporation. Все другие товарные знаки являются собственностью соответствующих фирм. Если не оговорено иное, все названия компаний, организаций и продуктов, а также имена лиц, исполь-зуемые в примерах, вымышлены и не имеют никакого отношения к реальным компаниям, организациям, продуктам и лицам. c Оригинальное издание на англий ском языке, William R. Stanek, 2005 c Перевод на русский язык, Microsoft Corporation, 2006 c Оформление и подготовка к из да нию, Издательство "Рус ская Ре дак ция", 2006
Оглавление Благодарности ........................................................................................................................................XVI Введение ..................................................................................................................................................XVII Кому адресована книга ...........................................................................................................................XVII Структура книги .................................................................................................................................... XVIII Условные обозначения .............................................................................................................................XIX Поддержка ...................................................................................................................................................XIX Об авторе .................................................................................................................................................... XX Часть I Основы администрирования Microsoft SQL Server 2005........................................1 Глава 1 Обзор администрирования Microsoft SQL Server 2005 ......................................2 SQL Server 2005 и требования к аппаратному обеспечению ............................................................3 Редакции Microsoft SQL Server 2005 ........................................................................................................5 SQL Server и операционная система Windows ......................................................................................8 Службы для SQL Server.........................................................................................................................9 Аутентификация в SQL Server .............................................................................................................9 Учетные записи для запуска служб SQL Server ...........................................................................10 Использование графических утилит администрирования .............................................................11 Использование утилит командной строки............................................................................................14 Утилита SQLCMD .................................................................................................................................14 Утилита BCP ............................................................................................................................................18 Другие утилиты командной строки ..................................................................................................18 Глава 2 Установка Microsoft SQL Server 2005 .........................................................................20 Интеграция данных в SQL Server ............................................................................................................20 Использование SQL Server Integration Services ..........................................................................20 Использование SQL Server 2005 для создания реляционных хранилищ данных ...........21 Использование SQL Server 2005 для поддержки многомерных БД и поиска знаний в данных ....................................................................................................................21 Использование SQL Server 2005 для поддержки управляемых отчетов .............................22 Планирование установки SQL Server .....................................................................................................22 Построение серверной системы оптимальной производительности ....................................22 Выбор конфигурации дисковой подсистемы ................................................................................24 Обеспечение доступности и масштабируемости системы ........................................................26 Обеспечение надежности соединения и доступа к данным .....................................................27 Запуск и изменение программы установки SQL Server ...................................................................29 Создание новых экземпляров SQL Server ......................................................................................29 Добавление компонентов и экземпляров .......................................................................................36 Обслуживание установленных компонентов................................................................................37 Удаление SQL Server ..............................................................................................................................39
VI Оглавление Глава 3 Настройка поверхности атаки, доступа к серверу и сетевых протоколов ........................................................................................................40 Предварительная настройка ......................................................................................................................40 Использование SQL Server 2005 Surface Area Configuration..........................................................41 Подключение к удаленной системе SQL Server ...........................................................................42 Настройка параметров служб .............................................................................................................42 Настройка параметров соединений ..................................................................................................45 Управление доступом к функциональным возможностям компонентов ............................47 Настройка служб SQL Server ....................................................................................................................52 Управление состоянием и типом запуска служб..........................................................................52 Настройка учетных записей для запуска служб ..........................................................................53 Настройка каталога дампа, отчета об ошибках и отчета об отзывах и предложениях пользователей .........................................................................................................55 Настройка сетевых протоколов для сервера и клиента ....................................................................56 Настройка протокола сервера Shared Memory .............................................................................56 Настройка протокола сервера Named Pipes ...................................................................................57 Настройка протокола сервера TCP/IP ...........................................................................................57 Настройка порядка использования протоколов клиента .........................................................58 Настройка протокола клиента Shared Memory ............................................................................59 Настройка протокола клиента TCP/IP...........................................................................................59 Настройка протокола клиента Named Pipes ..................................................................................60 Глава 4 Конфигурирование и настройка Microsoft SQL Server ....................................62 Доступ к данным конфигурации SQL Server .......................................................................................63 Работа с системным каталогом и представлениями каталога .................................................64 Работа с системными хранимыми процедурами ..........................................................................67 Способы управления параметрами конфигурации ...........................................................................72 Установка параметров конфигурации .............................................................................................72 Работа с параметрами пакета инструкций/соединения ............................................................73 Работа с параметрами сервера ............................................................................................................75 Работа с параметрами БД .....................................................................................................................78 Управление уровнем совместимости БД ........................................................................................79 Настройка SQL Server с помощью хранимых процедур ..................................................................80 Использование SQL Server Management Studio для выполнения запросов ......................80 Выполнение запросов для изменения параметров конфигурации........................................81 Просмотр и изменение параметров сервера с помощью хранимой процедуры sp_configure .............................................................................83 Изменение параметров БД с помощью хранимой процедуры sp_dboption .......................86 Часть II Администрирование Microsoft SQL Server 2005 ..........................................................89 Глава 5 Управление корпоративными серверами ...............................................................90 Управление запуском SQL Server ............................................................................................................90 Разрешение и запрещение автоматического запуска SQL Server ..........................................90 Установка параметров ядра БД ..........................................................................................................92 Управление службами из командной строки ................................................................................95 Управление исполняемым файлом SQL Server из командной строки ..............................................................................................................................95
Оглавление VII Использование SQL Server Management Studio .................................................................................96 Начало работы с SQL Server Management Studio ........................................................................96 Подключение к определенному экземпляру сервера .................................................................98 Подключение к определенной БД .....................................................................................................98 Управление группами SQL Server............................................................................................................99 Введение в группы SQL Server ...........................................................................................................99 Создание группы серверов ................................................................................................................ 100 Удаление группы серверов ................................................................................................................ 101 Редактирование свойств группы серверов и ее перемещение .............................................. 101 Добавление серверов в группу ........................................................................................................ 102 Управление серверами .............................................................................................................................. 102 Регистрация подключенного сервера ........................................................................................... 103 Регистрация нового сервера в панели Registered Servers ...................................................... 104 Регистрация ранее зарегистрированных серверов SQL Server 2000 ................................. 105 Обновление регистрационных данных для локальных серверов ....................................... 105 Копирование групп серверов и сведений о регистрации с компьютера на компьютер ............................................................................................................. 105 Редактирование свойств регистрации .......................................................................................... 108 Подключение к серверу ..................................................................................................................... 108 Отключение от сервера ...................................................................................................................... 108 Перемещение сервера в другую группу ........................................................................................ 108 Удаление регистрации сервера ........................................................................................................ 108 Запуск, остановка и настройка SQL Server Agent ........................................................................... 109 Запуск, остановка и настройка координатора распределенных транзакций ......................... 109 Запуск, остановка и настройка службы полнотекстового поиска ............................................. 110 Работа с полнотекстовым поиском ....................................................................................................... 111 Управление полнотекстовыми каталогами ........................................................................................ 113 Просмотр свойств каталога .............................................................................................................. 114 Создание каталогов ............................................................................................................................. 116 Включение полнотекстового индексирования таблиц и представлений ......................... 117 Редактирование параметров полнотекстовых индексов таблиц и представлений ....... 119 Отключение полнотекстового индексирования и удаление индексов таблиц и представлений .................................................................................................................................. 119 Заполнение полнотекстовых каталогов ....................................................................................... 120 Перестройка существующих каталогов ....................................................................................... 123 Сжатие каталогов ................................................................................................................................ 124 Удаление каталогов ............................................................................................................................. 124 Управление активностью сервера ......................................................................................................... 125 Просмотр информации о процессах .............................................................................................. 125 Отслеживание блокировок по идентификатору процесса и имени объекта ................... 126 Выявление и устранение тупиковых блокировок и блокирующих соединений ........... 129 Отслеживание исполнения команд в SQL Server ..................................................................... 129 Прекращение процессов сервера .................................................................................................... 130 Глава 6 Настройка SQL Server с помощью утилиты SQL Server Management Studio ................................................................................... 131 Управление конфигурацией с помощью SQL Server Management Studio .............................. 131 Просмотр общей информации об операционной системе и SQL Server ................................. 133
VIII Оглавление Настройка аутентификации и аудита доступа ................................................................................. 133 Выбор режима аутентификации ..................................................................................................... 133 Установка параметров аудита доступа .......................................................................................... 134 Настройка использования памяти ........................................................................................................ 134 Использование динамического управления памятью ............................................................ 136 Выделение фиксированного объема оперативной памяти .................................................... 137 Включение поддержки расширенной памяти посредством технологии AWE ............... 138 Оптимизация использования памяти при индексировании ................................................ 138 Выделение памяти для запросов .................................................................................................... 139 Настройка использования процессоров и параллельной обработки ........................................ 140 Оптимизация использования процессоров ................................................................................ 140 Установка параметров параллельной обработки ...................................................................... 142 Настройка потоков, приоритетов и нитей .......................................................................................... 143 Настройка пользовательских и удаленных серверных соединений ......................................... 145 Установка максимального количества пользовательских соединений ............................. 146 Установка параметров соединения по умолчанию ................................................................... 146 Настройка удаленных серверных соединений .......................................................................... 148 Управление параметрами конфигурации сервера ........................................................................... 149 Установка языка по умолчанию для SQL Server ....................................................................... 150 Разрешение и запрещение обновления системных таблиц ................................................... 150 Разрешение и запрещение вложенных триггеров..................................................................... 150 Управление выполнением запроса ................................................................................................. 151 Настройка поддержки 2000 года..................................................................................................... 151 Управление параметрами конфигурации БД .................................................................................... 152 Установка фактора заполнения индексов .................................................................................... 152 Настройка времени ожидания при резервном копировании и восстановлении ........... 154 Настройка периода сохранности резервных копий ................................................................. 154 Сброс на диск содержимого кэша при помощи контрольных точек .................................. 155 Добавление и удаление информации в службу каталогов Active Directory .......................... 155 Устранение проблем конфигурации ..................................................................................................... 155 Восстановление после неправильной установки параметров конфигурации ................ 155 Изменение сопоставления и перестройка БД master .............................................................. 157 Глава 7 Основные задачи администрирования БД .......................................................... 159 Файлы и журналы транзакций БД ....................................................................................................... 159 Основы администрирования БД ........................................................................................................... 160 Просмотр информации о БД с помощью утилиты SQL Server Management Studio .... 160 Просмотр информации о БД средствами Тransact-SQL ........................................................ 162 Системные БД и установка образцов БД .................................................................................... 163 Просмотр объектов БД ....................................................................................................................... 164 Создание БД ................................................................................................................................................ 165 Создание БД в SQL Server Management Studio ........................................................................ 165 Создание БД с использованием Transact-SQL .......................................................................... 169 Изменение БД и их параметров ............................................................................................................. 170 Установка параметров БД в SQL Server Management Studio ............................................... 170 Изменение БД с использованием инструкции ALTER DATABASE ................................. 171 Настройка автоматических параметров ....................................................................................... 176
Оглавление IX Контроль совместимости со стандартом ANSI на уровне БД .............................................. 177 Настройка параметров курсоров .................................................................................................... 179 Контроль доступа пользователей и состояния БД ................................................................... 180 Установка оперативного, автономного и аварийного режимов ........................................... 181 Управление параметрами цепочек принадлежности между БД и доступом к внешним ресурсам ..................................................................................................... 182 Настройка параметров восстановления, ведения журнала транзакций и проверки ошибок дискового ввода/вывода ............................................................................ 183 Просмотр, изменение и замещение параметров БД................................................................. 184 Управление размерами БД и журналов транзакций ...................................................................... 185 Настройка SQL Server для автоматического управления размерами файлов ............... 185 Расширение БД и журналов транзакций вручную .................................................................. 186 Уплотнение и сжатие БД вручную ................................................................................................. 186 Управление БД ............................................................................................................................................ 190 Переименование БД ............................................................................................................................ 190 Удаление БД .......................................................................................................................................... 191 Присоединение и отсоединение БД .............................................................................................. 192 Советы и приемы работы ......................................................................................................................... 195 Копирование и перемещение БД .................................................................................................... 195 Перемещение БД ................................................................................................................................. 199 Перемещение и изменение размера БД tempdb ........................................................................ 200 Создание дополнительных файлов данных и журналов транзакций ................................ 201 Предупреждение ошибок журнала транзакций ........................................................................ 202 Предупреждение ошибки заполнения группы файлов .......................................................... 202 Создание нового шаблона БД .......................................................................................................... 203 Глава 8 Управление системой безопасности SQL Server 2005 .................................. 204 Обзор системы безопасности SQL Server 2005 ................................................................................ 204 Работа с участниками безопасности и защищаемыми объектами ...................................... 204 Понятие о разрешениях на защищаемые объекты ................................................................... 206 Просмотр разрешений на защищаемые объекты ...................................................................... 208 Просмотр встроенных разрешений ................................................................................................ 208 Просмотр действующих разрешений ............................................................................................ 209 Режимы аутентификации SQL Server 2005 ....................................................................................... 211 Аутентификация Windows ................................................................................................................ 211 Смешанный режим аутентификации и учетные записи SQL Server ................................. 212 Учетные записи и пользователи специального назначения......................................................... 212 Работа с группой Administrators ..................................................................................................... 213 Работа с учетной записью пользователя Administrator .......................................................... 213 Работа с учетной записью sa ............................................................................................................. 213 Работа с учетными записями NETWORK SERVICE и SYSTEM ...................................... 213 Работа с пользователем guest ........................................................................................................... 214 Работа с пользователем dbo .............................................................................................................. 214 Работа с пользователями sys и INFORMATION_SCHEMA ............................................... 215 Разрешения .................................................................................................................................................. 215 Разрешения на объекты ..................................................................................................................... 215 Разрешения на инструкции .............................................................................................................. 219 Неявные разрешения .......................................................................................................................... 219
X Оглавление Роли ................................................................................................................................................................ 220 Роли сервера ......................................................................................................................................... 220 Роли уровня БД ................................................................................................................................... 221 Управление учетными записями сервера ........................................................................................... 223 Просмотр и редактирование существующих учетных записей ........................................... 223 Создание учетных записей................................................................................................................ 225 Изменение учетных записей с помощью Transact-SQL ......................................................... 227 Предоставление или запрещение доступа к серверу ............................................................... 228 Включение, отключение и разблокирование учетных записей ........................................... 229 Удаление учетных записей ................................................................................................................ 230 Изменение паролей ............................................................................................................................. 230 Назначение ролей сервера ....................................................................................................................... 231 Назначение ролей сервера отдельной учетной записи ........................................................... 231 Назначение роли сервера нескольким учетным записям ...................................................... 232 Исключение учетной записи из ролей сервера и/или БД ..................................................... 233 Контроль доступа к БД и управление администрированием ...................................................... 233 Предоставление доступа и назначение ролей отдельной учетной записи ....................... 234 Назначение ролей БД нескольким учетным записям одновременно ................................ 234 Создание стандартных ролей БД ................................................................................................... 235 Создание ролей приложений ........................................................................................................... 237 Исключение пользователей из ролей БД .................................................................................... 238 Удаление пользовательских ролей ................................................................................................. 238 Инструкции Transact-SQL для управления доступом и ролями ........................................ 238 Управление разрешениями БД .............................................................................................................. 239 Назначение разрешений БД на выполнение инструкций ..................................................... 240 Назначение разрешений для отдельного пользователя на несколько объектов ........... 245 Назначение разрешений на отдельный объект для нескольких пользователей ............ 247 Часть III Управление данными в Microsoft SQL Server 2005 ................................................ 249 Глава 9 Работа со схемами, таблицами, индексами и представлениями ........... 250 Работа со схемами ...................................................................................................................................... 250 Создание схем....................................................................................................................................... 251 Изменение схем ................................................................................................................................... 253 Перемещение объектов в другую схему ....................................................................................... 254 Удаление схем ....................................................................................................................................... 255 Подготовка к работе с таблицами ......................................................................................................... 255 Основные сведения о таблицах .............................................................................................................. 256 Понятие о страницах данных ........................................................................................................... 256 Понятие об экстентах ......................................................................................................................... 258 Понятие о секциях таблицы ............................................................................................................. 258 Работа с таблицами ................................................................................................................................... 258 Создание таблиц .................................................................................................................................. 259 Изменение структуры существующих таблиц .......................................................................... 264 Просмотр информации о размере таблицы и количестве строк в ней .............................. 265 Отображение свойств и разрешений таблицы ........................................................................... 266 Отображение текущих значений данных в таблицах .............................................................. 266
Оглавление XI Копирование таблиц ........................................................................................................................... 267 Переименование и удаление таблиц ............................................................................................. 267 Добавление и удаление столбцов таблицы средствами Transact-SQL .............................. 268 Создание сценариев для таблиц ..................................................................................................... 269 Управление значениями данных в таблицах ..................................................................................... 269 Использование встроенных типов данных ................................................................................. 269 Использование типов данных постоянной, переменной и максимальной длины ........ 272 Использование пользовательских типов данных ..................................................................... 272 Разрешение и запрет хранения значений NULL ....................................................................... 275 Использование значений по умолчанию ..................................................................................... 276 Использование свойства столбца Identity и глобальных уникальных идентификаторов ............................................................................ 276 Использование представлений .............................................................................................................. 278 Работа с представлениями ................................................................................................................ 279 Создание представлений ................................................................................................................... 280 Изменение представлений ................................................................................................................ 283 Использование обновляемых представлений ............................................................................ 284 Управление представлениями ......................................................................................................... 284 Создание индексов и управление ими ................................................................................................. 285 Понятие об индексах ........................................................................................................................... 285 Использование кластерных индексов ........................................................................................... 287 Использование некластерных индексов ...................................................................................... 287 Использование индексов XML ....................................................................................................... 287 Выбор столбцов для индексирования ........................................................................................... 288 Индексирование вычисляемых столбцов и представлений .................................................. 289 Просмотр свойств индекса ................................................................................................................ 290 Создание индексов .............................................................................................................................. 291 Управление индексами ....................................................................................................................... 294 Использование утилиты Database Engine Tuning Advisor ..................................................... 296 Ограничения столбцов и правила ......................................................................................................... 301 Использование ограничений ........................................................................................................... 302 Использование правил ....................................................................................................................... 306 Глава 10 Импорт, экспорт и преобразование данных .................................................... 308 Работа со службами интеграции SQL Server .................................................................................... 308 Начало работы со службами интеграции SQL Server ............................................................. 308 Средства для работы со службами интеграции SQL Server.................................................. 309 Службы интеграции SQL Server и поставщики данных ........................................................ 310 Пакеты служб интеграции ................................................................................................................ 311 Создание пакетов при помощи мастера импорта и экспорта ...................................................... 312 Этап 1. Указание источника и места назначения данных ...................................................... 312 Этап 2. Настройка извлечения данных: копирование или запрос ...................................... 320 Этап 3. Задание форматирования и преобразования данных .............................................. 324 Этап 4. Сохранение и выполнение пакета ................................................................................... 326 Понятие об утилите BCP ......................................................................................................................... 329 Основы использования утилиты BCP .......................................................................................... 329 Синтаксис командной строки утилиты BCP ............................................................................. 330 Разрешения, необходимые для работы, и режимы утилиты BCP ...................................... 332
XII Оглавление Импорт данных при помощи утилиты BCP ............................................................................... 333 Экспорт данных при помощи утилиты BCP .............................................................................. 335 Сценарии утилиты BCP ........................................................................................................................... 335 Использование инструкции BULK INSERT .................................................................................... 336 Глава 11 Связанные серверы и распределенные транзакции .................................. 338 Работа со связанными серверами и распределенными данны ми .............................................. 338 Использование распределенных запросов .................................................................................. 338 Использование распределенных транзакций ............................................................................. 340 Запуск службы координатора распределенных транзакций ................................................ 342 Управление связанными серверами ..................................................................................................... 342 Добавление связанных серверов..................................................................................................... 343 Настройка безопасности связанных серверов ........................................................................... 346 Установка параметров сервера для удаленных и связанных серверов .............................. 348 Удаление связанных серверов ......................................................................................................... 349 Глава 12 Реализация репликации моментальных снимков, репликации сведением и репликации транзакций ...................................... 351 Обзор репликации ..................................................................................................................................... 351 Компоненты репликации .................................................................................................................. 352 Агенты и задания репликации ......................................................................................................... 353 Типы репликации ................................................................................................................................ 354 Планирование репликации ...................................................................................................................... 356 Выбор топологии репликации ......................................................................................................... 357 Подготовительные задачи репликации ........................................................................................ 357 Администрирование дистрибьютора ................................................................................................... 360 Настройка нового дистрибьютора ................................................................................................. 361 Изменение конфигурации дистрибьютора ................................................................................. 365 Создание БД распространения ....................................................................................................... 367 Разрешение использования и изменения конфигурации издателей ................................. 367 Разрешение использования БД публикаций ............................................................................. 369 Удаление БД распространения ........................................................................................................ 369 Отключение публикации и распространения ............................................................................ 369 Создание публикаций и управление ими ........................................................................................... 370 Создание публикаций ......................................................................................................................... 370 Просмотр публикаций и обновление их параметров .............................................................. 378 Установка свойств публикации ....................................................................................................... 379 Установка параметров безопасности агентов и учетных записей процесса .................... 380 Создание сценария для публикации ............................................................................................. 381 Удаление публикации ......................................................................................................................... 381 Подписка на публикацию ........................................................................................................................ 382 Основы подписки ................................................................................................................................ 382 Создание подписок .............................................................................................................................. 383 Просмотр свойств подписки ............................................................................................................ 388 Обновление, обслуживание и удаление подписок ................................................................... 388 Проверка подписок .............................................................................................................................. 389 Повторная инициализация подписок ........................................................................................... 389
Оглавление XIII Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 .............................. 391 Глава 13 Профилирование и мониторинг SQL Server 2005.......................................... 392 Мониторинг производительности и активности сервера ............................................................. 392 Причины проведения мониторинга SQL Server ....................................................................... 392 Подготовка к мониторингу ............................................................................................................... 393 Средства и ресурсы мониторинга ................................................................................................... 393 Работа с утилитой Replication Monitor ............................................................................................... 395 Запуск и использование утилиты Replication Monitor........................................................... 395 Добавление издателей и групп издателей ................................................................................... 397 Работа с журналами событий ................................................................................................................. 398 Просмотр журнала приложений Windows .................................................................................. 399 Просмотр журналов событий SQL Server ................................................................................... 401 Просмотр журналов событий SQL Server Agent ....................................................................... 403 Мониторинг производительности Microsoft SQL Server ............................................................. 404 Выбор счетчиков для мониторинга ............................................................................................... 404 Работа с журналами производительности .................................................................................. 406 Воспроизведение журналов производительности.................................................................... 412 Настройка оповещений для счетчиков производительности............................................... 413 Решение проблем производительности с помощью утилиты SQL Server Profiler .............. 415 Использование утилиты SQL Server Profiler ............................................................................. 416 Создание новых трассировок .................................................................................................................. 417 Работа с трассировками ..................................................................................................................... 419 Сохранение трассировки ................................................................................................................... 420 Воспроизведение трассировок ........................................................................................................ 420 Глава 14 Резервное копирование и восстановление SQL Server 2005 ................. 425 Составление плана резервного копирования и восстановления ................................................ 425 Начальное планирование резервного копирования и восстановления................................................................................................................................. 425 Планирование зеркального отображения и резервного копирования зеркальной БД ................................................................................. 429 Планирование резервного копирования реплицированных БД ......................................... 429 Планирование резервного копирования очень больших БД ................................................ 431 Выбор устройств и носителей для резервного копирования....................................................... 431 Выбор стратегии резервного копирования ........................................................................................ 433 Создание устройства резервного копирования ................................................................................ 435 Выполнение резервного копирования ................................................................................................. 437 Создание резервных копий в SQL Server Management Studio ............................................. 437 Использование чередующегося резервного копирования с несколькими устройствами ........................................................................................................... 442 Выполнение резервного копирования средствами Transact-SQL ...................................... 443 Выполнение резервного копирования журналов транзакций ............................................. 446 Резервное копирование полнотекстовых каталогов ................................................................ 447 Восстановление БД ................................................................................................................................... 448 Повреждение БД и решение проблем ........................................................................................... 449 Восстановление БД из обычной резервной копии ................................................................... 450
XIV Оглавление Восстановление файлов и групп файлов ..................................................................................... 455 Восстановление БД в другое место ................................................................................................ 457 Восстановление потерянных данных ............................................................................................ 457 Создание резервных серверов ......................................................................................................... 458 Использование для восстановления инструкций Transact-SQL ......................................... 460 Восстановление полнотекстовых каталогов ............................................................................... 464 Восстановление БД master ...................................................................................................................... 465 Глава 15 Автоматизация администрирования и обслуживание БД ....................... 467 Обзор автоматизации администрирования и обслуживания БД .............................................. 467 Использование Database Mail................................................................................................................. 468 Начальная настройка Database Mail ............................................................................................. 468 Управление почтовыми профилями и учетными записями Database Mail ..................... 473 Просмотр или изменение системных параметров Database Mail ....................................... 475 Использование SQL Server Agent ......................................................................................................... 475 Доступ к оповещениям, операторам и заданиям....................................................................... 475 Настройка службы SQL Server Agent ........................................................................................... 476 Настройка почтового профиля SQL Server Agent .................................................................... 477 Использование SQL Server Agent для автоматического перезапуска служб ................. 478 Управление оповещениями ..................................................................................................................... 478 Использование оповещений по умолчанию ............................................................................... 479 Создание оповещений для сообщений об ошибках ................................................................. 479 Настройка ответов на оповещения ................................................................................................ 480 Удаление, включение и отключение оповещений .................................................................... 482 Управление операторами ......................................................................................................................... 482 Регистрация операторов .................................................................................................................... 482 Удаление или отключение уведомлений для операторов ...................................................... 483 Настройка оператора последней надежды .................................................................................. 484 Создание заданий и управление ими ................................................................................................... 485 Создание заданий ................................................................................................................................ 485 Создание или изменение заданий .................................................................................................. 485 Определение шагов задания ............................................................................................................. 487 Назначение расписаний для заданий ............................................................................................ 490 Управление оповещениями заданий ............................................................................................. 493 Управление уведомлениями ............................................................................................................. 493 Управление существующими заданиями .................................................................................... 494 Управление категориями заданий .................................................................................................. 495 Автоматизация основных задач администрирования в многосерверных средах ................. 496 Копирование пользователей, таблиц, представлений и других объектов из одной БД в другую .................................................................................... 496 Копирование оповещений, операторов и заданий с одного сервера на другой .............. 498 Администрирование группы серверов ................................................................................................ 499 Пересылка событий ............................................................................................................................. 499 Многосерверные задания .................................................................................................................. 501 Обслуживание БД ..................................................................................................................................... 503 Перечень основных задач обслуживания БД ............................................................................. 503 Использование планов обслуживания ......................................................................................... 504 Проверка и поддержание целостности БД .................................................................................. 511
Оглавление XV Управление передачей журналов .......................................................................................................... 514 Передача журналов: принцип работы ........................................................................................... 514 Подготовка к передаче журналов ................................................................................................... 515 Обновление передачи журналов SQL Server 2000 для использования в SQL Server 2005 .......................................................................................... 516 Включение передачи журналов для основной БД ................................................................... 517 Добавление резервных БД при передаче журналов ................................................................ 518 Изменение интервала резервного копирования журнала транзакций ............................. 520 Изменение интервалов копирования и восстановления ........................................................ 521 Переход на резервную БД при сбое ............................................................................................... 521
Благодарности Это моя 61-я книга. Мне нравится это занятие. Я люблю писать, а особенно меня привлекают трудные проекты. Из написанных ранее книг такими были - SQL Server 7.0 Administrator's Pocket Consultant, изданная в 1999 году, и SQL Server 2000 Administrator's Pocket Consultant, вышедшая годом позже. Работа по созданию "SQL Server 2005. Справочник администратора" потребовала не меньших усилий. При подготовке руководства администратора SQL Server на каждый день главная трудность заключалась в необходимости охватить возможно более широкий спектр тем. В первоначальном варианте объем книги превышал 750 страниц, а это, как вы понимаете, не совсем карманный формат. Ведь карманные справочники должны быть портативными и удобочитаемыми, поскольку ими пользуются для решения ежедневно возникающих проблем, когда под рукой нет книжной полки. С этой мыслью я вни-мательно пересмотрел текст, желая убедиться, что внимание сконцентрировано на основных видах администрирования SQL Server 2005. Результатом является книга, которую вы держите в руках, и я надеюсь, вы согласитесь с тем, что это одно из лучших практических руководств по SQL Server 2005, которое к тому же еще и компактно. Как я уже упоминал во вступлении к другим моим книгам, в Microsoft Press рабо-тает первоклассная команда. Дениз Банкаитис оказывала поддержку в течение всего процесса подготовки по созданию книги. Она помогала мне не отклоняться от курса и согласовывала материал поданных глав. Мартин Дельре в этом проекте был редак-тором новых поступлений. Он с самого начала верил, что книга состоится, и своей энергией заряжал всех, в том числе и автора. Работать с ним было действительно здорово! Вообще, без помощи Дениз и Мартина завершение и издание этой книги было бы невозможно. Но нельзя не сказать и о Джулии Хотчкисс, которая занималась редактированием. Для нее это была новая серия, кроме того, мы впервые работали вместе, но, по-моему, мы справились. Большое спасибо! Должен признать, что процесс технического редактирования в Microsoft Press - са-мый тщательный из виденных мной, а ведь я написал много книг для самых разных издательств. Мне замечательно работалось с Робертом Браннером, техническим ре-дактором этой книги. Он подходил к тестированию очень основательно, и это давало уверенность, что все будет работать как надо. Так оно всегда и было! Хочу выразить благодарность Лусинду Роули и всем сотрудникам Microsoft, кто помогал мне в разные моменты моей писательской карьеры, когда я больше всего в этом нуждался. Спасибо вам также за помощь в подготовке многих других моих проектов! Особая благодарность литературному агентству Studio B и моим агентам Дейвиду Рогельбергу и Нилу Солкинду. Работа с вами - одно удовольствие! Надеюсь, я никого не забыл, но если и забыл, то не намеренно. Честное слово.
Введение Книга "Microsoft SQL Server 2005. Справочник администратора" задумана в качестве краткого руководства для администраторов SQL Server 2005. Она охватывает все, что необходимо знать для выполнения основных задач администрирования, как говорится, рассчитана на все случаи жизни. Поскольку книга создавалась с тем, чтобы быть максимально полезной и при этом не выходить за рамки карманного формата, вам не придется просматривать сотни страниц посторонней информации, добираясь до той, которая нужна вам именно сейчас. Все, что необходимо для выполнения работы, находится под рукой. Данный справочник является универсальным ресурсом, к которому можно обра-титься по любому вопросу администрирования SQL Server. Много внимания здесь уделено ежедневным процедурам администрирования, часто выполняемым задачам, примерам использования, а также показательным (читай обязательным) параметрам. Понятно, что при этом сжатость изложения являлась главной целью при создании книги - я стремился сделать ее компактной и простой в обращении, обеспечивая в то же время максимальную информативность. В итоге, вместо толстого тома объемом в 1000 страниц или краткого справочника на 100 страниц, вы получаете полезное ру-ководство, которое, с одной стороны, представляет практически все важные ресурсы, а с другой, позволяет быстро и просто выполнять различные задачи, решать проблемы и осуществлять на практике сложные технологии SQL Server, такие как репликация, распределенные запросы и администрирование множества серверов. Думаю, я имею все основания надеяться, что этот справочник станет вашей на-стольной книгой. Кому адресована книга Книга "SQL Server 2005. Справочник администратора" охватывает такие редакции SQL Server, как Workgroup, Standard, Enterprise и Developer. Она предназначена для: администраторов баз данных SQL Server 2005; опытных пользователей, занимающихся также и администрированием; администраторов, переходящих на SQL Server 2005 с предыдущих версий; администраторов, которые переходят с других платформ БД. Связанный необходимостью вместить в книгу максимум информации, я изна-чально предполагал читателя, владеющего основными навыками работы с сетью и имеющего общее представление о SQL Server . По этой причине вы не найдете целых глав, посвященных изложению архитектуры SQL Server или выполнению простых SQL-запросов. Вместо этого я обсуждаю установку и конфигурацию SQL Server, управление серверами в масштабе предприятия, оптимизацию производительности, обслуживание и много других тем. Я полагаю также, что вы знакомы с инструкциями SQL и хранимыми процедурами и, конечно же, стандартным интерфейсом пользователя Microsoft Windows. Если вы нуждаетесь в помощи по изучению основ SQL, следует обратиться к другим источ-никам (многие из них изданы Microsoft Press).
XVIII Введение Структура книги Поскольку эта книга рассчитана на обращение к ней по ежедневно возникающим во-просам администрирования, она организована по задачам, связанным с выполнением операций, а не по возможностям SQL Server. Книги серии "Справочник администра-тора" задуманы для использования, можно сказать, в полевых условиях. Быстрота и простота получения справочной информации являются ключевыми требованиями, предъявляемыми к практическим руководствам. В связи с этим помимо развернутого содержания в книгу добавлено много других возможностей для быстрого нахождения информации. Это пошаговые описания действий, списки, таблицы со сводной инфор-мацией, а также перекрестные ссылки. Книга состоит из частей и глав. В части I рассмотрены основные задачи администрирования Microsoft SQL Server 2005. Обзор концепций, методов и инструментов администрирования SQL Server дан в главе 1. Глава 2 содержит подробные сведения о планировании и выполнении установки SQL Server, а также предоставляет информацию, позволяющую составить план внедрения SQL Server 2005 на предприятии. В главе 3 рассмотрен процесс настройки поверхности атаки, доступа к серверу и сетевых протоколов. Глава 4 со-держит ключевые сведения, необходимые для понимания того, как конфигурировать и настраивать SQL Server 2005. Часть II посвящена рассмотрению основных приемов и методов администриро-вания Microsoft SQL Server 2005. В главе 5 приведены наиболее часто используе-мые способы управления серверами. Также из материала этой главы вы узнаете, как контролировать процессы, выполняющиеся на сервере, и управлять связанными с сервером компонентами. В главе 6 рассказывается о настройке конфигурации SQL Server с помощью SQL Server Management Studio. Основные административные за-дачи, выполняемые при создании баз данных и управлении ими, освещены в главе 7. Завершает эту часть глава 8, где рассмотрены принципы работы системы безопасности SQL Server и приведена информация по управлению пользователями и их правами. Часть III содержит информацию об управлении данными в Microsoft SQL Server 2005. В главе 9 рассмотрены приемы работы со схемами, таблицами, индексами и представлениями. Кроме того, здесь вы найдете советы по использованию ограниче-ний и правил. Прочитав главу 10, вы узнаете, как можно выполнить экспорт, импорт и преобразование данных. Глава 11 посвящена проблемам интеграции баз данных SQL Server друг с другом и остальными источниками информации. В ней подроб-но освещены распределенные запросы, распределенные транзакции, координатор распределенных транзакций и использование связанных серверов. В главе 12 рас-смотрены практически все вопросы, связанные с организацией репликации данных. Среди них - использование новейших методов репликации, в том числе таких, как репликация сведением и немедленное обновление подписчиков. В части IV обсуждаются средства администрирования, используемые для обслу-живания Microsoft SQL Server 2005. В главе 13 приведены базовые сведения о работе с файлами журналов сервера, а также подробно рассказывается о мониторинге про-изводительности SQL Server. Глава 14 прежде всего научит вас составлять планы резервного копирования и восстановления, а затем даст рекомендации по решению наиболее часто встречающихся проблем при создании и восстановлении резервных ко-пий. В главе 15 детально рассмотрена автоматизация администрирования баз данных. Вы узнаете, как настраивать оповещения, назначать расписания заданиям и управлять операторами БД. Здесь также освещено создание планов обслуживания и разрешение проблем целостности баз данных.
Введение XIX Условные обозначения Чтобы текст был ясным и легко читаемым, в нем используются следующие элементы. Для примеров кода и листингов применен специальный шрифт. Команда или текст, которые нужно ввести с клавиатуры, выделены полужирным начертанием. Сетевые адреса и новые термины выделены курсивом. Другие соглашения включают: Примечание Предоставляет информацию, требующую освещения в несколько отличном ракурсе. Совет Рекомендует, как лучше работать со сложными концепциями конфигурации или администрирования. Внимание! Предупреждает о потенциальных проблемах, которых следует остерегаться. Я искренне надеюсь, что вы найдете в книге "SQL Server 2005. Справочник адми-нистратора" все необходимое для быстрого и эффективного выполнения основных задач администрирования SQL Server. Буду рад получить ваши отзывы по адресу william-stanek@aol.com или через мой сайт: http://www.williamstanek.com/. Спасибо! Поддержка Издательский коллектив приложил все усилия, чтобы обеспечить точность сведений, приводимых в книге. Исправления к книге, если они существуют, можно найти по адресу http://mspress.microsoft.com/support/. Ваши замечания, вопросы и предложения по книге направляйте в Microsoft Press. Наш почтовый адрес: Microsoft Press Attn: Editor, Microsoft SQL Server 2005 Administrator's Pocket Consultant One Microsoft Way Redmond, WA 98052-6399 Электронная почта: mspinput@microsoft.com Обратите внимание, что техническая поддержка продукта по этим адресам не пред-лагается. Сведения о поддержке можно найти по адресу http://support.microsoft.com/.
Об авторе Уильям Р. Станек (William R. Stanek) более 20 лет работает в области создания программного обеспечения с применением передовых технологий. Он является ведущим экспертом по информационным технологиям, автором отмеченных наградами книг и прекрасным преподавателем. Станек очень востребован как эксперт в данной области. В течение многих лет его практические советы помогают миллионам программистов, разработчиков приложе-ний и сетевых администраторов по всему миру. Станек написал более 25 книг на раз-личные темы, связанные с информационными технологиями. Среди них - Microsoft Windows Command-Line Administrator's Pocket Consultant, Microsoft Windows Server 2003 Administrator's Pocket Consultant 2nd Edition и Windows Server 2003 Inside Out. Также он является автором многочисленных официальных технических документов и курсов подготовки, посвященных самым разнообразным темам. С 1991 г. Станек занимается внедрением интернет-технологий в бизнесе, имея за плечами значительный опыт в разработке серверных технологий, шифровании и интернет-программировании. Он получил степень магистра и бакалавра с отличием по специальностям "Информационные системы" и "Вычислительная техника". Багаж деловых и профессиональных знаний Станека основывается на одиннадцати годах военной службы. Он очень гордится тем, что принимал участие в боевых дей-ствиях в Персидском заливе, будучи членом экипажа самолета электронной разведки. Станек участвовал в многочисленных боевых вылетах и награжден девятью медалями, включая одну из высших авиационных наград Соединенных Штатов Америки - крест "За летные боевые заслуги" ВВС. В настоящее время Станек проживает на северо-западном побережье Соединенных Штатов с женой и детьми.
Часть I Основы администрирования Microsoft SQL Server 2005 Часть I посвящена основным задачам администрирования Microsoft SQL Ser ver 2005. В гла-ве 1 дан обзор концепций, методов и инструментов администрирования SQL Server. Глава 2 содержит подробные сведения о планировании и выполнении установки SQL Server, а также информацию, позволяющую составить план внедрения SQL Server 2005 на предприятии. В главе 3 рассмотрен процесс настройки поверхности атаки, доступа к серверу и сетевых про-токолов. Глава 4 посвящена понятиям и подходам, являющимся основополагающими для кон-фигурирования и настройки SQL Server. Материал этой главы содержит ключевые сведения, необходимые для понимания того, как конфигурировать и настраивать SQL Server 2005. Глава 1. Обзор администрирования Microsoft SQL Server 2005 .......................................... 2 Глава 2. Установка Microsoft SQL Server 2005 .................................................................... 20 Глава 3. Настройка поверхности атаки, доступа к серверу и сетевых протоколов ............................................................................................ 40 Глава 4. Конфигурирование и настройка Microsoft SQL Server ........................................ 62
Глава 1 Обзор администрирования Microsoft SQL Server 2005 Microsoft SQL Server 2005 полностью переопределяет платформу баз данных SQL Server, предоставляя фундамент, на котором организации любого размера - малые, средние и крупные - могут построить информационную инфраструктуру нового по-коления. Ключевыми компонентами SQL Server 2005 являются следующие. SQL Server Database Services (Службы баз данных SQL Server) Включают ядро базы данных (database engine), а также средства для репликации и полнотекстового поиска. Ядро базы данных является сердцем SQL Server, репликация увеличивает доступность данных посредством их распределения между множеством БД, что позволяет разделять нагрузку по чтению данных между несколькими выделенны-ми серверами, а полнотекстовый поиск дает возможность на естественном языке выполнять запросы к данным, хранящимся в таблицах БД. Analysis Services (Аналитические службы) Предоставляют приложениям бизнес-анализа (business intelligence) инструменты оперативной аналитической обработки (OLAP, online analytical processing) и набор функциональных возможностей для применения технологии обнаружения знаний в данных (data mining). Аналитиче-ские службы позволяют объединять данные из множества источников, например реляционных БД, и использовать их для разнообразных практических нужд. Integration Services (Службы интеграции) Предоставляют корпоративное ре-шение для преобразования и интеграции данных, позволяющее извлекать их из множества источников, преобразовывать и затем переносить в получатели данных, которых может быть и более одного. Это дает возможность объединять данные из неоднородных источников, загружать их в хранилища данных, витрины данных (data marts) и т. п. Notification Services (Службы уведомлений) Включают в себя службу управ-ления уведомлениями и клиентские компоненты. Предназначены для автомати-ческого создания и своевременной отправки пользователям персонализированных сообщений при возникновении инициирующего события. Уведомления могут быть посланы на беспроводные устройства, такие как мобильные телефоны или карманные компьютеры (КПК), а также на учетные записи Windows Messenger или адреса электронной почты. Reporting Services (Службы отчетов) Включают Report Manager (Диспетчер от-четов) и Report Server (Сервер отчетов), дающие возможность организовать полно-ценную серверную платформу для создания и распространения отчетов. Report Server (Сервер отчетов) построен на стандартных технологиях IIS (Internet information services, Информационные службы Интернета) и .NET Framework, позволяя сочетать достоинства SQL Server и IIS для размещения и обработки отчетов. Service Broker (Брокер служб) Обеспечивает надежную, тесно интегрированную с базой данных инфраструктуру для организации очередей сообщений и асинхрон-
Обзор администрирования Microsoft SQL Server 2005 Глава 1 3 ного обмена сообщениями. Очереди могут быть использованы для накопления заданий, таких как запросы и другие обращения к данным, и их выполнения по мере освобождения ресурсов. Асинхронный обмен сообщениями позволяет при-ложениям БД связываться между собой. Начиная работать с Microsoft SQL Server 2005, следует сосредоточиться на таких вопросах: требования SQL Server 2005 к аппаратному обеспечению; наличие версий и редакций SQL Server 2005, соответствующих вашим потреб-ностям; работа SQL Server 2005 под управлением операционных систем семейства Microsoft Windows; существующие инструменты администрирования. SQL Server 2005 и требования к аппаратному обеспечению Успешное администрирование сервера базы данных зависит от следующих трех факторов: квалифицированные администраторы БД; хорошо спланированная архитектура БД; соответствующие аппаратные ресурсы. Две первые проблемы решены: как администратор вы поступили разумно, купив эту книгу для помощи в преодолении сложных моментов и отдав предпочтение SQL Server 2005 для обеспечения ваших потребностей в высокопроизводительной системе управления базами данных (СУБД). Остается решить последнюю проблему - выбрать необходимое для успешной работы аппаратное обеспечение. SQL Server 2005 должен эксплуатироваться на быстродействующей системе с достаточным количеством опера-тивной памяти и дискового пространства. Сохранность данных и отказоустойчивость системы также следует обеспечить на уровне оборудования. Примечание Качественно написанные приложения и продуманная структура базы данных значительно упрощают работу администратора. Низкая производительность является, скорее, следствием плохого проектирования приложений и структуры данных, чем виной администратора БД. Так что в какой-то степени разумное проектирование можно считать четвертой составной частью общего успеха. К сожалению, эта сфера находится вне полномочий администратора базы данных. Далее перечислены основные критерии выбора аппаратного обеспечения для SQL Server. Оперативная память SQL Server 2005 требуется следующее количество опера-тивной памяти: минимум 512 Мбайт для редакции Standard Edition, 1 Гбайт - для редакции Enterprise Edition и 1 Гбайт - для 64-битных редакций. В большинстве случаев желательно иметь оперативной памяти как минимум в два раза больше рекомендованного объема. Главная причина этого заключается в необходимо-сти увеличения производительности, ведь только для основных программных компонентов SQL Server 2005 и стандартных модулей Windows нужно около 256 Мбайт. Дополнительные компоненты СУБД, такие как Analysis Services (Аналитические службы), Reporting Services (Службы отчетов) и Notification Services (Службы уведомлений), увеличивают минимальные требования к оперативной памяти (примерно на 30 Мбайт памяти каждый). Для Reporting Services (Службы отче-тов) необходима установка служб IIS версии 5.0 или выше и относящихся к ним 
4 Часть I Основы администрирования Microsoft SQL Server 2005 компонентов, что также увеличивает базовые требования к объему оперативной памяти. Любая из графических утилит управления SQL Server требует для сво-ей работы не менее 50-60 Мбайт. Кроме того, учитывайте количество активных пользовательских соединений. Каждое пользовательское соединение использует примерно 24 Кбайт. В дополнение ко всем остальным выполняющимся на сервере процессам и приложениям, запросы на обработку данных и прочие операции SQL Server также требуют оперативной памяти. Процессор 32-разрядные версии SQL Server 2005 работают на процессорах Intel x86 или совместимых. 64-разрядные версии - на Intel Itanium (IA-64) и семействе процессоров X64 от AMD и Intel, в том числе AMD64 и Intel Extended Memory 64 Technology (Intel EM64T). Тестирование SQL Server показывает от-личные результаты на Intel Xeon 3,66 ГГц, Intel Itanium 1,6 ГГц, AMD Opteron 2,6 ГГц и AMD Athlon 2,6 ГГц. Любой из этих процессоров обеспечивает хорошую базу для системы SQL Ser ver средней мощности. Вы достигнете ощутимого улуч-шения производительности, если выберете процессор с большим кэшем. Примите во внимание предлагаемые объемы кэша уровней L1, L2 и L3 - большой объем кэша может значительно улучшить производительность всей системы. Основные преимущества 64-разрядных процессоров над 32-разрядными заклю-чаются в максимальном объеме адресуемой оперативной памяти и в доступе к данным. Поскольку 64-разрядные процессоры не ограничены адресацией только 4 Гбайт, они могут в оперативной памяти хранить больше данных, обеспечивая более быструю их обработку. В дополнение к этому, 64-разрядные процессоры за один такт могут обрабатывать вдвое больше данных и выполнять инструкции в два раза большего набора, чем 32-разрядные. Доступ к 64 битам данных (по сравнению с 32 би тами) дает значительное преимущество при проведении сложных расчетов, требующих высокой точности. Однако не все приложения оптимизированы для 64-разрядных процессоров, ввиду чего внедрение и сопровождение подобных систем может представлять определенную сложность. Многопроцессорные системы SQL Server 2005 поддерживает симметричные многопроцессорные системы (SMP, symmetric multiprocessors) и может обрабаты-вать сложные параллельные запросы. Однако параллельная обработка запросов полезна лишь в том случае, когда к системе подсоединено относительно небольшое количество пользователей, выполняющих при этом объемные запросы. Для выде-ленной системы с SQL Server, предназначенной для поддержки одновременно до 100 пользователей, не производящих сложных запросов, одного процессора будет достаточно. Если сервер обслуживает больше 100 пользователей или работает не на выделенной системе, то, возможно, следует подумать о добавлении процессоров (или использовании системы, в которую можно добавлять процессоры по мере воз-растания потребностей). Помните, что размер запросов и обрабатываемых наборов данных влияет на масштабирование. По мере увеличения объема обрабатываемых задач растут и требования к оперативной памяти и процессору. Дисковое пространство Требуемый объем накопителей данных определяется количеством и размером баз данных, поддерживаемых сервером. Необходимо иметь такое количество дискового пространства, которого будет достаточно для хранения всех данных (плюс рабочее пространство для индексов, системных фай-лов, файлов подкачки виртуальной памяти, журналов транзакций и, в случае орга-низации кластера, для кворумного диска). Не меньше, чем вместимость дисковых накопителей, важна и пропускная способность ввода-вывода. Для максимальной производительности рекомендуется использование системы накопителей с при-менением технологии Fiber Channel. Вместо одного большого диска лучше взять 
Обзор администрирования Microsoft SQL Server 2005 Глава 1 5 несколько меньших, что обеспечит отказоустойчивость благодаря технологии RAID (redundant array of independent disks, избыточный массив независимых дис-ков). Рекомендуем данные и журналы транзакций помещать на отдельные диски. Это относится и к кворумному диску для кластерной системы. Сохранность данных Чтобы обезопасить себя от сбоев дисков следует приме-нять технологию RAID. Для хранения данных используйте RAID 0 или RAID 5, а для журналов транзакций - RAID 1. RAID 0 (чередующийся набор дисков без контроля четности) обеспечивает хорошую скорость чтения/записи, но поломка любого из дисков означает, что SQL Server не сможет работать с размещенной на дисковом массиве БД, пока поврежденный диск не будет заменен, а база дан-ных восстановлена из резервной копии. При использовании RAID 1 (зеркальное отображение дисков) создается точная (зеркальная) копия данных на разных дисках, поэтому восстановить функционирование системы можно, просто заме-нив вышедший из строя диск. Уровень RAID 5 (чередующийся набор дисков с контролем четности) обеспечивает хорошую защиту против сбоя одного диска, но имеет низкую скорость записи. Для оптимальной производительности и от-казоустойчивости рекомендуется использовать комбинацию уровней RAID 0+1, которая заключается в зеркальном отображении чередующегося набора дисков без контроля четности. Источник бесперебойного питания SQL Server спроектирован таким образом, что поддержка целостности базы данных гарантируется в любой момент времени: информация может быть восстановлена с помощью журналов транзакций. Однако само оборудование сервера остается незащищенным от внезапного отключения питания или скачков напряжения. В обоих случаях оно может быть серьезно по-вреждено. Чтобы предотвратить подобное развитие событий, установите источник бесперебойного питания. Его использование даст вам время для корректного за-вершения работы системы при аварийном отключении питания; это также важно для поддержки целостности БД в ситуации, когда сервер использует дисковые контроллеры с отложенной записью. Выполняя эти указания при выборе аппаратного обеспечения, вы сможете успешно использовать SQL Server 2005. Редакции Microsoft SQL Server 2005 SQL Server 2005 распространяется в четырех основных редакциях: Workgroup Edition, Standard Edition, Enterprise Edition и Developer Edition. Во всех редакциях вы найдете компоненты для установки как на сервере, так и на рабочей станции. Сер-верные компоненты включают в себя полную версию SQL Server и служб поддержки. Установка для рабочей станции содержит клиентские компоненты, инструменты администрирования и документацию. Редакция Workgroup Edition спроектирована как СУБД начального уровня. Эта редакция идеально подходит небольшим отделам крупных предприятий и малому бизнесу, испытывающим потребность в высокопроизводительном решении для баз данных, но которым при этом не нужны расширенные возможности бизнес-анализа, имеющиеся в редакциях Standard и Enterprise. Редакция Workgroup Edition обладает следующими функциональными возможностями: поддерживает БД любого размера, до 3 Гбайт оперативной памяти, два симме-тричных процессора, репликацию с ограниченными возможностями публикации и полнотекстовый поиск;
6 Часть I Основы администрирования Microsoft SQL Server 2005 работает под управлением различных версий операционной системы Microsoft Win dows, в том числе Windows 2000, Windows XP Professional и Windows Server 2003; Примечание Для использования любой из редакций SQL Server 2005 под управлением Microsoft Windows 2000 должен быть установлен Service Pack 4 (SP4) или выше, а для Windows XP Professional - Service Pack 1 (SP1) или выше. Список дополнительных тре-бований, относящихся к использованию SQL Server 2005 на системах Windows 2000 и Windows XP Professional, находится в электронной документации SQL Server 2005 (SQL Server Books Online). делает возможной передачу журналов, что позволяет SQL Server посылать жур-налы транзакций от одного сервера к другому; используйте эту возможность для создания резервного сервера. Самой распространенной редакцией является Standard Edition, которая разрабо-тана для организаций среднего размера. Редакция Standard Edition обладает такими функциональными возможностями: работает под управлением различных версий операционной системы Microsoft Windows, в том числе Windows 2000, Windows XP Professional и Windows Server 2003; поддерживает БД любого размера, неограниченный объем оперативной памяти, четыре симметричных процессора, репликацию с полноценными возможностями публикации и полнотекстовый поиск; предоставляет инструменты для бизнес-анализа данных, основные из которых - Analysis Services (Аналитические службы), Reporting Services (Службы отчетов), Notification Services (Службы уведомлений) и Data Integration Services (Службы интеграции данных); включает возможности зеркального отображения баз данных (database mirroring)* и технологии обнаружения знаний в данных. Несмотря на то что редакция Standard Edition обеспечивает высокую производи-тельность сервера баз данных, крупным организациям стоит обратить внимание на редакцию Enterprise Edition, которая имеет расширенные возможности. Неограниченная масштабируемость и поддержка горизонтального секционирова-ния, что обеспечивает исключительно высокую производительность и возможность применить SQL Server для работы с очень большими базами данных. Горизон-тально секционируя таблицы и помещая их части на несколько разных серверов, можно настроить группу серверов таким образом, чтобы они работали вместе для поддержки крупного веб-сайта или для обработки данных большой корпорации. Развитые возможности зеркального отображения БД для полноценных операций параллельной обработки данных в реальном времени, а также усовершенствован-ные инструменты анализа для обнаружения знаний в данных и полнофункцио-нальной оперативной аналитической обработки данных. Поддержка отказоустойчивых кластеров (failover clustering), что позволяет соз-давать кластерные системы из четырех узлов под управлением операционной системы Windows 2000 Datacenter Server, а также кластеры из двух узлов под управлением Windows 2000 Advanced Server. Используйте эту возможность, чтобы обеспечить поддержку отказоустойчивости и восстановления после отказа. * Возможность зеркального отображения баз данных в SQL Server 2005 оставлена лишь в озна-комительных целях. Microsoft не рекомендует ее использование в приложениях и не предоставляет связанную с ней техническую поддержку. - Прим. ред.
Обзор администрирования Microsoft SQL Server 2005 Глава 1 7 Как и можно было ожидать, редакция SQL Server 2005 Enterprise Edition работает на Windows 2000 Advanced Server, Windows 2000 Datacenter, Windows Server 2003 Enterprise и Windows Server 2003 Datacenter. Редакция Developer Edition поддер-живает все возможности редакции Enterprise Edition, но лицензирована только для использования в целях разработки и тестирования. Также имеются в наличии и другие редакции SQL Ser ver 2005. Среди них - Mobile Edition и Express Edition (последняя пришла на смену редакции Personal Edition предыдущих версий SQL Server и включает свободно распространяемое ядро базы данных). Редакция Mobile Edition позволяет вам использовать SQL Server как хранилище данных на мобильных устройствах. Express Edition является редакцией, которую следует применять, если вам необходимо легкое в использовании решение для простых баз данных. Эта редакция бесплатна и может поставляться в составе приложений сторонних производителей. Она поддерживает размер БД до 4 Гбайт, до 1 Гбайт оперативной памяти и одиночный процессор. Примечание За исключением редакций Express Edition и Mobile Edition, большинство отличий между различными редакциями SQL Server заключаются в функциональных возможностях и не влияют на интерфейс. Поэтому в этой книге ссылки на определен-ные редакции и отличия между серверными и клиентскими установками даются только в случае необходимости. Как несложно догадаться, Express Edition и Mobile Edition имеют довольно простые интерфейсы управления. Все редакции SQL Server 2005 динамически и в автомати ческом режиме конфи-гурируют пользовательские соединения. В этом отличие рассматриваемой версии от SQL Server 7.0 и более ранних, в которых были заложены определенные ограничения на количество одновременных пользовательских соединений. Следовательно, админи-стратору не нужно беспокоиться об управлении пользовательскими соединениями, как это было в предыдущих версиях. Просто помните, что по мере увеличения количества активных пользовательских соединений растет и использование сервером системных ресурсов. Сервер должен уравновешивать нагрузку между многочисленными пользо-вательскими соединениями, что может привести к понижению производительности как для отдельных пользовательских соединений, так и для сервера в целом. В отличие от предыдущих версий, SQL Server 2005 использует службу Windows Installer, поэтому процесс его установки полностью интегрирован с операционной системой. Это означает, что вы можете конфигурировать SQL Server 2005 с помощью компонента панели управления Add or Remove Programs (Установка и удаление про-грамм), используя единый интерфейс для всех установленных в системе приложений. Установка может производиться как удаленно, посредством пакетной обработки ко-манд, так и локально. В начале установки проверяется конфигурация системы для определения состо-яния требуемых служб и компонентов. Этот процесс включает проверку настроек и доступности таких компонентов, как WMI (Windows management instrumentation, инструментарий управления Windows), MSXML (Microsoft XML parser, синтакси-ческий анализатор XML), IIS, Internet Explorer и COM+. Кроме того, инсталлятор определит версию операционной системы, наличие установленных пакетов обновле-ний и прав доступа к папке, являющейся папкой установки по умолчанию, а также проверит оперативную память и аппаратные ресурсы. После проверки конфигурации системы инсталлятор предлагает выбрать ком-поненты для установки. Независимо от того, какую редакцию вы решите приме-нить - Developer Edition, Workgroup Edition, Standard Edition или Enterprise Edition, варианты возможных действий будут сходными.
8 Часть I Основы администрирования Microsoft SQL Server 2005 Полная установка сервера БД В этом случае выполняется полная установка служб SQL Server Database Services (Службы баз данных SQL Server), включая файлы данных, объекты репликации и службу полнотекстового поиска. Для вы-бора установите флажок SQL Server Database Services (Службы баз данных SQL Server) на странице Components to Install (Компоненты для установки). Полная установка сервера БД и выбранных служб бизнес-анализа В таком ва-рианте будет выполнена полная установка SQL Server Database Services (Службы баз данных SQL Server). При необходимости можно указать установку Analysis Services (Аналитические службы), Reporting Services (Службы отчетов), Notification Services (Службы уведомлений) и Data Integration Services (Службы интеграции данных). Если Reporting Services (Службы отчетов) включены в установку, что указывается флажком Reporting Services (Службы отчетов) на странице Components to Install (Компоненты для установки), то службы IIS и относящиеся к ним компоненты также будут установлены, а сервер сконфигурирован как Report Server (Сервер отчетов). Последняя возможность доступна только в редакциях Standard Edition и Enterprise Edition. Установка компонентов рабочей станции Позволяет, начав обычную установку, с помощью флажка Workstation components, Books Online and development tools (Компоненты рабочей станции, электронная документация SQL Server и инстру-менты разработки) на странице Components to Install (Компоненты для установ-ки) установить затем коммуникационные компоненты, инструменты управления, электронную документацию, модели программирования и примеры. Не выбирайте для установки серверные компоненты. (Если используется модель лицензирования на сервер, то этот вариант является лучшим для управления сервером и разработки приложений.) Полная установка сервера БД и компонентов рабочей станции Происходит полная установка SQL Server Database Services (Службы баз данных SQL Server) и компонентов рабочей станции. При необходимости, если используются редакции Standard Edition или Enterprise Edition, можно установить Analysis Services (Ана-литические службы), Reporting Services (Службы отчетов), Notification Services (Службы уведомлений) и Data Integration Services (Службы интеграции данных). Для выборочной установки компонентов щелкните кнопку Advanced (Дополни-тельно) на странице Components to Install (Компоненты для установки). Совет Если вы хотите работать только с компонентами доступа к данным и сетевыми библиотеками, лучше использовать отдельный мастер установки SQL Native Client, до-ступный на стартовой странице дистрибутивного диска SQL Server 2005. Возможность установки только коммуникационных компонентов предоставляет и SQL Server, но процесс этот несколько длиннее. Для этого нужно будет щелкнуть кнопку Advanced (Дополни-тельно) на странице Components to Install (Компоненты для установки), чтобы отобразить страницу Feature Selection (Выбор функциональных возможностей), в предлагаемом списке компонентов раскрыть узел Client Components (Клиентские компоненты) и выбрать для установки только Connectivity Components (Коммуникационные компоненты). Детальные указания по установке SQL Server 2005 даются в главе 2. SQL Server и операционная система Windows При установке SQL Server на серверные операционные системы производятся неко-торые модификации среды. Эти модификации включают установку новых системных служб, настройку интегрированной с Windows аутентификации, новые учетные записи домена/рабочей группы и изменения в регистре.
Обзор администрирования Microsoft SQL Server 2005 Глава 1 9 Службы для SQL Server При установке SQL Server на компьютер с операционной системой Windows также устанавливаются некоторые службы, ключевыми из которых являются следующие. Active Directory Helper (Ассистент службы каталогов) Служба MSSQLServerADHelper добавляет и убирает объекты, используемые для регистрации экземпляров SQL Server и Analysis Server (Аналитический сервер), а также учетных записей, под которыми стартуют службы SQL Server, и обновляет разрешения на доступ к объектам. Analysis Services (Аналитические службы) Служба Microsoft SQL Server Analysis Services используется для оперативной аналитической обработки и обнаружения знаний в данных. Если СУБД установлена по умолчанию, эта служба называется Analysis Services (MSSQLSERVER). Когда установлено несколько экземпляров SQL Server, также можно увидеть названия MSSQLSERVER$instance_name, где instance_name является именем экземпляра SQL Server. Distributed Transaction Coordinator (Координатор распределенных транза-кций) Коор динирует распределенные транзакции между двумя и более серве-рами БД. Microsoft Search (Служба полнотекстового поиска) Ядро полнотекстового по-иска для SQL Server (имя службы - MSFTESQL) используется для создания полнотекстовых индексов и полнотекстового поиска в базах данных. Эта возмож-ность доступна только в том случае, когда в качестве дополнительного компонента установлена служба полнотекстового поиска. Report Server (Сервер отчетов) Служба Microsoft Reporting Services использу-ется для создания и распространения отчетов. Если СУБД установлена по умолча-нию, эта служба называется Report Server (MSSQLSERVER). Когда установлено несколько экземпляров SQL Server, также можно увидеть названия MSSQLSERVER$instance_name, где instance_name является именем экземпляра SQL Server. SQL Server Browser (Обозреватель SQL Server) Служба SQL Server Browser предоставляет клиентским компьютерам подробную информацию о соединениях с SQL Server. SQL Server Agent (Агент SQL Server) Служба SQL Server Agent используется для автоматического запуска заданий и уведомлений о сбоях. Если СУБД уста-новлена по умолчанию, эта служба называется SQL Server Agent (MSSQLServer). Когда установлено несколько экземпляров SQL Server, также можно увидеть на-звания SQLAgent$instance_name, где instance_name является именем экземпляра SQL Server. SQL Server SQL Server - важнейшая служба всей системы управления база-ми данных. Если СУБД установлена по умолчанию, эта служба называется SQL Server (MSSQLSERVER). Когда используется несколько экземпляров SQL Server, появятся названия MSSQL$instance_name, где instance_name является именем экземпляра SQL Server. Примечание Подробную информацию об управлении службами и их настройке вы най-дете в главе 5. Аутентификация в SQL Server Система безопасности SQL Server полностью интегрирована с безопасностью домена Windows, позволяя использовать аутентификацию, основанную как на учетных за-писях и группах Windows, так и на стандартных учетных записях SQL Server. Эти 
10 Часть I Основы администрирования Microsoft SQL Server 2005 режимы аутентификации упрощают управление доступом и системой безопасности, предоставляя возможность: сочетать режимы аутентификации Windows и SQL Server, позволяя пользователям, зарегистрированным в доменах Windows, получать доступ к серверу из своей учет-ной записи Windows, а другим пользователям - из учетной записи SQL Server; использовать аутентификацию, базирующуюся исключительно на учетных за-писях домена Windows, для получения доступа к серверу только пользователям, зарегистрированным в домене. Учетные записи для запуска служб SQL Server Под управлением Windows 2000 и Windows Server 2003 службы SQL Server могут быть сконфигурированы для запуска под системной учетной записью или для ис-пользования учетных записей домена Windows. Каждый способ имеет свои преиму-щества и недостатки. Системная учетная запись При этом варианте SQL Server получает администра-тивные полномочия на локальной системе, но не в сети. Используйте системную учетную запись, когда требуется доступ только к ресурсам локального сервера, то есть если необходимо изолировать SQL Server и запретить его взаимодействие с другими серверами. Учетные записи домена В этом случае службы настраиваются для использования стандартной учетной записи домена с правами, назначенными администратором. Применяйте учетные записи домена, когда серверу требуется доступ к сетевым ресурсам, если необходимо перенаправить сообщения о событиях в журналы собы-тий других систем либо когда нужно настроить отправку уведомлений на пейджер или адрес электронной почты. Любая учетная запись домена, используемая SQL Server, должна иметь разрешение на выполнение следующих действий: читать и изменять содержимое папки установки SQL Server (по умолчанию это папка %ProgramFiles%\Microsoft SQL Server\MSSQL.1\MSSQL); читать и изменять файлы БД, включая файлы с расширениями .mdf, .ndf и .ldf; читать и записывать ключи регистра, относящиеся к SQL Server; входить в систему в качестве службы. Дополнительные требования для служб SQL Server и SQL Server Agent такие: чтобы служба SQL Server имела возможность добавлять или удалять объекты SQL Ser ver в службе Active Directory (Служба каталогов), она должна быть в Windows членом локальных групп Power Users (Опытные пользователи) или Administrators (Администраторы); службе SQL Server для выполнения хранимой процедуры xp_cmdshell для поль-зователей, не являющихся администраторами SQL Server, необходимы права Act As Part Of Operating System (Работа в режиме операционной системы) и Replace A Process Level Token (Замена маркера уровня процесса); для того чтобы служба SQL Server при выполнении хранимой процедуры xp_sendmail имела возможность использовать сетевой протокол почтовых слотов (mail slots), ей необходимы соответствующие привилегии сетевой записи; служба SQL Server Agent должна быть членом локальной группы Administrators (Администраторы), чтобы использовать возможность автоматического перезапуска или создавать задания типов CmdExec (вызов команды операционной системы) и ActiveX Script (сценарий ActiveX), не принадлежащие администратору SQL Server.
Обзор администрирования Microsoft SQL Server 2005 Глава 1 11 Примечание Система безопасности в SQL Server управляется посредством учетных записей сервера, ролей сервера, разрешений доступа к БД и разрешений доступа к объ-ектам. Учетные записи домена Windows могут быть использованы для аутентификации пользователей и подключения к SQL Server. Больше информации об учетных записях, ролях сервера и системе безопасности дано в главе 8. Использование графических утилит администрирования SQL Server 2005 предоставляет несколько типов утилит для выполнения администра-тивных задач. Чаще всего вы будете пользоваться графическими утилитами админи-стрирования. Получить к ним доступ можно, выбрав в меню Start (Пуск) команду Programs (Программы) или All Programs (Все программы) и затем папку Microsoft SQL Server 2005. SQL Server 2005 имеет несколько новых графических утилит управления, которые заменяют утилиты предыдущих версий или совмещают их возможности. Утилита SQL Server Management Studio объединяет в себе функциональность SQL Server Enterprise Manager, Query Analyzer и Analysis Manager. Это означает, что SQL Server Management Studio можно использовать для выполнения большей части основных задач администрирования SQL Server. SQL Server Management Studio предоставляет для работы множество разнообраз-ных панелей. При первом ее использовании выводятся панели Registered Servers (Зарегистрированные серверы), Object Explorer (Обозреватель объектов) и Summary (Сводная информация), показанные на рис. 1-1. Если они не отображены, то эти и другие панели доступны в меню View (Вид)*. Ниже описано, как использовать каждую из них. Object Explorer (Обозреватель объектов) Позволяет подключаться к SQL Server, Analysis Server (Аналитический сервер), Integration Services Server (Сервер ин-теграции данных), Report Server (Сервер отчетов) и SQL Server Mobile, а также просматривать содержащиеся в них ресурсы. После подключения к определенному серверу его компоненты будут представлены в виде дерева объектов, узлы которого можно раскрывать, чтобы добраться до нижних уровней. Registered Servers (Зарегистрированные серверы) Отображает текущие зареги-стрированные серверы. Кнопки, расположенные вверху панели, позволяют быстро переключаться между серверами определенного типа (SQL Server, Analysis Server (Аналитический сервер), Integration Services Server (Сервер интеграции данных), Report Server (Сервер отчетов), SQL Server Mobile). Template Explorer (Обозреватель шаблонов) Предоставляет быстрый доступ к шаблонам Query Editor (Конструктор запросов), поставляемым с системой, и к любым другим шаблонам, которые могут быть созданы пользователями на любом языке сценариев, поддерживаемом SQL Server Management Studio. Solutions Explorer (Обозреватель решений) Дает возможность быстрого доступа к существующим проектам SQL Server, Analysis Server (Аналитический сервер) и SQL Server Mobile. Проекты содержат соединения, запросы и другие задания, которые будут выполняться в случае запуска проекта. * Любая панель этого меню (кроме "кнопочных" панелей, пере численных в подменю Toolbars (Панели инструментов)) может отображаться в трех видах: пристыкованная панель (с возможнос-тью автоматического свертывания), плавающая панель и окно (точнее, вкладка в единственном рабочем окне этой утилиты). - Прим. ред.
12 Часть I Основы администрирования Microsoft SQL Server 2005 Рис. 1-1. Использование утилиты SQL Server Management Studio для выполнения основных задач администрирования Если вам довелось работать с предыдущими версиями SQL Server, то вы обна-ружите, что утилита SQL Server Management Studio достаточно сильно отличается от инструментов администрирования, которым она пришла на смену. Большинство мастеров заменены немодальными диалоговыми окнами, предоставляющими быстрый доступ к элементам конфигурации. Как показано на рис. 1-2, в верхней части таких диалоговых окон располагаются кнопки Script (Сценарий) и Help (Справка). Они позволяют упростить генерацию сценария, основанного на выбранной конфигурации, а также при необходимости предоставить справочную информацию. Другой полезной утилитой является SQL Server Configuration Manager, показан-ная на рис. 1-3. Она заменяет утилиты Server Network Utility, Client Network Utility и Services Manager предыдущих версий. Это означает, что SQL Server Configuration Manager можно использовать для выполнения множества важных задач, связанных с настройкой служб и конфигурацией сетевых протоколов. Если в SQL Server Configuration Manager выбрать в панели слева узел Services (Службы), появится возможность управлять службами, отображающимися в окне справа, щелкнув любую из них правой кнопкой мыши и выбрав из контекстного меню нужную команду, например Start (Пуск), Stop (Стоп) или Restart (Переза-пустить). Можно также изменять связанные со службой настройки, такие как тип запуска, учетную запись, под которой служба запускается, и пароль этой учетной записи. Для этого следует щелкнуть службу правой кнопкой мыши и из контекст-ного меню выбрать команду Properties (Свойства). В появившемся диалоговом окне на вкладке Log On (Вход в систему) в поле Account Name (Имя учетной записи) введите имя учетной записи, а в поле Password (Пароль) - ее пароль; на вкладке 
Обзор администрирования Microsoft SQL Server 2005 Глава 1 13 Service (Служба) из раскрывающегося списка Start Mode (Тип запуска) выберите желаемый тип запуска. Рис. 1-2. Быстрое выполнение ключевых операций с помощью кнопок, расположенных в верхней части окна Рис. 1-3. Управление службами и сетевыми настройками при помощи SQL Server Configuration Manager SQL Server 2005 поддерживает как локальное, так и удаленное управление, что позволяет большую часть утилит использовать для управления и теми, и другими ресурсами. Например, зарегистрировав новый сервер в SQL Server Management Studio и подключившись к нему, можно затем с рабочей станции удаленно управлять сервером и его базами данных. В табл. 1-1 перечислены утилиты администрирования и прочие полезные утилиты, а также даны краткие сведения о них. 
14 Часть I Основы администрирования Microsoft SQL Server 2005 Табл. 1-1. Краткий обзор основных утилит SQL Server 2005 Название Назначение Business Intelligence Development Studio Разработка объектов для бизнес-анализа и управления ими. Включает SSIS Designer (Конструктор пакетов SSIS), который можно использо-вать для создания и обслуживания пакетов SSIS (SQL Ser ver integration services, службы интеграции SQL Server) Database Tuning Adviser Оптимизация производительности при работе с базами данных SQL Server SQL Server Import and Export Wizard Создание пакетов SSIS для импорта и экспорта данных Report Manager Управление отчетами, которые генерируются Reporting Services (Службы отчетов) SQL Server Configuration Manager Настройка сетевых библиотек клиента и сервера и управление службами SQL Server. Заменяет Server Network Utility, Client Network Utility и Services Manager. Описывается в главе 2 SQL Server Profiler Анализ действий пользователей и запись их в журналы аудита. SQL Profiler является графическим интерфейсом к трассировщику SQL Trace. Описывается в главе 13 SQL Server Management Studio Основной инструмент администрирования SQL Server 2005. Управляет серверами SQL, базами данных, безопасностью и многим другим. Ключевые аспекты работы с ним обсуждаются в главе 4. Заменяет SQL Server Enterprises Manager, Query Analyzer и Analysis Manager Использование утилит командной строки Графические утилиты администрирования предоставляют почти все функциональные возможности, необходимые для работы с SQL Server. Однако существуют ситуации, когда приходится работать, используя командную строку, особенно если возникает потребность автоматизировать установку, администрирование или обслуживание с помощью сценариев. Основной утилитой командной строки является SQLCMD.EXE, заменяющая утилиты OSQL.EXE и ISQL.EXE. Часто используется также другая утилита командной строки - BCP.EXE. Утилита SQLCMD SQLCMD является утилитой для формирования запросов на языке SQL, который можно запустить из командной строки. Утилита SQLCMD, в отличие от утилит OSQL и ISQL, заменой которым она служит, обращается к SQL Server только через про-граммный интерфейс OLE DB (object linking and embedding database, связывание и внедрение объектов баз данных). Как и утилиты OSQL и ISQL, утилита SQLCMD имеет незначительные накладные расходы выполнения, поэтому ее использование является предпочтительным при ограниченных системных ресурсах. Пример 1-1 демонстрирует синтаксис командной строки утилиты SQLCMD. Пример 1-1. Синтаксис командной строки утилиты SQLCMD sqlcmd [ { { -U login [ -P password ] } | -E } ][ -S server_name [ \instance_name ] ] [ -H workstation_name ] [ -d database_name ] [ -l login_time_out ] [ -t query_time_out ] [ -h rows_between_headers ] [ -s column_separator] [ -w screen_width ] [ -a packet_size ]
Обзор администрирования Microsoft SQL Server 2005 Глава 1 15 [ -e ] [ -I ] [ -c command_end ] [ -L [ c ] ] [ -q "query" ] [ -Q"query" ] [ -m error_level ] [ -V severity_level ] [ -W ] [ -u ] [ -r [ 0 | 1 ] ] [ -i input_file [ ,...n ] ] [ -o output_file ] [ -z new_password ] [ -Z new_password ] [ -f { code_page | i:code_page1 [, o:code_page2 ] } ] [ -k [ 1 | 2 ] ] [ -y display_width ] [ -Y display_width ] [ -p [ 1 ] ] [ -R ] [ -b ] [ -v var="value" [ ...n ] ] [ -A ] [ -X [ 1 ] ] [ -x ] [ -? ] В табл. 1-2 перечислены основные ключи утилиты SQLCMD, назначение которых может показаться неочевидным из приведенного выше примера синтаксиса. Табл. 1-2. Основные параметры утилиты SQLCMD Ключ Описание -E Предписывает использовать доверительное соединение вместо имени пользователя и пароля; рекомендуется для обеспечения безопасности -d database_name Указывает имя начальной БД (автоматически выполняется USE database_name в начале сеанса работы утилиты); может быть изменено последующими инструкциями USE -l login_time_out Устанавливает время ожидания (в секундах) при установлении соеди-нения по умолчанию 8 с. Диапазон допустимых значений - от 0 до 65 534. Значение 0 означает бесконечное ожидание -t query_time_out Задает время ожидания (в секундах) при выполнении запроса. Диапазон допустимых значений - от 1 до 65 535. Если значение не указано - время ожидания бесконечно -h rows_between_ headers Устанавливает количество строк данных, которые выводятся между строками с заголовками столбцов. По умолчанию выводится одна строка заголовков для каждого набора результатов. При задании значе-ния -1 заголовки столбцов не выводятся вообще (в этом случае нельзя использовать пробел между ключом -h и значением, то есть следует вводить параметр как -h-1) -s column_separator Указывает разделитель столбцов при выводе результатов. По умол-чанию - пробел. Символы, имеющие специальное значение для опе-рационной системы, например "$" и ";", должны быть заключены в двойные кавычки -w screen_width Задает ширину экрана для вывода данных. Диапазон допустимых зна-чений - от 9 до 65 535 символов. По умолчанию - 80. Если выводимая строка длиннее указанного значения, она переносится на следующую строку -a packet_size Задает количество байтов в сетевом пакете, передаваемом между кли-ентом и сервером. По умолчанию 4 096 байтов. Допустимый диапазон от 512 до 65 535 байтов -e Выводит входные сценарии на стандартное устройство вывода (stdout) -I Устанавливает параметр соединения QUOTED_IDENTIFIER в значе-ние ON. По умолчанию - OFF -c command_end Указывает команду, используемую в качестве разделителя (для выпол-нения) пакетов инструкций. По умолчанию - GO -L [ c ] Выводится список сконфигурированных локально серверов, а также серверы в сети, использующие широковещание. Если указан необя-зательный параметр c, вывод отображается без заголовочной строки Servers:, и каждая строка с именем сервера выводится без начальных пробелов (см. след. стр.)
16 Часть I Основы администрирования Microsoft SQL Server 2005 Ключ Описание -q "query" Выполняется запрос query при запуске утилиты, однако ее работа не завершается по окончании выполнения запроса -Q "query" Выполняется запрос query при запуске утилиты, и ее работа немедлен-но завершается по окончании выполнения запроса -m error_level Позволяет настроить отображение сообщений об ошибках. Для оши-бок, у которых уровень серьезности ниже, указанного в значении error_ level, сообщения не выводятся. При указании значения -1 полностью отображаются все сообщения, в том числе информационные -V severity_level Указывает самый низкий уровень серьезности ошибки, выводимый утилитой. Если уровень серьезности ошибки, произошедшей в сцена-рии SQL, меньше заданного, то утилита выводит 0. Это значение мож-но использовать в пакетных файлах, проверяя содержимое переменной среды ERRORLEVEL -W Удаляет из столбцов конечные пробелы -u Предписывает сохранять файл output_file в кодировке UNICODE, в независимости от формата файла input_file -r [ 0 | 1 ] Перенаправляется вывод сообщений об ошибках на экран (stderr). Если параметр не задан или указан необязательный параметр 0, перенаправляются только сообщения об ошибках с уровнем серьезности 17 и выше; если указан необязательный параметр 1, все сообщения об ошибках перенаправляются -i input_file Указывает файл, содержащий пакет инструкций SQL. Можно задать несколько файлов (через запятую без пробела), которые будут обрабо-таны по очереди -z new_password Устанавливает новый пароль -Z new_password Устанавливает новый пароль и немедленно завершает работу утилиты -o output_file Указывает выходной файл, в который перенаправляется весь вывод результатов -f code_page или -f i:code_page1 [, o:code_page2] Задает кодовые страницы ввода и вывода. Можно определить одно значение или два раздельных: одно для ввода, указываемое после ключа i:, другое - для вывода, указываемое после ключа o: -k [ 1 | 2 ] Предписывает удалить из вывода все управляющие символы, такие как табуляция и символ новой строки. Если указан необязательный параметр 1, то управляющие символы не удаляются, а заменяются пробелом, если указан необязательный параметр 2, то несколько последовательных управляющих символов заменяются одним пробелом -y display_width Ограничивает количество символов, возвращаемых запросом для таких типов данных, хранящих большие объекты: varchar(max), nvarchar(max), varbinary(max), xml, text, ntext, image, а также пользовательских типов данных. Если задано значение 0, выводимые значения обрезаются на 1 Мбайт -Y display_width Ограничивает количество символов, возвращаемых запросом для таких типов данных: char, nchar, varchar(n), где 1 < n < 8000, nvarchar(n), где 1 < n < 4000, sql_variant -p [ 1 ] Выводит статистику производительности для каждого набора резуль-татов. Если указан необязательный параметр 1, вывод статистики производится в формате, где поля разделяются двоеточием, что облегчает импорт в электронную таблицу или обработку в сценариях Табл. 1-2. (продолжение)
Обзор администрирования Microsoft SQL Server 2005 Глава 1 17 Ключ Описание -R Указывает поставщику OLE DB для SQL Server, что во время преоб-разования даты, времени и валюты в символьный формат следует ис-пользовать региональные установки клиентского компьютера -b Предписывает завершить работу при возникновении ошибки и уста-новить переменную среды ERRORLEVEL. Если сообщение об ошибке имеет уровень серьезности больше 10, возвращаемое в переменную среды значение равно 1, в противном случае возвращается 0 -v var="value" Создает переменную сценария, которую можно использовать в сцена-риях утилиты sqlcmd. Можно задать несколько переменных -A Предписывает подключиться к SQL Server, используя выделенное со-единение администратора -X [ 1 ] Отключает выполнение команд, которые могут нарушить безопасность во время выполнения утилиты в пакетном файле. Отключаемые ко-манды: ED и !! command. Если указан необязательный параметр 1, при попытке выполнить такую команду выдается сообщение об ошибке и работа утилиты завершается -x Предписывает утилите игнорировать переменные сценариев. Это удоб-но, когда сценарий состоит из множества инструкций INSERT, кото-рые могут содержать строки, имеющие тот же формат, что и обычные переменные, например $(variable_name) Примечание В отличие от утилиты ISQL, утилита SQLCMD поддерживает подключение к именованным экземплярам SQL Server 2005. SQLCMD подключается к экземпляру SQL Server по умолчанию. Если указать имя экземпляра и имя сервера, SQLCMD подключится к указанному экземпляру на выбранном сервере. С помощью утилиты SQLCMD можно выполнять инструкции Transact-SQL для обработки запросов, запуска хранимых процедур и решения других задач. Посколь-ку действия производятся из командной строки, эти инструкции не выполняются автоматически, и нужно использовать дополнительные команды, чтобы сообщить SQLCMD, когда их выполнять, а когда игнорировать. Эти дополнительные команды должны быть введены в отдельных строках. Они приведены в табл. 1-3. Для того чтобы прервать выполнение запроса без выхода из SQLCMD, необходимо нажать клавиши Ctrl+C. Табл. 1-3. Команды, используемые утилитой SQLCMD Команда Описание GO [count] Выполняет все инструкции, введенные до предыдущей команды GO или RESET. Если используется параметр count, то инструкции кэшируются и выполняются пакетом указанное в count количество раз RESET Очищает введенные ранее инструкции и таким образом предотвращает их выполнение ED Вызывает текстовый редактор, который определен переменной среды SQLCMDEDITOR. Определить переменную среды можно, например, таким образом: SET SQLCMDEDITOR=notepad !! command Выполняет указанную системную команду или сценарий QUIT Завершает работу SQLCMD EXIT statement Указывает инструкцию выхода. Выполняется пакет инструкций или запрос, после чего работа SQLCMD завершается Табл. 1-2. (окончание) (см. след. стр.)
18 Часть I Основы администрирования Microsoft SQL Server 2005 Команда Описание :r file_name Указывает имя файла, содержащего требуемые для выполнения инструкции Transact-SQL, которые могут включать в себя команду GO :ServerList Выводит список локально сконфигурированных серверов и любых сетевых серверов :List Отображает содержимое кэша инструкций :ListVar Выводит список переменных, назначенных в данный момент :Setvar Назначает переменные :Error file_name Перенаправляет весь вывод сообщений об ошибках в указанный файл :Out file_name Перенаправляет все результаты запросов в указанный файл :Perftrace file_name Перенаправляет всю информацию о трассировке производительности в указанный файл :Connect Подключается к экземпляру SQL Server или завершает текущее со-единение. Полный синтаксис: :Connect server_name[\instance_name] [-l timeout] [-U user_name [-P password]] :Help Отображает справку SQLCMD и синтаксис командной строки :On Error [exit|ignore] Указывает, каким образом SQLCDM должна обрабатывать ошибки, возникающие во время исполнения пакета инструкций SQL. SQLCMD может прекратить выполнение инструкции или проигнорировать ошибку и продолжить выполнение В предыдущих версиях SQL Server для проверки соединения ODBC между кли-ентом и сервером использовалась утилита ODBCPING. В SQL Server 2005 интерфейс OLE DB является предпочтительным методом установки соединения с сервером. Для целей тестирования и разрешения проблем можно подключиться к серверу, ис-пользуя утилиту SQLCMD с параметром -A. В главе 15 дан пример использования SQLCMD -A. Утилита BCP Утилита BCP (bulk copy program, утилита массивного копирования) предназначена для осуществления операций копирования данных большого объема. Можно ис-пользовать BCP для выполнения импорта и экспорта данных или переноса их между экземплярами SQL Server 2005. Основное преимущество утилиты BCP - ее скорость. Она намного быстрее стандартных процедур импорта/экспорта данных. К сожалению, необходимость запускать утилиту из командной строки значительно усложняет ее применение. Подробное описание параметров и ключей утилиты BCP дано в главе 10. Другие утилиты командной строки В табл. 1-4 представлен общий список утилит командной строки, включенных в по-ставку SQL Server 2005. Как видно из таблицы, большая часть исполняемых файлов этих утилит хранится в папке %ProgramFiles%\Microsoft SQL Server\90\Tools\Binn или в папках компонентов SQL Server, к которым они относятся. Табл. 1-3. (окончание)
Обзор администрирования Microsoft SQL Server 2005 Глава 1 19 Табл. 1-4. Основные утилиты командной строки, поставляемые с SQL Server 2005 Название Описание Подпапка в %ProgramFiles%\Microsoft SQL Server Bcp Импортирует и экспортирует данные и ко-пирует их между экземплярами SQL Server \90\Tools\Binn Dta Анализирует загрузку и дает рекомендации по ее оптимизации \90\Tools\Binn dtexec Настраивает и выполняет пакет SQL Server Integration Services (SSIS). Соответству-ющей графической утилитой является DTExecUI \90\DTS\Binn dtutil Управляет пакетами SQL Server Integration Services (SSIS) \90\DTS\Binn nscontrol Создает экземпляры Notification Services (Службы уведомлений) и управляет ими \90\NotificationServices\9.0.242\bin profiler90 Запускает SQL Server Profiler из командной строки \90\Tools\Binn Rs Выполняет сценарии Reporting Services (Службы отчетов) \90\Tools\Binn rsconfig Настраивает соединения с сервером отчетов \90\Tools\Binn rskeymgmt Управляет ключами шифрования сервера отчетов \90\Tools\Binn Sac Импортирует или экспортирует настройки конфигурации поверхности атаки между экземплярами SQL Server 2005 \90\Shared sqlagent90 Запускает службу SQL Server Agent из ко-мандной строки \MSSQL.n\MSSQL\Binn Экземпляр по умолчанию: \MSSQL.1\MSSQL\Binn sqlcmd Выполняет административные задачи и инструкции T-SQL из командной строки \90\Tools\Binn sqlmaint Выполняет планы обслуживания БД, соз-данные в предыдущих версиях SQL Server \MSSQL.1\MSSQL\Binn sqlservr Запускает и останавливает экземпляр ядра БД SQL Server \MSSQL.1\MSSQL\Binn tablediff Сравнивает данные двух таблиц и отобра-жает разницу между ними \90\COM
Глава 2 Установка Microsoft SQL Server 2005 Программа установки SQL Server дает возможность создать экземпляры SQL Server, добавить компоненты, внести изменения в системный реестр для настройки SQL Server, удалить его из системы и выполнить другие типичные для установки и со-провождения программного обеспечения задачи. Однако прежде необходимо решить, какую роль будет выполнять SQL Server 2005 в бизнес-процессах вашего предприятия, и составить план внедрения программы. После этого можно приступать к собственно установке и конфигурированию системы. Интеграция данных в SQL Server SQL Server 2005 является полноценной платформой для приложений бизнес-анализа. С его помощью можно решать следующие задачи: извлечение, преобразование и загрузка (ETL, extraction, transformation, and loading) данных; создание реляционных хранилищ данных; поддержка многомерных БД и поиск в них знаний; оперативная аналитическая обработка с помощью Analysis Services (Аналитические службы); поддержка управляемых отчетов. Использование SQL Server Integration Services Data Transformation Services (DTS, Службы преобразования данных) в SQL Ser ver 2005 были переименованы в SQL Server Integration Services (SSIS, Службы интеграции SQL Server) и переписаны с нуля с целью предоставления полнофункциональной, расширяемой и полностью управляемой корпоративной платформы для извлечения, преобразования и загрузки данных. Хотя создание пакетов SSIS с базовой функцио-нальностью возможно и посредством SQL Server Management Studio, полнофункцио-нальные пакеты SSIS разрабатываются только с помощью такой специализированной утилиты, как Business Intelligence Development Studio. Поскольку Integration Services (Службы интеграции) были полностью перепроектированы, больше нет необходимо-сти разрабатывать самомодифицирующиеся пакеты. Вместо этого нужно использовать пакетные переменные и среду конфигурации пакетов, позволяющие настроить способ выполнения пакетов для различных ситуаций. В этой книге с целью отличия будут употребляться разные термины: DTS 2000 - в отношении пакетов DTS, разработанных для SQL Server 2000, и SSIS - примени-тельно к пакетам SSIS, созданным для SQL Server 2005. Можно использовать мастер миграции пакетов DTS 2000 для преобразования пакетов DTS в пакеты SSIS. В по-ставку SQL Server включена исполняющая среда пакетов DTS 2000, что позволяет запускать пакеты DTS 2000, не переводя их в новый формат.
Установка Microsoft SQL Server 2005 Глава 2 21 Примечание Подробно о работе с SQL Server Integration Services (Службы интеграции SQL Server) рассказано в главе 10. Использование SQL Server 2005 для создания реляционных хранилищ данных SQL Server 2005 предоставляет одну из лучших в своем классе платформ для раз-работки реляционных БД, продолжая в этом плане традиции SQL Server 2000. Но, несмотря на такую преемственность, многочисленные новые возможности SQL Server 2005 в корне меняют подход к его администрированию. Кроме того, интеграция с .NET Framework позволяет для работы с базами данных разрабатывать приложения нового класса, использующие вместо Transact-SQL управляемый код, то есть вы-полняемый общеязыковой исполняющей средой (CLR, common language runtime), а не операционной системой. Для упрощения разработки и сопровождения управляемый код может быть ор-ганизован в классы и пространства имен. В большинстве случаев вы найдете, что использование управляемого кода для вычислений, сложной логики выполнения, манипулирования строками и регулярными выражениями удобнее, чем Transact-SQL. Язык Transact-SQL остается непревзойденным для операций доступа к данным без процедурной логики или при небольшом ее наличии. Подобно Transact-SQL, управляемый код исполняется самим SQL Server. Это позволяет напрямую обращаться к дан ным, не требуя дополнительного уровня ин-фраструктуры. Кроме того, вы можете воспользоваться вычислительной мощностью сервера, уменьшая сетевой трафик между серверами баз данных и приложениями промежуточного уровня, содержащими бизнес-логику. Использование SQL Server 2005 для поддержки многомерных БД и поиска знаний в данных Analysis Services (Аналитические службы) в SQL Server 2005 были усовершенствованы с целью лучшей поддержки многомерных БД и технологии поиска знаний в данных. Analysis Services (Аналитические службы) состоят из двух главных компонентов: ядра оперативной аналитической обработки и ядра поиска знаний в данных. Базу данных для аналитической обработки можно построить на основе любых источни-ков информации, включая реляционные БД, для которых потребуется определить аналитическую структуру данных, модели поиска знаний в данных и представления в этой структуре. Analysis Services (Аналитические службы) используют единую многомерную мо-дель (UDM, unified dimension model) данных. Она сочетает лучшие возможности реляционной модели и модели для аналитической обработки, стирая грань между традиционными реляционными и многомерными базами данных. Всякий набор ку-бов и измерений, определенных в SQL Server 2005, называется единой многомерной моделью. Она также способствует увеличению производительности и обеспечивает гибкость запросов. В SQL Server 2005 языком определения данных (DDL, data definition language) для Analysis Services (Аналитические службы) служит XML (extensible markup language, расширяемый язык разметки). Поэтому репозиторий метаданных был заменен фай-лами XML, которые хранятся на сервере Analysis Services (Аналитические службы) и управляются им. В отличие от SQL Server 2000, Analysis Services (Аналитические службы) в SQL Server 2005 производят все расчеты на сервере, а не на рабочей стан-ции клиента. Это позволяет обойтись без кэширо ва ния данных у клиента и увели-чивает производительность запросов при сложных вычислениях. Для сокращения 
22 Часть I Основы администрирования Microsoft SQL Server 2005 времени ожидания и увеличения производительности используется упреждающее кэширование. Его функционирование довольно гибко настраивается - можно скон-фигурировать частоту перестройки данных кэша, обработку запросов в ходе этой перестройки, указать способ обновления кэша при транзакции а также управлять другими его характеристиками. Использование SQL Server 2005 для поддержки управляемых отчетов Назначение компонента Reporting Services (Службы отчетов) в SQL Server 2005 - по-мочь в разработке полнофункционального решения для подготовки и распространения отчетов, а также управления ими. Reporting Services (Службы отчетов) включают набор инструментов для работы с отчетами и их просмотра; ядро, где размещаются и обрабатываются отчеты; и расширяемую архитектуру для интеграции с существу-ющей информационной инфраструктурой. Например, Reporting Services (Службы отчетов) можно легко интегрировать с Microsoft SharePoint Portal Server, чтобы Report Server (Сервер отчетов) автоматически доставлял генерируемые отчеты на портал SharePoint. Для управления отчетами применяется веб-приложение Report Server Web Application. С его помощью администраторы могут: определять для отчетов модель безопасности на основе ролей; планировать автоматическое создание и доставку отчетов; отслеживать историю создания отчетов. Есть несколько способов распространения отчетов. Один из вариантов заклю-чается в настройке Reporting Services (Службы отчетов) для доставки отчетов на портал SharePoint. Существует также возможность отправлять их пользователям электронной почтой либо через Интернет, предоставляя доступ к серверу отчетов с веб-интерфейсом. Форматы при этом могут быть самые разные: HTML, PDF, TIFF, Excel, XML, CSV и многие другие. Отчеты в формате HTML идеальны для просмо-тра во Всемирной паутине (World Wide Web, WWW). Форматы PDF и TIFF больше подходят для отчетов, которые предполагается отправлять на печать. Что касается форматов Excel, XML и CSV, то они используются в тех случаях, когда данные в от-чете предназначены для сохранения в БД или если пользователю требуется доступ к данным отчета для их модификации. Планирование установки SQL Server Независимо от того, являетесь ли вы администратором SQL Server 2005 или раз-работчиком приложений баз данных, вам наверняка придется выполнять различные функциональные обязанности, в том числе проектировщика и архитектора БД. И хотя в вашей организации, вероятно, есть специалисты, выполняющие эти функции, не-обходимо ознакомиться с но выми параметрами конфигурации и установки, прежде чем приступать к установке SQL Server, поскольку в нем многое изменилось. Построение серверной системы оптимальной производительности Как и в случае с SQL Server 2000, перед началом установки SQL Server 2005 необхо-димо решить множество вопросов. Прежде всего, нужно выбрать редакцию SQL Server и версию Windows, на которой он будет выполняться. После этого стоит потратить немного времени и подумать над конфигурацией системы. Некоторые рекомендации относительно выбора аппаратного обеспечения были даны в главе 1. Кроме того, не забывайте о важности дисковой подсистемы.
Установка Microsoft SQL Server 2005 Глава 2 23 Поскольку дисковая подсистема является одним из важнейших компонентов сер-верной системы, необходимо очень тщательно подойти к подбору составляющих ее элементов. Начать следует с выбора жестких дисков (или других систем хранения данных), которые должны обеспечивать надлежащий уровень производительности. Между различными техническими спецификациями жестких дисков существует боль-шая разница в скорости и производительности. При выборе внутренних жестких дисков для серверной системы в первую очередь следует рассмотреть возможность использования дисков с интерфейсами SATA II (и выше) или Ultra SCSI (предпо-чтительно Ultra320 SCSI и выше). Нужно обращать внимание не только на емкость жесткого диска, но также на скорость его вращения и среднее время поиска. Скорость вращения диска указыва-ется в количестве оборотов за единицу времени. Второй параметр определяет время, необходимое для перемещения магнитных головок между дорожками диска при по-следовательных операциях ввода-вывода. Существует общее правило для дисков с одинаковыми спецификациями, такими как SATA II или Ultra320 SCSI, которое гласит, что чем выше скорость вращения (измеряется в тысячах оборотов в минуту) и ниже средняя скорость поиска (измеряется в миллисекундах), тем лучше. Напри-мер, производительность жесткого диска со скоростью вращения 15 000 об/мин будет выше на 40-50 %, чем у диска, имеющего скорость вращения 10 000 об/мин. А диск со временем поиска 3,5 мс обладает временем отклика на 25-30 % меньшим, чем жесткий диск с соответствующим параметром 4,7 мс. Другие факторы, которые следует принимать во внимание, - максимальная устой-чивая скорость передачи данных (maximum sustained data transfer rate) и среднее время до отказа (MTTF, mean time to failure). Большинство жестких дисков сравнимого уровня, например жесткие диски Ultra320 SCSI со скоростью вращения 15 000 об/мин, имеют близкие параметры максимальной устойчивой скорости передачи данных и среднего времени до отказа. Так, у модели Maxtor Atlas 15K II с максимальной устой-чивой скоростью передачи данных до 98 Мбайт/с и у модели Seagate Cheetah 15K. 4 с тем же параметром до 96 Мбайт/с среднее время до отказа одинаково, а именно 1,4 млн часов. Скорость передачи данных может быть также выражена в гигабайтах в секунду. 1,5 Гбайт/с эквивалентно 187 Мбайт/с, а 3,0 Гбайт/с - 374 Мбайт/с. Иногда в тех-нической спецификации на диск встречаются такие параметры, как максимальная внешняя скорость передачи данных (maximum external transfer rate) и средняя устой-чивая скорость передачи данных (average sustained transfer rate). Последний параметр является наиболее важным фактором, влияющим на производительность. Например, жесткий диск Seagate Barracuda 7200 SATA II имеет скорость вращения 7200 об/мин и среднюю устойчивую скорость передачи 58 Мбайт/с. Диск обладает средним временем поиска 8,5 мс и средним временем до отказа 1 млн часов, и его производительность сопоставима с другими жесткими дисками со скоростью вращения 7200 об/мин, использующими интерфейс SATA II. Однако большинство моделей с интерфейсом Ultra320 SCSI имеют большую производительность. Примечание Еще один важный фактор, требующий к себе внимания при выборе жесткого диска, но зачастую игнорируемый администраторами, - это тепловыделение. В большинстве случаев (хотя и не всегда), чем выше скорость вращения диска, тем сильнее он нагревается. Например, тенденцию к нагреванию имеют жесткие диски со скоростью вращения 15 000 об/мин, поэтому вам необходимо внимательно контролиро-вать и регу ли ровать их температуру. Модели Maxtor Atlas 15K II и Seagate Cheetah 15K.4 могут отка зать при температурах от 70 'С и выше (впрочем, как и большинство других жестких дисков).
24 Часть I Основы администрирования Microsoft SQL Server 2005 Выбор конфигурации дисковой подсистемы Если при определении конфигурации серверной системы принято решение применять для массива внутренних жестких дисков технологию RAID, это, как правило, озна-чает, что вам предстоит выбирать между ее аппаратной и программной реализацией. Следует заметить, что в большинстве случаев такой выбор приходится делать даже тогда, когда сервер использует внешнее хранилище данных. При выборе технологии RAID, использующей внутренние диски, двумя важными ориентирами являются стоимость и производительность. Аппаратная реализация RAID дороже программной, поскольку требует примене-ния специальных контроллеров. Но высокая стоимость компенсируется повышенной производительностью. В случае программной реализации RAID организацией дис-кового массива занимается сама операционная система, задействуя часть системных ресурсов: мощность процессора, оперативную память и т. д. При аппаратной реали-зации RAID всю обработку данных проводит специальный контроллер. Аппаратный вариант технологии RAID позволяет также использовать дополни-тельные возможности для обеспечения отказоустойчивости. Например, Windows Server 2003 программно поддерживает уровни RAID 0 (чередующийся набор дисков), RAID 1 (зеркальное отображение дисков) и RAID 5 (чередующийся набор дисков с контролем четности). Аппаратная реализация RAID предоставляет дополнительные возможности, такие как RAID 0+1 (также называемый RAID 10, который сочетает чередующийся набор и зеркальное отображение дисков). Дисковые накопители, содержащие SQL Server, а также диски для журналов транза-кций, часто используют уровень RAID 1. Этот уровень гарантирует полное зеркальное отображение информации на дополнительный диск в случае отказа основного. По-скольку данные должны записываться на два диска, зеркальное отображение диска не обеспечивает оптимальную производительность записи. Однако при чтении она выше по сравнению с одиночным диском, поскольку поиск данных может быть разделен между обоими дисками. Это означает, что операций считывания за единицу времени совершается в два раза больше, чем с одиночным диском. Примечание Технология RAID может быть применена во многих конфигурациях. Иногда наиболее эффективным является совместное использование аппаратной и программной реализации. Например, можно применять контроллеры RAID для проведения расчетов чет-ности и программно реализовать организацию чередующегося набора дисков. Иногда при зеркальном отображении дисков требуется использовать два дисковых контроллера. Эта техника называется дублированием дисков (disk duplexing). Одним из преимуществ такой техники перед зеркальным отображением является то, что скорость записи информации при этом не снижается: она такая же, как и при записи на одиночный диск. RAID 1 позволяет проще и быстрее, чем другие уровни, восстанавливать данные после сбоев, так как информация на диске полностью дублируется. В том числе и бла-годаря этому RAID 1 рекомендуется для жесткого диска, на котором установлена опе-рационная система. Также этот уровень следует использовать для дисков, содержащих журналы транзакций, поскольку они записываются последовательно и считываются только в случае выполнения отката транзакции. Таким образом, если поместить жур-нал транзакций на отдельный диск, для которого организовано зеркальное отображе-ние, можно достичь хорошей производительности и отказоустойчивости. Жесткие диски, содержащие файлы данных SQL Server, часто сконфигурированы для использования уровней RAID 5 или RAID 0+1. В случае уровня RAID 5 отказо-устойчивость достигается благодаря созданию чередующегося набора дисков, в ко-тором данные равномерно распределяются между множеством физических дисков, 
Установка Microsoft SQL Server 2005 Глава 2 25 и сохранению служебной информации о контроле четности* при записи данных. Блоки с данными и информацией о четности по очереди записываются на каждый диск в наборе. В случае сбоя диска информация о четности может быть использована для восстановления данных, содержавшихся на любом вышедшем из строя диске. Важно помнить, что информация о четности может быть использована для восстановления данных при сбое только одного жесткого диска в массиве. При выходе из строя одно-временно нескольких дисков весь массив становится неработоспособным. Использование уровня RAID 5 имеет как свои преимущества, так и недостатки. Например, при создании дискового массива RAID 1 можно организовать зеркальное отображение жесткого диска емкостью 150 Гбайт на другой такого же объема. При этом непроизводственные потери дискового пространства будут составлять 50 %, то есть, используя вдвое больше жестких дисков, вы не получите дополнительного свободного места. Если же организовать работу с дисковым массивом RAID 5 из трех дисков, то вы потеряете лишь около трети (33 %) общего дискового пространства. При добавлении новых дисков в массив непроизводственные расходы дискового пространства пропорционально уменьшаются. Кроме того, поскольку данные на-ходятся на всех дисках массива (которые, тем не менее, представляют собой единый виртуальный том), считывание одного большого файла выполняется одновременно с нескольких дисков, поэтому уровень RAID 5 предлагает более высокую произво-дительность чтения данных, чем RAID 1. По сути, можно совершать столько одно-временных операций чтения, сколько жестких дисков имеется в массиве. Это значит, что, в идеале, массив RAID 5 из пяти жестких дисков, каждый из которых подключен к отдельному контроллеру, будет иметь скорость считывания, в пять раз превыша-ющую скорость одиночного жесткого диска. Уровень RAID 5, однако, имеет более низкую производительность записи, чем RAID 1, поскольку при записи данных на массив RAID 5 требуется четыре операции ввода-вывода: две чтения и две записи. Сначала подлежащие обновлению данные и старая информация о четности считыва-ются. Потом вычисляется новая информация о четности. Затем обновленные данные и информация о четности записываются. Уровень RAID 0+1 комбинирует чередование и зеркальное отображение набора дисков - при его применении организуется зеркальное отображение чередующего-ся набора дисков. Это гарантирует наличие дубликата для каждого диска из набора с одновременным обеспечением производительности, характерной для уровня RAID 0. Как и в случае с уровнем RAID 1, операция записи для уровня RAID 0+1 требует две операции ввода-вывода: запись на основной диск и зеркально отображенный. Опера-ции считывания, как правило, распределены между несколькими дисками массива, что обеспечивает высокую производительность чтения (как и для уровней RAID 0 или RAID 5). Уровень RAID 0+1 обладает очень высокой отказоустойчивостью. В от-личие от уровней RAID 1 и RAID 5, во многих случаях массив дисков будет работать и при повреждении более одного диска. Фактически, даже если откажут все диски по одну сторону зеркального отображения, массив дисков может продолжать работать. Однако сбой по обе стороны приведет к отказу всего набора дисков. Примечание Недостаток уровня RAID 0+1 заключается в сравнительно большом коли-честве жестких дисков, необходимых для его организации. Требуется в два раза больше дисков, чем понадобилось бы для чередующегося набора. Чтобы организовать зеркальное отображение чередующегося набора дисков общей емкостью 450 Гбайт, нужен другой набор такого же объема, но общая емкость не меняется: она остается 450 Гбайт. * Информация о контроле четности представляет собой результат выполнения для блока данных операции "исключающее ИЛИ" (XOR). - Прим. ред.
26 Часть I Основы администрирования Microsoft SQL Server 2005 При выборе между RAID 5 и RAID 0+1 основным фактором, влияющим на ваше решение (если можно не учитывать сравнительную стоимость реализации), должно быть представление о том, какие операции ввода-вывода будут преобладать. Уровень RAID 5 оптимален, когда совершается больше операций чтения и меньше записи. Но если количество операций записи возрастет, вы добьетесь более высокой произ-водительности, применив уровень RAID 0+1. К примеру, при 90 % операций чтения и 10 % операций записи лучшим выбором будет RAID 5. При увеличении соотноше-ния записи к чтению вы заметите увеличение производительности, выбрав уровень RAID 0+1. Совет При использовании любых уровней RAID убедитесь, что диски имеют кэш-память, питающуюся от автономной батареи. Это позволит сохранить данные и даже завершить операцию записи при перебое питания или его отключении. Поможет энергонезависимая кэш-память и в других случаях, например, когда одни и те же данные записываются на несколько дисков, как для массивов RAID 1 и 0+1, или когда должна быть точно записана информация о контроле четности. Обеспечение доступности и масштабируемости системы Еще не так давно возможности для обеспечения доступности и масштабируемости были довольно ограниченными. Теперь ситуация улучшилась. Появились новые воз-можности и, главное, большинство из них не требуют дорогостоящих подсистем и се-тей хранения данных (SAN, storage area network). Например, можно организовать резервный сервер, используя передачу журналов; переключение на него при сбое основного сервера производится вручную. Кроме того, появилась возможность задействовать службы Microsoft Cluster Services для создания сервера - узла кластерной системы, который при сбое основного сервера начинает выполнять его функции автоматически. Для улучшения масштабируемости применяется горизонтальное секционирование таблиц, позволяющее делить большие таблицы на части и распределять их между несколькими серверами. С целью улуч-шения производительности упреждающего чтения используйте индексированные представления. Основной недостаток серверных кластерных систем - их высокая стоимость и по-вышенные требования к аппаратным ресурсам. В SQL Server 2005 реализована рас-ширенная форма передачи журналов - зеркальное отображение баз данных, которая работает на стандартном серверном аппаратном обеспечении и не требует специ-альных накопителей данных или котроллеров. Зеркальное отображение баз данных позволяет организовать непрерывный поток изменений журнала транзакций от сер-вера-источника к серверу-получателю. Если сервер-источник даст сбой, приложения переключатся на БД вспомогательного сервера за считанные секунды. В отличие от конфигурации, когда серверы организованы в кластеры, здесь журналы транзакций могут быть полностью синхронизированы между серверами. Это позволяет поддер-живать синхронность изменений в обоих направлениях. Для организации зеркального отображения баз данных требуется три сервера с запущенным SQL Server 2005. Сервер-источник, или основной (principal). Именно к основному серверу подклю-чаются приложения; на нем же обрабатываются транзакции. Сервер-получатель, или зеркальный (mirror). Зеркальный сервер является местом назначения переданных журналов транзакций. Он находится в состоянии ожида-ния, не позволяющем выполнять операции чтения данных.
Установка Microsoft SQL Server 2005 Глава 2 27 Сервер-наблюдатель, или свидетель (witness). Сервер-свидетель отслеживает со-стояние двух других серверов. Он используется при необходимости организовать автоматическое восстановление после сбоев: именно свидетель делает выбор сер-вера, поскольку знает, какой из них в данный момент является основным, а ка-кой - зеркальным. По мере того как записи журнала транзакций генерируются на основном сервере, они также сохраняются в журнале транзакций зеркального сервера, а изменения фиксируются в его базе данных. Изменения могут применяться в одном из двух ре-жимов: синхронном (одновременно) или асинхронном (после небольшой задержки). В зависимости от этого, между двумя серверами либо совсем не будет задержки записи, либо разница между ними будет составлять одну или две транзакции. С точки зрения клиента, восстановление в случае отказа основного сервера проис-ходит автоматически и практически немедленно. Если основной сервер оказывается недоступным, приложения переключаются на зеркальный сервер, который теперь стано-вится основным. А отключившийся основной сервер после восстановления перебирает на себя функцию зеркального сервера и получает записи журналов транза кций. Примечание Для создания копий БД также может быть использована репликация, с по-мощью которой данные распределяются между несколькими базами данных. SQL Server поддерживает несколько моделей репликации, включая репликацию моментальных сним-ков, репликацию транзакций и репликацию сведением. За более подробной информацией обращайтесь к главе 12. Обеспечение надежности соединения и доступа к данным SQL Server 2005 предоставляет две новые возможности, обеспечивающие бесперебой-ность соединения и доступ к данным. Выделенное соединение администратора Эта возможность позволяет админи-страторам настраивать бесперебойный доступ к SQL Server. Множественные активные результирующие наборы данных (MARS, Multiple active result sets) Данная возможность призвана помочь пользователям, рабо-тающим с базой данных, иметь бесперебойный доступ к SQL Server. В отличие от предыдущих версий SQL Server, в которых при его отключении доступ администраторов к серверу зачастую блокировался, SQL Server 2005 в этом случае обеспечивает доступ, используя выделенные соединения администратора. Благодаря этому администраторы могут в любой момент установить соединение, призванное устранить неполадки и решить проблемы. Любой администратор, являющийся членом встроенной роли сервера sysadmin, способен установить выделенное соединение к серверу, применив утилиту командной строки SQLCMD с параметром -A. Рассмотрим следующий пример: sqlcmd -U wrstanek -P moreFunPlease -S corpdbsvr05 -A Здесь пользователь wrstanek, являющийся членом встроенной роли сервера sysadmin, подключается к экземпляру SQL Server по умолчанию CorpDBSvr05. Также можно подключиться к именованному экземпляру SQL Server, используя команду, подобную этой: sqlcmd -U wrstanek -P moreFunPlease -S corpdbsvr05\webapp05 -A где webapp05 является именем экземпляра SQL Server. Технология множественных активных результирующих наборов данных значитель-но улучшила масштабируемость соединений с сервером и для обычных пользователей. 
28 Часть I Основы администрирования Microsoft SQL Server 2005 В SQL Server 2000 можно было иметь в каждый момент времени не более одного активного результирующего набора данных для одного соединения. Несмотря на то что с помощью курсоров сервера и других методов существовала возможность до некоторой степени обойти это ограничение, все равно работать с множественными результирующими наборами данных через одиночное соединение было нельзя. Тех-нология множественных активных результирующих наборов данных решает данную проблему посредством программных интерфейсов, которые позволяют программам работать раздельно с соединением и запросом, выполняющимся в контексте этого соединения. Например, при использовании программного интерфейса ODBC (Open Database Connectivity, открытый интерфейс доступа к базам данных) соединения и запросы, выполняемые в контексте этого соединения, представляются дескрипто-рами (handles): соединения, представленные типом данных SQL_HANDLE_DBC; инструкции, выполненные в контексте соединения, представлены типом данных SQL_HANDLE_STMT. Драйверы SQLODBC и SQLOLEDB, включенные в установку SQL Native Client для SQL Server 2005, поддерживают множественные активные результирующие на-боры данных, как и поставщик данных .NET Framework для SQL Server, включенный в Microsoft .NET Framework версии 2.0 или выше. По умолчанию эти драйверы уста-навливают соединения и обрабатывают запросы, используя множественные активные результирующие наборы данных. С технической точки зрения запросы могут быть единственной инструкцией Transact -SQL, пакетом инструкций Transact -SQL либо именем хранимой процедуры или функции вместе с необходимыми для ее выполнения значениями параметров. Независимо от типа запроса, SQL Server последовательно выполняет инструкции от первой до последней, в результате чего набор данных либо будет получен, либо нет. Таким образом, для одного соединения можно иметь более одного запроса, ожидающего выполнения, и более одного результирующего набора данных по умолчанию. Примечание Собственные драйверы SQL Server 2000, как и более ранних версий, не поддерживают множественные активные результирующие наборы данных. Они создаются поочередным, а не параллельным выполнением нескольких запросов. Технология MARS позволяет выполняться инструкции, пакету или процедуре и в контексте выполнения обрабатывать другие запросы. Чередование работает с инструкциями SELECT, FETCH, READTEXT, RECEIVE и BULK INSERT, а также при асинхронном заполнении курсоров данными. В отличие от SQL Server 2000, в котором не позволялось неявное создание соеди-нений при использовании интерфейса OLEDB и дополнительных запросов с примене-нием интерфейса ODBC, в SQL Server 2005 разрешено и то, и другое. Это означает, что если сеанс соединения имеет активную транзакцию, все новые запросы выполняются в контексте этой транзакции. Когда активной транзакции нет, пакеты инструкций выполняются в режиме автоматической фиксации изменений, при котором каждая инструкция инициирует собственную транзакцию. В программной модели поставщика данных .NET Framework для SQL Server ре-ализованы отдельные объекты SqlConnection (соединения с сервером), SqlCommand (команды, выполняющиеся с использованием этого соединения) и SqlTransaction (активные транзакции). Когда приложение в контексте определенного подключения начинает транзакцию, ему возвращается объект SqlTransaction, представляющий эту транзакцию.
Установка Microsoft SQL Server 2005 Глава 2 29 Запуск и изменение программы установки SQL Server Программа установки SQL Server - это утилита, предназначенная для выполнения основных задач. С ее помощью создаются новые экземпляры. Если же вы хотите управлять компонентами SQL Server, используйте утилиту панели управления Add or Remove Programs (Установка и удаление программ). Задачи, которые могут быть выполнены с помощью этих утилит, включают: создание новых экземпляров SQL Server; установку дополнительных клиентских компонентов; изменение установленных компонентов; перестройку настроек SQL Server в системном реестре; удаление SQL Server. Создание новых экземпляров SQL Server На один компьютер можно установить несколько экземпляров ядра базы данных SQL Server 2005. Это может быть полезно в тех случаях, когда: требуется поддержка нескольких сред разработки и тестирования на одном круп-ном сервере; на рабочем компьютере необходимо выполнять несколько приложений, каж-дое из которых устанавливает собственный экземпляр ядра базы данных SQL Server 2005; требуется надежно изолировать БД, доступные на одиночном сервере. Но в остальных ситуациях запускать множественные экземпляры ядра базы данных SQL Server 2005 не следует. Каждый экземпляр имеет собственный набор системных и пользовательских БД, отдельные службы SQL Server и SQL Server Agent, а также, если позволяет редакция и конфигурация, отдельные Analysis Services (Аналитические службы) и Re porting Services (Службы отчетов). Остальные компоненты и службы являются совместно используемыми, что увеличивает нагрузку на сервер из-за не-обходимости управлять разделяемыми ресурсами. Понятие об экземплярах SQL Server В процессе инсталляции SQL Server 2005 можно установить экземпляр ядра базы данных SQL Server 2005 по умолчанию или именованный экземпляр. В большинстве случаев сначала следует установить экземпляр по умолчанию, и лишь затем, если в этом есть необходимость, дополнительные именованные экземпляры. Количество последних на одном компьютере не ограничено. Экземпляр по умолчанию не имеет отдельного имени, он идентифицируется име-нем компьютера, на котором запущено ядро базы данных. Приложения подключают-ся к экземпляру по умолчанию, используя в запросах имя компьютера. На каждом компьютере допускается лишь один экземпляр по умолчанию, и таким может быть любая версия SQL Server. Остальные экземпляры SQL Server идентифицируются именем экземпляра, ко-торое задаются во время установки. Приложения подключаются к именованному экземпляру, указывая имя компьютера и имя экземпляра в формате computer_name\ instance_name. В качестве именованного экземпляра может быть запущено только ядро базы данных SQL Server 2000 или SQL Server 2005. Предыдущие версии SQL Server не поддерживают именованные экземпляры.
30 Часть I Основы администрирования Microsoft SQL Server 2005 Примечание При использовании редакции SQL Server 2005 Enterprise Edition можно создавать многоузловые кластерные системы. К экземпляру по умолчанию приложе-ния подключаются в кластере SQL Server, указывая имя виртуального сервера. К име-нованным экземплярам подключение происходит на кластере SQL Server с указанием имени виртуального сервера и именованного экземпляра в формате virtual_server_name\ instan ce_name. Установка экземпляра SQL Server Процесс установки SQL Server 2005 претерпел значительные изменения по сравнению с версией SQL Server 2000. Теперь для установки требуется инсталлятор Windows Installer 3.0 или выше, являющийся частью пакетов обновления Windows Server 2003 Service Pack 1 (и выше) и Windows XP Professional Service Pack 2 (и выше). При установке SQL Server 2005 на другую операционную систему необходимо загрузить инсталлятор Windows Installer 3.0 с сайта Центра загрузки Microsoft, расположенного по адресу www.microsoft.com/download. Инсталлятор Windows Installer не только упростит процесс установки, но и об-легчит изменение установленных компонентов. Он позволит: производить обновления непосредственно, используя мастер установки; устанавливать дополнительные компоненты или экземпляры сервера, повторно запуская мастер установки; обслуживать установленные компоненты при помощи компонента панели управ-ления Add or Remove Programs (Установка и удаление программ); продолжить прерванное обновление или установку, используя компонент панели управления Add or Remove Programs (Установка и удаление программ). Для установки экземпляра ядра базы данных SQL Server 2005 выполните следу-ющую последовательность действий. 1. На сервере войдите в систему, используя учетную запись с административными привилегиями. Затем вставьте компакт-диск с дистрибутивом SQL Server 2005 в дисковод для компакт-дисков. Совет Ведите подробную запись выполняемых действий. Четко определите сервер, экземпляр сервера и выбранную конфигурацию установки. Эта информация может по-надобиться в дальнейшем. 2. При включенном автозапуске программа установки SQL Server 2005 запустится автоматически. В противном случае дважды щелкните мышью файл Splash.hta, который находится в папке Servers на компакт-диске. 3. На появившейся стартовой странице в разделе Install (Установить) щелкните ссылку Server components, tools, Books Online и samples (Серверные компоненты, утилиты, электронная документация SQL Server и примеры). Будет отображено диалоговое окно End User License Agreement (Условия лицензионного соглаше-ния конечного пользователя). Установите флажок I accept the licensing terms and conditions (Я принимаю условия данного лицензионного соглашения) и щелкните кнопку Next (Далее). 4. Если это первый запуск мастера установки, для определения состояния требуемых служб и компонентов запускается мастер обновления компонентов SQL Server. В случае недостающих компонентов щелкните кнопку Install (Установить) для их установки, как показано на рис. 2-1; а по завершении процесса щелкните кнопку Next (Далее).
Установка Microsoft SQL Server 2005 Глава 2 31 Рис. 2-1. Установка компонентов, необходимых для функционирования Microsoft SQL Server 2005 Примечание Мастер обновления компонентов SQL Server проверяет конфигурацию и доступность таких компонентов, как WMI, MSXML, IIS, Internet Explorer и COM+. Он также проверяет конфигурацию операционной системы, установленные пакеты обнов-ления, разрешения на использование папки установки по умолчанию, оперативную память и аппаратное обеспечение. 5. Когда появится первая страница мастера установки SQL Server, щелкните кнопку Next (Далее). Мастер произведет проверку системной конфигурации. При выво-де каких-либо сообщений об ошибках запишите их и выполните необходимые действия для устранения. Если такие действия не требуются, для продолжения установки щелкните кнопку Next (Далее). Совет Время от времени для продолжения процесса установки вам может потребоваться перезагрузка системы. После перезагрузки мастер установки не запускается автомати-чески, поэтому повторите процесс, начиная с пункта 1. 6. На странице Registration Information (Регистрационная информация) введите ваше имя, имя компании и 25-значный ключ, обозначенный на компакт-диске. После этого щелкните кнопку Next (Далее). 7. На странице Components to Install (Компоненты для установки), показанной на рис. 2-2, указаны компоненты для установки. : SQL Server Позволяет установить экземпляр SQL Server. Также можно инстал-лировить SQL Server 2005 как часть кластера. Если при проверке конфигурации системы кластер был обнаружен, флажок Create a SQL Server failover cluster (Создать отказоустойчивый кластер SQL Server) установлен по умолчанию. : Analysis Services (Аналитические службы) Устанавливает экземпляр Analysis Server (Аналитический сервер). Также позволяет установить Analysis Server (Аналитический сервер) как часть кластера. Если при проверке конфигурации системы кластер был обнаружен, флажок Create a SQL Server failover cluster (Создать отказоустойчивый кластер SQL Server) установлен по умолчанию.
32 Часть I Основы администрирования Microsoft SQL Server 2005 Рис. 2-2. Страница выбора компонентов для установки : Reporting Services (Службы отчетов) Настраивает сервер как Report Server (Сервер отчетов). Для его функционирования необходимы IIS и .NET Framework 2.0 и выше. Для отправки отчетов также требуется установка почтового сервера, поддерживающего протокол SMTP (Simple Mail Transfer Protocol, про-стой протокол обмена электронной почтой), или знание имени корпоративного шлюза Microsoft Exchange. : Notification Services (Службы уведомлений) Устанавливает ядро службы уведомлений и компоненты для генерирования и отправки уведомлений. : Integration Services (Службы интеграции) Выполняет установку SQL Server Integration Services (Службы интеграции SQL Server), позволяющих органи-зовать извлечение, преобразование и загрузку данных. : Workstation components, Books Online and development tools (Компонен-ты рабочей станции, электронная документация SQL Server и инструменты разработки) Дает возможность установить компоненты SQL Native Client, электронную документацию и инструментарий разработки. Установив флажки возле выбранных компонентов, щелкните кнопку Next (Далее). Примечание Если на странице Components to Install (Компоненты для установки) щел-кнуть кнопку Advanced (Дополнительно), вместо установки флажков можно точнее указать набор компонентов, которые следует включить. Например, выбрать инсталляцию только файлов данных для SQL Server Database Services (Службы баз данных SQL Server), но не устанавливать компоненты репликации или полнотекстового поиска. Таким образом можно инсталлировать SQL Server с одним ядром базы данных. 8. Как показано на рис. 2-3, теперь требуется определить тип устанавливаемого экземпляра. Для экземпляра по умолчанию выберите положение переключателя Default instance (Экземпляр по умолчанию) и щелкните кнопку Next (Далее). Чтобы установить именованный экземпляр SQL Server, выберите положение пере-ключателя Named instance (Именованный экземпляр), затем в предоставляемом поле введите имя экземпляра и щелкните кнопку Next (Далее).
Установка Microsoft SQL Server 2005 Глава 2 33 Рис. 2-3. Определение типа устанавливаемого экземпляра: по умолчанию или именованный Совет На один компьютер можно установить только один экземпляр по умолчанию. Если такой уже существует, выбирайте переключатель Default Instance (Экземпляр по умолчанию) только в случае его обновления. Имя экземпляра должно отвечать пра-вилам именования неограниченных идентификаторов, его длина не может превышать 16 символов. При вводе неправильного имени экземпляра отображается сообщение об ошибке. Чтобы иметь возможность продолжить установку, неправильное имя придется изменить. 9. На странице Service Account (Служебная учетная запись), как показано на рис. 2-4, определите, каким образом будут выполняться службы SQL Server и SQL Server Agent, а в слу чае необходимости также Analysis Services (Аналитические службы) и Reporting Services (Службы отчетов), и затем щелкните кнопку Next (Далее). Имеются следующие возможности. : Индивидуальная настройка служебных учетных записей Если установить флажок Customize for each service account (Индивидуальная настройка для каждой служебной учетной записи), то можно настроить каждую служебную запись индивидуально. Перед тем как продолжить установку, используйте рас-крывающийся список Service (Служба) для выбора службы и определите для нее необходимые индивидуальные параметры. : Не определять индивидуальные параметры для служебных учетных запи-сей В этом случае встроенная системная учетная запись или учетная запись пользователя определенного домена назначается для всех служб SQL Server. Если серверу требуются ресурсы только на локальном компьютере, используйте системную учетную запись. В противном случае - учетную запись пользователя домена. : Настройка запуска служб Установка соответствующих флажков означает, что служба должна быть запущена по завершению инсталляции. Служба SQL Server выбрана по умолчанию. Можно также выбрать службы SQL Server Agent и SQL Server Browser.
34 Часть I Основы администрирования Microsoft SQL Server 2005 Рис. 2-4. Страница Service Account с вариантами настройки для запуска служб SQL Server Совет Для экземпляра SQL Server, который будет изолирован от других серверов, функ-ционировать независимо и не подключаться к другим серверам в сети, используйте системную учетную запись. Действия, что разрешено выполнять службе, конечно, за-висят от прав системной учетной записи. Если необходим доступ к ресурсам на других серверах, вместо предоставления дополнительных прав системной учетной записи ис-пользуйте учетные записи пользователя домена и присвойте им надлежащий уровень полномочий. Примечание Хотя службе SQL Server не требуются привилегии учетной записи адми-нистратора, службе SQL Server Agent они в не которых случаях нужны. В частности, для создания пользователем, не являющимся администратором SQL Server, заданий типов CmdExec (вызов команды операционной системы) и ActiveX Script (сценарий ActiveX), а также для использования возможности автоматического перезапуска. Кроме того, в слу-чае настройки Reporting Services (Службы отчетов), если база данных сервера отчетов находится на удаленном сервере, нужно применить учетную запись пользователя доме на. 10. Для настройки параметров аутентификации используется страница Authentication Mode (Режим аутентификации). Экземпляр SQL Server может работать в режиме аутентификации Windows, в котором для соединений с экземпляром SQL Server используются только учетные записи домена, и в смешанном режиме, предоставля-ющем доступ к экземпляру SQL Server с помощью как учетных записей домена, так и учетных записей SQL Server (logins). В смешанном режиме встроенную учетную запись администратора (sa) следует защитить надежным паролем (в надежном пароле нужно использовать строчные и прописные буквы, цифры и специальные символы, что усложняет его угадывание). Щелкните кнопку Next (Далее). 11. На странице Collation Settings (Параметры сопоставления) определите, как SQL Server будет сортировать данные (рис. 2-5). Если установить флажок Customize for each service account (Индивидуальная настройка для каждой служебной учетной записи), можно использовать раскрывающийся список Service (Служба) для раздельной настройки параметров для служб SQL Server и Analysis Services (Аналитические службы). Чтобы продолжить, щелкните кнопку Next (Далее).
Установка Microsoft SQL Server 2005 Глава 2 35 Рис. 2-5. Страница Collation Settings Примечание Для назначения указателя сопоставления (Collation Designator) по умолчанию используются настройки языка и региональных стандартов (locale) операционной системы Windows, установленной на сервере, например Latin1_General или Cyrillic_General. Как правило, эти настройки по умолчанию не следует изменять. Сортировки Binary (бинарная) и Case-sensitive (с учетом регистра) являются наиболее быстрыми. При установке сорти-ровки Binary (бинарная) другие возможности становятся недоступными. Сопоставления SQL Collations применяются для обеспечения совместимости с предыдущими версиями SQL Server. Они не используются в Analysis Services (Аналитические службы). Внимание! Хотя значения сопоставления можно изменить для отдельных баз данных, на уровне всего SQL Server это невозможно сделать без перестройки системной БД master. Только таким образом вы отсоедините остальные базы данных на сервере, делая их непригодными к использованию. Более подробно этот процесс описывается в разделе "Изменение сопоставления и перестройка БД Master" главы 6. 12. При настройке Reporting Services (Службы отчетов) укажите виртуальные папки, которые будут использоваться для Report Server (Сервер отчетов) и Report Manager (Диспетчер отчетов), и затем щелкните кнопку Next (Далее). Доступ к этим папкам можно получить через браузер, введя такие адреса: : для экземпляра по умолчанию: http://server_name/directory_name, где ser ver_name является именем узла или доменным именем серверного компьютера, а directory_name - именем виртуальной папки для Report Server (Сервер отчетов) или Report Manager (Диспетчер отчетов), например: http://corprs17/reports; : для именованного экземпляра: http://server_name/directory_name$instance_name, где server_name будет именем узла или доменным именем серверного компью-тера, directory_name - именем виртуальной папки для Report Server (Сервер отчетов) или Report Manager (Диспетчер отчетов), а instance_name - именем эк-земпляра SQL Server, к которому вы подключаетесь, например http://corprs17/reports$wbapp05. 13. На странице настройки Reporting Services (Службы отчетов) укажите, будет ли экземпляр сервера отчетов использовать конфигурацию по умолчанию или же вы настроите его позже. Щелкните кнопку Details (Подробно), чтобы определить 
36 Часть I Основы администрирования Microsoft SQL Server 2005 значения для имени, виртуальных папок и настроек SSL сервера отчетов. С параме-трами по умолчанию сервер отчетов устанавливается на тот экземпляр SQL Server, который вы настраиваете в данный момент, и имена его компонентов отображают имя этого экземпляра. Поэтому при установке экземпляра SQL Server с именем CustData на компьютер с именем EngDbSrv12 сервер отчетов по умолчанию будет ReportServer$CustData, а виртуальные папки по умолчанию - http://engdbsvr12/ReportServer$CustData и http://engdbsvr12/Reports$CustData соответственно. Для продолжения щелкните кнопку Next (Далее). 14. На странице Error And Usage Report Settings (Настройки отчетов об ошибках и использовании программного обеспечения) укажите, будут ли в автоматиче-ском режиме формироваться отчеты о критических ошибках и использовании программного обеспечения, затем щелкните кнопку Next (Далее). По умолчанию сведения об ошибках отсылаются с применением протокола HTTPS (hypertext transfer protocol secure, безопасный протокол обмена гипертекстовой информацией) в Microsoft или на назначенный корпоративный сервер отчетов об ошибках, если он сконфигурирован при настройке групповой политики службы каталогов Active Directory. Отчеты об использовании программного обеспечения SQL Server отсылаются в Microsoft. Эта возможность также называется Customer Feedback Reporting (Создание отчетов с отзывами пользователей). 15. Для начала процесса инсталляции щелкните кнопку Install (Установить). На странице Setup Progress (Ход установки) отображаются устанавливаемые компо-ненты и ход инсталляции. По завершении процесса отметьте статус каждого из установленных компонентов и проверьте файл журнала инсталляции на предмет возможных проблем во время установки. Щелкните кнопку Next (Далее), затем кнопку Finish (Готово) для завершения установки. Совет Notification Services (Службы уведомлений) интегрированы с Microsoft .NET Framework. Это позволяет применить управляемый код со службами уведомлений без регистра-ции их сборки. Однако при использовании неуправляемого кода сборку служб уведомлений нужно зарегистрировать. Из командной строки с помощью команды CD перейдите в папку, где установлена текущая версия .NET Framework. Потом с помощью утилиты Regasm.exe зарегистрируйте сборку Microsoft.SqlServer.NotificationServices.dll для Notification Services (Службы уведомлений), введя следующую команду: regasm /codebase /tlb sqlserver_directory\ microsoft.sqlserver.notificationservices.dll" где sqlserver_directory - полный путь к папке установки SQL Server, например: regasm /codebase /tlb "%ProgramFiles%\Microsoft SQL Server\90\ NotificationServices\9.0.242\bin\microsoft.sqlserver.notificationservices.dll" Добавление компонентов и экземпляров SQL Server отслеживает, какие компоненты были установлены, а какие - нет. Если возникнет необходимость добавить компоненты и экземпляры, выполните следующую последовательность действий. 1. На сервере войдите в систему, используя учетную запись с административными привилегиями. Затем вставьте компакт-диск с дистрибутивом SQL Server 2005 в дисковод для компакт-дисков. 2. При включенном автозапуске программа установки SQL Server 2005 запустится автоматически. В противном случае дважды щелкните мышью файл Splash.hta, который находится в папке Servers на компакт-диске.
Установка Microsoft SQL Server 2005 Глава 2 37 3. На появившейся стартовой странице в разделе Install (Установить) щелкните ссылку Server components, tools, Books Online и samples (Серверные компоненты, утилиты, электронная документация SQL Server и примеры). Будет отображено диалоговое окно End User License Agreement (Условия лицензионного соглаше-ния конечного пользователя). Установите флажок I accept the licensing terms and conditions (Я принимаю условия данного лицензионного соглашения) и щелкните кнопку Next (Далее). 4. Когда появится первая страница мастера установки SQL Server, щелкните кнопку Next (Далее). Мастер произведет проверку системной конфигурации. При выво-де каких-либо сообщений об ошибках запишите их и выполните необходимые действия для устранения. Если такие действия не требуются, для продолжения установки щелкните кнопку Next (Далее). 5. Затем программа установки произведет поиск установленных компонентов. На странице Registration Information (Регистрационная информация) введите ваше имя, имя компании и 25-значный ключ, обозначенный на компакт-диске. После этого щелкните кнопку Next (Далее). 6. На странице Components to Install (Компоненты для установки) выберите допол-нительные компоненты, предназначенные для установки. Вот несколько рекомен-даций, которые могут вам пригодиться. : Когда SQL Server Database Services (Службы баз данных SQL Server) и эк-земпляр SQL Server будут установлены, на странице Instance Name (Имя эк-земпляра) появится кнопка Installed Instances (Установленные экземпляры). Щелкнув ее, можно посмотреть подробности конфигурации компонентов для установленных экземпляров SQL Server, Analysis Services (Аналитические службы) и Reporting Services (Службы отчетов). : Если на странице Instance Name (Имя экземпляра) при установленном экземпля-ре по умолчанию выбрать положение переключателя Default Instance (Экзем п ляр по умолчанию), программа установки воспримет это как добавление компонен-тов экземпляра по умолчанию. На странице Existing components (Имеющиеся компоненты), которая появляется после щелчка кнопки Next (Далее), можно выбрать компоненты для установки. : Если же выбрать положение переключателя Named Instance (Именованный экземпляр) и ввести имя, программа установки воспримет это как установку указанного именованного экземпляра или добавление к нему компонентов. Обслуживание установленных компонентов Вышеприведенный процесс установки нельзя применять для обслуживания существу-ющих компонентов. Если возникает необходимость их изменить, используйте утилиту панели управления Add or Remove Programs (Установка и удаление программ). В ее окне каждый компонент SQL Server 2005 представлен отдельным пунктом в списке Currently installed programs (Установленные программы), как показано на рис. 2-6. Основными вариантами действий являются Change (Изменить) и Remove (Удалить). Для запуска мастера установки SQL Server 2005 щелкните кнопку Change (Изменить). Мастер позволяет использовать программу установки как для измене-ния установленных компонентов и их частей, так и для их полного удаления. Чтобы полностью удалить выбранный компонент, можно обойтись и без мастера установки: для этого щелкните кнопку Remove (Удалить). Если возникает необходимость изме-нить несколько компонентов, нужно выбирать их и работать с ними по очереди.
38 Часть I Основы администрирования Microsoft SQL Server 2005 Рис. 2-6. Компоненты панели управления Add or Remove Programs Для изменения конфигурации какого-либо компонента SQL Server выполните следующую последовательность действий. 1. В компоненте панели управления Add or Remove Programs (Установка и удаление программ) выберите Microsoft SQL Server 2005, затем щелкните кнопку Change (Изменить). Когда запустится мастер обслуживания SQL Server 2005, выберите экземпляр сервера, который следует изменить или обслужить, и щелкните кнопку Next (Далее). 2. На странице Feature Maintenance (Обслуживание функциональных возможностей) выберите компонент, с которым вы хотите работать, например Analysis Services (Аналитические службы) или Database Engine (Ядро базы данных), затем щелкните кнопку Next (Далее). Запустится проверка системной конфигурации. 3. На этом этапе запускается мастер установки SQL Server. Чтобы позволить програм-ме установки произвести проверку системной конфигурации, щелкните кнопку Next (Далее). Когда проверка системной конфигурации завершит свою работу, от-метьте возможные ошибки и предпримите действия для их исправления. Щелкните кнопку Next (Далее). 4. После проверки программой установленных компонентов отобразится страница Change Or Remove Instance (Изменить или удалить экземпляр). Щелкните на ней кнопку Change Installed Components (Изменить установленные компоненты). 5. На странице Feature Selection (Выбор функциональных возможностей) дважды щелкните компонент, который нужно изменить. Это раскроет соответствующий ему узел дерева и отобразит все подкомпоненты. Щелкните значок слева от на-звания подкомпонента и в появившемся меню укажите, желаете ли вы, чтобы он был установлен, или его следует удалить. 6. Когда новая конфигурация для компонента будет определена, щелкните кнопку Next (Далее), затем кнопку Install (Установить).
Установка Microsoft SQL Server 2005 Глава 2 39 Удаление SQL Server Используйте компонент панели управления Add or Remove Programs (Установка и уда-ление программ) для удаления SQL Server или его компонентов. Каждый экземпляр ядра базы данных следует удалять отдельно. Для удаления экземпляра SQL Server выполните следующую последовательность действий. 1. В компоненте панели управления Add or Remove Programs (Установка и удаление программ) выберите Microsoft SQL Server 2005, затем щелкните кнопку Remove (Удалить). Запустится мастер удаления SQL Server 2005. 2. На странице Component Selection (Выбор компонентов) выберите экземпляр и/или компоненты, предназначенные для удаления. 3. Щелкните кнопку Next (Далее), затем кнопку Finish (Готово). Мастер удаления SQL Server 2005 удалит выбранные экземпляры и/или компоненты. Если про-грамме установки потребуется доступ к компакт-диску дистрибутива SQL Server, будет отображена просьба вставить компакт-диск в дисковод. При необходимости удалить SQL Server 2005 полностью используйте компонент панели управления Add or Remove Programs (Установка и удаление программ) для последовательного удаления всех экземпляров SQL Server. Затем удалите компоненты в таком порядке: Microsoft SQL Server Native Client; Microsoft SQL Server Setup Support Files.
Глава 3 Настройка поверхности атаки, доступа к серверу и сетевых протоколов При управлении доступом к серверу следует обратить особое внимание на настрой-ку служб, компонентов и сетевых протоколов SQL Server, поскольку для каждого экземпляра SQL Server это можно выполнить индивидуально. Данные настройки устанавливают уровень безопасности и непосредственно влияют на поверхность атаки сервера. Они определяют: кто и каким образом может получить доступ к серверу; какие службы SQL Server запускаются автоматически при загрузке системы, а ка-кие - вручную по необходимости; каким образом компоненты SQL Server могут подключаться к удаленным ресурсам или быть доступными для подключения из удаленных ресурсов. Ограничивая таким образом доступ к некоторым ресурсам сервера, вы уменьша-ете его поверхность атаки, уязвимую для злонамеренных действий, что усиливает безопасность сервера, а также способствует повышению общей производительности, поскольку будут использоваться только необходимые службы и компоненты. Доступ клиентов к SQL Server управляется с помощью настройки параметров сетевых протоколов клиента. Доступ SQL Server к локальным или удаленным ре-сурсам управляется посредством настройки служб и сетевых протоколов сервера. Можно управлять доступом клиентов, службами SQL Server и сетевыми настройка-ми, используя утилиты SQL Server 2005 Surface Area Configuration или SQL Server Configuration Mana ger. Оптимально, когда они используются совместно, о чем и будет рассказано в этой главе. Предварительная настройка Утилиты SQL Server 2005 Surface Area Configuration и SQL Server Configuration Manager находятся в меню Start (Пуск). Получить к ним доступ можно, открыв коман-дой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005. Чтобы запустить каждую утилиту отдельно, нужно набрать в командной строке команду sqlsac или sqlservermanager.msc. По умолчанию обе утилиты подклю-чаются к локальному компьютеру. SQL Server 2005 Surface Area Configuration можно использовать для настройки удаленного компьютера. Для этого наберите команду: Sqlsac remote_computer где remote_computer - имя или адрес IP удаленного компьютера, с которым необхо-димо работать, например: Sqlsac CorpSvr04
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 41 Совет По умолчанию исполняемый файл SQL Server 2005 Surface Area Configuration - Sqlsac.exe - находится в каталоге %Program Files%\Microsoft SQL Server\90\Shared. Этот каталог по умолчанию не добавляется в путь поиска (PATH), то есть в спи сок каталогов, где операционная система ищет исполняемые файлы. Если планируется использовать данную утилиту, можно добавить каталог в путь поиска, выполнив следующую последо-вательность действий. 1. Откройте окно командной строки. Измените текущий каталог диска C, введя команд у: cd c:\ 2. Сохраните текущий путь поиска в файл, набрав команду: path > origpath.txt 3. Используйте следующую команду, чтобы изменить путь поиска для текущего сеанса командной строки: path = %path%;%ProgramFiles%\Microsoft SQL Server\90\Shared 4. Проверьте правильность установки пути поиска такой командой: path 5. Запишите текущий путь поиска в системный реестр, набрав команду*: setx PATH "%PATH%" При вводе команд точно придерживайтесь указанных выше регистра и синтаксиса. Использование SQL Server 2005 Surface Area Configuration При запуске SQL Server 2005 Surface Area Configuration отображается главное окно (рис. 3-1). Эта утилита может выполнять несколько основных задач: подключаться к определенному серверу SQL Server; настраивать параметры служб определенного сервера; Рис. 3-1. Главное окно утилиты SQL Server 2005 Surface Area Configuration * Утилита setx.exe не входит в стандартную поставку Windows. Она устанавливается вместе с программными пакетами Resource Kit Tools либо Support Tools (в зависимости от версии Windows). - Прим. ред.
42 Часть I Основы администрирования Microsoft SQL Server 2005 настраивать параметры соединений с определенным сервером; настраивать функциональные возможности различных компонентов SQL Server. Подключение к удаленной системе SQL Server По умолчанию утилита SQL Server 2005 Surface Area Configuration при запуске под-ключается к локальному компьютеру. Можно изменить компьютер, с которым про-изводится работа, щелкнув ссылку Change Computer (Изменить компьютер), пред-ставленную в главном окне. Отобразится диалоговое окно Select Computer (Выбор компьютера), показанное на рис. 3-2. Если необходимо управлять конфигурацией того же компьютера, на котором запущена эта утилита, выберите положение переключате-ля Local Computer (Локальный компьютер) и щелкните кнопку OK. Если же нужно управлять настройкой удаленного компьютера, выберите положение переключателя Remote Computer (Удаленный компьютер), введите имя удаленного компьютера, на-пример DBSvr05, затем щелкните кнопку OK. Рис. 3-2. Диалоговое окно Select Computer Настройка параметров служб SQL Server 2005 Surface Area Configuration можно также использовать для просмо-тра и установки типа запуска служб SQL Server. Запустите SQL Server 2005 Surface Area Configuration, затем щелкните ссылку Surface Area Configuration For Services And Connections (Настройка поверхности атаки для служб и соединений), которая находится в главном окне. Отобразится диалоговое окно Surface Area Configuration For Services And Connections (Настройка поверхности атаки для служб и соедине-ний), после чего будет произведено определение конфигурация служб и соединений для всех запущенных экземпляров SQL Server 2005 на компьютере, с которым уста-новлено соединение. Когда определение будет закончено, в левой части диалогового окна в виде иерархической структуры отобразится список всех обнаруженных служб и компонентов. Для организации элементов дерева в необходимом порядке (рис. 3-3) ис-пользуйте одну из вкладок: View by instance (Просмотр по экземплярам) либо View by component (Просмотр по компонентам). В зависимости от установленных компонентов могут быть отображены следующие элементы списка. Database Engine (Ядро базы данных) Запускается как служба с выводимым именем SQL Server (instance_name), где instance_name - имя экземпляра. Испол-няемым файлом для данной службы является Sqlservr.exe, который запускается для экземпляра, указанного в этот момент в командной строке, например для экземпляра по умолчанию MSSQLSERVER: "C:\Program Files\Microsoft SQLServer\MSSQL.1\MSSQL\Binn\ sqlservr.exe" -sMSSQLSERVER
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 43 Рис. 3-3. Параметры конфигурации поверхности атаки Примечание Несмотря на то что некоторые компоненты, такие как ядро базы данных, можно запускать из командной строки, обычно это делается с помощью соответствующей графической утилиты администрирования или команды NET START. При запуске ядра базы данных вручную указываются определенные параметры (подробно описанные в главе 4). Также их можно установить, дважды щелкнув мышью службу SQL Server для экземпля-ра, с которым требуется работать, в компоненте панели управления Services (Службы). В диалоговом окне service_name (computer_name) - properties, где service_name - вы-водимое имя службы, computer_name - имя компьютера, щелкните кнопку Stop (Стоп) для остановки службы (если она работает). Введите параметры в поле Start Parameters (Параметры запуска), затем щелкните кнопку Start (Пуск) для запуска службы. Analysis Services (Аналитические службы) Запускается как служба с выводи-мым именем SQL Server Analysis Services (instance_name), где instance_name - имя экземпляра. Исполняемым файлом для этой службы является Msmdsrv.exe; кроме того, служба использует определенный файл инициализации, указанный в команд-ной строке при запуске, например: "C:\Program Files\Microsoft SQL Server\MSSQL.2\OLAP\bin\msmdsrv.exe" -s "C:\Program Files\Microsoft SQLServer\MSSQL.2\OLAP\Config\msmdsrv.ini" Файл инициализации (Msmdsrv.ini) определяется с помощью языка разметки XML; не следует редактировать его вручную. Reporting Services (Службы отчетов) Запускается как служба с выводимым именем Report Server (instance_name), где instance_ame - имя экземпляра. Ис-полняемым файлом для нее является ReportingServicesService.exe, запускаемый набором командной строки, подобной следующей: "C:\Program Files\Microsoft SQL Server\MSSQL.3\ReportingServices\ReportServer\bin\ ReportingServicesService.exe"
44 Часть I Основы администрирования Microsoft SQL Server 2005 SQL Server Agent (Агент SQL Server) Запускается как служба с выводимым именем SQL Server Agent (instance_name), где instance_name - имя экземпляра. Исполняемым файлом для нее является Sqlagent90.exe, который запускается для экземпляра, указанного в этот момент в командной строке, например: "C:\Program Files\Microsoft SQLServer\MSSQL.1\MSSQL\Binn\ SQLAGENT90.EXE" -i MSSQLSERVER Full-Text Search (Полнотекстовый поиск) Запускается как служба с выводимым именем SQL Server FullText Search (instance_name), где instance_name - имя экзем-пляра. Исполняемым файлом для нее является Msftesql.exe, который запускается для экземпляра, указанного в этот момент в командной строке, например: "C:\Program Files\Microsoft SQLServer\MSSQL.1\MSSQL\Binn\ msftesql.exe" -s:MSSQL.1 -f:MSSQLSERVER Integration Services (Службы интеграции) Запускается как служба с выводимым именем SQL Server Integration Services. Исполняемым файлом для нее является Msdtssrvr.exe, который запускается набором командной строки, подобной следу-ющей: "C:\Program Files\Microsoft SQL Server\90\DTS\Binn\MsDtsSrvr.exe" SQL Server Browser (Обозреватель SQL Server) Запускается как служба с вы-водимым именем SQL Server Browser. Исполняемым файлом для нее является Sqlbrowser.exe, который запускается набором командной строки, подобной сле-дующей: "C:\Program Files\Microsoft SQL Server\90\Shared\sqlbrowser.exe" Для просмотра состояния какой-либо службы раскройте узел (узлы), соответству-ющий компоненту экземпляра SQL Server, с которым будете работать. При выборе компонента или службы отображаются подробные данные о них, включая такие: Service Name (Имя службы) - внутреннее имя службы, используемое операци-онной системой; Display Name (Выводимое имя) - имя службы, отображаемое в интерфейсе поль-зователя; Description (Описание) - описание компонента SQL Server 2005; Startup Type (Тип запуска) - возможные типы запуска Automatic (Авто), Manual (Вручную) или Disabled (Отключено). Service Status (Состояние службы) - состояние службы на время последнего обновления, например Running (Работает) или Stopped (Остановлена). Все службы SQL Server, которые не используются в данный момент или не требу-ются в вашей конкретной конфигурации системы, должны быть настроены на запуск вручную и остановлены (если они были запущены). Для изменения типа запуска службы в раскрывающемся списке Startup type (Тип запуска) выберите нужный и щелкните кнопку Apply (Применить). Чтобы остановить запущенную службу, щел-кните кнопку Stop (Стоп). Если вы хотите вообще избежать запуска службы, вы-берите тип запуска Disabled (Отключено). Помните, что служба SQL Server Browser (Обозреватель SQL Server) предоставляет клиентским компьютерам информацию о соединениях. Поэтому, если клиенты подключаются к SQL Server удаленно, эта служба в большинстве случаев необходима.
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 45 Примечание Для управления службами SQL Server также можно использовать компонент панели управления Services (Службы) и утилиту администрирования SQL Server Configuration Manager. С помощью компонента Services (Службы) управление службами SQL Server производится так же, как и любыми другими службами. SQL Server Configuration Manager позволяет настроить учетную запись, под которой служба запускается, тип запуска и со-стояние службы. Если применимо, можно также настраивать дополнительные свойства, такие как Dump Directory (Каталог дампа), Error Reporting (Отчет об ошибках) и Startup Parameters (Параметры запуска). Преимущество утилит администрирования SQL Server 2005 Surface Area Configuration и SQL Server Configuration Manager над компонентом панели управления Services (Службы) заключается в том, что они организовывают информацию в более удобном виде и предоставляют доступ только к службам SQL Server, а не ко всем службам операционной системы. Настройка параметров соединений С SQL Server можно устанавливать локальные, удаленные и выделенные соединения. Локальные соединения используются приложениями, работающими на том же ком-пьютере, где запущен и SQL Server. Удаленные соединения применяются клиента-ми, подключающимися к серверу, приложениями, запущенными на других серверах, а также другими серверами SQL. Выделенные соединения являются специальной функциональной возможностью, используемой администраторами для обслуживания SQL Server (и рассматривать ее нужно именно как настраиваемую возможность, а не как тип допустимого соединения). Примечание Настройки по умолчанию для соединений зависят от настроек учетных записей, под которыми службы запускаются, от установленных компонентов, а также от других па раметров установки (например, обновленная она или новая). Как правило, новая установка конфигурируется только для использования локальных соединений. Но когда установлены дополнительные компоненты, такие как Reporting Services (Службы отче-тов) или Notification Services (Службы уведомлений), типичная конфигурация включает и локальные, и удаленные соединения. Несмотря на то что конфигурация, позволяющая только локальные соединения, обеспечивает гораздо более высокий уровень безопасности, использовать SQL Server в такой конфигурации можно не всегда. Более типичной является другая ситуация, когда требуется разрешить входящие соединения от удаленных клиентов и серверов. Применяемые в этом случае для соединений сетевые протоколы могут повлиять как на количество используемых системных ресурсов, так и на относительную безопасность сервера. Для удаленных соединений SQL Server 2005 использует протоколы TCP/IP и Named Pipes (Именованные каналы). Но поскольку эти протоколы требуют открытия через брандмауэр определенных, причем разных, портов, сервер можно настроить на применение лишь какого-то одного из них, уменьшая тем самым поверхность атаки. Тем не менее, перед тем как изменять допустимые типы соединений, следует убедить-ся, что все клиенты и приложения настроены для использования соответствующей сетевой библиотеки. Для протокола TCP/IP соединение с SQL Server может устанавливаться как с помощью его стандартного варианта, так и сетевой библиотеки TCP/IP Sockets. Экземпляр SQL Server по умолчанию прослушивает порт TCP 1433; именованным экземплярам порт присваивается динамически, если не определено иначе. В случае клиентских соединений используется порт TCP 1434. Для именованных каналов SQL Server использует сетевую библиотеку Named Pipes. Экземпляр SQL Server по умолчанию устанавливает соединение через стандартный сетевой адрес \\.\pipe\sql\ query, именованный экземпляр - через адрес \\.\pipe\MSSQL$instance_name\sql\ query, где instance_na me - имя экземпляра. Чтобы использовать именованные каналы, 
46 Часть I Основы администрирования Microsoft SQL Server 2005 необходимо открыть через брандмауэр определенный диапазон портов - сервер про-слушивает порт TCP 445, а поиск имен NetBIOS производится через порт UDP 139. Широковещательные запросы (b-node broadcasts) для разрешения имен NetBIOS требуют открытия портов UDP 137 и 138, либо можно использовать сервер WINS или файлы LMHOSTS. Примечание SQL Server 2005 также поддерживает протоколы Shared Memory (совместно используемая память) для локальных соединений и VIA (Virtual Interface Architectu re - ар-хитектура виртуального интерфейса) для локальных и удаленных соединений. Протоколы NWLink IPX/SPX и Ap pleTalk больше не поддерживаются. Чтобы проверить или изменить настройку соединений, выполните следующую последовательность действий. 1. Запустите утилиту SQL Server 2005 Surface Area Configuration, затем щелкните ссылку Surface Area Configuration For Services And Connections (Настройка по-верхности атаки для служб и соединений), находящуюся в главном окне. Примечание SQL Server 2005 Surface Area Configuration определяет конфигурацию всех запущенных экземпляров SQL Server 2005 на сервере, с которым установлено соеди-нение. Если вы остановили экземпляр SQL Server, то необходимо снова запустить его, чтобы получить возможность управлять с помощью этой утилиты. Возможно, потребуется закрыть текущее окно и открыть его снова. 2. В диалоговом окне Surface Area Configuration For Services And Connections (На-стройка поверхности атаки для служб и подключений) выберите вкладку View By Instance (Просмотр по экземплярам) и раскройте узел экземпляра SQL Server, с ко-торым будете работать, например экземпляр по умолчанию MSSQLSERVER. 3. Раскройте узел Database Engine (Ядро базы данных) и затем выберите узел Remote Connections (Удаленные соединения), как показано на рис. 3-4. Рис. 3-4. Параметры настройки локальных и удаленных соединений
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 47 4. Если не требуется подключения к серверу удаленных клиентов, приложений и дру-гих серверов, выберите положение переключателя Local Connections Only (Только локальные соединения). В противном случае выберите положение Local And Remote Connections (Локальные и удаленные соединения) и укажите разрешенные типы соединений. Вам будут предложены следующие варианты: : Using TCP/IP Only (Использовать только TCP/IP); : Using Named Pipes Only (Использовать только именованные каналы); : Using both TCP/IP and Named Pipes (Использовать TCP/IP и именованные каналы). 5. Щелкните кнопку Apply (Применить). Управление доступом к функциональным возможностям компонентов Для уменьшения поверхности атаки и улучшения безопасности сервера следует вклю-чить только те функциональные возможности, которые действительно требуются для работы пользователей и приложений. Это ограничит набор способов для злонамерен-ного использования сервера и закроет пути возможной атаки. Хотя конфигурацией поверхности атаки можно управлять через настройку параметров в SQL Server Management Studio и через хранимые процедуры, самым простым способом все же будет использование утилиты администрирования SQL Server 2005 Surface Area Configuration. Она дает возможность управлять всеми запущенными экземплярами Database Engine (Ядро базы данных), Analysis Services (Аналитические службы) и Reporting Services (Службы отчетов). Примечание При стандартной установке большинство функциональных возможно-стей, определяющих поверхность атаки, по умолчанию отключены для улучшения безо-пасности. Чтобы проверить или изменить настройки функциональных возможностей, опреде-ляющих поверхность атаки, выполните следующую последовательность действий. 1. Запустите утилиту SQL Server 2005 Surface Area Configuration, затем щелкните ссылку Surface Area Configuration For Features (Настройка поверхности атаки для функциональных возможностей), которая находится в главном окне. 2. В диалоговом окне Surface Area Configuration For Features (Настройка поверхности атаки для функциональных возможностей) выберите вкладку View By Instance (Просмотр по экземплярам) и раскройте узел экземпляра SQL Server, с которым будете работать, например экземпляр по умолчанию MSSQLSERVER. 3. В табл. 3-1 перечислены функциональные возможности компонентов, определя-ющие поверхность атаки, которыми можно управлять для Database Engine (Ядро базы данных), Analysis Services (Аналитические службы) и Reporting Services (Службы отчетов). Выберите возможность, которую необходимо настроить, как по-казано на рис. 3-5. 4. Включите возможность, установив соответствующий флажок. Либо, при необхо-димости, отключите ее, сняв флажок. 5. Щелкните кнопку Apply (Применить).
48 Часть I Основы администрирования Microsoft SQL Server 2005 Рис. 3-5. Флажок для включения или выключения функциональной возможности, определяющей поверхность атаки Табл. 3-1. Функциональные возможности компонентов, определяющие поверхность атаки Функциональная возможность Описание Database Engine (Ядро базы данных) Ad Hoc Remote Queries (Удаленные нерегламентированные запросы) Функции openrowset() и opendatasource() могут исполь-зовать произвольные подключения для работы с удален-ными источниками данных, без специально настроенных администратором связанных или удаленных серверов. Если приложения или сценарии используют указанные функции, их следует разрешить. В противном случае эта возможность должна быть отключена CLR Integration (Интеграция с общеязыковой исполняющей средой) Интеграция с общеязыковой исполняющей средой по-зволяет писать хранимые процедуры, триггеры, пользо-вательские типы данных и пользовательские функции, используя VB.NET, C# и любые другие языки, поддержи-ваемые .NET Framework. Если приложения или сценарии используют языки .NET Framework, включите эту воз-можность. В противном случае ее следует отключить Database Mail Компонент Database Mail пришел на смену службе SQL Mail. Для отправки сообщений электронной почты, ис-пользующих протокол SMTP, рекомендуется именно он. Включите эту возможность, когда необходимо, чтобы приложения и сценарии использовали хранимую проце-дуру sp_send_dbmail для отправки сообщений электрон-ной почты (для этого следует создать БД почтового сервера, выполнив на сервере сценарий %ProgramFiles%\ Microsoft SQL Server\MSSQL.1\MSSQL\Install\Install_ DBMail_Upgrade.sql, и необходимые почтовые профили БД). В противном случае эта возможность должна быть отключена
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 49 Функциональная возможность Описание DAC (выделенное соединение администратора) Запуская утилиту командной строки SQLCMD с параме-тром -A, администраторы могут установить выделенное соединение с SQL Server для выполнения операций обслу живания из командной строки. Соединение может быть локальным и удаленным. По умолчанию разрешены только локальные выделенные соединения. Если необ-ходимо разрешить удаленные выделенные соединения, включите эту возможность. В противном случае она должна быть отключена Native XML Web Services (Собственные веб-службы XML) С помощью Native XML Web Services можно получить доступ к SQL Server через протокол HTTP, используя сообщения SOAP (simple object access protocol*, простой протокол доступа к объектам). Сообщения SOAP содер-жат текстовые команды, которые форматируются с помощью XML. Если планируется использовать SOAP для обмена данными и для этого были настроены необходимые конечные точки HTTP, можно установить состояние каждой конечной точки как Started (Запуще-на), Stopped (Остановлена) или Disabled (Отключена). Если конечные точки HTTP не были определены, эта возможность недоступна для настройки и управления. Следует отметить, что веб-служба Report Server (Сервер отчетов), компонент ядра базы данных SQL Server Service Broker (Брокер служб SQL Server) и компоненты, осуществляющие зеркальное отображение БД, использу-ют Native Web Services (Собственные веб-службы XML), однако настраиваются отдельно OLE Automation (Автоматизация OLE) Автоматизация OLE позволяет в пакетах инструкций Transact-SQL, хранимых процедурах и триггерах обращаться к объектам SQL DMO (SQL Distributed Management Objects, распределенные объекты управления SQL) и пользовательским объектам автоматизации OLE. Включите эту возможность, если необходимо использовать автоматизацию OLE, в том числе расширенные хранимые процедуры sp_OACreate, sp_OADestroy, sp_OAGetErrorInfo, sp_OAGetProperty, sp_OAMethod, sp_OASetProperty и sp_OAStop. В противном случае эта возможность должна быть отключена Service Broker (Брокер служб) Service Broker (Брокер служб) обеспечивает для ядра базы данных организацию очередей сообщений, обмен сообщениями и используется приложениями для связи между экземплярами SQL Server. Если при этом опреде-лены необходимые конечные точки HTTP, состояние каждой из них можно настроить как Started (Запущена), Stopped (Остановлена) или Disabled (Отключена). Если же конечные точки HTTP не были определены, эта возможность недоступна для настройки и управления * В последней официальной спецификации протокола название SOAP уже никак не расшиф-ровывается, поскольку круг решаемых им задач стал гораздо шире, чем просто доступ к объек-там. - Прим. ред. (см. след. стр.) Табл. 3-1. (продолжение)
50 Часть I Основы администрирования Microsoft SQL Server 2005 Функциональная возможность Описание SQL Mail Служба SQL Mail используется для отправки сообщений электронной почты из приложений, поддерживающих протокол SMTP, которые были написаны для предыду-щих версий SQL Server. Если необходимо, чтобы уна-следованные приложения и сценарии использовали хра-нимую процедуру xp_sendmail для отправки сообщений электронной почты из SQL Server, включите эту возмож-ность. В противном случае она должна быть отключена Web Assistant В предыдущих версиях SQL Server хранимые процедуры утилиты Web Assistant Wizard могли быть использованы для генерирования файлов HTML на основании дан-ных SQL Server. В SQL Server 2005 Reporting Services (Службы отчетов) пришли на смену этим хранимым про-цедурам, предоставляя более широкие функциональные возможности и параметры настройки. Если необходимо поддерживать унаследованные приложения или сцена-рии, которые используют хранимые процедуры Web Assistant Wizard, включите эту возможность. В противном случае она должна быть отключена xp_cmdshell Хранимая процедура xp_cmdshell выполняет строки команд, используя командный процессор операционной системы, и возвращает результаты в виде текстовых строк. Когда необходимо, чтобы приложения и сцена-рии запускали команды операционной системы, нужно включить эту возможность. По умолчанию только члены встроенной роли сервера sysadmin могут выполнять хранимую процедуру xp_cmdshel, но можно разрешить выполнять ее и другим пользователям. Для пользовате-лей, являющихся членами роли сервера sysadmin, хра-нимая процедура xp_cmdshell выполняется в контексте безопасности самой службы SQL Server. Для остальных пользователей xp_cmdshell будет выполняться в контек-сте безопасности представительской учетной записи SQL Server Agent (которую можно определить, используя хранимую процедуру xp_sqlagent_proxy_account). Если представительская учетная запись недоступна, запуск xp_cmdshell завершится неудачно Analysis Services (Аналитические службы) Ad Hoc Data Mining Queries (Нерегламентированные за-просы для поиска знаний в данных) Функция openrowset() языка DMX (Data Mining Extensions - расширения языка SQL для поиска знаний в данных) устанавливает соединение с объектом источника данных, используя имя поставщика данных и строку соединения. Это позволяет устанавливать произвольные соединения к удаленным источникам данных и не требует от администратора специально настраивать связанные или удаленные серверы. Вклю-чите эту возможность, если приложения или сценарии используют функцию openrowset() для операций поиска знаний в данных. В противном случае эта возможность должна быть отключена, что не позволит приложениям передавать имя поставщика и строки соединения при использовании функции open rowset() Табл. 3-1. (продолжение)
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 51 Функциональная возможность Описание Anonymous Connections (Аноним-ные соединения) Используя анонимные соединения, неаутентифициро-ванные пользователи могут установить соединение с Analysis Services (Аналитические службы). Включите эту возможность, если приложения и сценарии требуют доступа неаутентифицированных пользователей. В противном случае отключите ее Linked Objects (Связанные объекты) В Analysis Services (Аналитические службы) можно использовать связанные объекты для объединения измерений и групп мер между серверами. Если необходи-мо, чтобы Analysis Server (Аналитический сервер) связы-вал объекты из других экземпляров, установите флажок Enable links to other instances (Разрешить соединения с другими экземплярами). Когда нужно, чтобы другие экземпляры связывали объекты из вашего Analysis Server (Аналитический сервер), установите флажок Enable links from other instances (Разрешить соединения из других экземпляров). Если же связывание измерений и групп мер не используется, снимите оба флажка для отключе-ния этой возможности User-defined Functions (Пользовательские функции) Analysis Services (Аналитические службы) интегрирова-ны с .NET Framework и загружают сборки, содержащие пользовательские функции. Эти функции могут быть написаны с использованием объектов CLR или COM. Объекты и функции CLR имеют интегрированную мо-дель безопасности. Объекты COM не используют такую модель, следовательно, они менее безопасны. Включите эту возможность, если приложения и сценарии использу-ют пользовательские функции COM. В противном случае отключите ее, чтобы разрешить только функции CLR Reporting Services (Службы отчетов) Scheduled Events and Report Delivery (События и доставка отчетов по рас-писанию) В Report Services (Службы отчетов) используются отчеты по требованию и отчеты по расписанию. Обычно при установке Reporting Services (Службы отчетов) оба типа отчетов включены. Если отчеты по расписанию не используются, можно отключить эту возможность, сняв флажок Enable Scheduled Events And Report Delivery (Включить события и доставку отчетов по расписанию) HTTP and Web Service Requests (Запросы HTTP и веб-служб) Для связи компонентов Report Services (Службы отче-тов) используют обмен сообщениями SOAP через прото-кол HTTP. С его помощью также выполняется обработка запросов доступа к адресам URL (Uniform Resource Locator - единообразный определитель местоположения ресурса). Эти возможности управляются веб-службой Report Server (Сервер отчетов) и позволяют работать с Reporting Services (Службы отчетов), используя такие утилиты, как Report Manager (Диспетчер отчетов), Report Builder (Конструктор отчетов) и SQL Server Management Studio. Обычно при установке Reporting Services (Службы отчетов) обработка запросов HTTP и веб-служб включена. Если Reporting Services (Службы отчетов) не используются, отключите эту возможность, сняв флажок Enable Web Service And URL Access (Разрешить доступ веб-служб и доступ к адресам URL) Табл. 3-1. (окончание)
52 Часть I Основы администрирования Microsoft SQL Server 2005 Настройка служб SQL Server Утилита администрирования SQL Server Configuration Manager находится в меню Start (Пуск). Получить к ней доступ можно, открыв командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005\Configuration Tools. Либо воспользуйтесь командной строкой и наберите sqlervermanager.msc (при условии, что вы добавили в путь поиска каталог, где находится этот файл). Эта ути-лита позволяет быстро и эффективно управлять службами SQL Server. Управление состоянием и типом запуска служб SQL Server 2005 Surface Area Configuration предоставляет базовые средства для управ-ления запуском служб и определения типа запуска. Для управления дополнительными возможностями служб следует использовать компонент панели управления Services (Службы) или утилиту SQL Server Configuration Manager. С помощью компонента панели управления Services (Службы) можно управлять службами SQL Server таким же образом, как и любыми другими. SQL Server Configuration Manager позволяет управлять учетной записью, под которой служба запускается, ее типом запуска и состоянием. Некоторые службы имеют дополнительные управляемые возможности, такие как каталог дампа, отчет об ошибках и параметры запуска. Преимущество SQL Server Configuration Manager над компонентом панели управления Services (Службы) заключается в том, что утилита организовывает информацию в более удобном виде и предоставляет доступ лишь к службам SQL Server, а не ко всем службам операци-онной системы. Кроме того, только с ее помощью возможна настройка некоторых дополнительных параметров, например каталога дампа. Для того чтобы с помощью утилиты SQL Server Configuration Manager остановить, запустить, приостановить или продолжить выполнение какой-либо службы, выпол-ните следующую последовательность действий. 1. Запустите утилиту и в панели слева щелкните мышью узел SQL Server 2005 Services (Службы SQL Server 2005). 2. Справа будет отображен список служб, используемый SQL Server и его настро-енными компонентами (рис. 3-6). Поскольку существует два способа работы со службами, отдайте предпочтение какому-то из них. Рис. 3-6. Утилита администрирования SQL Server Configuration Manager : Выберите службу, щелкнув мышью ее имя в окне справа. Используйте кнопки Start (Пуск), Pause (Пауза), Stop (Стоп) и Restart (Перезапустить), располо-женные в панели в верхней части окна, для управления состоянием службы, 
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 53 или щелкните кнопку Properties (Свойства) для отображения диалогового окна свойств службы. : Дважды щелкните левой кнопкой мыши (или один раз правой) службу в окне справа. Используйте команды контекстного меню для управления состоянием службы или выберите в контекстном меню команду Properties (Свойства), чтобы отобразить диалоговое окно свойств службы. Для установки типа запуска службы выполните следующую последовательность действий. 1. Запустите SQL Server Configuration Manager, затем в панели слева щелкните мышью узел SQL Server 2005 Services (Службы SQL Server 2005). 2. Раскройте контекстное меню, щелкнув в окне справа имя службы, и выполните команду Properties (Свойства). 3. Чтобы указать необходимый тип запуска на вкладке Service (Служба) диалогового окна Properties (Свойства), воспользуйтесь раскрывающимся списком Start Mode (Тип запуска). Как показано на рис. 3-7, доступными будут варианты Automatic (Авто), Disabled (Отключено) и Manual (Вручную). Рис. 3-7. Установка типа запуска службы на вкладке Service 4. Щелкните кнопку OK. Настройка учетных записей для запуска служб SQL Server и его компоненты имеют те же права и разрешения, что и учетные записи, под которыми запускаются службы. Эти разрешения используются, когда ядро базы данных или другой компонент SQL Server выполняет операции на локальной системе или в сети. Из раздела "Учетные записи для запуска служб SQL Server" главы 1 вы узнали, что есть два типа учетных записей: системные и доменные. Если SQL Server производит операции только на локальной системе, пользуйтесь системной учетной записью. В противном случае применяйте правильно настроенную учетную запись домена. Собственно говоря, SQL Server позволяет использовать три различные встро-енные учетные записи. Local Service (Локальная служба) Производит операции в режиме системной службы и использует только локальные ресурсы.
54 Часть I Основы администрирования Microsoft SQL Server 2005 Local System (Локальная система/Системная учетная запись) Работает в режи-ме операционной системы (с правом Act As Part Of The Operating System (Работа в режиме операционной системы)) и применяет только локальные ресурсы. Network Service (Сетевая служба) Выполняет операции в режиме сетевой служ-бы и использует как локальные, так и удаленные ресурсы. Чтобы определить встроенную учетную запись для запуска какой-либо службы SQL Server, выполните следующую последовательность действий. 1. Запустите утилиту SQL Server Configuration Manager, затем в панели слева щел-кните мышью узел SQL Server 2005 Services (Службы SQL Server 2005). 2. Раскройте контекстное меню, щелкнув в окне справа имя службы, и выполните команду Properties (Свойства). 3. На вкладке Log On (Вход в систему) диалогового окна Properties (Свойства) вы-берите положение переключателя Built-In Account (Встроенная учетная запись) и в раскрывающемся списке укажите, какую встроенную учетную запись следует использовать. 4. Если служба запущена, нужно остановить ее и запустить снова, чтобы она пере-запустилась с новыми параметрами. 5. Щелкните кнопку OK. Для того чтобы указать учетную запись домена для запуска какой-либо службы SQL Server, выполните следующую последовательность действий. 1. Запустите утилиту SQL Server Configuration Manager, затем в панели слева щел-кните мышью узел SQL Server 2005 Services (Службы SQL Server 2005). 2. Раскройте контекстное меню, щелкнув в окне справа имя службы, и выполните команду Properties (Свойства). 3. На вкладке Log On (Вход в систему) диалогового окна Properties (Свойства) вы-берите положение переключателя This account (С учетной записью), как показано на рис. 3-8. . Рис. 3-8. Настройка учетной записи домена для запуска выбранной службы
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 55 4. В поле Account Name (Имя учетной записи) введите имя учетной записи, а в поле Password (Пароль) - пароль. Если требуется, укажите домен как часть имени учетной записи, например CPANDL\sqlprimary, где CPANDL является именем домена, а sqlprimary - именем учетной записи 5. Если служба запущена, нужно остановить ее и запустить снова, чтобы она пере-запустилась с новыми параметрами. 6. Щелкните кнопку OK. Настройка каталога дампа, отчета об ошибках и отчета об отзывах и предложениях пользователей Вы можете использовать дополнительные параметры конфигурации служб для на-стройки таких функциональных возможностей, как создание отчетов и ведение жур-налов ошибок. Для этого при установке SQL Server следует указать о разрешении двух типов отчетов: об ошибках; о возможностях, также называемых Customer Feedback Reporting (Отчет об от-зывах и предложениях пользователей). Отчеты первого типа помогают определить причину неустранимой ошибки и ис-править ее. Когда неустранимые ошибки приводят к прекращению работы службы, отчеты об ошибках генерируются и отправляются в Microsoft или на назначенный корпоративный сервер отчетов об ошибках. Они содержат подробную информацию, позволяющую установить причину появления ошибки, в том числе сведения об ис-пользуемой версии SQL Server, версии операционной системы и конфигурации аппа-ратного обеспечения, а также данные из памяти или файлов того процесса, который вызвал ошибку. Помимо этого, информация об ошибках записывается в указанный каталог дампа. Местоположение каталога дампа зависит от компонента и того экземпляра SQL Server, к которому он относится. Например, каталог дампа для экземпляра SQL Server по умолчанию может находиться в %ProgramFiles%\Microsoft SQL Server\MSSQL.1\ MSSQL\LOG, а каталог дампа для Reporting Services (Службы отчетов) - в %ProgramFiles%\Microsoft SQL Server\MSSQL.3\Reporting Services\LogFiles. При настройке функциональности Customer Feedback Reporting (Отчет об от-зывах и предложениях пользователей) генерируются отчеты второго типа и также отправляются в Microsoft, где на основе их данных получают представление, как используются компоненты и функциональные возможности. Параметры, отвечающие за генерирование отчетов и дампов ошибок, настраива-ются для каждой службы в отдельности. Для этого выполните следующую последо-вательность действий. 1. Запустите утилиту SQL Server Configuration Manager, затем в панели слева щел-кните мышью узел SQL Server 2005 Services (Службы SQL Server 2005). 2. Раскройте контекстное меню службы, щелкнув в окне справа ее имя, и выполните команду Properties (Свойства). 3. В диалоговом окне Properties (Свойства) щелкните вкладку Ad vanced (Дополни-тельно). Теперь вы сможете следующее. : Использовать поле Dump Directory (Каталог дампа) для просмотра текущего значения каталога дампа. Чтобы изменить каталог дампа, введите новое имя. Убедитесь, что учетная запись для запуска настраиваемой службы имеет права чтения и записи в этом каталоге.
56 Часть I Основы администрирования Microsoft SQL Server 2005 : Использовать раскрывающиеся списки Error Reporting (Отчет об ошибках) и Customer Feedback Reporting (Отчет об отзывах и предложениях пользова-телей) для включения или отключения соответствующей функциональности. Выберите Yes (Да), чтобы включить генерирование отчетов, и No (Нет) в случае его отключения. 4. Если изменения производились при запущенной службе, нужно ее перезапустить, щелкнув кнопку Restart (Перезапустить) на вкладке Log On (Вход в систему). Служба будет остановлена и затем запущена уже с новыми параметрами. 5. Щелкните кнопку OK. Настройка сетевых протоколов для сервера и клиента Из раздела "Настройка параметров соединений" этой главы вы узнали, что с SQL Server можно устанавливать локальные и удаленные соединения (при соответству-ющей настройке) с помощью нескольких коммуникационных протоколов, включая Shared Memory (Совместно используемая память), Named Pipes (Именованные каналы) и TCP/IP и VIA. Все они имеют разные параметры конфигурации для клиента и сервера. Настройка сетевых протоколов производится с помощью утилиты SQL Server Configuration Manager. Для этого нужно в ее панели слева раскрыть узел SQL Server 2005 Network Configuration (Настройка сетевых параметров SQL Server 2005). Параметры устанавливаются отдельно для каждого экземпляра. Чтобы настроить протоколы для клиента, нужно раскрыть узел SQL Native Client Configuration (Настройка сетевой библиотеки клиента SQL Native Client). Примечание Любой компьютер, на котором установлена сетевая библиотека SQL Native Client, является клиентом SQL Server. Компьютеры могут работать под управлением операционных систем Windows 2000, Windows XP Professional и Windows Server 2003. Настройка протокола сервера Shared Memory Протокол Shared Memory (Совместно используемая память) применяется только для локальных соединений. Когда протокол включен, любой локальный клиент может подключиться к серверу с его помощью. Если же необходимо запретить локальным клиентам пользоваться этим протоколом, его следует отключить. Чтобы включить или отключить протокол Shared Memory (Совместно использу-емая память) для сервера, выполните следующие действия. 1. Запустите утилиту SQL Server Configuration Manager. В панели слева раскройте узел SQL Server 2005 Network Configuration (Настройка сетевых параметров SQL Server 2005), затем узел Protocols For instance_name (Протоколы для instance_ name), где instance_name - имя экземпляра SQL Server, с которым предстоит работать. 2. Раскройте контекстное меню протокола Shared Memory (Совместно используемая память), щелкнув в окне справа его имя, и выполните команду Properties (Свой-ства). 3. В диалоговом окне Properties (Свойства) воспользуйтесь раскрывающимся спи-ском Enabled (Включен) для включения и отключения протокола. Выберите пункт Yes (Да), чтобы включить протокол, и пункт No (Нет) для его отключения. 4. Щелкните OK.
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 57 Настройка протокола сервера Named Pipes Протокол Named Pipes (Именованные каналы) используется для локальных или удаленных соединений в первую очередь программами, написанными для Windows NT, Windows 98 и более ранних версий операционной системы Windows. Когда та-кой протокол включен, SQL Server 2005 с помощью его сетевой библиотеки может устанавливать связь с экземплярами через стандартные сетевые адреса: \\.\pipe\sql\ query - с экземпляром по умолчанию и \\.\pipe\MSSQL$instance_name\sql\query - с именованным экземпляром, где instance_name - имя экземпляра. Настройка параме-тров протокола позволяет не только включить или отключить именованный канал, но и изменить его (введя новое имя). Для установки нужных параметров выполните следующие действия. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Server 2005 Network Configuration (Настройка сетевых параметров SQL Server 2005), затем узел Protocols For instance_name (Протоколы для instance_name), где instance_name - имя экземпляра SQL Server, с которым предстоит работать. 2. Раскройте контекстное меню протокола Named Pipes (Именованные каналы), щелкнув в окне справа его имя, и выполните команду Properties (Свойства). 3. Теперь в диалоговом окне Properties (Свойства) вы можете: : с помощью раскрывающегося списка Enabled (Включен) включить протокол, выбрав пункт Yes (Да), или командой No (Нет) отключить его; : введя новое значение в поле Pipe Name (Имя канала), изменить имя канала по умолчанию (но не забудьте сделать это же в настройках клиента). 4. Щелкните кнопку OK. Настройка протокола сервера TCP/IP Протокол TCP/IP применяется для локальных и удаленных соединений с SQL Server. Его использование является предпочтительным, поскольку в этом случае SQL Server прослушивает определенный порт TCP и адрес IP. По умолчанию SQL Server про-слушивает порт TCP 1433 для всех настроенных на сервере адресов IP, но вы можете назначить параметры и для прослушивания каждого адреса в отдельности. Если вы хотите отключить протокол TCP/IP для сервера, выполните следующие действия. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Server 2005 Network Configuration (Настройка сетевых параметров SQL Server 2005) и затем выберите узел Protocols For instance_name (Протоколы для instance_name), где instance_name - имя экземпляра SQL Server, с которым требуется работать. 2. Раскройте контекстное меню протокола TCP/IP, щелкнув в окне справа его имя, и выполните команду Disable (Отключить). Чтобы настроить параметры протокола TCP/IP, нужно выполнить такую после-довательность действий. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Server 2005 Network Configuration (Настройка сетевых параметров SQL Server 2005), а затем узел Protocols For instance_name (Протоколы для instance_name), где instance_name - имя экземпляра SQL Server, с которым требуется работать.
58 Часть I Основы администрирования Microsoft SQL Server 2005 2. Раскройте контекстное меню протокола TCP/IP, щелкнув в окне справа его имя, и выполните команду Properties (Свойства). В открывшемся диалоговом окне щелкните вкладку IP Addresses (Адреса IP). Вы увидите разделы, представляю-щие настроенные на сервере адреса IP. Разделы, озаглавленные IP1, IP2, IP3 и так далее, используются для настройки прослушивания определенных адресов IP. Раздел IPAll позволяет настроить SQL Server для прослушивания всех адресов IP на сервере. Примечание Адрес IP 127.0.0.1 является локальным адресом замыкания на себя. Он используется для прослушивания соединений локальных клиентов. 3. Если необходимо, чтобы SQL Server прослушивал все адреса IP на сервере, устано-вите для каждого из них значение Yes (Да) параметра Active (Активен) и значение No (Нет) параметра Enabled (Включен). Затем в разделе IPAll укажите определен-ный порт TCP для прослушивания на всех адресах. По умолчанию используется порт TCP 1433. Для изменения порта TCP в разделе IPAll введите необходимое значение в поле TCP port (Порт TCP) и щелкните кнопку OK. 4. Если же требуется прослушивать определенный адрес IP и порт TCP, установите для этого адреса IP значение Yes (Да) и для параметра Active (Активен), и для параметра Enabled (Включен), а также введите необходимое значение в поле TCP port (Порт TCP) и щелкните кнопку OK. Настройка порядка использования протоколов клиента Если доступно и настроено несколько сетевых протоколов для клиента, он использует их в определенном порядке, который по умолчанию следующий. 1. Shared Memory (Совместно используемая память). 2. TCP/IP. 3. Named Pipes (Именованные каналы). Использование протокола Shared Memory (Совместно используемая память) для локальных соединений является предпочтительным. Чтобы отключить протокол Shared Memory (Совместно используемая память) или изменить порядок использо-вания остальных протоколов, выполните следующие действия. 1. Запустите SQL Server Configuration Manager. В панели сле ва раскройте узел SQL Native Client Configuration (Настройка сетевой библиотеки клиента SQL Native Client), а затем щелкните узел Client Protocols (Протоколы клиента). 2. Раскройте контекстное меню, щелкнув в окне справа любой из протоколов в списке, и выполните команду Order (Порядок). Будет отображено диалоговое окно Client Protocols Properties (Свойства протоколов клиента), как показано на рис. 3-9. 3. Это диалоговое окно позволит вам следующее. : Менять порядок использования включенных протоколов Для этого в списке Enabled Protocols (Включенные протоколы) выберите имя протокола, порядок использования которого необходимо изменить. Затем с помощью расположен-ных справа кнопок со стрелочками переместите протокол на необходимую позицию в списке. : Отключать или включать протоколы Для отключения протокола выберите его в списке Enabled Protocols (Включенные протоколы) и щелкните кнопку со стрелкой влево для перемещения в список Disabled Protocols (Отключен-ные протоколы). Чтобы включить протокол, щелкните, выбрав его в списке 
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 59 Disabled Protocols (Отключенные протоколы), кнопку со стрелкой вправо для перемещения в список Enabled Protocols (Включенные протоколы). : Отключать или включать протокол Shared Memory (Совместно используе-мая память) Чтобы его включить, установите флажок Enable Shared Memory Protocol (Включить протокол совместного использования памяти). И, соот-ветственно, для его отключения указанный флажок нужно снять. 4. Щелкните кнопку OK. Рис. 3-9. Диалоговое окно Client Protocols Properties Настройка протокола клиента Shared Memory Протокол Shared Memory (Совместно используемая память) применяется только для локальных соединений. Чтобы включить или отключить протокол Shared Memory (совместно используемая память) для клиента, выполните следующую последова-тельность действий. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Native Client Configuration (Настройка сетевой библиотеки клиента SQL Native Client), затем щелкните узел Client Protocols (Протоколы клиента). 2. Раскройте контекстное меню протокола Shared Memory (Совместно используемая память), щелкнув в окне справа его имя, и выполните команду Properties (Свой-ства). 3. В диалоговом окне Properties (Свойства) в списке Enabled (Включен) выберите пункт Yes (Да), чтобы включить протокол, и пункт No (Нет) для его отключения. 4. Щелкните кнопку OK. Настройка протокола клиента TCP/IP Использование протокола TCP/IP является предпочтительным для локальных и уда-ленных соединений с SQL Server. При подключении к экземпляру сервера по умол-чанию с помощью этого протокола клиент должен знать значение порта TCP. Таким образом, если экземпляр по умолчанию был настроен для прослушивания иного порта, необходимо изменить и настройку протокола TCP/IP для клиента, установив то же 
60 Часть I Основы администрирования Microsoft SQL Server 2005 значение порта. При подключении к именованному экземпляру клиент пытается получить номер порта от службы SQL Server Browser (Обозреватель SQL Server), запущенной на сервере, с которым устанавливается соединение. Если эта служба не запущена, номер порта TCP должен предоставляться в настройках клиента или как часть строки соединения. Чтобы настроить протокол TCP/IP для клиента, выполните следующие действия. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Native Client Configuration (Настройка сетевой библиотеки клиента SQL Native Client), а затем щелкните узел Client Protocols (Протоколы клиента). 2. Если нужно только включить или отключить протокол TCP/IP, раскройте кон-текстное меню, щелкнув в окне справа имя протокола TCP/IP, и выберите команду Enable (Включить) или Disable (Отключить) соответственно. 3. Для просмотра свойств соединения протокола TCP/IP выберите в контекстном меню, щелкнув в окне справа его имя, команду Properties (Свойства). 4. Чтобы установить порт TCP по умолчанию, в диалоговом окне Properties: TCP/IP (Свойства: TCP/IP) в поле Default Port (Порт по умолчанию) введите порт по умолчанию для клиента. 5. Также можно настроить параметры, определяющие, каким образом клиент обра-батывает (и обрабатывает ли вообще) свободные соединения TCP/IP. Для этого используются следующие два параметра. : Keep Alive (Послать первый пакет Keep Alive через (мс)) Определяет, когда клиент впервые пытается убедиться (посредством посылки пакета KeepAlive), что бездействующее соединение все еще не разорвано, и использовать его. По умолчанию клиент проверяет соединение после того как оно бездействовало 30 000 мс (30 с). В большинстве случаев значений между 30 и 60 секундами бы-вает достаточно. Однако, в зависимости от загруженности сервера и важности функций, выполняемых клиентом, может возникнуть необходимость проверки бездействующих соединений чаще, чтобы получить некоторую гарантию того, что они не будут разорваны. Для этого устанавливаются меньшие значения, например 15 000 или 20 000 мс. : Keep Alive Interval (Интервал между пакетами Keep Alive (мс)) Определя-ет, как часто клиент повторяет проверку бездействующих соединений, если не поступил ответ на начальный запрос в виде отправки пакета KeepAlive. По умолчанию клиент повторно посылает пакеты KeepAlive каждые 1 000 мс (1 с). Возможно, потребуется увеличить интервал для уменьшения количества по-вторных передач пакетов KeepAlive в том случае, если соединение с занятым сервером пытаются установить множество клиентов. 6. Щелкните кнопку OK. Настройка протокола клиента Named Pipes Протокол Named Pipes (Именованные каналы) используется для локальных или уда-ленных соединений в первую очередь программами, написанными для Windows NT, Windows 98 и более ранних версий операционной системы Windows. Именованными каналами по умолчанию являются: \\.\pipe\sql\query - для экземпляра по умолча-нию и \\.\pipe\MSSQL$instance_name\sql\query - для именованного экземпляра, где instance_na me - имя экземпляра. Канал по умолчанию для клиентов указывается с использованием псевдонима (alias). Стандартным псевдонимом для клиентов является sql\query, который ссылается на канал по умолчанию, например \\.\pipe\sql\query 
Настройка поверхности атаки, доступа к серверу и сетевых протоколов Глава 3 61 или \\.\pipe\MSSQL$instance_name\sql\query, где instance_name - имя экземпляра. Если изменен канал по умолчанию в сетевой настройке сервера, необходимо изменить канал по умолчанию и в настройках клиента (причем для всех клиентов, которые будут подключаться к SQL Server таким образом). Например, если SQL Server ис-пользует \\.\pipe\sqlserver\app1 в качестве канала по умолчанию, то клиент должен применить имя канала \sqlserver\app1. Чтобы настроить протокол Named Pipes (Именованные каналы) для клиента, вы-полните следующие действия. 1. Запустите SQL Server Configuration Manager. В панели слева раскройте узел SQL Native Client Configuration (Настройка сетевой библиотеки клиента SQL Native Client), затем щелкните узел Client Protocols (Протоколы клиента). 2. Раскройте контекстное меню протокола Named Pipes (Именованные каналы), щелкнув в окне справа его имя, и выберите команду Properties (Свойства). 3. В диалоговом окне Properties (Свойства) вы можете сделать следующее. : Использовать раскрывающийся список Enabled (Включен) для включения или отключения протокола. Выберите пункт Yes (Да), чтобы включить протокол, и пункт No (Нет) в случае его отключения. : Установить имя канала по умолчанию, введя в поле Default Pipe (Канал по умолчанию) значение по умолчанию. 4. Щелкните кнопку OK.
Глава 4 Конфигурирование и настройка Microsoft SQL Server SQL Server 2005, как и его предшественник SQL Server 2000, разработан таким обра-зом, что позволяет динамически уравновешивать нагрузку и, следуя за ее изменением, автоматически подстраивать параметры конфигурации. Например, SQL Server может динамически увеличивать или уменьшать количество используемой оперативной па-мяти, основываясь на требованиях всей системы. Кроме того, SQL Server эффективно управляет оперативной памятью, особенно в части выделения памяти для запросов и пользовательских соединений. При этом оперативная память - лишь одна из множе-ства областей, в которых настройка происходит в автоматическом режиме. Тем не менее, в некоторых случаях бывает необходимо настроить параметры SQL Server вручную. Так, при работе с большой базой данных, где определены сложные ограничения целостности, а производительность БД не отвечает заданным требо-ваниям, скорее всего, подгонку конфигурации придется произвести вручную. Из-менение параметров настройки может потребоваться и для учетных записей SQL Server, аутентификации и аудита. Основные средства, которые используются для конфигурирования и настройки SQL Server, следующие. Запросы к системному каталогу Предоставляют самый прямой путь к опреде-лению конфигурации базы данных и параметров настройки, к ней относящихся. Хранимые процедуры Позволяют просматривать и управлять параметрами на-стройки посредством хранимых процедур sp_configure и sp_dboption. Примите во внимание, что некоторые параметры можно изменить с помощью хранимой процедуры sp_configure только тогда, когда параметр show advanced options имеет значение 1, как в этом примере: EXEC sp_configure 'show advanced options', 1 Утилита SQL Server Management Studio Предоставляет простой в использо-вании интерфейс и позволяет обновлять параметры конфигурации и системный регистр. Утилита командной строки SQLServr.exe Может использоваться для установки параметров конфигурации при запуске. В этой главе будут рассмотрены возможности, доступные для конфигурирования и настройки SQL Server. Мы начнем с обзора системного каталога SQL Server 2005, затем покажем, как можно выполнять запросы непосредственно к системному ката-логу или использовать хранимые процедуры. Знания, которые вы получите, станут важной предпосылкой для понимания принципов конфигурирования и настройки SQL Server 2005. В главе 5 приведены подробные сведения об использовании SQL Server Management Studio и SQLServr.exe.
Конфигурирование и настройка Microsoft SQL Server Глава 4 63 Доступ к данным конфигурации SQL Server В SQL Server 2005 представление серверов, БД, а также их параметров конфигура-ции и содержащихся в них данных основывается на концепции объектов. Ключевым элементом этой объектной структуры является системный каталог, который хранит данные, описывающие объекты и их атрибуты для определенного экземпляра SQL Server. Например, атрибуты базы данных описывают: количество и имена таблиц и представлений; количество и имена столбцов в таблицах или представлениях; тип данных, хранящихся в столбцах, их точность (максимальное количество де-сятичных знаков) и количество знаков после десятичной запятой; триггеры и ограничения целостности, которые определены для таблиц; индексы и ключи, определенные для таблиц; статистическая информация, используемая оптимизатором запросов для постро-ения планов запросов. Чтобы получить доступ к информации в том или ином системном каталоге с по-мощью запросов, можно использовать следующие возможности. Представления каталога С их помощью пользователи могут иметь доступ ко всем метаданным, хранящимся в БД, включая ее атрибуты и их значения, кроме метаданных репликации, резервного копирования, плана обслуживания БД и ме-таданных службы SQL Server Agent. Представления совместимости Дают доступ ко многим системным таблицам, применявшимся в предыдущих версиях SQL Server, с использованием представле-ний SQL Server 2005. Эти представления предназначаются только для обеспечения обратной совместимости и делают доступными те же метаданные, которые исполь-зовались в SQL Server 2000. Через них нельзя получить доступ к метаданным для новых возможностей SQL Server 2005, таких как секционирование и зеркальное отображение базы данных. Представления информационной схемы Позволяют иметь доступ к подмноже-ству метаданных, хранящихся в БД, включая ее атрибуты и их значения. Пред-ставления информационной схемы основаны на определениях представлений каталога, данных в стандарте SQL-92, и не содержат метаданных о расширенных возможностях SQL Server 2005. Приложения, использующие эти представления, являются переносимыми между различными системами управления базами дан-ных, совместимыми со стандартом SQL-92. Функции каталога ODBC Предоставляют программный интерфейс, который драйверы ODBC могут использовать для возвращения наборов данных, содер-жащих информацию о системном каталоге в независящем от структуры таблиц виде. Наборы данных OLE DB с информацией о схеме Предоставляют программный интерфейс IDBSchemaRowset, позволяющий поставщикам OLE DB иметь доступ к информации о системном каталоге. Эти наборы данных содержат информацию о каталоге в виде, не зависящем от структуры таблиц каталога. Системные хранимые процедуры и функции Возвращают разнообразную инфор-мацию о каталоге. Рекомендуется для доступа к метаданным БД использовать представления ка-талога и хранимые процедуры. Основная причина этого - представления каталога 
64 Часть I Основы администрирования Microsoft SQL Server 2005 отображают метаданные в формате, не зависящем от конкретной реализации таблиц каталога, то есть на представления не влияют изменения структуры таблиц катало-га. Когда требуется настроить сервер или управлять им, для этого необходимо, как правило, использовать хранимые процедуры. Они предоставляют всю необходимую функциональность, позволяющую легко просмотреть и изменить параметры конфи-гурации SQL Server и его БД. Работа с системным каталогом и представлениями каталога Представления каталога содержат информацию, использующуюся ядром базы данных SQL Server. Они предоставляют наиболее общий интерфейс метаданных каталога, са-мый прямой путь доступа к этой информации и простейший способ работы с ней. Все доступные для пользователей метаданные в системном каталоге отображаются через представления каталога, которые не содержат информацию о репликации, резервном копировании, плане обслуживания БД и метаданных службы SQL Server Agent. Представления каталога соответствуют общей концепции иерархии объектов, в которой объекты более низкого уровня наследуют атрибуты объектов более вы-сокого уровня. Некоторые представления каталога наследуют столбцы (поскольку столбцы таблицы - атрибуты хранящихся в ней сущностей) из других представлений каталога. Например, представление каталога Tables (Таблицы) наследует столбцы представления каталога Objects (Объекты). Таким образом, к столбцам представ-ления каталога Tables (Таблицы) добавляются все столбцы представления каталога Objects (Объекты). В табл. 4-1 перечислены представления каталога SQL Server 2005 и описывается их назначение. Табл. 4-1. Представления каталога SQL Server 2005 Тип представлений Описание Ключевые представления каталога CLR Assembly Catalog Сборка общеязыковой исполняющей среды sys.assemblies, sys.assembly_files, sys.assembly_references Databases and Files Catalog БД, файлы БД и устрой-ства резервного копиро-вания, ассоциированные с экземпляром SQL Server sys.backup_devices, sys.database_files, sys.databases, sys.master_files Database Mirroring Catalog Функции, которые сер-вер-свидетель выпол-няет в качестве партера в процессе зеркального отображения БД sys.database_mirroring_witnesses Data Spaces and Full-Text Catalog Группы файлов, схемы секционирования и полнотекстовые ката-логи sys.data_spaces, sys.destination_data_spaces, sys.filegroups, sys.fulltext_catalogs, sys.partition_schemes Endpoints Catalog Конечные точки, ис-пользуемые для зер-кального отображения, обмена сообщениями службой Service Broker и веб-служб sys.database_mirroring_endpoints, sys.endpoint_webmethods, sys.endpoints, sys.http_endpoints, sys.service_broker_endpoints, sys.soap_endpoints, sys.tcp_endpoints, sys.via_endpoints Extended Properties Catalog Расширенные свойства и класс объектов, от ко-торых они происходят sys.extended_properties
Конфигурирование и настройка Microsoft SQL Server Глава 4 65 Тип представлений Описание Ключевые представления каталога Linked Servers Catalog Связанные или удален-ные серверы и относя-щиеся к ним учетные записи sys.linked_logins, sys.remote_logins, sys.servers Messages (for Errors) Catalog Сообщения об ошибках, определенные системой и пользователем sys.messages Objects Catalog Высокоуровневые объекты БД sys.allocation_units, sys.assembly_modules, sys.check_constraints, sys.columns, sys.computed_columns, sys.default_constraints, sys.event_notifications, sys.events, sys.extended_procedures, sys.foreign_key_columns, sys.foreign_keys, sys.fulltext_index_columns, sys.fulltext_indexes, sys.identity_columns, sys.index_columns, sys.indexes, sys.key_constraints, sys.numbered_procedures, sys.numbered_procedure_parameters, sys.objects, sys.parameters, sys.partitions, sys.procedures, sys.service_queues, sys.sql_dependencies, sys.sql_modules, sys.stats_columns, sys.stats, sys.synonyms, sys.tables, sys.traces, sys.trigger_events, sys.triggers, sys.views Partition Function Catalog Функции секциониро-вания, их параметры и диапазон значений sys.partition_functions, sys.partition_parameters, sys.partition_range_values Scalar Types Catalog Пользовательские ска-лярные типы данных для сборок общеязыко-вой исполняющей сре-ды, а также другие ска-лярные типы данных, пользовательские и системные sys.assembly_types, sys.types Schemas Catalog Схемы БД sys.schemas Security Catalog Атрибуты безопасности и их значения уровня сервера и БД, а также атрибуты безопасности шифрования Уровня БД: sys.database_permissions, sys.database_principals, sys.database_role_members. Уровня сервера: sys.server_permissions, sys.server_principals, sys.server_role_members, sys.sql_logins. Шифрования: sys.asymmetric_keys, sys.certificates, sys.credentials, sys.crypt_properties, sys.key_encryptions, sys.symmetric_keys Service Broker Catalog Конечные точки и компоненты обмена сообщениями службы Service Broker sys.conversation_endpoints, sys.conversation_groups, sys.remote_service_bindings, sys.service_contract_message_usages, sys.service_contract_usages, sys.routes, sys.service_contracts, sys.service_message_types, sys.services, sys.transmission_queue Табл. 4-1. (продолжение) (см. след. стр.)
66 Часть I Основы администрирования Microsoft SQL Server 2005 Тип представлений Описание Ключевые представления каталога Server-Wide Configuration Catalog Значения параметров конфигурации сервера sys.configurations, sys.fulltext_languages, sys.trace_categories, sys.trace_columns, sys.trace_event_bindings, sys.trace_events, sys.traces, sys.trace_subclass_values XML Schemas (XML Type System) Catalog Компоненты и значения схемы XML sys.xml_indexes, sys.xml_schema_attributes, sys.xml_schema_collections, sys.xml_schema_component_placements, sys.xml_schema_components, sys.xml_schema_elements, sys.xml_schema_facets, sys.xml_schema_model_groups, sys.xml_schema_namespaces, sys.xml_schema_types, sys.xml_schema_wildcard_namespaces, sys.xml_schema_wildcards В табл. 4-2 дан перечень сопоставлений системных таблиц SQL Ser ver 2000 и си-стемных представлений SQL Server 2005. Элементы перечня организованы по типам баз данных и представлений: за сопоставлениями для системной БД master следуют сопоставления для всех остальных БД. Табл. 4-2. Сопоставление системных таблиц SQL Server 2000 и системных представлений SQL Server 2005 Системная таблица SQL Server 2000 Системное представление SQL Server 2005 Тип представления SQL Server 2005 БД master sysaltfiles sys.master_files Каталог syscacheobjects sys.dm_exec_cached_plans Динамическое управление syscharsets sys.syscharsets Обратная совместимость sysconfigures sys.configurations Каталог syscurconfigs sys.configurations Каталог sysdatabases sys.databases Каталог sysdevices sys.backup_devices Каталог syslanguages sys.languages Обратная совместимость syslockinfo sys.dm_tran_locks Динамическое управление syslocks sys.dm_tran_locks Динамическое управление syslogins sys.server_principals Каталог sysmessages sys.messages Каталог sysoledbusers sys.linked_logins Каталог sysopentapes sys.dm_io_backup_tapes Динамическое управление sysperfinfo sys.dm_os_performance_counters Динамическое управление sysprocesses sys.dm_exec_connections, sys.dm_exec_sessions, sys.dm_exec_requests Динамическое управление Табл. 4-1. (окончание)
Конфигурирование и настройка Microsoft SQL Server Глава 4 67 Системная таблица SQL Server 2000 Системное представление SQL Server 2005 Тип представления SQL Server 2005 sysremotelogins sys.remote_logins Каталог sysservers sys.servers Каталог Все базы данных syscolumns sys.columns Каталог syscomments sys.sql_modules Каталог sysconstraints sys.check_constraints, sys.default_constraints, sys.key_constraints, sys.foreign_keys Каталог sysdepends sys.sql_dependencies Каталог sysfilegroups sys.filegroups Каталог sysfiles sys.database_files Каталог sysforeignkeys sys.foreign_keys Каталог sysfulltextcatalogs sys.fulltext_catalogs Каталог sysindexes sys.indexes Каталог sysindexkeys sys.index_columns Каталог sysmembers sys.databases_role_members Каталог sysobjects sys.objects Каталог syspermissions sys.database_permissions, sys.server_permissions Каталог sysprotects sys.database_permissions, sys.server_permissions Каталог sysreferences sys.foreign_keys Каталог systypes sys.types Каталог sysusers sys.database_principals Каталог Работа с системными хранимыми процедурами Для просмотра сведений о параметрах конфигурации SQL Server и выполнения обще-го администрирования SQL Server 2005 можно использовать системные хранимые процедуры. SQL Server 2005 предоставляет две основные категории системных хра-нимых процедур: для администраторов; для реализации функциональности интерфейсов программирования приложений (APIs, application programming interfaces) баз данных. Естественно, вы будете работать с системными хранимыми процедурами, пред-назначенными для администрирования, а не с теми, которые реализуют функции интерфейсов программирования приложений баз данных. Системные хранимые про-цедуры написаны на языке Transact-SQL. Большинство из них возвращают значение 0 в случае успешного завершения и значение, отличное от 0, - при ошибке. Например, хранимая процедура sp_dboption предназначена для управления параметрами конфи-гурации БД SQL Server (кроме БД master и tempdb). При использовании хранимой процедуры sp_dboption для установки значения какого-либо параметра конфигура-ции БД код возврата 0 обозначает, что параметр был установлен, как и ожидалось. Код возврата 1 - что хранимая процедура отработала с ошибкой и параметр не был установлен. Следующий пример переводит БД Personnel в автономный режим, если нет подключенных пользователей: USE master; GO EXEC sp_dboption 'Personnel', 'offline', 'TRUE'; GO Табл. 4-2. (окончание)
68 Часть I Основы администрирования Microsoft SQL Server 2005 Если хранимая процедура возвращает 0, это означает, что база данных была успеш-но переведена в автономный режим. Возвращаемое значение 1 показывает, что при переводе БД в автономный режим произошла ошибка, то есть база данных осталась в оперативном режиме. Больше информации, касающейся использования хранимых процедур, будет дано дальше, в разделе "Настройка SQL Server с помощью хранимых процедур". В табл. 4-3 представлен перечень хранимых процедур, применяемых для админи-стрирования. Элементы перечня организованы по компонентам, для работы с кото-рыми предназначена каждая хранимая процедура. Табл. 4-3. Основные системные хранимые процедуры Компонент Описание Связанные системные хранимые процедуры Служба катало-гов Active Directory Регистрируют экземпля-ры SQL Server и БД SQL Server в службе каталогов Active Directory sp_ActiveDirectory_Obj, sp_ActiveDirectory_SCP Каталог Реализуют функции словаря данных ODBC sp_column_privileges, sp_columns, sp_databases, sp_fkeys, sp_pkeys, sp_server_info, sp_special_columns, sp_sproc_columns, sp_statistics, sp_stored_procedures, sp_table_privileges, sp_tables Курсоры Реализуют функциональ-ность переменных курсора sp_cursor_list, sp_describe_cursor, sp_describe_cursor_columns, sp_describe_cursor_tables Ядро БД Обслуживают экземпляры SQL Server и выполняют основные задачи админи-стрирования sp_add_data_file_recover_suspect_db, sp_add_log_file_recover_suspect_db, sp_addextendedproc, sp_addextendedproperty, sp_addmessage, sp_addtype, sp_addumpdevice, sp_altermessage, sp_attach_db, sp_attach_single_file_db, sp_autostats, sp_bindefault, sp_bindrule, sp_bindsession, sp_certify_removable, sp_configure, sp_create_removable, sp_createstats, sp_cycle_errorlog, sp_datatype_info, sp_dbcmptlevel, sp_dboption, sp_dbremove, sp_delete_backuphistory, sp_depends, sp_detach_db, sp_dropdevice, sp_dropextendedproc, sp_dropextendedproperty, sp_dropmessage, sp_droptype, sp_executesql, sp_getapplock, sp_getbindtoken, sp_help sp_helpconstraint, sp_helpdb, sp_helpdevice, sp_helpextendedproc, sp_helpfile, sp_helpfilegroup, sp_helpindex, sp_helplanguage, sp_helpserver, sp_helpsort, sp_helpstats, sp_helptext, sp_helptrigger, sp_indexoption, sp_invalidate_textptr, sp_lock, sp_monitor, sp_procoption, sp_recompile, sp_refreshview, sp_releaseapplock, sp_rename, sp_renamedb, sp_resetstatus, sp_serveroption, sp_setnetname, sp_settriggerorder, sp_spaceused, sp_tableoption, sp_unbindefault, sp_unbindrule, sp_updateextendedproperty, sp_updatestats, sp_validname, sp_who
Конфигурирование и настройка Microsoft SQL Server Глава 4 69 Компонент Описание Связанные системные хранимые процедуры Почтовый ком-понент Database Mail Выполняют операции с электронной почтой из SQL Server sp_send_dbmail, sysmail_add_account_sp, sysmail_add_principalprofile_sp, sysmail_add_profile_sp, sysmail_add_profileaccount_sp, sysmail_configure_sp, sysmail_delete_account_sp, sysmail_delete_principalprofile_sp, sysmail_delete_profile_sp, sysmail_delete_profileaccount_sp, sysmail_help_account_sp, sysmail_help_configure_sp, sysmail_help_principalprofile_sp, sysmail_help_profile_sp, sysmail_help_profileaccount_sp, sysmail_start_sp, sysmail_stop_sp, sysmail_update_account_sp, sysmail_update_principalprofile_sp, sysmail_update_profile_sp, sysmail_update_profileaccount_sp План обслужи-вания БД Настраивают планы обслу-живания БД, управляют ими, а также выполняют относящиеся к ним задачи sp_add_maintenance_plan, sp_add_maintenance_plan_db, sp_add_maintenance_plan_job, sp_delete_maintenance_plan, sp_delete_maintenance_plan_db, sp_delete_maintenance_plan_job, sp_help_maintenance_plan Распределенные запросы Реализуют распределенные запросы и управляют ими sp_addlinkedserver, sp_addlinkedsrvlogin, sp_catalogs, sp_column_privileges_ex, sp_columns_ex, sp_droplinkedsrvlogin, sp_foreignkeys, sp_indexes, sp_linkedservers, sp_primarykeys, sp_serveroption, sp_table_privileges_ex, sp_tables_ex, sp_testlinkedserver Полнотекстовый поиск Реализуют полнотекстовые индексы и запросы к ним sp_fulltext_catalog, sp_fulltext_column, sp_fulltext_database, sp_fulltext_service, sp_fulltext_table, sp_help_fulltext_catalogs, sp_help_fulltext_catalogs_cursor, sp_help_fulltext_columns, sp_help_fulltext_columns_cursor, sp_help_fulltext_tables, sp_help_fulltext_tables_cursor Основные рас-ширенные хранимые про-цедуры Предоставляют интерфейс для доступа из SQL Server к внешним программам, в основном для обслужива-ния сервера xp_cmdshell, xp_enumgroups, xp_findnextmsg, xp_grantlogin, xp_logevent, xp_loginconfig, xp_logininfo, xp_msver, xp_revokelogin, xp_sprintf, xp_sqlmaint, xp_sscanf Табл. 4-3. (продолжение) (см. след. стр.)
70 Часть I Основы администрирования Microsoft SQL Server 2005 Компонент Описание Связанные системные хранимые процедуры Передача жур-налов Реализуют функции пере-дачи журналов, а также по-зволяют контролировать ее параметры конфигурации и устанавливать их sp_add_log_shipping_alert_job, sp_add_log_shipping_primary_database, sp_add_log_shipping_primary_secondary, sp_add_log_shipping_secondary_database, sp_add_log_shipping_secondary_primary, sp_change_log_shipping_primary_database, sp_change_log_shipping_secondary_database, sp_change_log_shipping_secondary_primary, sp_cleanup_log_shipping_history, sp_delete_log_shipping_alert_job, sp_delete_log_shipping_primary_database, sp_delete_log_shipping_primary_secondary, sp_delete_log_shipping_secondary_database, sp_delete_log_shipping_secondary_primary, sp_help_log_shipping_alert_job, sp_help_log_shipping_monitor_primary, sp_help_log_shipping_monitor_secondary, sp_help_log_shipping_primary_database, sp_help_log_shipping_primary_secondary, sp_help_log_shipping_secondary_database, sp_help_log_shipping_secondary_primary, sp_refresh_log_shipping_monitor, sp_resolve_logins Notification Services (Службы уведомлений) Управляют Notification Services (Службы уведом-лений), а также позволяют отлаживать их работу и устранять неполадки NSAdministrationHistory, NSDiagnosticDeliveryChannel, NSDiagnosticEventClass, NSDiagnosticEventProvider, NSDiagnosticFailedNotifications, NSDiagnosticNotificationClass, NSDiagnosticSubscriptionClass, NSEventBatchDetails, NSEventBeginBatchevent_class_name, NSEventFlushBatchevent_class_name, NSEventSubmitBatchevent_class_name, NSEventWriteevent_class_name, NSExecuteRuleFiring, NSNotificationBatchDetails, NSNotificationBatchList, NSPrepareRuleFiring, NSQuantumDetails, NSQuantumExecutionTime, NSQuantumFailures, NSQuantumList, NSQuantumPerformance, NSQuantumSkipped, NSScheduledSubscriptionDetails, NSScheduledSubscriptionList, NSSetQuantumClock, NSSetQuantumClockDate, NSSnapshotApplications, NSSnapshotDeliveryChannels, NSSnapshotEvents, NSSnapshotProviders, NSSnapshotSubscriptions, NSSubscriptionConditionInformation, NSVacuum Автоматизация OLE Создают объекты автома-тизации OLE и управляют ими sp_OACreate, sp_OADestroy, sp_OAGetErrorInfo, sp_OAGetProperty, sp_OAMethod, sp_OASetProperty, sp_OAStop Табл. 4-3. (продолжение)
Конфигурирование и настройка Microsoft SQL Server Глава 4 71 Компонент Описание Связанные системные хранимые процедуры Система без-опасности Управляют системой без-опасности сервера и БД sp_addalias, sp_addapprole, sp_addgroup, sp_addlinkedsrvlogin, sp_addlogin, sp_addremotelogin, sp_addrole, sp_addrolemember, sp_addserver, sp_addsrvrolemember, sp_adduser, sp_approlepassword, sp_change_users_login, sp_changedbowner, sp_changegroup, sp_changeobjectowner, sp_dbfixedrolepermission, sp_defaultdb, sp_defaultlanguage, sp_denylogin, sp_dropalias, sp_dropapprole, sp_dropgroup, sp_droplinkedsrvlogin, sp_droplogin, sp_dropremotelogin, sp_droprolemember, sp_dropserver, sp_dropsrvrolemember, sp_dropuser, sp_grantdbaccess, sp_grantlogin, sp_helpdbfixedrole, sp_helpgroup, sp_helplinkedsrvlogin, sp_helplogins, sp_helpntgroup, sp_helpremotelogin, sp_helprole, sp_helprolemember, sp_helprotect, sp_helpsrvrole, sp_helpsrvrolemember, sp_helpuser, sp_MShasdbaccess, sp_password, sp_remoteoption, sp_revokedbaccess, sp_revokelogin, sp_setapprole, sp_srvrolepermission, sp_validatelogins Почтовая служба SQL Mail Выполняют операции с электронной почтой из SQL Server (в SQL Server 2005 использование компо-нента Database Mail являет-ся предпочтительным) sp_processmail, xp_deletemail, xp_findnextmsg, xp_readmail, xp_sendmail, xp_startmail, xp_stopmail Утилита SQL Server Profiler Используются утилитой SQL Profiler для монито-ринга производительности и активности sp_trace_create, sp_trace_generateevent, sp_trace_setevent, sp_trace_setfilter, sp_trace_setstatus Служба SQL Server Agent Управляют запланирован-ными оповещениями и другой деятельностью SQL Agent sp_add_alert, sp_add_category, sp_add_job, sp_add_jobschedule, sp_add_jobserver, sp_add_jobstep, sp_add_notification, sp_add_operator, sp_add_proxy, sp_add_schedule, sp_add_targetservergroup, sp_add_targetsvrgrp_member, sp_apply_job_to_targets, sp_attach_schedule, sp_cycle_agent_errorlog, sp_cycle_errorlog, sp_delete_alert, sp_delete_category, sp_delete_job, sp_delete_jobschedule, sp_delete_jobserver, sp_delete_jobstep, sp_delete_jobsteplog, sp_delete_notification, sp_delete_operator, sp_delete_proxy, sp_delete_schedule, sp_delete_targetserver, sp_delete_targetservergroup, sp_delete_targetsvrgrp_member, sp_detach_schedule, sp_enum_login_for_proxy, sp_enum_proxy_for_subsystem, sp_enum_sqlagent_subsystems, sp_grant_login_to_proxy Табл. 4-3. (продолжение) (см. след. стр.)
72 Часть I Основы администрирования Microsoft SQL Server 2005 Компонент Описание Связанные системные хранимые процедуры Служба SQL Server Agent Управляют запланирован-ными оповещениями и другой деятельностью SQL Agent sp_grant_proxy_to_subsystem, sp_help_alert, sp_help_category, sp_help_downloadlist, sp_help_job, sp_help_jobactivity, sp_help_jobcount, sp_help_jobhistory, sp_help_jobs_in_schedule, sp_help_jobschedule, sp_help_jobserver, sp_help_jobstep, sp_help_jobsteplog, sp_help_notification, sp_help_operator, sp_help_proxy, sp_help_schedule, sp_help_targetserver, sp_help_targetservergroup, sp_manage_jobs_by_login, sp_msx_defect, sp_msx_enlist, sp_msx_get_account, sp_msx_set_account, sp_notify_operator, sp_post_msx_operation, sp_purge_jobhistory, sp_remove_job_from_targets, sp_resync_targetserver, sp_revoke_login_form_proxy, sp_revoke_proxy_from_subsystem, sp_start_job, sp_stop_job, sp_update_alert, sp_update_category, sp_update_job, sp_update_jobschedule, sp_update_jobstep, sp_update_notification, sp_update_operator, sp_update_proxy, sp_update_schedule, sp_update_targetservergroup Документы XML Управляют текстом в формате XML sp_xml_preparedocument, sp_xml_removedocument Способы управления параметрами конфигурации Параметры конфигурации можно представить себе как набор правил, определяющих конфигурацию и использование SQL Server. Индивидуальные экземпляры сервера имеют разные параметры конфигурации. Также различные параметры настраиваются для поддерживаемых каждым экземпляром баз данных, соединений, устанавливаемых приложениями, и для любых инструкций или пакетов инструкций, которые отправ-ляются на выполнение. Установка параметров конфигурации Параметры конфигурации могут быть установлены для следующих блоков. Экземпляра сервера Параметры сервера, также называемые параметрами экзем-пляра, задаются посредством выполнения хранимой процедуры sp_configure. Базы данных Параметры БД, также называемые параметрами уровня базы данных, задаются путем выполнения инструкции ALTER DATABASE. Уровень совместимости БД может быть установлен выполнением хранимой процедуры sp_dbcmptlevel. Соединения Параметры соединения определяются свойствами поставщика Microsoft OLE DB Provider for SQL Server или драйвера SQL Server ODBC - при уста-новке соединения, а также посредством инструкций SET - при установленном соединении. Инструкции или пакета инструкций Параметры уровня пакета инструкций зада-ются с помощью инструкций SET. Параметры уровня инструкции устанавливаются в индивидуальных инструкциях Transact-SQL. Табл. 4-3. (окончание)
Конфигурирование и настройка Microsoft SQL Server Глава 4 73 Каждый из вышеперечисленных блоков параметров можно рассматривать как один из уровней в иерархии конфигурации SQL Server. Когда параметр поддерживается более чем на одном уровне, приоритет применения значения параметра определяется в соответствии со следующим порядком. 1. Параметр сервера. 2. Параметр БД. 3. Параметр пакета инструкций/соединения (устанавливается с помощью инструкций SET). 4. Параметр индивидуальной инструкции SQL (устанавливается с помощью указаний (hints)). Примечание Хранимая процедура sp_configure поддерживает параметр user options, позволяющий изменять глобальные значения по умолчанию для некоторых параметров пакета инструкций/соединения. Хотя выглядит это так, будто параметр user options яв-ляется параметром конфигурации экземпляра сервера, на самом деле он определяет значения параметров пакета инструкций/соединения. В предыдущих версиях SQL Server параметры уровня пакета инструкций SQL назывались параметрами уровня соединения. В SQL Server 2005 параметры уровня пакета инструкций при отключении использования множественных активных результирующих наборов данных также считаются параметрами уровня соединения. Для изменения параметров базы данных используйте инструкцию ALTER DATABASE, параметров уровня сервера - хранимую процедуру sp_configure, а для из-менения параметров, влияющих только на текущий сеанс соединения, - инструкции SET. В случае конфликта параметров те из них, которые были установлены позже, имеют приоритет над установленными ранее. Например, параметры соединения имеют приоритет над параметрами базы данных и параметрами сервера. Работа с параметрами пакета инструкций/соединения Обычно параметры пакета инструкций/соединения устанавливаются пользователями внутри пакета инструкций или сценария с помощью инструкций SET и остаются действительными до тех пор, пока не будут переустановлены или не закончится сеанс пользовательского соединения. Параметры данного типа также могут быть установ-лены внутри хранимой процедуры или триггера. Действительными в этом случае они остаются до их переустановки внутри хранимой процедуры или триггера, или пока управление не вернется к коду, который вызвал хранимую процедуру или триггер. Некоторые параметры, устанавливаемые инструкциями SET, применяются во время синтаксического анализа кода, другие - при его выполнении. Параметрами, применяемыми во время синтаксического анализа, являются QUOTED_INDENTIFIER, PARSEONLY, OFFSETS и FIPS_FLAGGER. Все остальные - это параметры времени исполнения. Первые указанные параметры применяются, как только они встречаются в коде во время синтаксического анализа. Параметры времени выпол-нения применяются при выполнении кода, в котором они заданы. Пакеты инструкций анализируются целиком до их выполнения. Это означает, что инструкции, управляющие логикой выполнения, не влияют на параметры времени синтаксического анализа. Параметры времени выполнения, напротив, зависят и от управляющих инструкций, и от собственно своего выполнения. То есть они устанав-ливаются только тогда, когда управление переходит к части пакета, их содержащей, и инструкции, устанавливающие эти параметры, выполняются без ошибок. Если выполнение прерывается до того, как установлен параметр времени выполнения, 
74 Часть I Основы администрирования Microsoft SQL Server 2005 или во время обработки инструкции, которая должна его установить, то параметр не устанавливается. При подключении пользователя к базе данных параметры соединения, определя-емые драйвером ODBC и OLE DB (пользователя, сервера и соединения), могут быть автоматически установлены в значение ON (Включен). Если пользователь изменяет параметры соединения внутри пакета инструкций или сценария, содержащего дина-мический SQL, такие изменения действительны только до окончания выполнения этого пакета или сценария. Примечание Соединения, поддерживающие множественные активные результирующие наборы данных, ведут список значений по умолчанию параметров соединения. Когда в контексте такого соединения выполняется пакет инструкций или сценарий, значения по умолчанию параметров соединения копируются в среду выполняемого запроса. Они оста-ются действительными, если не будут переустановлены внутри запроса. При завершении пакета инструкций или сценария значения параметров среды выполнения копируются назад, в значения по умолчанию всего сеанса соединения. Это гарантирует, что каждый из несколько пакетов инструкций, выполняющихся одновременно в контексте одного соединения, будет иметь свою собственную среду параметров пакета. Однако это же означает, что текущие значения по умолчанию для соединения зависят от последнего пакета инструкций или сценария, завершившего выполнение. В табл. 4-4 приведен список доступных параметров пакета инструкций/соединения, а также даны соответствующие им параметры базы данных и сервера, поддерживае-мые SQL Server 2005, и их значения по умолчанию (если применимо). Инструкция SET ANSI_DEFAULTS предоставляет наиболее быстрый способ установки значений по умолчанию для параметров соединения, определенных в стандарте SQL-92. При применении этой инструкции сбрасываются значения следующих параметров: SET ANSI_NULLS, SET CURSOR_CLOSE_ON_COMMIT, SET ANSI_NULL_DFLT_ON, SET IMPLICIT_TRANSACTIONS, SET ANSI_PADDING, SET QUOTED_IDENTIFIER и SET ANSI_WARNINGS. Табл. 4-4. Параметры конфигурации пакета инструкций/соединения Параметр пакета инструкций/соединения Параметр БД Параметр сервера Значение по умолчанию ANSI_DEFAULTS Нет Нет Недоступно ANSI_NULL_DFLT_OFF ANSI_NULL_DFLT_ON ANSI_NULL_DEFAULT Значение по умол-чанию user options OFF ANSI_NULLS ANSI_NULLS Значение по умол-чанию user options OFF ANSI_PADDING ANSI_PADDING Значение по умол-чанию user options ON ANSI_WARNINGS ANSI_WARNINGS Значение по умол-чанию user options OFF ARITHABORT ARITHABORT Значение по умол-чанию user options OFF ARITHIGNORE Нет Значение по умол-чанию user options OFF CONCAT_NULL_YIELDS_NULL CONCAT_NULL_ YIELDS_NULL Нет OFF CONTEXT_INFO Нет Нет OFF CURSOR_CLOSE_ON_COMMIT CURSOR_CLOSE_ ON_COMMIT Значение по умол-чанию user options OFF
Конфигурирование и настройка Microsoft SQL Server Глава 4 75 Параметр пакета инструкций/соединения Параметр БД Параметр сервера Значение по умолчанию DATEFIRST Нет Нет 7 DATEFORMAT Нет Нет mdy DEADLOCK_PRIORITY Нет Нет NORMAL FIPS_FLAGGER Нет Нет OFF FMTONLY Нет Нет OFF FORCEPLAN Нет Нет OFF IDENTITY_INSERT Нет Нет OFF IMPLICIT_TRANSACTIONS Нет Значение по умол-чанию user options OFF LANGUAGE Нет Нет us_english LOCK_TIMEOUT Нет Нет -1 (ждать вечно) NOCOUNT Нет Значение по умол-чанию user options OFF NOEXEC Нет Нет OFF NUMERIC_ROUNDABORT NUMERIC_ ROUNDABORT Нет OFF OFFSETS Нет Нет OFF PARSEONLY Нет Нет OFF QUERY_GOVERNOR_COST_LIMIT Нет query governor cost limit OFF QUOTED_IDENTIFIER quoted identifier Значение по умол-чанию user options OFF REMOTE_PROC_TRANSACTIONS Нет Нет OFF ROWCOUNT Нет Нет OFF SHOWPLAN_ALL Нет Нет OFF SHOWPLAN_TEXT Нет Нет OFF SHOWPLAN_XML Нет Нет OFF STATISTICS IO Нет Нет OFF STATISTICS PROFILE Нет Нет OFF STATISTICS TIME Нет Нет OFF STATISTICS XML Нет Нет OFF TEXTSIZE Нет Нет OFF TRANSACTION ISOLATION LEVEL Нет Нет Недоступно XACT_ABORT Нет Нет OFF Работа с параметрами сервера Параметры конфигурации сервера можно установить, используя диалоговые окна свойств в утилите SQL Server Management Studio или с помощью хранимой про-цедуры sp_configure. Разница между двумя методами заключается в том, какие па-раметры доступны для установки. Через утилиту доступны только наиболее часто используемые параметры сервера, тогда как хранимая процедура может установить все параметры сервера. В табл. 4-5 приведен список доступных параметров сервера. Также даны соответствующие им параметры пакета инструкций/соединения и пара-метры базы данных, поддерживаемые SQL Server 2005, и их значения по умолчанию (если применимо). Табл. 4-4. (окончание)
76 Часть I Основы администрирования Microsoft SQL Server 2005 Табл. 4-5. Параметры конфигурации сервера Параметр сервера Параметр пакета инструкций/соединения Параметр БД Значение по умолчанию Ad Hoc Distributed Queries Нет Нет 0 affinity I/O mask Нет Нет 0 affinity64 I/O mask (только для 64-битных редакций) Нет Нет 0 affinity mask Нет Нет 0 affinity64 mask (только для 64-битных редакций) Нет Нет 0 Agent XPs Нет Нет 0 allow updates Нет Нет 0 awe enabled Нет Нет 0 blocked process threshold Нет Нет 0 c2 audit mode Нет Нет 0 clr enabled Нет Нет 0 cost threshold for parallelism Нет Нет 5 cross db ownership chaining Нет Нет 0 cursor threshold Нет Нет -1 Database Mail XPs Нет Нет 0 default full-text language Нет Нет 1033 default language Нет Нет 0 default trace enabled Нет Нет 1 disallow results from triggers Нет Нет 0 fill factor Нет Нет 0 ft crawl bandwidth (max) Нет Нет 100 ft crawl bandwidth (min) Нет Нет 0 ft notify bandwidth (max) Нет Нет 100 ft notify bandwidth (min) Нет Нет 0 index create memory Нет Нет 0 in-doubt xact resolution Нет Нет 0 lightweight pooling Нет Нет 0 locks Нет Нет 0 max degree of parallelism Нет Нет 0 max full-text crawl range Нет Нет 4 max server memory Нет Нет 2 147 483 647 max text repl size Нет Нет 65 536 max worker threads Нет Нет 255; зависит от количества процессоров media retention Нет Нет 0 min memory per query Нет Нет 1024 min server memory Нет Нет 8 nested triggers Нет Нет 1 network packet size Нет Нет 4096 Ole Automation Procedures Нет Нет 0 open objects Нет Нет 0 PH_timeout Нет Нет 60
Конфигурирование и настройка Microsoft SQL Server Глава 4 77 Параметр сервера Параметр пакета инструкций/соединения Параметр БД Значение по умолчанию precompute rank Нет Нет 0 priority boost Нет Нет 0 query governor cost limit QUERY_GOVERNOR_ COST_LIMIT Нет 0 query wait Нет Нет -1 recovery interval Нет Нет 0 remote access Нет Нет 1 remote admin connections Нет Нет 0 remote login timeout Нет Нет 20 remote proc trans Нет Нет 0 remote query timeout Нет Нет 600 scan for startup procs Нет Нет 0 server trigger recursion Нет Нет 1 set working set size Нет Нет 0 show advanced options Нет Нет 0 SMO and DMO XPs Нет Нет 1 SQL Mail XPs Нет Нет 0 transform noise words Нет Нет 0 two digit year cutoff Нет Нет 2049 user connections Нет Нет 0 User Instance Timeout (только для редакции Express Edition) Нет Нет 10 user instances enabled (только для редакции Express Edition) Нет Нет 0 user options ANSI_NULL_DFLT_ON ANSI_NULL_DFLT_ OFF ANSI_NULL_ DEFAULT OFF ANSI_NULLS ANSI_NULLS OFF ANSI_PADDING ANSI_ PADDING ON ANSI_WARNINGS ANSI_WARNINGS OFF CURSOR_CLOSE_ ON_COMMIT CURSOR_ CLOSE_ON_ COMMIT OFF IMPLICIT_ TRANSACTIONS Нет OFF QUOTED_ IDENTIFIER QUOTED_ IDENTIFIER OFF ARITHABORT OFF ARITHIGNORE Нет OFF DISABLE_DEF_ CNST_CHK Нет OFF NOCOUNT Нет OFF Табл. 4-5. (продолжение) (см. след. стр.)
78 Часть I Основы администрирования Microsoft SQL Server 2005 Параметр сервера Параметр пакета инструкций/соединения Параметр БД Значение по умолчанию Web Assistant Procedures Нет Нет 0 xp_cmdshell Нет Нет 0 Работа с параметрами БД Параметры конфигурации базы данных изменяются с помощью инструкция ALTER DATABASE. Для новых установок SQL Server параметры конфигурации БД model и master одинаковы. При создании новых баз данных параметры по умолчанию для них берутся из БД model. Всякий раз при изменении какого-либо параметра ядро базы данных перекомпилирует содержимое ее кэша. В табл. 4-6 приведен перечень доступных параметров БД, даются соответствующие им параметры пакета инструк-ций/соединения и параметры сервера, поддерживаемые SQL Server 2005, а также их значения по умолчанию (если применимо). Табл. 4-6. Параметры конфигурации БД Параметр БД Параметр пакета инструкций/соединения Параметр сервера Значение по умолчанию ANSI_NULL_DEFAULT ANSI_NULL_DFLT_ ON ANSI_NULL_DFLT_OFF Значение по умолчанию user options OFF ANSI_NULLS ANSI_NULLS Значение по умолчанию user options OFF ANSI_PADDING ANSI_ PADDING Значение по умолчанию user options OFF ANSI_WARNINGS ANSI_ WARNINGS Значение по умолчанию user options OFF AUTO_CLOSE Нет Нет OFF AUTO_CREATE_STATISTICS Нет Нет ON AUTO_SHRINK Нет Нет OFF AUTO_UPDATE_STATISTICS Нет Нет ON AUTO_UPDATE_ STATISTICS_ASYNC Нет Нет OFF CONCAT_NULL_YIELDS_ NULL CONCAT_ NULL_YIELDS_NULL Нет OFF CURSOR_CLOSE_ON_ COMMIT CURSOR_CLOSE_ON_ COMMIT Значение по умолчанию user options OFF CURSOR_DEFAULT Нет Нет GLOBAL MERGE PUBLISH Нет Нет FALSE DB_STATE Нет Нет ONLINE PUBLISHED Нет Нет FALSE QUOTED_IDENTIFIER QUOTED_IDENTIFIER Значение по умолчанию user options ON Табл. 4-5. (окончание)
Конфигурирование и настройка Microsoft SQL Server Глава 4 79 Параметр БД Параметр пакета инструкций/соединения Параметр сервера Значение по умолчанию READ_ONLY Нет Нет FALSE RECOVERY BULK_ LOGGGED Нет Нет FALSE RECOVERY SIMPLE Нет Нет TRUE RECURSIVE_TRIGGERS Нет Нет FALSE RESTRICTED_USER Нет Нет FALSE SINGLE_USER Нет Нет FALSE SUBSCRIBED Нет Нет TRUE TORN_PAGE_DETECTION Нет Нет TRUE Управление уровнем совместимости БД По умолчанию при создании новой базы данных в SQL Server 2005 ее уровень со-вместимости устанавливается в значение 90. Когда какая-либо БД, созданная в пред-ыдущих версиях SQL Server, обновляется для использования в SQL Server 2005, ее уровень совместимости остается прежним: 80 - для SQL Server 2000; 70 - для SQL Server 7.0; 65 - для SQL Server 6.5. Хотя нельзя модифицировать уровень совместимости БД master, его можно из-менить для БД model. Это позволяет создавать новые базы данных со значением уровня совместимости, отличным от значения по умолчанию. Для изменения уровня совместимости применяется хранимая процедура sp_dbcmptlevel. Она также позволяет установить уровень совместимости для определенной БД. При этом задаются некоторые аспекты поведения базы данных, делая ее совместимой с указанной предыдущей версией SQL Server. В следующем примере изменяется уро-вень совместимости для БД Personnel, что делает ее совместимой с SQL Server 2000: EXEC sp_dbcmptlevel 'Personnel', '80'; GO При возможных конфликтах между параметрами совместимости (и другими па-раметрами) важно знать, какой контекст БД используется. Вообще говоря, текущий контекст базы данных - это БД, определенная посредством инструкции USE, если речь идет о пакете инструкций либо сценарии, или БД, содержащая хранимую про-цедуру, если речь идет о выполнении таковой. Когда хранимая процедура выполняется из пакета инструкций или другой хранимой процедуры, это происходит в контексте параметров конфигурации той базы данных, в которой она хранится. Например, когда хранимая процедура, содержащаяся в БД Support, вызывает хранимую процедуру, содержащуюся в БД Personnel, процедура БД Support выполняется c применением уровня совместимости этой же базы данных, а в случае с БД Personnel - соответ-ственно, БД Personnel. Примечание Для базы данных с индексированными представлениями не может быть установлен уровень совместимости ниже 80. А параметры БД CONCAT_NULL_YIELDS_ NULL и пакета инструкций/соединения CONCAT_NULL_YIELDS_NULL игнорируются в том случае, если уровень совместимости ниже 70. Табл. 4-6. (окончание)
80 Часть I Основы администрирования Microsoft SQL Server 2005 Настройка SQL Server с помощью хранимых процедур Многие функции SQL Server настраиваются с помощью диалогового окна Server Properties (Свойства сервера), которое описывается в главе 5. Как уже говорилось выше, SQL Server можно настраивать также с помощью хранимых процедур sp_configure и sp_dboption. Хранимые процедуры и другие запросы запускаются на выполнение из SQL Server Management Studio. В эту утилиту встроен клиентский модуль, функ-циональность которого реализована в окне Query (Запрос). С его помощью можно посылать запросы экземпляру SQL Server, который, в свою очередь, эти запросы анализирует, компилирует и выполняет. Следующие разделы объясняют, как настроить SQL Server с помощью хранимых процедур. Более подробное описание SQL Server Management Studio вы найдете в других главах книги. Использование SQL Server Management Studio для выполнения запросов Чтобы запустить SQL Server Management Studio и использовать встроенный модуль формирования запросов, выполните предложенные ниже действия. 1. В меню Start (Пуск) раскройте командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните утилиту SQL Server Management Studio. Или же наберите sqlwb в командной строке. 2. В диалоговом окне Connect to Server (Подключиться к серверу), показанном на рис. 4-1, используйте раскрывающийся список Server type (Тип сервера) для вы-бора компонента БД, с которым требуется установить соединение, например Database Engine (Ядро базы данных). Рис. 4-1. Диалоговое окно Connect to Server 3. В поле Server name (Имя сервера) введите имя компьютера, на котором запущен SQL Server, например CorpSvr04. По умолчанию соединение устанавливается с экземпляром по умолчанию (если предварительно не был настроен другой эк-земпляр по умолчанию). В раскрывающемся списке Server name (Имя сервера) можно выбрать имя экземпляра, с которым ранее уже устанавливалось соединение. Чтобы подключиться к какому-либо экземпляру в первый раз, в этом же списке выберите пункт <Browse for more.> (Поиск других серверов). В появившемся 
Конфигурирование и настройка Microsoft SQL Server Глава 4 81 диалоговом окне произведите поиск в лесу службы каталогов Active Directory и выберите экземпляр, с которым требуется установить соединение. Совет Подключиться можно только к зарегистрированным серверам. Поэтому если SQL Server, с которым предстоит работать, не зарегистрирован, прежде всего сделайте это. Как выполняется такая процедура, описано в разделе "Управление серверами" главы 5. 4. В списке Authentication (Аутентификация) выберите один из типов аутентифи-кации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User name (Имя пользователя) введите имя учетной записи Windows или SQL Server, а в поле Password (Пароль) - пароль. : Windows Authentication (Аутентификация Windows) Для подключения к серверу используется учетная запись домена Windows и ее пароль. Применимо только в том случае, если включен режим аутентификации Windows и учетная запись Windows имеет соответствующие права на подключение к SQL Server. : SQL Server Authentication (Аутентификация SQL Server) Для подключения к серверу используется учетная запись SQL Server и ее пароль. Чтобы не при-ходилось вводить пароль каждый раз при подключении, установите флажок Remember password (Запомнить пароль). 5. Если вместо базы данных по умолчанию вы хотите подключиться к другой, щел-кните кнопку Options (Параметры), откройте вкладку Connection Properties (Свой-ства соединения) и в раскрывающемся списке Connect to database (Подключиться к базе данных) выберите нужную БД. 6. Щелкните кнопку Connect (Подключиться). 7. Чтобы открыть окно формирования запросов в SQL Server Management Studio, в панели инструментов Standard (Стандартная) щелкните кнопку необходимого типа запроса, например Database Engine Query (Запрос ядра базы данных). 8. Отобразится диалоговое окно Connect to... (Подключиться к...), аналогичное по-казанному на рис. 4-1 (поле Server type (Тип сервера) появляется уже с предо-пределенным значением, которое зависит от типа выбранного запроса). Далее нужно пройти процесс подключения, описанный выше, в пунктах 3-6. Если в SQL Server Management Studio уже аутентифицировано соединение и вы-брана активная база данных, можно подключиться к текущему экземпляру сервера, применив для входа текущую информацию аутентификации. Для этого в панели Object Explorer (Обозреватель объектов) в контекстном меню сервера выполните команду New Query (Создать запрос) или же в панели инструментов Standard (Стандартная) щелкните кнопку New Query (Создать запрос). Выполнение запросов для изменения параметров конфигурации Как правило, окно SQL Management Studio при работе с запросами разделено на три части (рис. 4-2). Слева обычно отображаются панели, позволяющие просматривать доступные объекты на экземпляре сервера БД, выбранном в данное время, - Registered Servers (Зарегистрированные серверы) и Object Explorer (Обозреватель объек-тов). В области вверху справа можно запрос ввести, а в области ниже - просмотреть результат его выполнения. Если вы не видите область для вывода результатов, не беспокойтесь. Она появится автоматически при выполнении запроса. Но с помощью команды Show Results Pane 
82 Часть I Основы администрирования Microsoft SQL Server 2005 (Отобразить область результатов) меню Window (Окно) можно установить ее ото-бражение по умолчанию. Как вам уже известно, для просмотра и изменения параметров конфигурации SQL Server применяется хранимая процедура sp_configure. Доступны два типа параметров конфигурации: динамические и нединамические. Применительно к нашему случаю, динамическим параметром является тот, который можно изменить без остановки и перезапуска SQL Server. Для выполнения хранимой процедуры sp_configure или запро-сов других типов введите команду в верхней области окна запросов, затем щелкните кнопку Execute (Выполнить) в панели инструментов (красный знак восклицания). Введенные команды также можно выполнять, используя следующие сочетания кла-виш: F5, Ctrl+E и Alt+X. Рис. 4-2. Окно SQL Server Management Studio при работе с запросами Примечание По умолчанию разрешение на выполнение хранимой процедуры sp_configure имеют все пользователи, и, значит, все они могут просматривать текущие значения пара-метров. Однако использовать хранимую процедуру sp_configure для изменения параметров конфигурации могут лишь пользователи с разрешением уровня сервера Alter Settings (Изменение параметров настройки). По умолчанию такое разрешение предоставлено только членам встроенных ролей сервера sysadmin и serveradmin. Также и выполнять инструкцию RECONFIGURE или RECONFIGURE WITH OVERRIDE могут только пользова-тели с разрешением уровня сервера Alter Settings (Изменение параметров настройки). Когда устанавливается параметр с помощью хранимой процедуры sp_configure, изменения в действительности не происходят до выполнения инструкции RECONFIGURE. Некоторые параметры, значения которых критичны для функционирования сервера и потому контролируются при вводе, можно изменить только с помощью инструкции RECONFIGURE WITH OVERRIDE. Кроме того, параметры, устанав-
Конфигурирование и настройка Microsoft SQL Server Глава 4 83 ливаемые хранимой процедурой sp_configure, делятся на две категории: стандартные и дополнительные. Параметры первой категории доступны для просмотра и изменения в любой момент, но в случае дополнительных параметров требуется сначала устано-вить значение параметра show advanced options равным 1. Тогда можно просматривать и изменять обе категории параметров. Для этого выполните следующие действия. 1. В окне запросов SQL Server Management Studio наберите: EXEC sp_configure 'show advanced options', 1 GO RECONFIGURE GO Совет Позже можно запретить просмотр и изменение дополнительных параметров, установив для параметра show advanced options значение 0. 2. Выполните команды, нажав сочетание клавиш Ctrl+E. 3. Очистите окно запросов. 4. Теперь введите по одной команде выполнения хранимой процедуры sp_configure для каждого параметра, который следует изменить. 5. Наберите инструкцию RECONFIGURE (или RECONFIGURE WITH OVERRIDE). 6. Введите команду GO. 7. Выполните весь пакет, нажав сочетание клавиш Ctrl+E. 8. Если вы изменили нединамические параметры, остановите и запустите сервер (подробные сведения даны в табл. 4-7 и табл. 4-8). Просмотр и изменение параметров сервера с помощью хранимой процедуры sp_configure В табл. 4-7 представлен перечень стандартных параметров конфигурации сервера. Параметры приведены в алфавитном порядке, даны их минимальные и максимальные значения, а также значения по умолчанию. Столбец "Динамический (Да/Нет)" пока-зывает, является ли параметр динамическим. Если в этом столбце указано "Нет", из-менения параметра вступают в силу только после остановки и перезапуска сервера. Табл. 4-7. Краткая сводка стандартных параметров конфигурации сервера Параметр Минимальное значение Максимальное значение Значение по умолчанию Динамический (Да/Нет) allow updates 0 1 0 Да clr enabled 0 1 0 Да cross db ownership chaining 0 1 0 Да cursor threshold -1 2 147 483 647 -1 Да default language 0 9999 0 Да nested triggers 0 1 1 Да remote access 0 1 1 Нет remote admin connections 0 1 0 Да remote login timeout 0 2 147 483 647 20 Да (см. след. стр.)
84 Часть I Основы администрирования Microsoft SQL Server 2005 Параметр Минимальное значение Максимальное значение Значение по умолчанию Динамический (Да/Нет) remote proc trans 0 1 0 Да remote query timeout 0 2 147 483 647 600 Да server trigger recursion 0 1 1 Да show advanced options 0 1 0 Да user options 0 32 767 0 Да В табл. 4-8 представлен перечень дополнительных параметров конфигурации сер-вера. Для просмотра или изменения этих параметров сначала необходимо установить значение show advanced options равным 1. Параметры, для которых предусмотрена возможность самонастройки, отмечены звездочкой (*). Например, значение 1024 параметра max worker threads является максимальным рекомендованным значением для 32-битных операционных систем. При установке для этого параметра значения 0 (что является значением по умолчанию) сервер при запуске сам определяет необхо-димое значение, исходя из формулы 256 + (количество процессоров -4) * 8. Имейте в виду, что некоторые дополнительные параметры нельзя изменить (их можно только просматривать). Табл. 4-8. Краткая сводка дополнительных параметров конфигурации сервера Параметр Минимальное значение Максимальное значение Значение по умолчанию Динамический (Да/Нет) Ad Hoc Distributed Queries 0 1 0 Да affinity I/O mask -2 147 483 648 2 147 483 647 0 Нет affinity mask -2 147 483 648 2 147 483 647 0 Нет Agent XPs 0 1 0 Да awe enabled 0 1 0 Нет blocked process threshold 0 86 400 0 Да c2 audit mode 0 1 0 Нет cost threshold for parallelism 0 32 767 5 Да Database Mail XPs 0 1 0 Да default full-text language 0 2 147 483 647 1033 Да default trace enabled 0 1 1 Да disallow results from triggers 0 1 0 Да fill factor 0 100 0 Нет ft crawl bandwidth (max) 0 32 767 100 Да ft crawl bandwidth (min) 0 32 767 0 Да ft notify bandwidth (max) 0 32 767 100 Да ft notify bandwidth (min) 0 32 767 0 Да index create memory* 704 2 147 483 647 0 Нет in-doubt xact resolution 0 2 0 Да lightweight pooling 0 1 0 Нет locks* 5000 2 147 483 647 0 Нет max degree of parallelism 0 64 0 Да Табл. 4-7. (окончание)
Конфигурирование и настройка Microsoft SQL Server Глава 4 85 Параметр Минимальное значение Максимальное значение Значение по умолчанию Динамический (Да/Нет) max full-text crawl range 0 256 4 Да max server memory* 16 2 147 483 647 2 147 483 647 Нет max text repl size 0 2 147 483 647 65 536 Да max worker threads 128 32767 0 Нет media retention 0 365 0 Нет min memory per query 512 2 147 483 647 1024 Да min server memory* 0 2 147 483 647 0 Нет network packet size 512 32 767 4096 Да OLE Automation Procedures 0 1 0 Да open objects 0 2 147 483 647 0 Нет ph_timeout 1 3600 60 Да precompute rank 0 1 0 Да priority boost 0 1 0 Нет query governor cost limit 0 2 147 483 647 0 Да query wait -1 2 147 483 647 -1 Да recovery interval* 0 32 767 0 Нет Replication XPs 0 1 0 Да scan for startup procs 0 1 0 Нет set working set size 0 1 0 Нет SMO and DMO XPs 0 1 1 Да SQL Mail XPs 0 1 0 Да transform noise words 0 1 0 Да two digit year cutoff 1753 9999 2049 Да user connections* 0 32 767 0 Да Web Assistant Procedures 0 1 0 Да xp_cmdshell 0 1 0 Да Текущие значения всех параметров конфигурации сервера можно просмотреть, выполнив следующий запрос: EXEC sp_configure GO Примечание Для просмотра дополнительных параметров установите значение 1 для параметра show advanced options. Чтобы просмотреть текущее значение параметра конфигурации, выполните запрос: EXEC sp_configure 'option_name' GO где option_name - имя параметра, который следует просмотреть, например: EXEC sp_configure 'allow updates' GO Табл. 4-8. (окончание)
86 Часть I Основы администрирования Microsoft SQL Server 2005 Для изменения значения параметра нужно выполнить такой запрос: EXEC sp_configure 'option_name', new_value GO reconfigure with override GO где option_name - имя параметра, который вы хотите изменить, и new_value - новое значение для этого параметра, например: EXEC sp_configure 'allow updates', 1 GO reconfigure with override GO Примечание При использовании инструкции RECONFIGURE ключевое слово WITH OVERRIDE не всегда обязательно. Оно необходимо лишь при установке нерекомендованных значений параметров. Помните также, что некоторые изменения параметров будут при-менены только при перезапуске экземпляра SQL Server. Изменение параметров БД с помощью хранимой процедуры sp_dboption Изменение параметров конфигурации базы данных можно производить с помощью хранимой процедуры sp_dboption, которая реализована как надстройка над инструк-цией ALTER DATABASE*. По умолчанию все пользователи имеют разрешение на выполнение хранимой процедуры sp_dboption, что дает возможность просматривать параметры БД. Однако только члены встроенных ролей сервера sysadmin и dbcreator, а также встроенной роли базы данных db_owner, могут использовать хранимую про-цедуру sp_dboption для изменения параметров БД. При ее выполнении сервер при-нудительно выполняет в базе данных, для которой был изменен параметр, операцию контрольной точки, поэтому изменения вступают в силу незамедлительно. В табл. 4-9 дан обзор параметров, которые можно настроить с помощью хранимой процедуры sp_dboption. Все приведенные параметры могут принимать значения TRUE (1) или FALSE (0). Например, если к базе данных CustomerSupport не подключены пользователи, можно перевести ее в режим "только для чтения", выполнив следую-щие команды: USE master; GO EXEC sp_dboption 'CustomerSupport', 'read only', 'TRUE'; Табл. 4-9. Краткая сводка параметров БД Параметр При значении TRUE ANSI null default Инструкция CREATE TABLE использует правила стандарта SQL-92 для определения того, позволяет ли столбец значения NULL ANSI nulls Все сравнения данных со значением NULL дают результат UNKNOWN. (При значении FALSE, если данные не UNICODE и оба значения равны NULL, результат сравнения будет TRUE.) * Microsoft предоставляет хранимую процедуру sp_dboption для обеспечения обратной совме-стимости и не рекомендует ее использование в новых разработках. Предпочтительным является применение инструкции ALTER DATABASE. - Прим. ред.
Конфигурирование и настройка Microsoft SQL Server Глава 4 87 Параметр При значении TRUE ANSI padding С целью заполнить всю ширину столбца к значениям данных типа character добавляются конечные пробелы, а к значениям данных типа binary добавляются конечные нули ANSI warnings Генерируются сообщения об ошибке или предупреждения при воз-никновении некоторых ошибочных ситуаций, например делении на ноль Arithabort Ошибка переполнения или деления на ноль приводит к прерыванию запроса или пакета инструкций. Если ошибка происходит внутри транзакции, выполняется откат транзакции. (При значении FALSE отображается предупредительное сообщение, но выполнение про-должается, как будто ошибки не было.) auto create statistics Вся недостающая статистика, необходимая для оптимизации запро-са, генерируется автоматически auto update statistic Вся устаревшая статистика, необходимая для оптимизации запроса, обновляется автоматически Autoclose После отключения последнего пользователя БД автоматически за-крывается и используемые ею системные ресурсы освобождаются Autoshrink Включено автоматическое периодическое уменьшение файлов БД concat null yields null Если у одного из операндов операции конкатенации значение равно NULL, то результат будет NULL cursor close on commit При завершении транзакции все открытые курсоры закрываются, независимо от того, закончилась транзакция успешно или произо-шел ее откат. (При значении FALSE, если транзакция завершается успешно, курсоры остаются открытыми. Откат транзакции закрыва-ет все курсоры, кроме тех, которые были определены как INSENSITIVE или STATIC.) db_chaining БД может быть источником или целью цепочки владения между базами данных dbo use only Только владелец БД может ее использовать default to local cursor По умолчанию все курсоры определяются как LOCAL merge publish БД может быть опубликована для репликации сведением numeric roundabort При попытке задать переменной или столбцу значение более вы-сокой точности, чем позволяет тип данных, генерируется ошибка. (При значении FALSE результат округляется до точности столбца или переменной, хранящей результат, и сообщение об ошибке не генерируется.) Offline БД в автономном режиме. (При значении FALSE база данных в опе-ративном режиме.) Published БД может быть опубликована для репликации quoted identifier Строки, заключенные в двойные кавычки, рассматриваются как ограниченные идентификаторы, то есть имена объектов read only БД переведена в режим "только для чтения" (однако можно удалить ее, используя инструкцию DROP DATABASE). Во время установки этого параметра БД, для которой он изменяется, не должна исполь-зоваться (за исключением БД master, которая может применяться только администратором) (см. след. стр.) Табл. 4-9. (продолжение)
88 Часть I Основы администрирования Microsoft SQL Server 2005 Параметр При значении TRUE recursive triggers Разрешает выполнение вложенных (рекурсивных) триггеров. (При значении FALSE предотвращает прямую рекурсию, но непрямая ре-курсия возможна. Для отключения непрямой рекурсии установите для параметра сервера nested triggers значение 0, используя храни-мую процедуру sp_configure.) select into/bulkcopy Устанавливает модель восстановления БД в BULK_LOGGED single user Только один пользователь может получить доступ к БД в определен-ный момент времени Subscribed БД может быть подписана для публикации torn page detection Позволяет обнаруживать незавершенные (в результате сбоя опера-ции записи) страницы trunc. log on chkpt. Устанавливает модель восстановления БД SIMPLE; кроме того, каждая операция контрольной точки производит усечение неактив-ной части журнала. (При значении FALSE устанавливает модель восстановления FULL.) Это единственный параметр, который может быть установлен для БД master, и он должен быть установлен в TRUE Табл. 4-9. (окончание)
Часть II Администрирование Microsoft SQL Server 2005 Часть II посвящена рассмотрению ключевых приемов и методов администрирования Microsoft SQL Server 2005. В главе 5 приведены наиболее часто используемые способы управления серверами. Вы также узнаете, как контролировать процессы, выполняющиеся на сервере, и управлять связанными с сервером компонентами. В главе 6 описывается настройка конфи-гурации SQL Server с помощью утилиты SQL Server Management Studio. Глава 7 представляет основные административные задачи, выполняемые при создании баз данных и управлении ими. И наконец, в главе 8 рассмотрены принципы работы системы безопасности SQL Server и приведена информация по управлению пользователями и их правами. Глава 5. Управление корпоративными серверами ............................................................. 90 Глава 6. Настройка SQL Server с помощью утилиты SQL Server Management Studio ..... 131 Глава 7. Основные задачи администрирования БД ......................................................... 159 Глава 8. Управление системой безопасности SQL Server 2005 ...................................... 204
Глава 5 Управление корпоративными серверами Утилита SQL Server Management Studio - основной инструмент, используемый для управления серверами баз данных. Другие утилиты, позволяющие управлять локаль-ными и удаленными серверами, - это SQL Server 2005 Surface Area Configuration, SQL Server Configuration Manager, а также компоненты панели управления System Monitor (Системный монитор) и Event Viewer (Просмотр событий). SQL Server Configuration Manager применяется для управления службами SQL Server и настройки сетевых протоколов сервера и клиента. System Monitor (Системный монитор) ведет наблюдение за активностью и производительностью SQL Server. Event Viewer (Про-смотр событий) дает возможность просматривать журнал событий, генерируемых SQL Server, в поисках полезных сведений при устранении неполадок. В этой главе вы научитесь работать с SQL Server Management Studio. Утилиты SQL Server 2005 Surface Area Configuration и SQL Server Configuration Manager были описаны в главе 3. А утилиты System Monitor (Системный монитор) и Event Viewer (Просмотр событий) подробно рассматриваются в главе 13. Управление запуском SQL Server Ядро базы данных SQL Server может работать в двух режимах, для чего он запуска-ется или как приложение из командной строки (исполняемый файл SQLServr.exe), или как служба. Запуск из командной строки применяют, когда требуется однополь-зовательский режим работы для выявления и устранения неполадок или изменения параметров конфигурации. В остальных случаях SQL Server запускается в качестве службы. Разрешение и запрещение автоматического запуска SQL Server В главе 3 было рассказано, как использовать утилиту SQL Server Configuration Manager для управления службой SQL Server (MSSQLSERVER), а также службами, со-ответствующими другим экземплярам ядра базы данных и другим компонентам SQL Server. Любая из этих служб может быть настроена как для автоматического запуска, так и для запуска по требованию. Чтобы разрешить или запретить автоматический запуск службы, выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. Для этого в меню Start (Пуск) рас-кройте командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните утилиту SQL Server Management Studio. Или же наберите sqlwb в командной строке. 2. В раскрывающемся списке Server type (Тип сервера) диалогового окна Connect to Server (Подключиться к серверу) выберите компонент БД, с которым требуется установить соединение, например Database Engine (Ядро базы данных). 3. В поле Server name (Имя сервера) введите полное доменное имя или имя узла того сервера, к которому необходимо подключиться, например corpsvr04.cpandl.com или CorpSvr04 (рис. 5-1). По умолчанию соединение устанавливается с экземпля-ром по умолчанию (если предварительно не был настроен другой экземпляр по 
Управление корпоративными серверами Глава 5 91 умолчанию). Если вы хотите использовать для подключения другой экземпляр, выберите его в списке Server name (Имя сервера), но при условии, что с ним ранее уже устанавливалось соединение. Чтобы подключиться к какому-либо экземпляру в первый раз, в этом же списке щелкните элемент <Browse for more.> (Поиск других серверов) и в появившемся диалоговом окне произведите поиск нужного экземпляра в лесу службы каталогов Active Directory. Рис. 5-1. Диалоговое окно Connect to Server Совет Подключиться можно только к зарегистрированным серверам. Поэтому, если SQL Server, с которым предстоит работать, еще не зарегистрирован, прежде всего сделайте это. Как выполняется такая процедура, описано далее, в разделе "Управление серверами". 4. В списке Authentication (Аутентификация) выберите один из типов аутентифи-кации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User name (Имя пользователя) введите имя учетной записи Windows или SQL Server, а в поле Password (Пароль) - пароль. 5. Щелкните кнопку Connect (Подключиться). 6. В панели Registered Servers (Зарегистрированные серверы) щелкните правой кнопкой сервер, который требуется настроить. Из контекстного меню командой SQL Server Configuration Manager запустите утилиту, где целевым компьютером будет выбран тот, на котором установлен необходимый для работы SQL Server. 7. В окне утилиты SQL Server Configuration Manager щелкните слева узел SQL Server 2005 Services (Службы SQL Server 2005). Справа из контекстного меню службы, для которой нужно настроить тип запуска, выберите команду Properties (Свойства). Отобразится диалоговое окно Properties (Свойства). 8. В этом окне можно сделать следующее. : Разрешить автоматический запуск На вкладке Service (Служба) в раскрыва-ющемся списке Start Mode (Тип запуска) выберите значение Automatic (Авто). 
92 Часть II Администрирование Microsoft SQL Server 2005 На вкладке Log On (Вход в систему) щелкните кнопку Start (Пуск), ес ли служ-ба остановлена, то есть в поле Service status (Состояние) отображается значение Stopped (Остановлена). : Запретить автоматический запуск На вкладке Service (Служба) из раскры-вающегося списка Start Mode (Тип запуска) следует выбрать значение Manual (Вручную). 9. Щелкните кнопку OK. Для настройки запуска также можно использовать компонент панели управления Computer Management (Управление компьютером). В этом случае выполните следу-ющие действия. 1. В меню Start (Пуск) выберите пункт Control Panel (Панель управления). Затем щелкните компонент Administrative Tools (Администрирование)\Computer Management (Управление компьютером). 2. По умолчанию вы подключены к локальному компьютеру. Для соединения с уда-ленным компьютером из контекстно го меню узла Computer Management (Управле-ние компьютером) выберите команду Connect to another computer (Подключиться к другому компьютеру). В диалоговом окне Select Computer (Выбор компьютера) выберите положение переключателя Another Computer (Другим компьютером) и в доступном теперь поле введите имя компьютера. Оно может быть указано как имя узла, например CorpSvr04, или как полное доменное имя - corpsvr04.cpandl.com. 3. В панели слева раскройте узел Services and Applica tions (Службы и приложения) и щелкните узел Services (Службы). 4. Справа из контекстного меню службы, для которой нужно настроить тип запуска, выберите команду Properties (Свойства). Отобразится диалоговое окно Properties (Свойства). 5. В этом окне можно сделать следующее. : Разрешить автоматический запуск На вкладке General (Общие) в раскры-вающемся списке Startup Type (Тип запуска) выберите значение Automatic (Авто). Щелкните кнопку Start (Пуск), если служба остановлена, то есть в поле Service status (Состояние) отображается значение Stopped (Остановлена). : Запретить автоматический запуск На вкладке General (Общие) из раскрываю-щегося списка Startup Type (Тип запуска) выберите значение Manual (Вручную). 6. Щелкните кнопку OK. Установка параметров ядра БД Параметры запуска указывают ядру базы данных режим запуска и параметры конфи-гурации, которые при этом нужно устанавливать. Параметры запуска можно задать, используя утилиту SQL Server Configuration Manager или компонент панели управле-ния Computer Management (Управление компьютером). Рекомендуется использовать SQL Server Configuration Manager, поскольку эта утилита предоставляет текущие параметры по умолчанию и позволяет легко их изменять. Совет Параметры запуска также могут быть переданы исполняемому файлу SQLServr. exe при запуске его из командной строки. Если при этом указать в командной строке параметр -c, то SQL Server запустится без использования службы. Файл SQLServr.exe необходимо запускать из каталога Binn, соответствующего экземпляру ядра базы данных SQL Server, который требуется запустить. Для экземпляра по умолчанию SQLServr.exe находится в каталоге MSSQL.1\MSSQL\Binn.
Управление корпоративными серверами Глава 5 93 Добавление параметров запуска Чтобы добавить параметры запуска, нужно выполнить следующие действия. 1. В SQL Server Management Studio в панели Registered Servers (Зарегистрированные серверы) щелкните правой кнопкой сервер, который требуется настроить. Из его контекстного меню командой SQL Server Configuration Manager запустите утилиту, где целевым компьютером будет выбран тот, на котором установлен необходимый для работы SQL Server. 2. В SQL Server Configuration Manager щелкните слева узел SQL Server 2005 Services (Службы SQL Server 2005). Справа из контекстного меню службы, параметры которой нужно изменить, выберите команду Properties (Свойства). Отобразится одноименное диалоговое окно. 3. На вкладке Advanced (Дополнительные) щелкните в поле Startup Parameters (Па-раметры запуска) и с помощью клавиши End переместитесь в конец введенных параметров. Параметры -d, -e и -l установлены по умолчанию. Будьте внима-тельны, чтобы случайно их не изменить. 4. Введите точку с запятой (каждый параметр отделяется этим знаком), затем тире (знак минуса), букву параметра, который следует добавить, и его значение, напри-мер ;-g512. 5. При необходимости повторите пункты 3 и 4, чтобы указать дополнительные па-раметры запуска и их значения. 6. Для сохранения изменений щелкните кнопку Apply (Применить). Параметры будут применены при следующем запуске экземпляра SQL Server. Чтобы использовать параметры немедленно, следует остановить и снова запустить службу, щелкнув кнопку Restart (Перезапустить) на вкладке Log On (Вход в систему). Удаление параметров запуска Для удаления параметров запуска нужно выполнить следующую последовательность действий. 1. В SQL Server Management Studio в панели Registered Servers (Зарегистрированные серверы) щелкните правой кнопкой сервер, который требуется настроить. Из его контекстного меню командой SQL Server Configuration Manager запустите утилиту, где целевым компьютером будет выбран тот, на котором установлен необходимый для работы SQL Server. 2. В SQL Server Configuration Manager щелкните слева узел SQL Server 2005 Services (Службы SQL Server 2005). Справа из контекстного меню службы, параметры которой нужно изменить, выберите команду Properties (Свойства). Отобразится одноименное диалоговое окно. 3. На вкладке Advanced (Дополнительные) щелкните в поле Startup Parameters (Па-раметры запуска). Каждый параметр указывается с помощью тире (знак минуса), буквы параметра и его значения. Точка с запятой используется для разделения значений параметров. 4. Удалите параметр, удалив относящиеся к нему элементы. 5. Щелкните кнопку Apply (Применить). Параметры будут применены при следу-ющем запуске экземпляра SQL Server. Если это нужно сделать немедленно, оста-новите и затем снова запустите службу, щелкнув кнопку Restart (Перезапустить) на вкладке Log On (Вход в систему).
94 Часть II Администрирование Microsoft SQL Server 2005 Общие параметры запуска В табл. 5-1 приведены параметры запуска и примеры их использования. Первые три (-d, -e и -l) являются параметрами по умолчанию для SQL Server. Остальные по-зволяют настроить дополнительные установки. Табл. 5-1. Параметры запуска для SQL Server Параметр Описание Пример -dpath Указывает полный путь к БД master. Если параметр пропущен, используются значения, хранящиеся в системном реестре -dC:\Program Files\ Microsoft SQL Server\ MSSQL.1\MSSQL\ DATA\master.mdf -epath Указывает полный путь к от чету об ошибках. При пропущенном параметре используются значения из системного реестра -eC:\Program Files\ Microsoft SQL Server\ MSSQL.1\MSSQL\ LOG\ERRORLOG -lpath Указывает полный путь к журналу транзакций БД master. Если параметр пропущен, используются значения, хранящиеся в системном реестре -lC:\Program Files\ Microsoft SQL Server\ MSSQL.1\MSSQL\ DATA\mastlog.ldf -B Устанавливает точку прерывания при ошибке; используется с параметром -y при отладке -c Запрещает запуск SQL Server в качестве службы. Ускоряет процесс при запуске SQL Server из командной строки -f Запускает SQL Server в минимальной конфигура-ции. Включает параметр конфигурации сервера allow updates (устанавливается с помощью храни-мой процедуры sp_configure), который отключен по умолчанию -gnumber Указывает количество виртуальной памяти в мега-байтах, резервируемой для SQL Ser ver. Эта память находится вне общего пула памяти и используется библиотеками динамической компоновки (DLL, dynamic link library), реализующими расширенные хранимые процедуры, поставщиками OLE DB, на которые есть ссылка в распределенных запросах, а также объектами автоматизации OLE, на которые есть ссылка в коде Transact-SQL -g256 -m Запускает SQL Server в однопользовательском режиме. Разрешает подключение только одного пользователя, при этом не запускается процесс контрольной точки -n Указывает SQL Server не записывать ошибки в журнал событий приложений. Используется с параметром -e -pnumber Устанавливает уровень точности для типа данных decimal. По умолчанию - 38 десятичных знаков, но разрешен диапазон от 1 до 38. Устанавливается максимальная точность (38), если используется ключ без указания уровня -p38 -sinstance_name Запускает именованный экземпляр SQL Server. Для этого нужно предварительно перейти в соот-ветствующий экземпляру каталог Binn -sdevapps
Управление корпоративными серверами Глава 5 95 Параметр Описание Пример -Tnumber Устанавливает флаг трассировки. Используется для отладки и диагностики проблем производи-тельности -T237 -tnumber Устанавливает внутренний флаг трассировки. Используется только персоналом поддержки SQL Server -t8837 -x Отключает ведение статистики для оценки эффективности использования времени процессо-ра и кэша страниц при операциях ввода-вывода -y1803 -ynumber Указывает код ошибки, при возникновении которой SQL Server создает дамп стека -y1803 Управление службами из командной строки SQL Server запускается, останавливается и приостанавливается, как и любая другая служба. При работе с локальной системой необходимая команда вводится в стандарт-ной командной строке. В случае удаленной системы нужно сначала подключиться к ней, используя клиент Telnet, и затем выполнить необходимую команду. Работая с Windows Server 2003, можно также установить удаленный сеанс с сервером с по-мощью сервера терминалов и получить доступ к командной консоли удаленно. Для управления экземпляром SQL Server по умолчанию в качестве службы применяются следующие команды: NET START MSSQLSERVER - запуск; NET STOP MSSQLSERVER - остановка; NET PAUSE MSSQLSERVER - приостановка; NET CONTINUE MSSQLSERVER - возобновление. Управление именованными экземплярами SQL Server в качестве службы выпол-няется такими командами (instance_na me - имя экземпляра сервера базы данных): NET START MSSQL$instance_name - запуск; NET STOP MSSQL$instance_name - остановка; NET PAUSE MSSQL$instance_name - приостановка; NET CONTINUE MSSQL$instance_name - возобновление. Примечание Если при начальной установке было принято решение не устанавливать экземпляр SQL Server по умолчанию, а вместо этого создать новый именованный экзем-пляр как начальный экземпляр SQL Server, использовать команду NET для управления службами из командной строки невозможно. Управление исполняемым файлом SQL Server из командной строки Запуск исполняемого файла SQL Server (SQLServr.exe) из командной строки является альтернативным запуску SQL Server в качестве службы. SQLServr.exe нужно запускать из каталога Binn, соответствующего экземпляру SQL ядра БД SQL Server, который требуется запустить. Для экземпляра по умолчанию исполняемый файл находится в каталоге MSSQL.1\mssql\Binn. Когда SQL Server установлен на локальной системе, чтобы его запустить нужно перейти в каталог, где находится экземпляр SQL Server, предназначенный для запу-ска, и набрать в командной строке sqlservr. Если система удаленная, подключитесь к ней при помощи клиента Telnet, перейдите в соответствующий каталог и выполните Табл. 5-1. (окончание)
96 Часть II Администрирование Microsoft SQL Server 2005 команду запуска. При работе с Windows Server 2003 можно также установить сеанс сервера терминалов и получить доступ к командной строке удаленно. В любом слу-чае SQL Server считывает параметры загрузки по умолчанию из системного реестра и начинает выполнение. Также в командной строке вводятся параметры загрузки и ключи, которые пере-определяют установки параметров по умолчанию, считываемые из регистра. (Сводка доступных параметров была приведена в табл. 5-1.) К запущенному таким образом сер-веру существует возможность подключиться из SQL Server Management Studio (хотя при этом утилита может неправильно отображать, что запускается служба SQL Server). Чтобы остановить экземпляр SQL Server, запущенный из командной строки, вы-полните следующие действия. 1. Нажмите клавиши Ctrl+C, чтобы прервать выполнение программы. 2. При выдаче запроса Do you wish to shutdown SQL Server (Y/N) (Завершить вы-полнение SQL Server (Y/N)), нажмите клавишу Y для остановки SQL Server. Использование SQL Server Management Studio Утилита SQL Server Management Studio, графический интерфейс которой позволяет выполнять большинство операций администрирования с помощью нескольких щелч-ков мыши, значительно упрощает управление сервером, базами данных и другими ресурсами. Управление локальными и удаленными экземплярами серверов произ-водится посредством подключения к необходимому экземпляру SQL Server и его последующего администрирования. Если соединения удаленных серверов были за-прещены с каким-либо сервером, это значит, что с ним можно работать только через сеанс Telnet или локально. В последнем случае нужно войти в систему, введя имя пользователя и пароль с клавиатуры или установив в Windows удаленный сеанс сер-вера терминалов, а затем запустить локальные утилиты управления. Начало работы с SQL Server Management Studio Чтобы запустить SQL Server Management Studio, в меню Start (Пуск) раскройте командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните соответствующий пункт. Или же наберите sqlwb в командной строке. Затем подключитесь к серверу, с которым будете работать. Это можно сделать несколькими способами: посредством экземпляра сервера, используя стандартную процедуру входа; через определенную БД с помощью стандартной процедуры входа; используя группы серверов и зарегистрированные серверы. Подключение к экземпляру сервера позволяет работать с конкретным сервером и его компонентами. Обычно требуется подключиться к Database Engine (Ядру базы данных). Как видно из рис. 5-2, при подключении к Database Engine (Ядро базы данных) становятся доступны следующие ресурсы, организованные в виде узлов иерархического дерева объектов. Databases (Базы данных) Управляет системными БД, включая master и model (узел System Databases), а также пользовательскими БД и моментальными сним-ками БД (узел Database Snapshots). Также из этого узла можно получить доступ к БД ReportServer и ReportServerTempDB. Security (Безопасность) Управляет учетными записями (узел Logins), ролями сервера (узел Server Roles), связанными серверами и хранимыми учетными дан-ными (узел Credentials).
Управление корпоративными серверами Глава 5 97 Рис. 5-2. Ресурсы Database Engine Server Objects (Объекты сервера) Настраивает устройства резервного копиро-вания (узел Backup Devices), конечные точки HTTP (узел Endpoints), связанные серверы (узел Linked Servers) и триггеры (узел Triggers). Replication (Репликация) Настраивает распространение данных, обновляет паро-ли репликации и запускает утилиту Replication Monitor (Монитор репликации). Management (Управление) Настраивает журналы SQL Server (узел SQL Server Logs), планы обслуживания (узел Maintenance Plans), полнотекстовый поиск (узел Full-Text Search), координатор распределенных транзакций (узел Distributed Transaction Coordinator) и почту БД (узел Database Mail). Также можно настроить уна-следованные возможности (узел Legacy): планы обслуживания баз данных SQL Server 2000, службу SQL Mail и пакеты DTS 2000. Notification Services (Службы уведомлений) Регистрирует экземпляры Notification Services (Службы уведомлений), а также управляет их списками и отменяет регистрацию. SQL Server Agent (Агент SQL Server) Настраивает задания (узел Jobs), опове-щения (узел Alerts), операторов (узел Operators), представителей (узел Proxies) и журналы ошибок (узел Error Logs). Если вы не подключены автоматически или вышли из диалогового окна Connect to. (Подключиться к.), можно подключиться к экземпляру сервера, щелкнув кноп-ку Connect (Подключиться) в верхней части панели Object Explorer (Обозреватель объектов). Информация о входе и серверах сохраняется через регистрацию. Когда зарегистрированные серверы организовать в группы серверов, к ним можно быстро 
98 Часть II Администрирование Microsoft SQL Server 2005 получить доступ через панель Registered Servers (Зарегистрированные серверы). Ме-тоды управления группами серверов и зарегистрированными серверами обсуждаются далее в этой главе, в разделах "Управление группами SQL Server" и "Управление серверами" соответственно. Подключение к определенному экземпляру сервера Чтобы подключиться к определенному экземпляру сервера, используя стандартную процедуру входа, выполните следующие действия. 1. В меню Start (Пуск) раскройте командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните соответствующий пункт. Или же наберите sqlwb в командной строке. 2. В диалоговом окне Connect to Server (Подключиться к серверу) из раскрывающего-ся списка Server type (Тип сервера) выберите компонент БД, с которым требуется установить соединение, например Database Engine (Ядро базы данных). 3. В поле Server name (Имя сервера) введите полное доменное имя или имя узла того сервера, к которому необходимо подключиться, например corpsvr04.cpandl. com или CorpSvr04. Либо из раскрывающегося списка Server name (Имя сервера) выберите элемент <Browse for more.> (Поиск других серверов) и в появившемся диалоговом окне щелкните вкладку Local Servers (Локальные серверы) или Network Servers (Серверы в сети). 4. После того как на вкладке будут отображены доступные экземпляры, раскройте предоставленные узлы, выберите экземпляр сервера и щелкните кнопку OK. 5. В списке Authentication (Аутентификация) выберите один из типов аутентифи-кации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User name (Имя пользователя) введите имя учетной записи Windows или SQL Server, а в поле Password (Пароль) - пароль. 6. Щелкните кнопку Connect (Подключиться). Теперь можно использовать панель Object Explorer (Обозреватель объектов) для работы с данным сервером. Подключение к определенной БД Для подключения к определенной БД с помощью стандартной процедуры входа вы-полните следующие действия. 1. В меню Start (Пуск) раскройте командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните соответствующий пункт. Или же наберите sqlwb в командной строке. 2. В раскрывающемся списке Server type (Тип сервера) диалогового окна Connect to Server (Подключиться к серверу) выберите компонент БД для соединения, на-пример Database Engine (Ядро базы данных), и введите в поле Server name (Имя сервера) полное доменное имя или имя узла того сервера, к которому необходимо подключиться, например corpsvr04.cpandl.com или CorpSvr04. 3. В списке Authentication (Аутентификация) выберите один из типов аутентификации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User name (Имя пользователя) введите имя учетной записи Win dows или SQL Server, а в поле Pas sword (Пароль) - пароль. 4. Щелкните кнопку Options (Параметры), чтобы отобразить дополнительные пара-метры в диалоговом окне Connect to Server (Подключиться к серверу). Выберите вкладку Connection Properties (Свойства соединения), как показано на рис. 5-3.
Управление корпоративными серверами Глава 5 99 Рис. 5-3. Вкладка Connection Properties диалогового окна Connect to Server 5. В поле Connect to database (Подключиться к базе данных) введите имя БД, к ко-торой следует подключиться, например Personnel. Или выберите элемент <Browse Server> (Обзор сервера) в связанном с полем ввода раскрывающемся списке. В этом случае появится диалоговое окно Browse for Databases (Поиск баз данных). Щелкните в нем кнопку Yes (Да), чтобы подключиться к серверу, имя которого было указано в пункте 2. 6. В диалоговом окне Browse Server For Database (Поиск базы данных на сервере) выберите БД для подключения и щелкните кнопку OK. 7. Выберите сетевой протокол и другие свойства соединения, если это необходимо. Протокол Shared Memory (Совместно используемая память) является сетевым протоколом по умолчанию для локальных соединений, а протокол TCP/IP - для удаленных соединений. 8. Щелкните кнопку Connect (Подключиться). Теперь можно работать с указанной базой данных в панели Object Explorer (Обозреватель объектов). Управление группами SQL Server Несколько экземпляров SQL Server можно объединять в группы серверов по выпол-няемой функции, отделу предприятия или любым другим критериям. Создать группу серверов несложно. Более того, возможно создание подгруппы внутри группы. Если допущена ошибка - группы просто удаляются. Введение в группы SQL Server Для работы с группами серверов используется панель Registered Servers (Зареги-стрированные серверы) в SQL Server Management Studio, которая открывается (или отображается, если скрыта) нажатием клавиш Ctrl+Alt+G.
100 Часть II Администрирование Microsoft SQL Server 2005 Группы верхнего уровня уже созданы на основе экземпляров SQL Server. Для переключения между ними предназначены кнопки в верхней части панели Registered Servers (Зарегистрированные серверы). Эти группы организованы по экземплярам SQL Server: Database Engine (Ядро базы данных); Analysis Services (Аналитические службы); Reporting Services (Службы отчетов); SQL Server Mobile Edition Database (Мобильная редакция SQL Server); Integration Services (Службы интеграции). Хотя можно добавлять зарегистрированные серверы непосредственно в группы верхнего уровня (как объясняется далее, в разделе "Управление серверами"), на большом предприятии, где используется множество экземпляров SQL Server, часто требуется создать дополнительные уровни в иерархии групп серверов. Это упрощает доступ к серверам БД и работу с ними. Существуют следующие типы организаци-онных моделей. Организационная единица В данном типе модели имена групп отображают от-делы или организационные единицы, которым принадлежат серверы баз данных или где они размещены. Например, можно иметь группы серверов Engineering (Инженерно-технический отдел), IS (Отдел информационных систем), Operations (Операционный отдел) и Support (Поддержка клиентов). Географическое расположение Здесь имена групп отображают географическое расположение серверов БД, например North America (Северная Америка) или Europe (Европа). Возможно создание дополнительных уровней. Так, для группы North America (Северная Америка) это могут быть USA (США), Canada (Канада) и Mexico (Мексика), а для группы Europe (Европа) - UK (Великобритания), Germany (Германия) и Spain (Испания). Под узлом верхнего уровня Database Engine (Ядро базы данных) могут распола-гаться группы Engineering (Инженерно-технический отдел) и Operations (Операци-онный отдел), а внутри группы Engineering (Инженерно-технический отдел) - под-группы Dev (Разработка), Test (Тестирование) и Co re (Основные). Создание группы серверов Чтобы создать группу или подгруппу серверов, выполните следующие действия. 1. Откройте панель Registered Servers (Зарегистрированные серверы), нажав соче-тание клавиш Ctrl+Alt+G. Если панель была скрыта, она тоже отобразится. 2. С помощью кнопок в верхней части панели Registered Servers (Зарегистрированные серверы) выберите группу верхнего уровня, в которой собираетесь создать новую группу серверов. Например, при создании группы второго или третьего уровня для экземпляров ядра базы данных щелкните кнопку Database Engine (Ядро базы данных). 3. Щелкните правой кнопкой мыши в панели Registered Server (Зарегистрированные серверы). В контекстном меню выполните команду New\Server Group (Создать\ Группа серверов). Отобразится диалоговое окно New Server Group (Новая группа серверов), показанное на рис. 5-4. 4. В поле Group name (Имя группы) введите имя новой группы, а в поле Group description (Описание группы) - ее описание.
Управление корпоративными серверами Глава 5 101 Рис. 5-4. Диалоговое окно New Server Group 5. В иерархическом списке Select a location for the new server group (Выберите раз-мещение новой группы серверов) отображаются имена групп серверов верхнего и второго уровней, созданных ранее. Теперь созданную группу серверов вы можете добавить: : в одну из групп верхнего или второго уровня, щелкнув имя этой группы; : в одну из групп нижнего уровня, раскрывая по очереди узлы групп серверов и щелкнув имя нужной группы при ее отображении. 6. Щелкните кнопку Save (Сохранить). Удаление группы серверов Чтобы удалить группу или подгруппу серверов, выполните следующую последова-тельность действий. 1. Откройте панель Registered Servers (Зарегистрированные серверы), нажав соче-тание клавиш Ctrl+Alt+G. Если панель была скрыта, она тоже отобразится. 2. Используйте кнопки в верхней части панели Registered Servers (Зарегистриро-ванные серверы) для выбора группы верхнего уровня, из которой нужно удалить группу. Например, если требуется удалить группу второго или третьего уровня для экземпляра ядра базы данных, щелкните кнопку Database Engine (Ядро базы данных). 3. Раскройте узел дерева, соответствующий группе, которую следует удалить. Если группа имеет зарегистрированные в ней серверы, переместите их в другую группу. (Действия, которые необходимо предпринять для перемещения сервера в другую группу, описаны далее, в разделе "Перемещение сервера в другую группу".) 4. Выберите узел группы или подгруппы. 5. Нажмите клавишу Delete. При запросе на подтверждение удаления щелкните кнопку Yes (Да). Редактирование свойств группы серверов и ее перемещение Группы серверов имеют несколько основных свойств, которые можно редактировать: имя, описание и расположение в иерархическом списке панели Registered Servers 
102 Часть II Администрирование Microsoft SQL Server 2005 ( Зарегистрированные серверы). Чтобы изменить указанные свойства группы, вы-полните следующие действия. 1. В панели Registered Servers (Зарегистрированные серверы) в контекстном меню группы выберите команду Properties (Свойства). 2. В диалоговом окне Edit Server Group Properties (Изменить свойства группы серве-ров) в поле Group name (Имя группы) введите новое имя группы, а в поле Group description (Описание группы) - ее описание. 3. Щелкните кнопку Save (Сохранить). Для перемещения группы (со всеми ее подгруппами и серверами) на другой уро-вень в иерархии групп серверов выполните указанные ниже действия. 1. В панели Registered Servers (Зарегистрированные серверы) в контекстном меню группы щелкните команду Move To (Переместить в). 2. В диалоговом окне Move Server Registration (Переместить регистрацию сервера) в иерархическом списке Select the server group to move your selection to (Выберите группу серверов, в которую следует переместить выбранную группу) раскройте группу верхнего уровня, чтобы увидеть список подгрупп. Если необходимо, рас-кройте подгруппы. Теперь можно: : выбрать группу верхнего уровня и переместить туда нужную группу серверов, которая станет группой второго уровня; : переместить группу на другой уровень, выбрав для ее размещения нужную подгруппу. 3. Щелкните кнопку OK. Добавление серверов в группу При регистрации каждого экземпляра SQL Server для использования с SQL Server Management Studio нужно выбрать группу, в которой должен находиться сервер. Мож-но создать новую группу специально для определенного сервера. Теме регистрации серверов и посвящен следующий раздел. Управление серверами Серверы и базы данных являются основными ресурсами, управление которыми вы-полняется в SQL Server Management Studio. Раскрыв группу верхнего уровня в панели Registered Servers (Зарегистрированные серверы), вы увидите доступные группы серверов. При раскрытии двойным щелчком мыши узлов этих групп отобразятся подгруппы или серверы, назначенные в определенную группу. Локальные серверы регистрируются автоматически (в большинстве случаев). Если удаленный сервер, которым требуется управлять, не показан, его нужно зарегистрировать. Когда не отображен локальный сервер, необходимо обновить локальные регистрационные данные. После этого можно подключаться к серверу для работы с ним, а чтобы от-ключиться, нужно просто дважды щелкнуть мышью узел сервера в панели Registered Servers (Зарегистрированные серверы). Если автоматическое соединение не пред-усмотрено, можно подключиться в ручном режиме, выбрав в контекстном меню узла сервера команду Connect (Подключиться), и затем, если требуется создать запрос SQL, - команду New Query (Создать запрос), а для управления сервером - команду Object Explorer (Обозреватель объектов). Начать процесс регистрации можно одним из следующих способов: зарегистрировать сервер, к которому установлено соединение в Object Explorer (Обозреватель объектов);
Управление корпоративными серверами Глава 5 103 зарегистрировать новый сервер в панели Registered Servers (Зарегистрированные серверы). Для управления предыдущими регистрациями также предусмотрено несколько способов: импортирование сведений о регистрации зарегистрированных ранее серверов SQL Server 2005; обновление регистрационных данных для локальных серверов; копирование сведений о регистрации из одного компьютера на другой, используя возможности импорта и экспорта. Регистрация подключенного сервера Любой сервер, к которому уже установлено соединение в панели Object Explorer (Обозреватель объектов), может быть зарегистрирован для упрощения доступа к нему из панели Registered Servers (Зарегистрированные серверы). При этом текущая ин-формация о соединении сохраняется. Чтобы зарегистрировать подключенный сервер, выполните следующую последовательность действий. 1. В контекстном меню сервера, к которому в данное время установлено соединение в панели Object Explorer (Обозреватель объектов), выберите команду Register (Зарегистрировать). Появится диалоговое окно Register Server (Зарегистрировать сервер), показанное на рис. 5-5. Рис. 5-5. Диалоговое окно Register Server 2. Отображаемое имя сервера соответствует текущему имени. Его можно изменить и при желании добавить описание. 3. В разделе Server Group (Группа серверов) будет находиться группа серверов верх-него уровня и группы второго уровня, если таковые были созданы. Теперь можно добавить сервер: : к одной из групп верхнего или второго уровня, щелкнув имя группы;
104 Часть II Администрирование Microsoft SQL Server 2005 : к группе нижнего уровня, последовательно раскрывая узлы групп серверов и щелкнув имя нужной группы при ее отображении; : к новой группе, щелкнув кнопку New Group (Создать группу). 4. Щелкните кнопку Save (Сохранить). Регистрация нового сервера в панели Registered Servers Для регистрации сервера необязательно подключаться к нему в панели Object Explorer (Обозреватель объектов). Можно зарегистрировать новые серверы непосредственно в панели Registered Servers (Зарегистрированные серверы), выполнив указанную ниже последовательность действий. 1. Используя кнопки вверху панели Registered Servers (Зарегистрированные серве-ры), выберите тип сервера, с которым нужно установить соединение, например щелкните кнопку Database Engine (Ядро базы данных). 2. Раскройте необходимые группы. 3. В контекстном меню группы, в которую нужно поместить сервер, выберите команду New\Server Registration (Создать\Регистрация сервера), чтобы отобразить диа-логовое окно New Server Registration (Новая регистрация сервера), показанное на рис. 5-6. Рис. 5-6. Диалоговое окно New Server Registration 4. В поле Server name (Имя сервера) введите полное доменное имя или имя узла сервера, на котором запущен SQL Server, например corpsvr04.cpandl.com или CorpSvr04. 5. В списке Authentication (Аутентификация) выберите тип аутентификации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User name (Имя поль-
Управление корпоративными серверами Глава 5 105 зователя) введите имя учетной записи Windows или SQL Server, а в поле Password (Пароль) - пароль. 6. Можно также установить параметры соединения, используя вкладку Connection Properties (Свойства соединения). Она позволяет задать подключение к опреде-ленной базе данных, а также настроить некоторые сетевые параметры. 7. Имя регистрируемого сервера указывается на основе предыдущего введенного имени сервера. Менять это имя по умолчанию стоит только в том случае, если вы хотите, чтобы в SQL Server Management Studio можно было использовать для сервера альтернативное выводимое имя. 8. Для проверки параметров щелкните кнопку Test (Проверка). Если с сервером удалось соединиться, отобразится сообщение, подтверждающее это. Если же соеди-не ние не устанавливается, проверьте введенную информацию и повторите попытку. 9. Щелкните кнопку Save (Сохранить). Регистрация ранее зарегистрированных серверов SQL Server 2000 Данные серверов, зарегистрированных в SQL Server 2000, могут быть импортированы в SQL Server Management Studio. Это упрощает работу с существующими установками SQL Ser ver 2000. Чтобы импортировать регистрационные данные, выполните следу-ющую последовательность действий. 1. С помощью кнопок в верхней части панели Registered Servers (Зарегистрированные серверы) выберите требуемый для регистрации тип сервера, например щелкните кнопку Database Engine (Ядро базы данных). 2. Раскройте необходимые группы, затем в контекстном меню группы, куда нужно поместить серверы SQL Server 2000, щелкните команду Previously Registered Servers (Ранее зарегистрированные серверы). 3. Доступные регистрационные данные для серверов SQL Server 2000 будут импор-тированы. Если появится сообщение об ошибке, то, скорее всего, не был выполнен локальный вход на компьютер, хранящий информацию о зарегистрированных ранее серверах. Обновление регистрационных данных для локальных серверов Локальные серверы регистрируются автоматически (в большинстве случаев). Если же при добавлении или удалении экземпляров SQL Server на локальном компьютере эти изменения отображены не будут, следует обновить регистрационные данные для локальных серверов. Такая процедура гарантирует, что все локальные экземпляры сервера, настроенные в данное время, отобразятся в SQL Server Management Studio. Для этого выполните следующие действия. 1. Выберите тип сервера, с которым нужно установить соединение, используя кнопки в верхней части панели Registered Servers (Зарегистрированные серверы), напри-мер щелкните кнопку Database Engine (Ядро базы данных). 2. В контекстном меню узла верхнего уровня щелкните команду Update Local Server Registration (Обновить регистрационные данные локального сервера). Копирование групп серверов и сведений о регистрации с компьютера на компьютер После регистрации серверов в SQL Server Management Studio и организации серверов в виде определенной иерархии групп может понадобиться использовать эти же реги-страционные данные и структуру групп серверов на другом компьютере. SQL Server 
106 Часть II Администрирование Microsoft SQL Server 2005 Management Studio позволяет копировать сведения о регистрации с компьютера на компьютер (как с именами пользователей и паролями, так и без них) с помощью операции экспорта/импорта. Для этого нужно выполнить следующие действия. 1. Запустите SQL Server Management Studio на компьютере со сведениями о реги-страции и структурой групп, которые необходимо скопировать. 2. Выберите панель Registered Servers (Зарегистрированные серверы), нажав соче-тание клавиш Ctrl+Alt+G. 3. Выберите нужный для работы тип сервера, используя кнопки в верхней части пане-ли Registered Servers (Зарегистрированные серверы), например кнопку Database Engine (Ядро базы данных). 4. В контекстном меню группы верхнего уровня этой панели щелкните команду Export (Экспорт). Отобразится диалоговое окно Export Registered Servers (Экс-портировать зарегистрированные серверы), показанное на рис. 5-7. Рис. 5-7. Диалоговое окно Export Registered Servers 5. В разделе Server group (Группа серверов) в иерархическом списке групп выбери-те узел, с которого начнется процесс импорта. При этом копирование сведений о регистрации вы можете начать с любого уровня в структуре групп. : Чтобы скопировать структуру группы верхнего уровня, ее подгрупп и сведений о регистрации для всех относящихся к ней серверов, выберите группу верхне-го уровня : Если требуется скопировать структуру подгруппы, ее подгрупп (если они есть) и сведений о регистрации для всех относящихся к ней серверов, выберите любую подгруппу. : Для копирования регистрационных данных одиночного сервера выберите этот сервер. 6. Структура группы серверов и сведения о регистрации экспортируются в файл регистрации сервера с расширением .regsrvr. По умолчанию этот файл создается 
Управление корпоративными серверами Глава 5 107 в папке My Documents (Мои документы). В разделе Export options (Параметры экспорта) в поле Export file (Файл экспорта) введите имя для файла регистрации сервера, например CurrentDBConfig. Совет Если вы поместите файл регистрации сервера на защищенный сетевой ресурс общего пользования, то сможете получить к нему доступ с компьютера, на который собираетесь скопировать сведения о регистрации. В противном случае файл на этот компьютер придется скопировать позже. 7. По умолчанию текущие сведения об аутентификации для соединений сервера не экспортируются в сохраняемый файл. Если требуется экспортировать имена пользователя и пароли, снимите флажок Do not include user names and passwords in the export file (Не включать имена пользователей и пароли в файл экспорта). 8. Щелкните кнопку OK. При удачном завершении экспорта отобразится диалоговое окно, подтверждающее это. Щелкните в нем кнопку OK. Если при экспорте воз-никла ошибка, исправьте ее и повторите попытку. 9. Запустите SQL Server Management Studio на компьютере, куда собираетесь ско-пировать структуру групп серверов и сведения об их регистрации. Если файл регистрации сервера не был помещен на защищенный сетевой ресурс общего пользования, на компьютер, куда копируются данные, следует скопировать файл регистрации. 10. Откройте панель Registered Servers (Зарегистрированные серверы), нажав соче-тание клавиш Ctrl+Alt+G. 11. Выберите тип сервера для работы, используя кнопки в верхней части панели Registered Servers (Зарегистрированные серверы), например кнопку Database Engine (Ядро базы данных). 12. В панели Registered Servers (Зарегистрированные серверы) щелкните правой кнопкой мыши группу верхнего уровня и выберите в контекстном меню команду Import (Импорт). Отобразится диалоговое окно Import Registered Servers (Заре-гистрированные серверы), показанное на рис. 5-8. Рис. 5-8. Диалоговое окно Import Registered Servers 13. Щелкните кнопку справа от поля Import file (Файл импорта) и в диалоговом окне Open (Открыть) найдите файл регистрации сервера, который необходимо импортировать.
108 Часть II Администрирование Microsoft SQL Server 2005 14. В разделе Server group (Группа серверов) в иерархическом списке Select the server group to import to (Выберите группу серверов, в которую следует импортировать) выберите группу серверов, где будут созданы импортированные группы и серверы. 15. Щелкните кнопку OK. При удачном завершении импорта отобразится диалоговое окно, подтверждающее это. Щелкните в нем кнопку OK. Если при импорте воз-никла ошибка, исправьте ее и повторите попытку. Редактирование свойств регистрации Свойства регистрации сервера можно изменить в любое время. Для этого в SQL Server Management Studio в панели Registered Servers (Зарегистрированные серверы) выбе-рите сервер и в его контекстном меню щелкните команду Properties (Свойства). В диа-логовом окне Edit Server Registration Properties (Редактирование свойств регистрации сервера) внесите необходимые изменения. Единственным свойством, которое нельзя изменить, является тип сервера. Проверьте параметры, прежде чем сохранить их. Подключение к серверу После регистрации сервера подключение к нему не представляет сложностей. Нужно в SQL Server Management Studio в панели Registered Servers (Зарегистрированные серверы) выбрать сервер и в его контекстном меню щелкнуть команду Connect (Под-ключиться). Затем, если требуется создать запрос SQL, - команду New Query (Соз-дать запрос), а при управлении сервером - команду Object Explorer (Обозреватель объектов). Также можно нужный сервер дважды щелкнуть мышью. Примечание SQL Server Management Studio подключается к другим серверам БД с ис-пользованием сетевого протокола, указанного в свойствах регистрации. Если сетевой протокол или весь удаленный доступ был отключен, подключиться к этому серверу в ути-лите будет невозможно. Потребуется внести соответствующие изменения в свойства регистрации или конфигурацию поверхности атаки. Как настроить поверхность атаки, описывалось в главе 3. Отключение от сервера При завершении работы с сервером, возможно, потребуется от него отключиться, то есть прервать двунаправленную связь. Для этого в SQL Server Management Studio в панели Object Explorer (Обозреватель объектов) выберите сервер и в его контекст-ном меню щелкните команду Disconnect (Отключиться). Перемещение сервера в другую группу Для перемещения сервера в другую группу выполните следующую последователь-ность действий. 1. В панели Registered Servers (Зарегистрированные серверы) выберите сервер, в кон-текстном меню которого щелкните команду Move To (Переместить в). Отобразится диалоговое окно Move Server Registration (Перемещение регистрации сервера). 2. Раскройте в нем группу верхнего уровня, чтобы увидеть список подгрупп. Если нужно, раскройте подгруппы. Теперь можно: : выбрав группу верхнего уровня, переместить в нее сервер; : переместить сервер на другой уровень, выбрав для этого нужную подгруппу. 3. Щелкните кнопку OK. Удаление регистрации сервера При удалении сервера или изменении его имени может потребоваться удалить ре-гистрацию сервера в SQL Server Management Studio и таким образом предотвратить 
Управление корпоративными серверами Глава 5 109 попытки подключения к недоступному серверу. Для удаления регистрации сервера в панели Registered Servers (Зарегистрированные серверы) выберите из его контекст-ного меню команду Delete (Удалить). При запросе подтвердить удаление, щелкните кнопку Yes (Да). Запуск, остановка и настройка SQL Server Agent Утилита SQL Server Agent (Агент SQL Server) запускается в качестве службы и ис-пользуется для запуска по расписанию (Schedule) заданий (Jobs), оповещений (Alerts) и прочих задач, требующих автоматического выполнения. После определения рас-писания для автоматизированных задач обычно требуется настроить автоматический запуск SQL Server Agent (Агент SQL Server) при запуске системы. Это гарантирует выполнение задач, для которых было установлено расписание. Используя утилиту SQL Server Configuration Manager, можно управлять соответствующей службой (имя службы - SQLServerAgent или SQLAgent$instance_name, где instance_name - имя экземпляра) таким же образом, как и службой SQL Server. Об этом подробно рас-сказывалось в разделе "Настройка служб SQL Server" главы 3. Для настройки SQL Server Agent (Агент SQL Server) также применяется утилита SQL Server Management Studio. В гла ве 15 даны более подробные сведения о настрой-ке SQL Server Agent (Агент SQL Server), сейчас же перечислим основные действия. 1. Подключитесь к Database Engine (Ядро базы данных) на сервере, который следует настроить. Для этого в панели Registered Servers (Зарегистрированные серверы) дважды щелкните мышью необходимый сервер. Либо щелкните кнопку Connect (Подключиться) в верхней части панели Object Explorer (Обозреватель объектов) и в появившемся меню выберите команду Database Engine (Ядро базы данных). Отобразится диалоговое окно Connect to Server (Подключиться к серверу), которое можно использовать для подключения к серверу. 2. В контекстном меню узла SQL Server Agent (Агент SQL Server) выполните команду Properties (Свойства). Отобразится диалоговое окно SQL Server Agent Properties (Свойства SQL Server Agent), позволяющее настроить SQL Server Agent (Агент SQL Server). Помните при этом, что прежде чем управлять свойствами службы, ее следует запустить. 3. Контекстное меню службы SQL Server Agent (Агент SQL Server) также позволяет ею управлять, используя команды меню Start (Пуск), Stop (Стоп) или Restart (Перезапустить). Запуск, остановка и настройка координатора распределенных транзакций Координатор распределенных транзакций (DTC, distributed transaction coordinator) выступает в роли диспетчера транзакций, позволяющего клиентским приложениям работать в одной транзакции с несколькими источниками данных. Когда распределенная транзакция охватывает два или больше серверов, те коорди-нируют управление транзакцией с помощью координатора распределенных транзак-ций. Если же распределенная транзакция охватывает несколько БД на одном сервере, SQL Server осуществляет внутренне управляет транзакцией*. * Транзакции между разными БД, принадлежащими одному экземпляру SQL Server, обраба-тываются как распределенные транзакции. Ядро БД и координатор распределенных транзакций скрывают от пользователей истинную структуру таких транзакций, так что пользователи работают с ними, как с локальными транзакциями. - Прим. ред.
110 Часть II Администрирование Microsoft SQL Server 2005 Чтобы явно начать распределенную транзакцию, приложения SQL Server вы-зывают координатор распределенных транзакций напрямую. Также распределенные транзакции могут быть запущены одним из следующих способов: вызывая хранимые процедуры на удаленных серверах SQL Server; обновляя данные в нескольких источниках данных OLE DB; при участии в транзакции удаленных серверов. Но в каждом из вариантов необходимо, чтобы координатор распределенных транза-кций был запущен автоматически при запуске сервера. Как и в случае с самим SQL Ser ver, координатор распределенных транзакций запускается в качестве службы. Имя службы - MSDTC, выводимое имя - Distributed Transactions Coordinator (Коорди-натор распределенных транзакций). В отличие от службы SQL Server, на компьютере может работать только один экземпляр службы MSDTC, независимо от количества до-ступных экземпляров сервера баз данных. Это означает, что все экземпляры SQL Server, запущенные на компьютере, используют один и тот же координатор транзакций. Просмотреть текущее состояние координатора распределенных транзакций можно в утилите SQL Server Management Studio. Для этого подключитесь к Database Engine (Ядро базы данных) сервера. Далее, в панели Object Explorer (Обозреватель объек-тов) раскройте узел сервера, затем узел Management (Управление). При запущенной службе отобразится значок в виде зеленого кружка с треугольником, направленным вправо (похожим на кнопку "Воспроизвести"). Если служба остановлена, отобража-ется значок в виде красного кружка с квадратом внутри него (похожим на кнопку "Стоп"). Службой MSDTC также можно управлять с помощью компонента панели управления Computer Management (Управление компьютером). Выполните для этого следующую последовательность действий. 1. В меню Start (Пуск) выберите пункт Control Panel (Панель управления). Затем щелкните компонент Administrative Tools\Computer Management (Администри-рование\Управление компьютером). 2. По умолчанию вы подключены к локальному компьютеру. Чтобы подключить-ся к удаленному компьютеру, в контекстном меню узла Computer Management (Управление компьютером) щелкните команду Connect to another computer (Под-ключиться к другому компьютеру). В диалоговом окне Select Computer (Выбор компьютера) выберите положение переключателя Another Computer (Другим компьютером) и в доступном теперь поле, ассоциированном с этим переключате-лем, наберите имя компьютера. Оно может быть указано как имя узла, например CorpSvr04, или как полное доменное имя - corpsvr04.cpandl.com. 3. Слева раскройте узел Services and Applications (Службы и приложения) и щел-кните узел Services (Службы). 4. Справа щелкните службу Distributed Transaction Coordinator (Координатор рас-пределенных транзакций) и в ее контекстном меню выберите команду Properties (Свойства). Отобразится диалоговое окно Properties (Свойства). Теперь можно управлять службой MSDTC. Запуск, остановка и настройка службы полнотекстового поиска Служба полнотекстового поиска производит все необходимые операции управления и поиска для полнотекстовых индексов и относящихся к ним каталогов. Эти индексы и каталоги создаются автоматически при запуске и остановке службы поиска. Про-смотреть текущее состояние службы полнотекстового поиска можно в SQL Server 
Управление корпоративными серверами Глава 5 111 Management Studio. Для этого подключитесь к Database Engine (Ядро базы данных) сервера. Затем в панели Object Explorer (Обозреватель объектов) раскройте узел сер-вера, а после узел Management (Управление). Если служба запущена, будет отображен значок в виде зеленого кружка с треугольником, направленным вправо. Когда служба остановлена, отображается значок в виде красного кружка с квадратом внутри него. Службой полнотекстового поиска (имя службы - msftesql) можно управлять, ис-пользуя утилиту SQL Server Configuration Manager. Делается это аналогично управ-лению службой SQL Server. Подробное описание было дано в разделе "Настройка служб SQL Server" главы 3. Чтобы управлять службой в SQL Server Management Studio, выполните следующие действия. 1. Подключитесь к Database Engine (Ядро базы данных) на сервере, которым не-обходимо управлять. Это можно сделать в панели Registered Servers (Зареги-стрированные серверы), дважды щелкнув мышью узел сервера. Или используйте панель Object Explorer (Обозреватель объектов), щелкнув в ней кнопку Connect (Подключиться), а затем команду Database Engine (Ядро базы данных). Отобра-зится диалоговое окно Connect to Server (Подключиться к серверу), которое тоже можно использовать для подключения к серверу. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел сервера, затем узел Management (Управления). Отобразятся узлы, соответствующие поддержи-ваемым службам. 3. Щелкните правой кнопкой мыши узел Full-Text Search (Полнотекстовый поиск). Теперь можно использовать команды контекстного меню: Start (Пуск), Stop (Стоп) или Restart (Перезапустить). Работа с полнотекстовым поиском Полнотекстовый поиск позволяет производить расширенный поиск слов в тексто-вых данных. Это дополнительный компонент, который можно добавить в установку SQL Server. (Более подробные сведения даны в разделе "Добавление компонентов и экземпляров" главы 2.) Компонентом полнотекстового поиска можно управлять с помощью методов, описанных в следующем разделе. Для работы с полнотекстовым поиском необходимо выполнить некоторые адми-нистративные задачи. Установить компонент Full-Text Search (Полнотекстовый поиск), используя про-грамму установки SQL Server 2005. Запустить связанную службу, которая в интерфейсе названа SQL Server FullText Search (MSSQLSERVER)* - для экземпляра по умолчанию, или SQL Server Full-Text Search (instance_name) - для именованных экземпляров, где instance_name - имя экземпляра. (Имя службы, используемое операционной системой, соответствен-но - msftesql или msftesql$instance_name, где instance_name - имя экземпляра.) Разрешить полнотекстовый поиск БД, выполнив хранимую процедуру sp_fulltext_database** с аргументом 'enable'. * В предыдущих версиях SQL Server эта служба называлась Microsoft Search. - Прим. ред. ** Microsoft предоставляет хранимые процедуры для работы с полнотекстовым поиском, в том числе sp_fulltext_database, для обеспечения обратной совместимости, и не рекомендует их ис-пользование в новых разработках. Предпочтительным является применение инструкций языка определения данных для полнотекстового поиска, таких как CREATE, ALTER и DROP FULLTEXT CATALOG, а также CREATE, ALTER и DROP FULLTEXT INDEX. - Прим. ред.
112 Часть II Администрирование Microsoft SQL Server 2005 Создать полнотекстовый каталог для БД. Определить уникальный индекс для таблицы. Создать полнотекстовый индекс для определенной таблицы или представления. Совет Чтобы создать полнотекстовые каталоги, примените инструкцию CREATE FULLTEXT CATALOG. Обязательно используйте предложение IN PATH для указания расположе-ния файла. Поскольку поиск в файле может производиться часто, имеет смысл поместить файл каталога на выделенном диске. Прежде чем создать из каталога полнотекстовый индекс, следует убедиться, что таблица или представление имеют уникальный индекс, определенный для одного столбца и не содержащий значений NULL. Ядро полнотекстового поиска использует этот уникальный индекс для сопоставления строк в таблицах со значениями уникального ключа. Создать уникальный индекс можно с помощью инструкции CREATE UNIQUE INDEX. Синтаксис должен быть таким: CREATE UNIQUE INDEX index_name ON table( unique_column_name ) Следующий пример создает индекс с именем ui_per в таблице Employee, хранящейся в БД Personnel, используя столбец EmpID: USE Personnel GO CREATE UNIQUE INDEX ui_per ON dbo.Employee( EmpID ) GO Только после определения уникального ключа для таблицы можно создать для нее полно-текстовый индекс с помощью инструкции CREATE FULLTEXT INDEX или панели Object Explorer (Обозреватель объектов). После этого служба может управлять индексами и выполнять поиск в данных, которые они содержат. В отличие от предыдущих версий, служба полнотекстового поиска управляется отдельно для каждого экземпляра SQL Server. Однако существу-ет только одна служба на сервер. Служба полнотекстового поиска работает под той же учетной записью, что и служба SQL Server, с которой она связана. Поэтому при изменении учетной записи для службы SQL Server необходимо изменить учетную запись для службы полнотекстового поиска. Концепция полнотекстового индекса, реализованная в SQL Server, немного от-личается от концепций, которые вы, возможно, встречали в других продуктах. В SQL Server полнотекстовый индекс хранит информацию о ключевых словах и их располо-жении внутри определенного столбца. Эти текстовые индексы создаются для каждой таблицы в БД, а группы индексов содержатся в каталогах. Каждый полнотекстовый каталог является файлом операционной системы, который включен в набор файлов базы данных для совместной обработки утилитами резервного копирования и восста-новления. Таким образом, можно выполнить резервное копирование и восстановление полнотекстовых каталогов, как и любых других данных SQL Server, устраняя надоб-ность в полном повторном создании каталогов после восстановления БД. Инструкции Transact-SQL BACKUP и RESTORE могут быть использованы для автоматического резервного копирования и восстановления полнотекстовых каталогов вместе с базой данных. Подробнее возможности резервного копирования и восстановления описаны в главе 14. Примечание Полнотекстовые каталоги присоединяются и отсоединяются вместе с БД, поэтому они сохраняются при перемещении баз данных в другое место. Больше не нуж-но удалять и перестраивать полнотекстовый каталог. Просто отсоедините базу данных, скопируйте ее в новое место и подсоедините снова. Полнотекстовый каталог при этом сохраняется.
Управление корпоративными серверами Глава 5 113 Столбцы всех текстовых типов данных можно индексировать, включая и заклю-чающие новый тип данных XML. Это позволяет производить полнотекстовый поиск по значениям столбцов, содержащих как данные XML, так и другие типы текстовых данных. В предыдущих версиях SQL Server к связанным серверам выполнялись лишь SQL-запросы, а полнотекстовые - нет. Также в таблицах поиск производился либо в одном столбце, либо во всех сразу, но нельзя было это сделать в определенном количестве столбцов. Теперь же, новые возможности SQL Server 2005 позволяют вы-полнять полнотекстовые запросы к удаленным связанным серверам, и искать среди множества столбцов. Полнотекстовые индексы можно определить для базовых таблиц, а также пред-ставлений, основанных на одной или более базовых таблицах, для которых определен полнотекстовый индекс. Но это нельзя сделать для представлений, системных или временных таблиц. Возможность поиска по представлениям является важным новым изменением в SQL Server 2005. Индексы заполняются значениями ключей, содержа-щими информацию о значимых словах в таблице. Эта информация включает данные о столбце, в котором находятся слова, и их положении в нем. Можно создавать, из-менять и реализовывать полнотекстовые каталоги и индексы, используя хранимые процедуры и инструкции языка определения данных. В Transact-SQL разрешено про-верять строки на совпадение с условием полнотекстового поиска, используя функции contains и freetext. Также вы можете вернуть набор строк, соответствующих условию полнотекстового поиска, используя функции containstable() и freetexttable(). Управление полнотекстовыми каталогами Каждая база данных, в которой требуется осуществлять поиск, должна иметь собствен-ный полнотекстовый каталог. При создании каталога можно установить расписание для регулярного автоматического заполнения каталога или делать это вручную. За-полнение каталога обновляет полнотекстовые индексы для каталога и обеспечивает точность результатов поиска. SQL Ser ver поддерживает несколько методов заполнения каталогов. Полное заполнение Реализуется предложением START FULL POPULATION инструкции ALTER FULLTEXT INDEX. Служба полнотекстового поиска строит ключи индексов для всех строк во всех таблицах или представлениях, которые охватывает полнотекстовый каталог. В большинстве случаев полное заполнение требуется произвести только при создании каталога или в случае обновления всего содержимого каталога. Инкрементное заполнение Реализуется предложением START INCREMENTAL POPULATION инструкции ALTER FULLTEXT INDEX. Служба полнотекстового поиска изменяет только ключи индексов для строк, которые были добавлены, удалены или изменены с момента предыдущего заполнения. Инкрементное за-полнение можно произвести исключительно для таблиц или представлений, име-ющих столбцы штампа времени. При его отсутствии всегда производится полное заполнение. Обновляющее заполнение Реализуется предложением START UPDATE POPULATION инструкции ALTER FULLTEXT INDEX. Служба полнотекстового по-иска использует обновляющее заполнение в связке с режимом отслеживания изменений (который реализуется предложением SET CHANGE_TRACKING инструкции ALTER FULLTEXT INDEX). Когда режим отслеживания измене-ний таблиц и представлений включен, он позволяет полнотекстовому поиску отслеживать изменения в каталогах или представлениях и обновлять каталог 
114 Часть II Администрирование Microsoft SQL Server 2005 автоматически, либо накапливает изменения для последующего обновления ката лога вручную. Если отключить данный режим, можно произвести только инкрементное заполнение таблиц или представлений, которые имеют столбец штампа времени (при его отсутствии всегда производятся полные заполнения). Создание каталога является только первой частью процесса индексирования. По-сле этого требуется выбрать конкретные таблицы или представления для индексиро-вания и связать их с каталогом. Также следует указать конкретные столбцы таблицы или представления, которые должны быть включены в индекс. Старые каталоги не-обходимо периодически чистить. Просмотр свойств каталога Каталоги хранятся отдельно от самих баз данных. Расположение файла каталога можно выбрать при его создании. После этого нельзя ни изменить расположение файла каталога, ни узнать его. Чтобы просмотреть другие свойства каталога в БД, для которой настроен полнотекстовый поиск, выполните следующие действия. 1, Запустите утилиту SQL Server Management Studio, затем подключитесь к необхо-димому серверу. 2. Для доступа к требуемой БД в панели Object Explorer (Обозреватель объектов) раскройте узел сервера и узел Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел нужной БД, а затем узлы Storage (Хранилища) и Full Text Catalogs (Полнотекстовые каталоги), чтобы ото-бразить каталог(и) для выбранной базы данных (рис. 5-9). Рис. 5-9. Список полнотекстовых каталогов, связанных с БД 4. Щелкните каталог правой кнопкой мыши и в контекстном меню выберите команду Properties (Свойства). Отобразится диалоговое окно Full-Text Catalog Properties (Свойства полнотекстового каталога), показанное на рис. 5-10.
Управление корпоративными серверами Глава 5 115 Рис. 5-10. Страница General диалогового окна Full-Text Catalog Properties 5. На странице General (Общие) предоставлена информация о следующих параметрах каталога. : Default Catalog (Каталог по умолчанию) Является ли он каталогом по умол-чанию для БД. : Population Status (Статус заполнения) Находится ли каталог в состоянии построения или обновления (также называемом заполнением). : Name (Имя) Его имя. : Last Populate Date (Дата последнего заполнения) Дата последнего запол-нения. Для новых каталогов эта строка будет пустая. : Item Count (Количество элементов) Количество элементов, которые были занесены в каталог. : Catalog Size (Размер каталога) Общий размер на диске. : Owner (Владелец) Определяется владелец. Если при создании каталога это не было указано, то владелец устанавливается как dbo. : Filegroup (Группа файлов) Указывается группа файлов, с которой связан каталог. Производимое для нее резервное копирование или восстановление будет также выполняться и для каталога. : Unique Key Count (Количество уникальных ключей) Количество уникальных ключей, занесенных в каталог. : Accent Sensitive (Учет диакритических знаков) Показывает, учитываются ли при сравнении данных каталога диакритические знаки. Значение параметра по умолчанию устанавливается таким же, как и у БД.
116 Часть II Администрирование Microsoft SQL Server 2005 Создание каталогов Каталоги необходимы для реализации полнотекстового поиска в базах данных. БД способна иметь множество каталогов, связанных с ней, и эти каталоги следует ис-пользовать для поиска информации разных типов. Например, в БД клиентов можно создать один каталог для поиска информации о контактах компании, а другой - для поиска в истории движения средств на счетах. Каталоги нельзя создать в БД master, model или tempdb. Хотя у одного полно-текстового каталога допустимо наличие нескольких полнотекстовых индексов, один полнотекстовый индекс может быть частью только одного полнотекстового каталога. Чтобы создать каталог для базы данных, выполните следующие действия. 1. Запустите утилиту SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной БД в панели Object Explorer (Обозреватель объектов) рас-кройте узел сервера и узел Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел нужной БД, а затем узлы Storage (Хранилища) и Full Text Catalogs (Полнотекстовые каталоги), чтобы ото-бразить каталог(и) для выбранной базы данных (см. рис. 5-9). 4. Щелкните правой кнопкой мыши узел Full Text Catalogs (Полнотексто-вые каталоги) и в контекстном меню выберите команду New Full-Text Catalog (Создать полнотекстовый ка талог). Отобразится диалоговое окно New Full-Text Catalog (Новый полнотекстовый каталог), показанное на рис. 5-11. Рис. 5-11. Диалоговое окно New Full-Text Catalog 5. Введите описательное имя каталога в поле Full-text catalog name (Имя нового полнотекстового каталога).
Управление корпоративными серверами Глава 5 117 6. В поле Catalog location (Размещение каталога) укажите размещение физического файла каталога. Можно ввести путь к папке вручную или щелкнуть кнопку обзора (...) для выбора пути папки. Примечание Каталоги считаются одним из типов файлов БД, поэтому они связаны с определенной группой файлов. Размещение каталога можно указать только при его соз-дании. После указания размещения, оно не может быть изменено без повторного создания каталога. Если поиск в каталогах будет выполняться часто, стоит хорошо продумать, где они будут размещаться. Следует учесть, что поиск в каталогах сопровождается интенсив-ными операциями чтения, а записываются данные в каталоги только при их обновлении. Также учтите, что папка размещения каталога больше не указывается в стандартных свойствах, поэтому необходимо документировать, где был помещен каждый каталог. 7. Операции резервного копирования и восстановления каталога выполняются так же, как с частью указанной группы файлов. Используйте поле Filegroup (Группа файлов), чтобы связать каталог с определенной группой файлов БД. 8. В поле Owner (Владелец) укажите владельца каталога. По умолчанию владельцем каталога является dbo. Но вы можете здесь же ввести имя другого пользователя или имя роли БД, или задать их, щелкнув кнопку обзора (...). 9. Если требуется сделать каталог для выбранной БД каталогом по умолчанию, уста-новите флажок Set as default catalog (Установить как каталог по умолчанию). 10. По умолчанию параметр учета диакритических знаков при сравнении симво-лов указывается таким же, как и у выбранной БД. Если требуется разрешить поиск с учетом диакритических знаков, установите переключатель в положение Sensitive (Учитываются). В противном случае выберите положение переключа-теля Insensitive (Не учитываются) - это разрешит установление соответствия символов при сравнении без учета диакритических знаков (например, a = = ). 11. Для создания каталога щелкните кнопку OK. Затем включите индексирование каталога и заполните его. Включение полнотекстового индексирования таблиц и представлений Чтобы включить полнотекстовое индексирование таблицы или представления, сде-лайте следующее. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объ-ектов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем узел Tables (Таблицы) или Views (Представления). Щелкните правой кнопкой мыши таблицу или представление и в контекстном меню выберите команду Full-Text Index\Define Full-Text Index (Полнотекстовый индекс\Определить полнотекстовый индекс). Отобразится окно Full-Text Indexing Wizard (Мастер полнотекстового индексирования). Щелкните кнопку Next (Далее). 4. В раскрывающемся списке Unique index (Уникальный индекс) выберите уни-кальный индекс для таблицы или представления, затем щелкните кнопку Next (Далее). Этот индекс будет использоваться в качестве уникального ограничения на значения столбца в таблице, а также в соединениях. Если таблица или пред-ставление не имеют уникального индекса, нужно выйти из мастера, создать индекс (как описано выше, в разделе "Работа с полнотекстовым поиском") и снова на-чать этот процесс.
118 Часть II Администрирование Microsoft SQL Server 2005 5. Выберите нужные для индексации столбцы, хранящие символьные или текстовые типы данных (рис. 5-12). Для каждого столбца можно указать ограничение языка, которое идентифицирует естественный язык, используемый в данных столбца. А в случае текстовых и двоичных данных можно также указать тип документа. Щелкните кнопку Next (Далее). 6. Укажите, требуется ли отслеживать изменения в таблицах и представлениях для обновления полнотекстового каталога. При принятии решения помните следующее. : Если устанавливается автоматическое отслеживание изменений (положение переключателя Automatically (Автоматически)), мастер перед завершением своей работы полностью заполнит каталог индексами для выбранной таблицы. Каталог будет настроен таким образом, чтобы изменения отслеживались по мере их внесения в БД и применялись автоматически, что позволит поддержи-вать каталог синхронизированным с текущей таблицей или представлением. : При отслеживании изменений вручную (положение переключателя Manually (Вручную)) мастер тоже заполняет каталог. Затем можно применять отслежи-ваемые изменения базы данных вручную, что позволит поддерживать каталог синхронизированным с текущей таблицей или представлением. : Если же отслеживание изменений и заполнение каталога в данный момент не требуется, выберите положение переключателя Do not track changes (Не отслеживать изменения) и снимите флажок Start full population when index is created (Начать полное заполнение после создания индекса). 7. Щелкните кнопку Next (Далее). В раскрывающемся списке Select full-text catalog (Выберите полнотекстовый каталог) выберите существующий каталог или же, установив флажок Create a new catalog (Создать новый каталог), в ставших до-ступными полях настройте параметры нового каталога. Рис. 5-12. Мастер полнотекстового индексирования 8. Щелкните кнопку Next (Далее). Теперь можно выбрать или создать расписание заполнения каталога, а также таблицы, выбранной в данный момент.
Управление корпоративными серверами Глава 5 119 Примечание Обычно создаются расписания заполнения целого каталога, а не индиви-дуальной таблицы. Однако в некоторых случаях заполнение определенной таблицы имеет смысл, когда, например, ее содержание изменяется часто, а других таблиц - редко. 9. Щелкните кнопку Next (Далее), затем - кнопку Finish (Готово). Будет определен полнотекстовый индекс для таблицы. Но при выбранном параметре Do not track changes (Не отслеживать изменения) и снятом флажке Start full population when index is created (Начать полное заполнение после создания индекса) потребуется заполнить индекс вручную либо создать расписание для выполнения этого задания. Редактирование параметров полнотекстовых индексов таблиц и представлений Для изменения параметров полнотекстового индекса таблицы или представления выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел нужной БД, а затем узел Tables (Таблицы) или Views (Представления). Щелкните правой кнопкой мыши таблицу или представление и в контекстном меню выберите команду Full-Text Index\Properties (Полнотекстовый индекс\Свойства). Отобразится диалоговое окно Full-Text Index Properties (Свойства полнотекстового индекса), которое имеет три страницы. : General (Общие) Устанавливается текущая конфигурация. Свойства, ото-браженные полужирным шрифтом, можно изменить, а серым - недоступны для изменения. Раскрывающийся список Full-Text Indexing Enabled (Полно-текстовое индексирование включено) предназначен для включения (значение True) или выключения (значение False) индексирования. Определить режим отслеживания изменений данных в таблице и их отображения в индексе можно с помощью раскрывающегося списка Change Tracking (Отслеживание изме-нений). Для ручного режима установите значение Manual, а в случае авто-матического - Automatic. Значение Off отключает отслеживание изменений данных. : Columns (Столбцы) Назначаются параметры уникального индекса и индекс-ных столбцов. : Schedule (Расписание) Представлено расписание заполнения полнотексто-вого индекса, если оно назначено. Расписание можно добавить или изменить. 4. Используйте это окно для редактирования параметров полнотекстового индекса. Отключение полнотекстового индексирования и удаление индексов таблиц и представлений Если требуется временно остановить полнотекстовое индексирование таблицы или представления, можно отключить соответствующий полнотекстовый индекс. Когда в таблице или представлении выполняется множество обновлений, полнотекстовое индексирование полезно отключить, чтобы избежать инициирования обновления индекса или предотвратить запланированное инкрементное или полное заполнение каталога. По завершении индексирования таблицы или представления полнотекстовое индексирование можно удалить. При этом удаляются все ссылки на таблицу или 
120 Часть II Администрирование Microsoft SQL Server 2005 представление в связанном каталоге. Но они должны быть созданы заново, когда возникнет необходимость восстановить полнотекстовое индексирование. Для того чтобы отключить или удалить полнотекстовое индексирование таблицы или представления, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем узел Tables (Таблицы) или Views (Представления). Теперь вы можете выполнить сле-дующие действия. : Отключить полнотекстовый индекс Для этого щелкните правой кнопкой мы ши таблицу или представление и в контекстном меню выберите команду Full-Text Index\Disable Full-Text Index (Полнотекстовый индекс\Отключить полнотекстовый индекс). : Удалить полнотекстовый индекс В этом случае в контекстном меню таблицы или представления выполните команду Full-Text Index\Remove Full-Text Index (Полнотекстовый индекс\Удалить полнотекстовый индекс). Когда появится запрос на подтверждение удаления, щелкните кнопку OK. Заполнение полнотекстовых каталогов Выбрав таблицы и представления для индексирования, следует полностью запол-нить каталог, чтобы иметь возможность выполнять поиск в тех таблицах или пред-ставлениях, которые в него включены. После этого данные в связанном с таблицей или представлением каталоге можно обновлять тремя способами: вручную, по рас-писанию или автоматически в режиме отслеживания изменений в БД. В случае ис-пользования заданий, выполняемых по расписанию, нужно установить для службы SQL Server Agent (Агент SQL Server) время запуска задания. При этом заполнение каталога может быть задано либо однократным, в установленное время, либо пери-одическим - по расписанию. Заполнение каталога можно выполнять как для всех включенных в каталог таблиц, так и для индивидуальной таблицы. В большинстве случаев требуется заполнить весь каталог, а не определенную таблицу. Однако в не-которых ситуациях заполнение индивидуальной таблицы имеет смысл, например, когда ее содержание изменяется часто, а других таблиц - редко. Заполнение каталогов вручную для всех таблиц и представлений Для заполнения вручную каталога для всех таблиц и представлений, выбранных для индексирования, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню узла Full Text Catalogs (Полнотекстовые каталоги) выполните команду Rebuild All (Перестроить все), чтобы перестроить все полнотекстовые ка-талоги. Если нужно перестроить только определенный каталог, в его контекстном меню выберите команду Rebuild (Перестроить).
Управление корпоративными серверами Глава 5 121 Использование заданий для заполнения каталогов по расписанию для всех таблиц и представлений Чтобы назначить выполняющееся по расписанию задание для заполнения каталога для всех таблиц и представлений, выбранных для индексирования, выполните сле-дующую последовательность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню каталога, с которым предстоит работать, щелкните команду Properties (Свойства). Отобразится диалоговое окно Full-Text Catalog Properties (Свойства полнотекстового каталога). 5. В списке Select a page (Выберите страницу) выберите элемент Population Schedule (Расписание заполнения). Отобразятся расписания всех заданий, установленных на данный момент, организованные по имени и типу заполнения. Можно редак-тировать или удалять существующие расписания или щелкнуть кнопку New (Соз-дать), чтобы создать новое для заполнения каталога. (Само задание с необходимым для заполнения кодом Transact-SQL будет создано автоматически.) 6. Если в предыдущем пункте вы решили добавить новое расписание, в диалоговом окне New Full-Text Indexing Catalog Schedule (Новое расписание полнотекстового индексирования каталога) в поле Schedule name (Имя расписания) введите опи-сательное имя расписания, которое будет использоваться для запуска задания, заполняющего каталог. 7. Выберите в раскрывающемся списке Schedule type (Тип расписания) тип рас-писания. Обычно устанавливается One Time (Одноразовое) или Recurring (По-вторяющееся). 8. С помощью других элементов управления определите, когда задание будет вы-полняться. Одноразовые задания выполняются в указанный день и время. По-вторяющиеся задания могут запускаться ежедневно, еженедельно, ежемесячно или тоже в указанный день и время. Примечание В большинстве случаев требуется создать задание, выполняющееся пери-одически. При первом запуске задания будет произведено полное заполнение каталога, если эта операция не была выполнена ранее. При запусках, не завершающихся ошиб-кой, задание произведет заполнение согласно указанному типу. Запускает задания SQL Server Agent (Агент SQL Server), а идентифицируются они с помощью уникального имени, определяемого при создании задания. 9. Щелкните кнопку OK, чтобы закрыть диалоговое окно New Full-Text Indexing Catalog Schedule (Новое расписание полнотекстового индексирования каталога). 10. В диалоговом окне Full-Text Catalog Properties (Свойства полнотекстового катало-га) щелкните столбец Population Type (Тип заполнения) для созданного расписа-ния задания. Отобразится раскрывающийся список, параметры которого зависят от состояния каталога и включают такие типы. : Catalog - Full (Каталог - Полное) При полном заполнении каталог будет, по сути, полностью перестроен. Это задача, которую следует назначать только в особом случае и, желательно, не чаще, чем раз в квартал.
122 Часть II Администрирование Microsoft SQL Server 2005 : Catalog - Incremental (Каталог - Инкрементное) Такое заполнение каталога основывается на изменениях штампа времени для строк. При установленном режиме отслеживания изменений инкрементное заполнение обновляет каталог и для отслеженных изменений. Можно также применить отслеженные измене-ния вручную. : Catalog - Optimize (Каталог - Оптимизировать) Данную задачу следует выполнять периодически, чтобы повысить производительность поиска. Одна-ко оптимизация, как и перестройка, может быть длительным и ресурсоемким процессом, поэтому ее следует планировать на время, когда уровень активно-сти низок. 11. Щелкните кнопку OK. Заполнение каталогов вручную для определенной таблицы или представления Чтобы заполнить каталог вручную для определенной таблицы или представления, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объ-ектов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел нужной БД, а затем узел Tables (Таблицы) или Views (Представления). В контекстном меню таблицы или представления щелкните команду Full-Text Index (Полнотекстовый индекс). Далее выберите команду Start Full Population (Начать полное заполнение) или Start Incremental Population (Начать инкрементное заполнение). Если требуется оста-новить заполнение, в контекстном меню таблицы или представления выберите команду Full-Text Index\Stop Population (Полнотекстовый индекс\Остановить заполнение). Использование заданий для заполнения каталогов по расписанию для определенной таблицы или представления Чтобы установить выполняющееся по расписанию задание для заполнения каталога для определенной таблицы или представления, выполните следующую последова-тельность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте сначала узел сервера, затем - Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, затем узел Tables (Таблицы) или Views (Представления). В контекстном меню таблицы или представления выберите команду Full-Text Index\Properties (Полнотекстовый индекс\Свойства). 4. В списке Select a page (Выберите страницу) выберите элемент Schedule (Распи-сание). Отобразятся расписания всех заданий, установленных на данный момент, организованные по имени и типу заполнения. Вы можете редактировать или уда-лять существующие расписания, или же создать новое для заполнения каталога, щелкнув кнопку New (Создать). (Само задание с необходимым для заполнения кодом Transact-SQL будет создано автоматически.) 5. Если в предыдущем пункте вы решили добавить новое расписание, в диалоговом окне New Full-Text Indexing Table Schedule (Новое расписание полнотекстового индексирования таблицы) введите его описательное имя, которое будет исполь-зоваться для запуска задания, заполняющего каталог.
Управление корпоративными серверами Глава 5 123 6. Используйте раскрывающийся список Schedule type (Тип расписания) для выбора типа расписания. Обычно устанавливается One Time (Одноразовое) или Recurring (Повторяющееся). 7. Используйте другие элементы управления, чтобы определить, когда задание бу-дет выполняться. Одноразовые задания выполняются в указанный день и время. Повторяющиеся задания могут запускаться ежедневно, еженедельно, ежемесячно или в указанный день и время. 8. Щелкнув кнопку OK, закройте диалоговое окно New Full-Text Indexing Table Schedule (Новое расписание полнотекстового индексирования таблицы). 9. В диалоговом окне Full-Text Catalog Properties (Свойства полнотекстового катало-га) щелкните столбец Population Type (Тип заполнения) для созданного расписания задания. Отобразится раскрывающийся список со следующими параметрами. : Table - Full (Таблица - Полное) Производит полное заполнение, которое, по сути, совершенно перестраивает индекс для таблицы в каталоге. Это задача, которую следует назначать только в особом случае. : Table - Incremental (Таблица - Инкрементное) Выполняет инкрементное заполнение, основываясь на изменениях штампа времени. : Table - Update (Таблица - Обновляющее) Производит обновление каталога, основываясь на отслеживаемых изменениях. Отслеженные изменения также можно применить вручную. 10. Щелкните кнопку OK. Перестройка существующих каталогов Если изменения в базу данных вносятся очень часто, содержимое каталогов может стать несовместимым с содержимым БД. Также при длительном использовании ка-талоги могут значительно увеличиваться в размерах. В таких случаях их следует перестроить, и сделать это можно как для каждого каталога в отдельности, так и для всех сразу. Чтобы перестроить один каталог, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объе-ктов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню нужного каталога выберите команду Rebuild (Перестроить). При появлении запроса на подтверждение действия щелкните кнопку OK. 5. Используйте диалоговое окно Rebuild Full-Text Catalog (Перестроить полнотексто-вый каталог) для отслеживания состояния и остановки перестройки и отображения отчета об этом. Отметьте все ошибки или предупреждения и внимательно прочи-тайте в отчете связанные с ними сведения. Щелкните кнопку Close (Закрыть). Для перестройки всех каталогов, связанных с БД, выполните такую последова-тельность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объектов) раскройте узлы сервера и Databases (Базы данных).
124 Часть II Администрирование Microsoft SQL Server 2005 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню узла Full Text Catalogs (полнотекстовые каталоги) выберите команду Rebuild All (Перестроить все). При появлении запроса на подтверждение действия щелкните кнопку OK. 5. Используйте диалоговое окно Rebuild All Full-Text Catalogs (Перестроить все полнотекстовые каталоги) для отслеживания состояния и остановки перестрой-ки и отображения отчета об этом. Отметьте все ошибки или предупреждения и внимательно прочитайте в отчете связанные с ними сведения. Щелкните кнопку Close (Закрыть). Внимание! Перестройка каталогов может быть длительным и ресурсоемким процессом. Каталоги следует перестраивать только в те часы, когда нагрузка минимальна. Сжатие каталогов Несмотря на то что компоненты полнотекстового поиска хорошо справляются с об-служиванием индексов и "уборкой мусора" после себя, необходимо следить за ко-личеством и размером файлов каталогов. Также следует регулярно сжимать старые каталоги для освобождения занимаемого дискового пространства. Чтобы это сделать, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объектов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню нужного каталога выберите команду Properties (Свойства). Отобразится диалоговое окно Full-Text Catalog Properties (Свойства полнотексто-вого каталога). 5. На странице General (Общие) в разделе Catalog action (Действие с каталогом) установите переключатель в положение Optimize Catalog (Оптимизировать ката-лог), затем щелкните кнопку OK. Удаление каталогов Чтобы удалить каталог, выполните указанную последовательность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. Для доступа к нужной базе данных в панели Object Explorer (Обозреватель объ-ектов) раскройте узлы сервера и Databases (Базы данных). 3. Под узлом Databases (Базы данных) раскройте узел требуемой БД, а затем, для отображения каталогов, узлы Storage (Хранилища) и Full Text Catalogs (Полно-текстовые каталоги). 4. В контекстном меню нужного каталога выберите команду Delete (Удалить). Для подтверждения щелкните кнопку OK в диалоговом окне Delete Object (Удаление объекта). Для удаления всех каталогов, связанных с базой данных, требуется удалить каж-дый каталог в отдельности.
Управление корпоративными серверами Глава 5 125 Управление активностью сервера Обеспечение сбалансированной работы SQL Server входит в обязанности админи-стратора БД. Необходимо постоянно контролировать сервер, чтобы: отслеживать пользовательские соединения и блокировки; просматривать процессы и команды, которые выполняют активные пользователи; проверять состояние блокировок на процессах и объектах; видеть заблокированные и блокирующие транзакции; обеспечивать успешное завершение процессов и находить ошибки в противном случае. При возникновении проблем можно принудительно завершить процесс. Примечание Более подробно о мониторинге SQL Server рассказано в главе 13. Там же вы узнаете, как использовать компоненты панели управления System Monitor (Системный монитор) и утилиту SQL Server Profiler (Профилировщик SQL Server) для отслеживания активности сервера, производительности и ошибок. Просмотр информации о процессах Просматривая информацию о процессах, можно получить детальные сведения об их состоянии, текущих пользовательских соединениях и другой активности сервера. Для этого выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел сервера, а потом узел Management (Управление). 3. Под узлом Management (Управление) дважды щелкните мышью узел Activity Monitor (Монитор активности). Отобразится окно Activity Monitor (Монитор активно-сти), содержащее сводную информацию об активности процессов (рис. 5-13). Рис. 5-13. Окно Activity Monitor со сводной информацией о процессах
126 Часть II Администрирование Microsoft SQL Server 2005 Совет По умолчанию информация о процессах не обновляется автоматически. Чтобы ее обновить, в панели инструментов окна Activity Monitor (Монитор активности) щелкните кнопку Refresh (Обновить). Для настройки автоматического обновления щелкните ссылку View refresh settings (Просмотреть параметры обновления) в разделе Status (Состояние). В диалоговом окне Refresh Settings (Параметры обновления) установите флажок Autorefresh every (Автоматическое обновление каждые) и задайте в предоставленном поле время интервала обновления (в секундах). Щелкните кнопку OK. По умолчанию процессы отсортированы по идентификатору, но их можно упо-рядочить и по другим доступным категориям информации, приведенным в табл. 5-2. Чтобы отсортировать процессы по какой-либо категории, щелкните ее заголовок. При повторном щелчке процессы будут отсортированы в обратном порядке. Табл. 5-2. Информация о процессах, используемая в администрировании БД Категория Описание Process ID Идентификатор процесса для текущего пользователя System Process Системный процесс User Пользователь, выполняющий процесс. Отображается учетная запись SQL Server или домена, в зависимости от используемого способа аутентификации Database БД, с которой связан процесс Status Состояние процесса. Обычные состояния: running (работающий), runnable (отработавший, но активный), sleeping (спящий) или background (фоно-вый). Работающий выполняет команду в данный момент; отработавший - успешно выполнил команду, но является активным и ожидает дальнейших действий; спящий - ожидает интерактивного ввода или разблокирования; фоновый - работает в фоновом режиме и периодически выполняет задачи Open Transactions Количество открытых транзакций Command Команда, выполняемая процессом в данный момент, или последняя выполненная Application Приложение или компонент SQL Server, подключенные к серверу и выполняющие процесс, например Report Server (Сервер отчетов) Wait Time Время ожидания разблокирования (мс) Wait Type Тип последнего или текущего ожидания Resource Ресурс, разблокирования которого ожидает процесс CPU Количество используемого времени процессора (мс) Physical I/O Количество физических операций дискового ввода-вывода, использованных процессом Memory Usage Количество страниц в кэше процедур, назначенных процессу Login Time Время установки соединения Last Batch Время последнего выполнения команды Host Узел, установивший соединение Net Library Сетевая библиотека, используемая для соединения Net Address Сетевой адрес соединения Blocked by Идентификатор блокирующего процесса Blocking Идентификатор процесса, заблокированного данным Execution Context Контекст выполнения процесса Отслеживание блокировок по идентификатору процесса и имени объекта За блокировками можно следить, организуя информацию согласно идентификатору процесса или имени объекта. Каждый способ предоставляет одинаковую информацию, 
Управление корпоративными серверами Глава 5 127 но отображает ее в разном виде. В обоих случаях выполните следующую последова-тельность действий. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел сервера, а потом узел Management (Управление). 3. Чтобы открыть окно Activity Monitor (Монитор активности), дважды щелкните мышью узел Activity Monitor (Монитор активности), находящийся под узлом Management (Управление). 4. Группируя информацию по процессу, можно просмотреть перечень всех объектов, заблокированных конкретным процессом. Для этого в списке Select a page (Вы-берите страницу) щелкните элемент Locks By Process (Блокировки по процессу), затем справа в раскрывающемся списке Selected process (Выбранный процесс) выберите идентификатор процесса, блокировки которого следует посмотреть, например 51. 5. Группировка информации по объекту даст возможность просмотреть список всех процессов, установивших блокировку на объекте. Для этого в списке Select a page (Выберите страницу) щелкните элемент Locks By Object (Блокировки по объек-ту), затем справа в раскрывающемся списке Selected object (Выбранный объект) выберите объект БД, который следует просмотреть, например (internal). 6. Статистика блокировок не обновляется автоматически, поэтому периодически нужно обновлять отображаемую информацию. Для этого в панели инструментов окна Activity Monitor (Монитор активности) щелкните кнопку Refresh (Обно-вить). Хотя информация о блокировках, организованная по идентификатору процесса или имени объекта, выглядит несколько по-разному, на самом деле она практически идентична. В первом случае отображается список объектов, заблокированных про-цессом, в другом - список процессов, которые установили блокировки на объекте. Можно еще просмотреть информацию о типе, статусе и режиме блокировки, ее вла-дельце, а также о заблокированном ресурсе и индексе (если применимо). Доступная информация, относящаяся к блокировкам, приведена в табл. 5-3. Табл. 5-3. Информация о блокировках, используемая в администрировании БД Категория, тип Описание Process ID Идентификатор процесса для текущего пользователя Context Идентификатор потока, связанного с процессом Batch ID Идентификатор пакета, связанного с процессом Type Объект блокировки RID Строка таблицы KEY Диапазон ключей индекса PAGE Страница данных или индекса EXTENT Группа из восьми смежных страниц данных или индекса (экстент) TABLE Вся таблица, включая индексы DATABASE Вся БД METADATA Метаданные объекта Subtype Подтип блокировки. Часто используется при блокировке метаданных Description Необязательная описательная информация (см. след. стр.)
128 Часть II Администрирование Microsoft SQL Server 2005 Категория, тип Описание Request Mode Тип блокировки, устанавливаемой запросом S Разделяемая (Shared). Используется для операций чтения, таких как инструкция select U Обновления (Update). Используется при чтении для блокирования ресурса, который впоследствии может понадобиться обновить. Предотвращает некоторые ситуации, способные привести к тупиковым ("мертвым") блокировкам X Монопольная (Exclusive). Позволяет обновлять данные только одному соединению. Используется в операциях изменения данных, таких как INSERT, DELETE, и UPDATE I Намерения (Intent). Используется при установке иерархии блокировок Sch-S Неизменности схемы (Schema stability). Используется при просмотре схемы таблицы Sch-M Изменения схемы (Schema modification). Используется при изменении схемы таблицы BU Массивного обновления (Bulk update). Используется при массивном копировании данных в таблицы и заданном указании TABLOCK RangeS_S Разделяемая блокировка диапазона ключей, разделяемая блокировка ресурса RangeS_U Разделяемая блокировка диапазона ключей, блокировка обновления ресурса RangeI_N Блокировка намерения для диапазона ключей без блокировки ресурса. Используется для проверки диапазона ключей перед вставкой нового ключа в индекс RangeX_X Монопольная блокировка диапазона ключей и ресурса. Используется при обновлении ключа в диапазоне ключей Request Type Тип объекта, задействованного в запросе Request Status Состояние запроса GRANT Блокировка была установлена WAIT Ожидание освобождения ресурса, заблокированного другим процессом CNVT Блокировка конвертируется (установленная блокировка ожидает полу-чения более жесткого режима) Owner Type Тип владельца CURSOR Курсор SESSION Сеанс пользовательского соединения TRANSACTION Транзакция SHARED_ TRANSACTION_ WORKSPACE Разделяемая часть рабочей области транзакции EXCLUSIVE_ TRANSACTION_ WORKSPACE Монопольная часть рабочей области транзакции Owner ID Идентификатор владельца, связанного с блокировкой Owner GUID Глобальный уникальный идентификатор (GUID, globally unique identifier) владельца, связанного с блокировкой Database БД, в которой установлена блокировка Object Имя заблокированного объекта Табл. 5-3. (окончание)
Управление корпоративными серверами Глава 5 129 Выявление и устранение тупиковых блокировок и блокирующих соединений Двумя общими проблемами, которые встречаются довольно часто, являются тупико-вые блокировки и блокирующие соединения. Они могут произойти почти в любой системе управления БД, особенно когда большое количество пользователей одно-временно устанавливают соединения к базам данных. Тупиковые блокировки имеют место тогда, когда два пользователя устанавливают блокировки на разные объекты, пытаясь при этом заблокировать объект другого пользователя. Каждый из них ждет, пока другой снимет блокировку, но этого не происходит. Блокирующие соединения появляются, когда одно соединение удерживает бло-кировку, а второе пытается установить несовместимый тип блокировки. Это при-нуждает второе соединение ждать или блокировать первое. И тупиковые блокировки, и блокирующие соединения могут понизить произво-дительность сервера. Несмотря на то что SQL Server сам способен обнаруживать и исправлять такие ситуации, ему можно помочь ускорить этот процесс, распознавая потенциальные проблемы и принимая меры, если это необходимо. Информация о процессах пре-доставляет сведения, когда происходят тупиковые блокировки или блокирующие соединения. Обратите внимание на следующие столбцы информации: Wait Time (Время ожидания), Wait Type (Тип ожидания), Resource (Ресурс), Blocking (Блоки-рует) и Blocked By (Блокирован). Когда вы разбираетесь с тупиковой блокировкой или блокирующим соединением, внимательно изучите установленные на объекте блокировки, вызвавшие проблему. Как это сделать, было рассказано в предыдущем разделе. Если потребуется прервать конфликтующие процессы, выполните действия, описанные в последнем разделе главы. Отслеживание исполнения команд в SQL Server Иногда необходимо отслеживать команды, посылаемые пользователями на выполне-ние. Это можно сделать в окне Activity Monitor (Монитор активности). 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел сервера, а потом узел Management (Управление). 3. Дважды щелкните узел Activity Monitor (Монитор активности), находящийся под узлом Management (Управление), чтобы открыть одноименное окно. Поле Last Refresh (Последнее обновление) в разделе Status (Состояние) показывает дату и время последнего обновления отображаемой в окне информации об активности сервера. Совет Если это было давно, щелкните в панели инструментов кнопку Refresh (Обновить), чтобы обновить информацию. 4. В списке Select a page (Выберите страницу) выберите элемент Process Info (Ин-формация о процессе). Справа отобразится информация о процессах. Данные в столбце User (Пользователь) могут помочь отследить пользовательские соеди-нения и процессы, которые они используют. 5. Отобразите диалоговое окно Process Details (Сведения о процессе), дважды щел-кнув процесс, чтобы увидеть последний пакет инструкций, отправленный поль-зователем на выполнение (рис. 5-14).
130 Часть II Администрирование Microsoft SQL Server 2005 6. Для отслеживания текущих команд, выполняемых пользователем, периодически щелкайте кнопку Refresh (Обновить). 7. Чтобы прекратить процесс, воспользуйтесь кнопкой Kill Process (Прекратить про-цесс). При появлении запроса на подтверждение щелкните кнопку Yes (Да). Рис. 5-14. Диалоговое окно Process Details Прекращение процессов сервера При необходимости остановить процессы, которые блокируют соединения или ис-пользуют слишком много времени процессора, выполните следующие действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел сервера, а потом узел Management (Управление). 3. Дважды щелкните мышью узел Activity Monitor (Монитор активности), находя-щийся под узлом Management (Управление), чтобы открыть одноименное окно. Поле Last Refresh (Последнее обновление) в разделе Status (Состояние) показы-вает дату и время последнего обновления отображаемой в окне информации об активности сервера. 4. В списке Select a page (Выберите страницу) выберите элемент Process Info (Ин-формация о процессе). Справа отобразится информация о процессах. Раскройте контекстное меню процесса, который следует остановить. Примечание Обычно не следует прерывать процессы, запускаемые на выполнение SQL Server. Если какой-либо процесс работает не надлежащим образом, остановите его и затем перезапустите связанную с ним службу, вместо попытки прервать процесс. 5. Выполните команду Kill Process (Прекратить процесс). При появлении запроса на подтверждение действия щелкните кнопку Yes (Да).
Глава 6 Настройка SQL Server с помощью утилиты SQL Server Management Studio На смену утилите Enterprise Manager в SQL Server 2005 пришел новый графический инструмент администрирования - утилита SQL Server Management Studio. Ее появ-ление стало настоящим подарком для администраторов и разработчиков приложений. С помощью SQL Server Management Studio конфигурирование и настройка SQL Server значительно упрощаются. Можно легко, двумя-тремя щелчками мыши, получить до-ступ к свойствам зарегистрированного сервера и затем использовать предоставляемые элементы интерфейса для настройки его параметров конфигурации. Управление конфигурацией с помощью SQL Server Management Studio После подключения в утилите SQL Server Management Studio к зарегистрированному серверу появится возможность просматривать его параметры конфигурации и управ-лять ими, используя диалоговое окно Server Properties (Свойства сервера). Чтобы получить доступ к указанному окну, выполните следующие действия. 1. Запустите SQL Server Management Studio. Для этого раскройте в меню Start (Пуск) командой Programs (Программы) или All Programs (Все программы) папку Microsoft SQL Server 2005 и щелкните утилиту SQL Server Management Studio. Или наберите sqlwb в командной строке. 2. В раскрывающемся списке Server type (Тип сервера) диалогового окна Connect to Server (Подключиться к серверу) выберите компонент базы данных, с которым тре-буется установить соединение, например Database Engine (Ядро базы данных). 3. В поле Server Name (Имя сервера) введите имя компьютера, на котором запущен SQL Server, например DBSvr18. По умолчанию соединение устанавливается с эк-земпляром по умолчанию (если предварительно не был настроен другой экземпляр по умолчанию). Если вы хотите подключиться к другому экземпляру, выберите в списке справа от поля его имя, но при условии, что с ним ранее уже устанавли-валось соединение. Чтобы подключиться к какому-либо экземпляру в первый раз, в этом же списке щелкните элемент <Browse for more.> (Поиск других серверов) и в появившемся диалоговом окне Browse for Servers (Поиск серверов) выберите тот экземпляр, с которым требуется установить соединение. Примечание Подключиться можно только к зарегистрированным серверам. Поэтому если SQL Server, с которым предстоит работать, еще не зарегистрирован, прежде всего сделайте это. Как выполняется такая процедура, описано в разделе "Управление серве-рами" главы 5. 4. В списке Authentication (Аутентификация) выберите один из типов аутентифи-кации - Windows Authentication (Аутентификация Windows) или SQL Server Authentication (Аутентификация SQL Server). При необходимости в поле User 
132 Часть II Администрирование Microsoft SQL Server 2005 name (Имя пользователя) введите имя учетной записи Windows или SQL Server, а в поле Password (Пароль) - пароль. 5. Щелкните кнопку Connect (Подключиться). 6. В панели Object Explorer (Обозреватель объектов) из контекстного меню сервера, который требуется настроить, выберите команду Properties (Свойства). Отобразит-ся диалоговое окно Server Properties (Свойства сервера), показанное на рис. 6-1. Рис. 6-1. Страница General диалогового окна Server Properties 7. Теперь можно управлять общими параметрами конфигурации SQL Server. Для на-стройки дополнительных параметров следует использовать хранимую процедуру sp_configure, как описано в главе 4 "Конфигурирование и настройка Microsoft SQL Server 2005". Диалоговое окно Server Properties (Свойства сервера) содержит множество стра-ниц, список которых находится в верхней части панели слева (см. рис. 6-1). Об ис-пользовании представленных на этих страницах параметров конфигурации будет рассказано в следующих разделах. Предоставление разрешений описывается в главе 8 "Управление системой безопасности SQL Server 2005". Если требуется просмотреть список текущих значений параметров, в окне запро-сов выполните следующий запрос: USE master GO EXEC sp_configure GO Примечание Для просмотра дополнительных параметров конфигурации значение па-раметра show advanced options должно быть установлено равным 1 (об этом см. главу 4).
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 133 Просмотр общей информации об операционной системе и SQL Server Как видно из рис. 6-1, общая информация об операционной системе и сервере баз данных отображена на странице General (Общие) диалогового окна Server Properties (Свойства сервера). В частности, там содержатся следующие данные: редакция SQL Server (Product); версия операционной системы (Operating System); версия SQL Server (Version); платформа сервера и архитектура процессора (Platform); язык по умолчанию (Language); объем оперативной памяти, установленной в системе (Memory); количество процессоров (Processors); каталог верхнего уровня для выбранного экземпляра (Root Directory); сопоставление, используемое по умолчанию (Collation). Подобную информацию также можно получить с помощью расширенной хранимой процедуры xp_msver, выполнив следующую инструкцию: EXEC xp_msver 'ProductName', 'ProductVersion', 'Language', 'Platform', 'WindowsVersion', 'PhysicalMemory', 'ProcessorCount' Совет Для выполнения данной команды можно использовать окно Query (Запрос). Воз-можности модуля формирования запросов были описаны в разделе "Настройка SQL Server с помощью хранимых процедур" главы 4. Настройка аутентификации и аудита доступа Параметры аутентификации и аудита доступа задаются с помощью страницы Security (Безопасность) диалогового окна Server Properties (Свойства сервера). Эта страница показана на рис. 6-2. Выбор режима аутентификации Система безопасности SQL Server полностью интегрирована с системой безопасности доменовWindows, что дает возможность применять аутентификацию, основанную как на членстве в группах Windows, так и на стандартных учетных записях пользо-вателей SQL Server. Для смешанного режима аутентификации выберите положение переключателя SQL Server And Windows Authentication Mode (Режим аутентифи-кации Windows и SQL Server). Теперь пользователи, зарегистрированные в доменах Windows, могут получить доступ к серверу с помощью учетной записи домена, а дру-гие - учетной записи SQL Server. Примечание Аутентификация Windows недоступна при использовании редакции SQL Server Express Edition, работающей под управлением операционных систем Windows 95 или Windows 98. Если вы решили отдать предпочтение аутентификации доменов, установите пе-реключатель в положение Windows Authentication Mode (Режим аутентификации Windows). Теперь только пользователи учетных записей доменов смогут получить доступ к серверу. Примечание В смешанном режиме аутентификации SQL Server сначала проверяет, явля-ется ли учетная запись, пытающаяся установить соединение, его учетной записью. Если да, предоставленный пароль используется для аутентификации пользователя. Если указанной учетной записи SQL Server не существует, используется аутентификация Windows.
134 Часть II Администрирование Microsoft SQL Server 2005 Рис. 6-2. Параметры страницы Security Установка параметров аудита доступа Аудит позволяет контролировать доступ пользователей к SQL Server. Его можно использовать с обоими режимами аутентификации, а также с доверительными и не-доверительными соединениями. Когда аудит включен, попытки пользователей установить соединение записыва-ются в журнал приложений Windows, журнал ошибок SQL Server или в оба журнала одновременно, в зависимости от того, каким образом было настроено их ведение для SQL Server. Можно настроить следующие параметры аудита доступа (выбрав соот-ветствующее положение переключателя): None (Отключен); Failed Logins Only (Только неудачные попытки подключения) (установка по умол-чанию); Successful Logins Only (Только удачные попытки подключения); Both Failed And Successful Logins (Удачные и неудачные попытки подключения). Настройка использования памяти В SQL Server реализовано динамическое управление памятью, и в большинстве слу-чаев этот механизм прекрасно справляется со своей задачей. Распределяя память в автоматическом режиме, SQL Server может выделить ее для обработки входящих запросов, освободить для другого запущенного приложения или зарезервировать в расчете на предполагаемые потребности. По умолчанию заданы такие установки: режим распределения памяти - динамический; минимальное количество для SQL Server - 0 Мбайт;
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 135 максимальное количество выделяемой памяти - установлено, что позволяет SQL Server использовать виртуальную и физическую оперативную память; фиксированный объем памяти, выделяемой специально для SQL Server, - не за-резервирован; поддержка технологии Address Windowing Extensions (AWE, расширение про-странства адресов посредством адресного окна) - отключена; минимальное количество памяти для выполнения запроса - 1024 Кбайт. Эти установки можно изменить, но делать это следует осторожно, чтобы не выде-лить для SQL Server слишком много или, наоборот, недостаточно памяти. Выделение малого количества памяти помешает SQL Server своевременно выполнять задачи. В то время как при чрезмерном количестве памяти SQL Server заберет важные ре-сурсы у других приложений, таких как операционная система, что может привести к интенсивному обращению к файлу подкачки оперативной памяти, и, следовательно, к понижению общей производительности системы. Совет Некоторые статистические данные, отслеживаемые сервером, могут помочь пра-вильно установить параметры распределения памяти. Следует обратить внимание на показания таких счетчиков компонента панели управления System Monitor (Системный монитор), как Pages Faults/sec (Ошибок страницы/сек) и Cache Hit Ratio (Процент удачных обращений к кэшу). Первый из них является общесистемным и показывает количество сбоев в результате чтения страниц виртуальной памяти из-за их отсутствия в рабочем наборе (то есть за страницей пришлось обращаться к диску). Второй счетчик устанав-ливается SQL Server и отображает процентное содержание числа кэшированных страниц данных. Подробнее об использовании статистической информации говорится в главе 13. В этом разделе мы рассмотрим важные принципы и способы управления памятью. Основным методом управления конфигурацией памяти является установка параме-тров на странице Memory (Память) диалогового окна Server Properties (Свойства сервера), показанного на рис. 6-3. Но вы также узнаете и о другом, лучшем, способе настроить использование памяти для SQL Server. Совет Не используйте с SQL Server 2005 параметр Maximize data throughput for network applications (Максимальная пропускная способность для сетевых приложений). При его установке для приложений, применяющих буферизированный ввод-вывод, выполняется сохранение страниц ввода-вывода в кэш-памяти, что повышает производительность. Од-нако использование данного параметра может ограничить количество памяти, доступное SQL Server 2005. Чтобы просмотреть и изменить параметр Maximize data throughput for network applications (Максимальная пропускная способность для сетевых приложений), выполните следующие действия. 1. Откройте Control Panel (Панель управления) и запустите компонент Network Connections (Сетевые подключения). 2. Щелкните в контекстном меню Local Area Connection (Подключение по локальной сети) команду Properties (Свойства) для отображения диалогового окна Properties (Свойства). 3. На вкладке General (Общие) в списке This connection uses the following items (Компо-ненты, используемые этим соединением) выберите File and printer sharing for Microsoft networks (Служба доступа к файлам и принтерам сетей Microsoft), затем щелкните кнопку Properties (Свойства). 4. На вкладке Server Optimization (Оптимизация сервера) выберите любое подходящее положение переключателя, кроме Maximize data throughput for network applications (Максимальная пропускная способность для сетевых приложений). 5. Перезапустите сервер, чтобы применить новое значение параметра.
136 Часть II Администрирование Microsoft SQL Server 2005 Рис. 6-3. Страница Memory диалогового окна Server Properties Использование динамического управления памятью В режиме динамического управления памятью SQL Server периодически опрашивает операционную систему и распределяет память автоматически, основываясь на текущей загрузке и доступных ресурсах. Общее количество используемой памяти варьируется между заданными минимальным и максимальным значениями. Назначенный ми-нимум устанавливает базовое количество используемой SQL Server памяти, однако это не значит, что весь указанный объем будет выделен при запуске сразу. Память выделяется по необходимости на основе данных о загруженности сервера. В моменты относительного простоя SQL Server освобождает часть используемой памяти, однако при достижении порога минимального использования памяти этот процесс прекра-щается, и операционная система не сможет уменьшить доступную SQL Server память ниже этого значения. Для динамического управления памятью выполните следующую последователь-ность действий. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Memory (Память). 2. Установите разные значения минимального и максимального использования памя-ти в полях Minimum server memory (in MB) (Минимальный объем памяти, исполь-зуемой сервером (в Мбайт)) и Maximum server memory (in MB) (Максимальный объем памяти, используемой сервером (в Мбайт)) соответственно. Рекомендован-ным максимальным значением для одиночных серверов является значение, равное общему количеству памяти (физической + виртуальной), или же приближенное к нему. Однако, если на компьютере запущено несколько экземпляров SQL Server, 
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 137 следует рассчитать максимальную память сервера таким образом, чтобы между экземплярами не было конфликта за выделение памяти. 3. Щелкните кнопку OK. Изменить минимальный и максимальный пороги выделения памяти можно с помо-щью хранимой процедуры sp_configure, применив такие инструкции Transact-SQL: EXEC sp_configure 'min server memory', number_of_megabytes EXEC sp_configure 'max server memory', number_of_megabytes Совет При динамическом управлении памятью обычно не требуется устанавливать ми-нимальное и максимальное значения. Однако на выделенной системе, выполняющей только SQL Server, можно добиться более сбалансированной работы, установив объем минимальной памяти 8 Мбайт + (24 Кбайт * количество_пользователей), где количе-ство_пользователей является средним числом пользователей, одновременно подключен-ных к серверу. Можно также зарезервировать для SQL Server физическую память. SQL Server требует около 8 Мбайт для кода и внутренних структур. Дополнительная память используется следующим образом: 96 байтов - блокировкой, 2880 байтов - открытой БД и 276 байтов - открытым объектом, что включает все таблицы, представления, хра-нимые процедуры, расширенные хранимые процедуры, триггеры, правила, ограничения и умолчания. Можно проверить минимальное использование памяти с помощью объекта SQLServer:Memory Manager (SQL Server:Диспетчер памяти) компонента управления System Monitor (Системный монитор). Выберите для мониторинга все счетчики и с помощью вкладки Report (Отчет) контролируйте использование памяти. Обратите особое внимание на счетчик Total Server Memory (Общая память сервера). Более подробные сведения о мониторинге производительности SQL Server вы найдете в главе 13. Выделение фиксированного объема оперативной памяти Если требуется отменить динамическое управление памятью, нужно зарезервировать оперативную память специально для SQL Server. При резервировании физической памяти для SQL Server страницы памяти не возвращаются операционной системе, даже если SQL Server мало загружен, и эта память может быть перераспределена между другими процессами. Это означает, что SQL Server использует фиксированный объем памяти. На выделенной системе резервирование физической памяти может повысить производительность SQL Server, поскольку уменьшает обмен страницами с виртуальной памятью и увеличивает количество удачных обращений к кэшу. Чтобы зарезервировать физическую память для SQL Server, выполните предло-женные действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Memory (Память). 2. Установите одинаковые значения в полях Minimum server memory (in MB) (Мини-мальный объем памяти, используемой сервером (в Мбайт)) и Maximum server memo ry (in MB) (Максимальный объем памяти, используемой сервером (в Мбайт)), которые должны быть равны объему памяти, необходимой для резервирования. 3. Щелкните кнопку OK. Также для резервирования физической памяти можно использовать хранимую процедуру sp_configure, применив такие инструкции Transact-SQL: EXEC sp_configure 'set working set size', 1 GO EXEC sp_configure 'min server memory', number_of_megabytes GO EXEC sp_configure 'max server memory', number_of_megabytes
138 Часть II Администрирование Microsoft SQL Server 2005 GO RECONFIGURE WITH OVERRIDE GO Внимание! Неверная установка фиксированного объема памяти может привести к се-рьезным проблемам производительности SQL Server. Используйте фиксированный объем памяти только в случае, если необходимо гарантировать постоянную доступность для SQL Server определенного количества физической памяти. Включение поддержки расширенной памяти посредством технологии AWE В редакциях SQL Server 2005 Enterprise и Developer реализована поддержка расши-ренной памяти, выделяемой с помощью интерфейса программирования AWE (address windowing extensions), позволяющего 32-разрядным приложениям адресовать память за пределами 4 Гбайт. Если включена поддержка технологии AWE, SQL Server 2005 динамически распределяет расширенную память при запуске, а также распределяет или освобождает расширенную память в рамках заданных параметров минимального и максимального количества используемой памяти. Администратор должен сбаланси-ровать использование памяти SQL Server с требованиями всей системы. SQL Server всегда, даже на компьютерах, настроенных на выделение приложениям менее чем 3 Гбайт адресного пространства в непривилегированном режиме процессора, пытается использовать всю расширенную память, отображаемую через механизм AWE. Совет Для обеспечения функциональности Hot-Add Memory (Добавление памяти на ходу), предоставляемой Windows Server 2003, Microsoft рекомендует включить поддержку техно-логии AWE. Следует учитывать и то, что SQL Server способен динамически освобождать память, отображаемую через механизм AWE, однако текущее количество распределенной расширенной памяти не может быть выгружено в файл подкачки. Совет Если включена поддержка AWE, учетная запись пользователя или сервера, под которой запущен экземпляр, должна обладать правом пользователя Lock pages in memory (Закрепление страниц в памяти), которое назначается с помощью оснастки Group Policy (Групповая политика). Чтобы включить поддержку технологии AWE, выполните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Memory (Память) и установите флажок Use AWE to allocate memory (Использовать AWE для распределения памяти). 2. Установите такие значения максимального и минимального использования па-мяти, которые будут гарантировать достаточно памяти для других приложений. Например, определив минимальный объем, равным 2 Гбайт (2048 Мбайт), а мак-симальный - 4 Гбайт (4096 Мбайт), вы ограничите количество памяти для SQL Server 2005. 3. Щелкните кнопку OK. Для включения поддержки AWE можно также использовать хранимую процедуру sp_configure, применив следующие инструкции Transact-SQL: EXEC sp_configure 'awe enabled', 1 RECONFIGURE GO Оптимизация использования памяти при индексировании По умолчанию SQL Server 2005 динамически управляет количеством памяти, вы-деляемой для операций создания индексов. Если для создания индексов требуется 
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 139 дополнительная память, и согласно параметрам конфигурации сервера память до-ступна, то сервер ее выделит. Если же дополнительная память требуется, но заданные параметры не позволяют ее выделить, для создания индексов будет использоваться память, уже выделенная для выполнения построения индексов. Как правило, сервер автоматически настраивает выделение памяти для таких опе-раций - в большинстве ситуаций этого бывает достаточно. Едва ли не единственным исключением являются случаи, когда используются секционированные таблицы и индексы и при этом некоторые секционированные индексы являются несовмещенны-ми (nonaligned), то есть для их секционирования определена отличная от связанной таблицы схема. В этих случаях, если множество одновременных операций создания индексов выполняются параллельно, могут возникнуть проблемы создания индексов. Когда такое происходит, можно назначить определенное количество памяти, выделя-емой для создания индекса. Для этого выполните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Memory (Память) и задайте необходимое значение в поле Index creation memory (Объем памяти для создания индекса). Значение указывается в килобайтах. 2. Щелкните кнопку OK. Можно также использовать хранимую процедуру sp_configure, применив такую инструкцию: EXEC sp_configure 'index create memory', number_of_kilobytes Примечание Количество памяти, назначенное для операций создания индекса, должно быть не меньше, чем минимальное количество памяти для запроса. В противном случае SQL Server будет использовать количество памяти, указанное как минимальное для за-проса, и отобразит предупреждение об этом. Выделение памяти для запросов По умолчанию сервер назначает определенный минимальный объем памяти - 1024 Кбайт - для выполнения запроса. Это количество памяти гарантированно вы-деляется для каждого пользователя, причем значение можно указать в диапазоне от 512 Кбайт до 2 Гбайт. При увеличении минимального размера памяти, выделяемой для запроса, повысится производительность запросов, выполняющих операции по интенсивному использованию процессора, такие как сортировка или хеширование. Однако если указать слишком высокое значение, можно снизить общую произво-дительность системы. Поэтому устанавливайте минимальный размер памяти, вы-деляемой для запроса, только в случае, когда существуют проблемы со скоростью выполнения запросов. Совет Значение по умолчанию, равное 1024 Кбайт, приемлемо в большинстве случаев. Однако иногда возникает потребность его изменить. Как правило, это бывает в двух слу-чаях: если сервер предельно загружен и обрабатывает большое количество одновременных запросов, выполняющихся в контексте отдельных пользовательских соединений, или, на-оборот, в относительно медленной среде, с небольшим количеством запросов, которые, тем не менее, весьма обширны и сложны. Для этих случаев определяющими в решении настроить минимальный размер памяти для запроса должны стать четыре фактора: : общее количество свободной памяти (когда система находится в состоянии ожидания при запущенном SQL Server); : среднее количество одновременных запросов, выполняющихся в отдельных пользо-вательских соединениях; : средний размер запроса; : время отклика для запроса, к которому следует стремиться.
140 Часть II Администрирование Microsoft SQL Server 2005 Совет Часто между этими значениями необходимо найти компромисс. Не всегда удается добиться мгновенного отклика, но можно оптимизировать производительность, базируясь на доступных ресурсах. Используйте следующее уравнение, чтобы получить начальную точку для оптимиза-ции: свободная_память /(средний_размер_запроса * среднее_количество_одновремен-ных_запросов). Например, если система имеет 200 Мбайт свободной памяти, средний размер запроса - 2 Мбайт и среднее количество одновременных запросов - 5, тог-да оптимальное значение для размера запроса будет таким: 200 Мбайт /(2 * 5) или 20 Мбайт. Обычно это значение отображает максимум, который нужно назначить в те-кущей конфигурации системы, поэтому следует рассмотреть возможность уменьшения этого значения. Чтобы определить количество памяти, выделяемой для запросов, выполните ука-занные действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Memory (Память) и в поле Minimum memory per query (Минимальный объем памяти для запроса) задайте необходимое значение, которое указывается в килобайтах. 2. Щелкните кнопку OK. Также можно использовать хранимую процедуру sp_configure. Соответствующая инструкция следующая: EXEC sp_configure 'min memory per query', number_of_kilobytes Настройка использования процессоров и параллельной обработки В многопроцессорных системах могут использоваться специальные средства, предо-ставляемые SQL Server для параллельной и симметричной обработки данных. Можно контролировать, каким образом и когда SQL Server использует процессоры, а также указать, в каких случаях запросы обрабатываются параллельно. Оптимизация использования процессоров Обеспечение многозадачности является одной из важнейших функций операционной системы. Довольно часто операционная система принимает решение о перемещении потоков выполнения между разными процессорами. В системе, где загруженность невелика, это позволяет повысить производительность сервера посредством уравно-вешивания общей нагрузки. Однако в системе с большой нагрузкой переключение потоков может понизить общую производительность из-за необходимости частой перезагрузки кэша процессора. Для оптимизации использования процессоров SQL Server 2005 поддерживает такие функциональные возможности, как привязка к процессору (processor affinity) и привязка к вводу-выводу (I/O affinity). Первая позволяет назначить процессор для об-работки определенных потоков выполнения (то есть привязать потоки к процессору) с целью устранения перезагрузки процессоров и уменьшения частоты переключения потоков между ними. Привязка к вводу-выводу устанавливает, какие процессоры могут обрабатывать операции дискового ввода-вывода, относящиеся к SQL Server. Если принимается решение управлять привязкой вручную, желательно, чтобы одни процессоры были настроены для приоритетной обработки потоков, а другие - для операций дискового ввода-вывода, без совмещения этих двух задач. Например, для 32-процессорной системы, на которой запущен SQL Server 2005 Enterprise Edition, возможен такой вариант настройки: для процессоров от 0 до 15 устанавливается при-вязка к процессору (это значит, что они будут управлять потоками выполнения), а для 
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 141 процессоров от 16 до 31 - привязка к вводу-выводу (то есть они будут управлять операциями дискового ввода-вывода). Примечание Не существует определенной формулы для распределения процессоров между этими операциями, то есть совсем не обязательно назначать выполнение задач между равным числом процессоров. Действительная конфигурация должна зависеть от назначения и загруженности сервера. Параметры привязки настраиваются автоматически и оптимизируются при уста-новке SQL Server. Если возникает необходимость оптимизировать производитель-ность сервера, нагрузка на который возросла, можно попробовать оптимизировать параметры привязки. Однако прежде изучите следующие предостережения. Не изменяйте эти параметры, не просчитав возможные последствия. Неправильное управление параметрами привязки может привести к снижению производитель-ности. Не настраивайте привязку к процессору и в операционной системе, и в SQL Server. Поскольку оба способа равнозначны, используйте либо один, либо другой. Не включайте для одного и того же процессора одновременно параметры привязки к процессору и к вводу-выводу. Каждый процессор может иметь только один тип привязки из трех возможных: либо включена привязка к процессору, либо - к вво-ду-выводу, либо обе отключены. Чтобы вручную настроить режим использования процессора, выполните пере-численные ниже действия. 1. Запустите SQL Server Management Studio и подключитесь к серверу, предназна-ченному для настройки. 2. В панели Object Explorer (Обозреватель объектов) щелкните правой кнопкой сервер и из его контекстного меню выберите команду Properties (Свойства). 3. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Processors (Процессоры), как показано на рис. 6-4. 4. В списке, где перечислены установленные процессоры, определите, какие из них ис-пользует SQL Server. Для этих процессоров установите флажки, а возле остальных снимите. Первый процессор системы указан как CPU0, второй как CPU1 и т. д. Примечание Система может иметь больше процессоров, чем поддерживает SQL Server. Например, на симметричной многопроцессорной системе с восемью процессорами, редак-ция SQL Server Standard способна использовать только четыре. Остальные применяются для других приложений и системных задач. Совет Для выполнения задач SQL Server назначение процессоров с высокими номерами (например, 4, 5, 6 и 7) не всегда является оптимальным решением. Windows назначает вы-полнение отложенных вызовов процессов, связанных с сетевыми интерфейсными платами, процессорам с высоким номером. Поэтому, например, если бы система, описанная выше, имела две сетевые интерфейсные платы, эти вызовы направлялись бы на CPU7 и CPU6. Прежде чем менять эти значения, обратитесь к документации на оборудование. 5. Щелкните кнопку OK. Новые параметры будут применены после остановки и пере-запуска сервера. Для установки маски привязки (affinity mask) можно также использовать хранимую процедуру sp_configure, выполнив такие инструкции: EXEC sp_configure 'affinity mask', integer_value EXEC sp_configure 'affinity i/o mask', integer_value
142 Часть II Администрирование Microsoft SQL Server 2005 Рис. 6-4. Страница Processors диалогового окна Server Properties SQL Server рассматривает целое значение как битовую маску, представляющую процессоры, которые следует использовать. В этой битовой маске процессор CPU0 представлен битом 0, CPU1 - битом 1, и т. д. Каждый бит со значением 1 означает использование SQL Server соответствующего процессора. Бит, установленный в 0, указывает SQL Server не использовать соответствующий процессор. Например, если требуется включить поддержку для второго (CPU1), третьего (CPU2) и шестого (CPU5) процессоров, получаем такое бинарное значение (биты отсчитываются справа): 000100110. Соответствующим целым значением является 38 (21 + 22 + 25 = 2 + 4 + 32). Установка параметров параллельной обработки Чтобы определить, следует ли использовать параллельную обработку или нет, SQL Server должен провести множество вычислений. Как правило, он принимает решение о параллельной обработке запросов в следующих случаях: когда количество процессоров превышает количество активных соединений; когда расчетная стоимость последовательного выполнения запроса выше, чем установленный порог стоимости для принятия решения о параллельном выпол-нении (расчетной стоимостью называется время в секундах, необходимое для последовательного выполнения запроса). Некоторые типы инструкций не могут быть обработаны параллельно; правда, только если они не содержат дополнительных предложений. Например, инструкции UPDATE, INSERT и DELETE не обрабатываются параллельно, даже если соответ-ствующий запрос отвечает необходимым критериям. Но если инструкции UPDATE или DELETE содержат предложение WHERE, или инструкция INSERT содержит предложение SELECT, то эти предложения могут быть обработаны параллельно. В таких случаях изменения применяются к базе данных последовательно.
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 143 Для дополнительной настройки параллельной обработки выполните указанные ниже действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Advanced (Дополнительные). 2. По умолчанию параметр Max Degree Of Parallelism (Максимальная степень парал-лелизма) имеет значение 0; это означает, что максимальное количество процессо-ров, используемых для параллельной обработки запроса, определяется автомати-чески (при построении его плана). Обычно SQL Server стремится использовать все доступные процессоры, в зависимости от рабочей нагрузки. Чтобы ограни-чить число процессоров для параллельного выполнения запроса определенным заданным количеством (вплоть до максимума, поддерживаемого SQL Server), укажите значение параметра Max Degree Of Parallelism (Максимальная степень параллелизма) большее, чем 1. Значение 1 не разрешает SQL Server использовать параллельную обработку. 3. Обширные, сложные запросы при параллельной обработке обычно выполняются быстрее. Однако SQL Server производит параллельную обработку только в том случае, если для одного и того же запроса расчетное количество секунд, требуемое для его последовательного выполнения, выше, чем значение, установленное для порога стоимости необходимых для распараллеливания запросов. На странице Advanced (Дополнительные) диалогового окна Server Properties (Свойства серве-ра) установите порог расчетной стоимости в поле Cost Threshold For Parallelism (Порог стоимости для параллелизма). Допустимо любое значение от 0 до 32 767. В случае одиночного процессора порог стоимости игнорируется. 4. Щелкните кнопку OK. Изменения будут применены немедленно. Перезапуск сервера не требуется. Настроить параллельную обработку запросов можно также с помощью хранимой процедуры sp_configure, используя соответствующие инструкции Transact-SQL: EXEC sp_configure 'max degree of parallelism', integer_value EXEC sp_configure 'cost threshold for parallelism', integer_value Настройка потоков, приоритетов и нитей Потоки являются важной частью многозадачной операционной системы, позволяю-щие SQL Server выполнять несколько задач одновременно. Не следует путать потоки и процессы. Потоки - это параллельные пути выполнения, дающие возможность приложениям использовать процессор более эффективно. SQL Server пытается сбалансировать применение потоков пользовательскими соединениями. Если количество доступных потоков больше, чем активных пользова-тельских соединений, то их соотношение устанавливается не менее, чем один к одному, что позволяет обрабатывать каждое пользовательское соединение индивидуально. Если же количество доступных потоков меньше, чем пользовательских соединений, SQL Server организовывает пул потоков. В результате, один поток может обслуживать несколько пользовательских соединений, что чревато понижением производитель-ности и увеличением времени отклика, в том числе, когда дополнительные ресурсы доступны, но не используются. Обычно операционная система управляет потоками в привилегированном режиме процессора (режиме ядра), а приложениями и связанными с пользователем задача-ми - в непривилегированном (пользовательском). Переключение между режимами, например, когда ядру операционной системы требуется управлять новым потоком, 
144 Часть II Администрирование Microsoft SQL Server 2005 использует циклы процессора и ресурсы системы. Чтобы позволить приложению управлять потоками напрямую, следует использовать нити (fibers). Переключение нитей не требует изменения режимов и поэтому иногда может повысить произво-дительность. Другим способом повышения производительности является увеличение приори-тета потоков SQL Server. Обычно потоки имеют приоритет от 1 до 31, и чем он выше, тем больше времени процессора они могут получить. Кроме того, потоки с высоким приоритетом выполняются быстрее, приостанавливая выполнение потоков с более низким приоритетом и заставляя их ждать. Поэтому, увеличивая приоритет, вы дадите потокам определенное преимущество при использовании времени процессора и будете иметь гарантию, что другие потоки не приостановят их выполнение. Примечание Полный диапазон значений для приоритетов потока - от 0 до 31. Приори-тет потока, значение которого равно 0, зарезервирован для использования операционной системой. Потоки, нити и приоритеты потоков можно настроить с помощью диалогового окна Server Properties (Свойства сервера). Перейдите на страницу Processors (Про-цессоры) и используйте следующие параметры. Maximum Worker Threads (Максимальное количество потоков) Устанавливает максимальное количество потоков, доступных для выполнения запросов клиентов. По умолчанию установлено значение 0, что позволяет SQL Server автоматически настраивать количество потоков. Однако можно использовать любое значение от 10 до 32 767. На загруженном сервере с большим количеством пользовательских соединений нужно увеличить это значение. В то время как на медленном сервере с небольшим количеством соединений, напротив, уменьшить. Компьютеры с не-сколькими процессорами могут параллельно выполнять один поток на каждом процессоре. Для 32-разрядных систем Microsoft рекомендует устанавливать мак-симальное значение, равное 1024. Boost SQL Server Priority (Увеличить приоритет для SQL Server) Увеличивает приоритет потоков SQL Server. Без установки этого параметра потоки SQL Server имеют приоритет 7 (нормальный приоритет), после установки - 13 (высокий при-оритет). На выделенной системе, где запущен только SQL Server, назначение этого параметра может повысить производительность. Однако если на сервере выпол-няются и другие приложения, их производительность, скорее всего, снизится. Use Windows Fibers (Lightweight Pooling) (Использовать нити Windows (Ор-ганизация облегченного пула)) Позволяет SQL Server использовать нити, кото-рыми он может управлять непосредственно. Тем не менее, SQL Server для выпол-нения задач требуются также и потоки. В этом случае он распределяет по потоку на процессор, затем выделяет одну нить на каждое пользовательское соединение, вплоть до значения, определенного параметром Maximum Worker Threads (Мак-симальное количество потоков). Чтобы применить этот параметр, следует пере-запустить сервер. Совет Лучше всего нити проявляют себя в ситуации, когда сервер имеет несколько про-цессоров и относительно небольшое отношение количества пользователей к количеству процессоров. Например, для системы с установленной редакцией Enterprise, 32 процес-сорами и 250 пользователями при использовании нитей можно получить значительное повышение производительности. Но если система имеет 8 процессоров и 5000 пользо-вателей, при использовании нитей производительность снижается.
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 145 Для настройки использования нитей, максимального количества потоков и увели-чения приоритета потоков SQL Server используйте хранимую процедуру sp_configure. Инструкции следующие: EXEC sp_configure 'lightweight pooling', {0 | 1} EXEC sp_configure 'max worker threads', integer_value EXEC sp_configure 'priority boost', {0 | 1} При установке параметров lightweight pooling (организация облегченного пула) и priority boost (увеличение приоритета) используйте значение 0 для выключения и 1 - для включения. Настройка пользовательских и удаленных серверных соединений Запросы к данным управляются через пользовательские соединения между сервером и клиентскими системами. Клиент устанавливает соединение с SQL Server, посылает запрос на выполнение и ждет ответа. По окончании работы с запросом он закрывает соединение. Другие серверы и приложения также могут подключаться к SQL Server удаленно. Настройка соединений производится на странице Connections (Соединения) диалогового окна Server Properties (Свойства сервера). С клиентскими и серверными соединениями связано множество параметров, как видно из рис. 6-5. В этом разделе рассмотрены параметры соединения, а также случаи, когда может возникнуть необходимость эти параметры изменить. Рис. 6-5. Значения по умолчанию параметров соединения на странице Connections диалогового окна Server Properties
146 Часть II Администрирование Microsoft SQL Server 2005 Установка максимального количества пользовательских соединений Максимальное количество одновременных соединений с SQL Server устанавлива-ется на странице Connections (Соединения) в поле Maximum number of concurrent connections (Максимальное количество одновременных соединений). Диапазон зна-чений - от 0 до 32 767. По умолчанию установлено значение 0, которое указывает, что количество соединений с SQL Server не ограничивается. Однако действительное число возможных соединений зависит от используемого аппаратного обеспечения, выполняемого приложения и других ограничений сервера. Количество соединений, с которым может справиться система*, легко узнать с помощью такой инструкции: SELECT @@max_connections Чтобы установить максимальное количество пользовательских соединений, вы-полните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Connections (Соединения). 2. Введите новое значения в поле Maximum number of concurrent connections (Мак-симальное количество одновременных соединений) и щелкните кнопку OK. 3. Остановите и перезапустите сервер, чтобы применить новое значение. Установить максимальное количество одновременных соединений можно также с помощью инструкции: EXEC sp_configure 'user connections', integer_value Примечание Когда число установленных к серверу соединений достигает максимального значения, выводится сообщение об ошибке и теряется возможность подключения к серверу до тех пор, пока другой пользователь не отключится и не освободит соединение. Обычно необходимость менять значение максимального количества соединений возникает доволь-но редко. Единственным случаем является ситуация, когда к серверу подключено большое количество пользователей и требуется ограничить количество активных соединений, чтобы гарантировать своевременную обработку запросов подключенных пользователей. Однако существует и более приемлемый выход из подобного положения, который заключается в добавлении достаточного количества оперативной памяти или организации кластера для регулирования рабочей нагрузки, либо применения и того, и другого. Если вы адми-нистрируете систему с большим количеством пользователей, следует также проследить, чтобы приложения SQL своевременно подключались и отключались по завершении, что позволит быстро переназначать ресурсы другим пользователям. Установка параметров соединения по умолчанию Как видно из рис. 6-5, на странице Connections (Соединения) есть список Default connection options (Параметры соединения по умолчанию). Воспользуйтесь этим списком, чтобы назначить параметры по умолчанию для обработки запросов поль-зовательских соединений. При установке флажка параметр будет включен, для вы-ключения параметра флажок возле него снимается. Любые производимые изменения относятся только к новым соединениям, текущие - не затрагиваются. Кроме того, в случае необходимости пользователи могут переопределять параметры по умолчанию для своего соединения, используя инструкции SET. * Это число не обязательно отображает значение параметра, заданного в поле Maximum number of concurrent connections (Максимальное количество одновременных соединений), а зависит от установленной редакции SQL Server и ограничений оборудования и приложений. - Прим. ред.
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 147 В табл. 6-1 приведен перечень параметров соединения с указанием их состояния по умолчанию для драйверов ODBC и OLE DB (может отличаться от установок SQL Server по умолчанию). Также здесь представлены битовые маски (их можно использовать с хранимой процедурой sp_configure для установки соответствующего значения) и инструкции SET, которые в пользовательском сеансе могут переопреде-лять параметры по умолчанию. Табл. 6-1. Настройка параметров соединения Параметр При включенном состоянии Состояние по умолчанию Битовая маска Инструкция SET implicit transactions При выполнении инструкций начинает транзакции неявно OFF 2 IMPLICIT_ TRANSACTIONS cursor close on commit Автоматически закрывает кур-соры по завершении транзакции OFF 4 CURSOR_CLOSE_ ON_COMMIT ansi warnings SQL Server отображает пре-дупреждения о появлении значений NULL в агрегатных функциях, о переполнении и делении на ноль. В противном случае может не отображаться предупреждение или будет воз-вращено значение NULL OFF 8 ANSI_WARNINGS ansi padding Данные в полях фиксиро ванной длины дополняются пробела-ми, чтобы заполнить ширину столбца OFF 16 ANSI_PADDING ANSI NULLS Сравнение любого значения с NULL дает неизвестный ре-зультат OFF 32 ANSI_NULLS arithmetic abort Прерывает запрос при во з-никновении ошибок пе ре-полнения или деления на ноль OFF 64 ARITHABORT arithmetic ignore Возвращает NULL при возник-новении ошибок переполнения или деления на ноль во время запроса OFF 128 ARITHIGNORE quoted identifier SQL Server интерпретирует двойные кавычки как огра ни-читель идентификатора, а не символьной строки OFF 256 QUOTED_ IDENTIFIER no count Выключает отображение числа строк, возвращенных запросом OFF 512 NOCOUNT ANSI NULL Default On При определении новых столб-цов хранение в них значения NULL разрешено (если в ин-струкции Transact-SQL явно не задано иное) OFF 1024 ANSI_NULL_ DFLT_ON ANSI NULL Default Off При определении новых столб-цов хранение в них значения NULL запрещено (если в ин-струкции Transact-SQL явно не задано иное) OFF 2048 ANSI_NULL_ DFLT_OFF (см. след. стр.)
148 Часть II Администрирование Microsoft SQL Server 2005 Параметр При включенном состоянии Состояние по умолчанию Битовая маска Инструкция SET concat null yields null Возвращает значение NULL при конкатенации строки и значе-ния NULL OFF 4096 CONCAT_NULL_ YIELDS_NULL numeric round abort Генерирует ошибку при потере точности OFF 8192 NUMERIC_ ROUNDABORT xact abort Производит откат транзакции, если инструкция Transact-SQL вызывает ошибку выполнения OFF 16384 XACT_ABORT Параметры по умолчанию устанавливаются с помощью параметра user options хранимой процедуры sp_configure: EXEC sp_configure 'user options', integer_bit_mask_value В этом случае значением битовой маски является сумма числовых значений для всех нужных параметров. Каждый параметр имеет соответствующую инструкцию SET. При установке соединения можно применить инструкцию SET, чтобы переопределить параметры по умолчанию для текущего сеанса. Например, если нужно включить па-раметры ansi padding, ANSI NULLS и ansi warnings, используйте значение битовой маски 56, как в этом примере: EXEC sp_configure 'user options', 56 В пользовательском сеансе эти параметры можно выключать и включать: SET ANSI_PADDING ON SET ANSI_NULLS OFF Настройка удаленных серверных соединений Соединения, инициируемые другими серверами, управляются иначе, чем пользова-тельские. Существует возможность задать параметры, определяющие, могут ли сер-веры подключаться к данному серверу, время ожидания соединения для удаленных запросов, а также, используются ли распределенные транзакции. Чтобы настроить удаленные соединения, выполните следующую последовательность действий. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Connections (Соединения). 2. Установите флажок Allow remote connections to this server (Разрешить удаленные соединения к этому серверу). После этого удаленные серверы смогут подключаться к данному серверу для выполнения хранимых процедур удаленно. Чтобы новое значение параметра вступило в силу, следует остановить и перезапустить сервер. Внимание! Соединения, устанавливаемые для удаленного вызова процедур (RPC, remote procedure call), разрешены по умолчанию. Если изменить этот параметр, удаленные серверы не смогут подключаться к SQL Server. 3. По умолчанию время ожидания запросов, выполняемых удаленными серверами, ограничено 600 с. Этот параметр можно изменить, введя другое значение в поле Remote query timeout (Время ожидания для удаленных запросов) на странице Connections (Соединения). Значение времени ожидания указывается в секундах, допустимый диапазон значений - от 0 до 2 147 483 647. Значение 0 указывает, что это время не ограничено. Табл. 6-1. (окончание)
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 149 4. Хранимые процедуры и запросы, выполняемые на сервере, могут быть обрабо-таны как распределенные транзакции с помощью координатора распределенных транзакций. Если требуется выполнять процедуры таким способом, установите флажок Require distributed transactions for server-to-server communication (Требо-вать применения распределенных транзакций для связи между серверами). Чтобы новое значение параметра вступило в силу, следует остановить и перезапустить сервер. 5. Щелкните кнопку OK. Эти параметры также могут быть установлены с помощью хранимой процедуры sp_configure. Соответствующими инструкциями Transact-SQL являются: EXEC sp_configure 'remote access', {0 | 1} EXEC sp_configure 'remote query timeout', number_of_seconds EXEC sp_configure 'remote proc trans', {0 | 1} Примечание Значение 0 выключает параметр, а значение 1 - включает. Управление параметрами конфигурации сервера Большинство основных параметров сервера настраиваются на странице Advanced (Дополнительные) диалогового окна Server Properties (Свойства сервера). Здесь, как показано на рис. 6-6, можно установить язык по умолчанию, некоторые общие аспекты поведения сервера и многие другие параметры. Рис. 6-6. Основные параметры конфигурации сервера на странице Advanced диалогового окна Server Properties
150 Часть II Администрирование Microsoft SQL Server 2005 Установка языка по умолчанию для SQL Server Язык по умолчанию определяет форматы по умолчанию для отображения дат, на-званий месяцев и дней. Ели не установлена локализированная версия SQL Server, используется английский (США) язык. Локализированные версии SQL Server ото-бражают информацию на французском, немецком, японском, испанском и других языках. На локализированном сервере доступны два набора системных сообщений: на английском (США) и локальном языках, и сообщения SQL Server будут отображаться на том из них, который установлен как язык по умолчанию. На странице Advanced (Дополнительные) диалогового окна Server Properties (Свой-ства сервера) из раскрывающегося списка Default Language (Язык по умолчанию) выберите язык и щелкните кнопку OK. Чтобы применить установку нового языка по умолчанию, требуется остановить и перезапустить сервер. Соответствующая инструк-ция Transact-SQL с использованием хранимой процедуры sp_configure такая: EXEC sp_configure 'default language', language_id Идентификатором для английского языка (США) всегда является значение 0. Системное представление sys.languages содержит одну строку для каждого языка, доступного на сервере. Разрешение и запрещение обновления системных таблиц В SQL Server 2005 непосредственное обновлении системных таблиц не поддержи-вается, хотя параметр allow updates хранимой процедуры sp_configure оставлен для обеспечения обратной совместимости. Однако его установка не производит никакого эффекта. Разрешение и запрещение вложенных триггеров По умолчанию SQL Server позволяет вложенность триггеров до 32 уровней. Вложен-ные триггеры полезны для выполнения серии задач внутри одной транзакции. На-пример, некое действие может инициировать триггер, запускающий другой триггер, который в свою очередь может запустить следующий триггер и т. д. Поскольку каждый триггер выполняется внутри транзакции, ошибка на любом уровне приводит к откату всей транзакции, что отменяет изменения, внесенные в базу данных. В качестве меры предосторожности триггеры прерываются при превышении максимального уровня вложенности. Это предотвращает бесконечный цикл. Настроить SQL Server для использования вложенных триггеров позволяет один из параметров на странице Advanced (Дополнительные) диалогового окна Server Properties (Свойства сервера). Для этого выполните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Advanced (Дополнительные). 2. В раскрывающемся списке Allow Triggers to Fire Others (Разрешить триггерам запускать другие триггеры) выберите необходимое значение - True или False. 3. Щелкните кнопку OK. Соответствующая инструкция Transact-SQL с использованием хранимой про-цедуры sp_configure такая: EXEC sp_configure 'nested triggers', {0 | 1} Используйте 0, чтобы запретить, и 1, чтобы разрешить вложенность триггеров.
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 151 Управление выполнением запроса Регулятор запросов (query governor) не позволяет выполнение запросов, имеющих расчетное время исполнения, превышающее определенный установленный порог стоимости запроса. Стоимостью запроса называется расчетное время в секундах, требуемое для выполнения запроса и предварительно рассчитанное на основании данных планировщика запросов. По умолчанию регулятор запросов выключен, и это означает, что максимальная стоимость запроса не установлена. Чтобы активировать регулятор запросов, выполните следующую последовательность действий. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Connections (Соединения). 2. Установите флажок Use query governor to prevent long-running queries (Использо-вать регулятор запросов для предотвращения длительных запросов). 3. Под флажком в поле, ставшим доступным после его установки, введите макси-мальный предел стоимости запроса. Допустимый диапазон - от 0 до 2 147 483 647. Значение 0 отключает регулятор запросов, любое другое значение устанавливает максимальный предел стоимости запроса. 4. Щелкните кнопку OK. Следующая инструкция Transact-SQL с использованием хранимой процедуры sp_configure активирует регулятор запросов: EXEC sp_configure 'query governor cost limit', cost_limit Также можно установить предел стоимости запроса на уровне соединения, ис-пользуя такую инструкцию в Transact-SQL: SET QUERY_GOVERNOR_COST_LIMIT cost_limit Совет Прежде чем активировать регулятор запросов, используйте окно формирования запросов для оценки стоимости типичных запросов, выполняемых на сервере. Это по-зволит определить значение максимальной стоимости запроса. Также утилиту можно использовать для оптимизации запросов. Настройка поддержки 2000 года SQL Server позволяет вставлять или изменять дату без указания цифр столетия. Од-нако для совместимости с требованиями готовности к 2000 году SQL Server интерпре-тирует двухзначные даты, находящиеся внутри определенного временного интервала. По умолчанию все двухзначные даты от 50 до 99 считаются годами, начинающимися с 19, а от 00 до 49 - начинающимися с 20. Таким образом, SQL Server интерпретирует двухзначный год 99 как 1999 и двухзначный год 02 как 2002. Чтобы поддержать обратную совместимость с предыдущими версиями, Microsoft советует оставить этот параметр со значением по умолчанию. Тем не менее, его можно изменить, выполнив следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Advanced (Дополнительные). 2. В поле Two Digit Year Cutoff (Переходной предел двухзначного года) установите зна-чение, являющееся завершающим годом временного интервала, который требуется использовать. Допустимый диапазон для завершающего года - от 1753 до 9999. 3. Щелкните кнопку OK.
152 Часть II Администрирование Microsoft SQL Server 2005 Примечание Выбранный временной интервал влияет на все БД на текущем сервере. Также некоторые старые клиенты OLE поддерживают только даты в диапазоне лет от 1931 до 2030. Чтобы обеспечить совместимость с этими клиентами, возможно, потребу-ется использовать 2030 в качестве завершающего года временного интервала. Соответствующей инструкцией Transact-SQL, использующей хранимую процедуру sp_configure, является: EXEC sp_configure 'two digit year cutoff', ending_year Управление параметрами конфигурации БД Чтобы настроить параметры баз данных для всего сервера, используйте страницу Database Settings (Параметры баз данных) диалогового окна Server Properties (Свойства сервера). Как показано на рис. 6-7, эту страницу можно использовать для установки фактора заполнения индексов, параметров резервного копирования и восстановления, а также интервала восстановления, необходимого для определения частоты выпол-нения контрольных точек. Рис. 6-7. Страница Database Settings диалогового окна Server Properties Установка фактора заполнения индексов Фактор заполнения (fill factor) индексов по умолчанию определяет, сколько места на странице зарезервирует SQL Server при создании нового индекса, используя существу-ющие данные. Установка фактора заполнения предполагает нахождение определенного 
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 153 компромисса, так как при слишком высоком значении SQL Server будет медленнее выполнять операции добавления данных в таблицу, а при установке чересчур низкого значения возможно снижение производительности чтения данных на величину, об-ратно пропорциональную фактору заполнения. Например, фактор заполнения 25 %, вероятно, уменьшит производительность чтения на фактор (коэффициент) 4 (или в четыре раза больше нормы), но это же значение позволит проводить масштабные обновления быстрее, особенно на начальном этапе*. В идеале следует найти такой фактор заполнения, который будет приемлем в обоих случаях. Примечание Фактор заполнения используется только при создании индекса и его зна-чение не изменяется в дальнейшем. Это позволяет добавлять, удалять или обновлять данные в таблице, не беспокоясь о поддержке определенного фактора заполнения. Совет Свободное пространство на страницах данных при интенсивных операциях до-бавления или модификации данных может быть заполнено. Чтобы перераспределить данные, повторно создайте индекс, указав при этом фактор заполнения. Более подробно индексы описываются в главе 9. По умолчанию фактор заполнения индекса установлен в значение 0, хотя допу-стимым диапазоном являются значения от 0 до 100. Значение 0 указывает серверу, что следует оптимизировать заполнение индексов; любое другое значение является действительным процентом заполнения. Действия SQL Server при оптимизации заполнения индексов во многом такие же, как и в случае фактора заполнения 100 %: он создает кластерные индексы с запол-ненными страницами данных и некластерные индексы с заполненными страницами в вершинах индексного дерева. Но значение 0 для фактора заполнения оставляет возможность роста на верхнем уровне дерева индексов, в отличие от значения 100. Вот почему 100 % заполнения следует использовать в таблицах, предназначенных только для чтения, в которые не планируется добавлять данные. При необходимости, параметры по умолчанию можно переопределить во время создания индексов, нужно только не забыть сделать это. Если же необходимо устано-вить фиксированный фактор заполнения индекса в качестве параметра по умолчанию, выполните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Database Settings (Параметры баз данных). 2. В поле Default index fill factor (Фактор заполнения индекса по умолчанию) уста-новите процент заполнения. Низкий фактор заполнения предоставляет больше места для вставок, не требуя расщепления страниц, но в этом случае индекс за-нимает больше дискового пространства. Высокий фактор заполнения оставляет меньше места для вставок без расщепления страниц, но индекс занимает меньше пространства. 3. Щелкните кнопку OK. Соответствующей инструкцией Transact-SQL с использованием хранимой про-цедуры sp_configure является: EXEC sp_configure 'fill factor (%)', integer_percentage * Зарезервированное пространство постепенно заполнится, и при вставке данных серверу все равно придется выполнять расщепление страниц (page split). - Прим. ред.
154 Часть II Администрирование Microsoft SQL Server 2005 Настройка времени ожидания при резервном копировании и восстановлении Зачастую требуется выполнять резервное копирование баз данных SQL Server, ис-пользуя накопитель на магнитной ленте. При работе с накопителями на магнитной ленте необходимо контролировать ожидание подачи новой ленты. Для этого исполь-зуются следующие параметры. Wait Indefinitely (Неограниченное время ожидания) SQL Server ждет, пока будет вставлена новая кассета. Однако при установке этого параметра сообщение об ошибке, информирующее о возникших при резервном копировании проблемах, отображается не всегда. Try Once (Повторить один раз) Подсистема резервного копирования пытается получить ответ от SQL Server один раз. Если не было ни ответа, ни доступной ленты, генерируется ошибка. Try For ... minute(s) (Повторять на протяжении ... минут(ы)) Подсистема ре-зервного копирования ждет ответа от SQL Server на протяжении определенного времени. Если ответа не последовало или лента недоступна в течение установлен-ных минут, генерируется ошибка. Назначьте время ожидания, выполнив указанные действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Database Settings (Параметры баз данных). 2. Чтобы указать неограниченное время ожидания, установите переключатель в по-ложение Wait indefinitely (Неограниченное время ожидания). 3. Если вы хотите, чтобы процесс резервного копирования повторял попытку чтения или записи один раз и затем завершался, выберите положение переключателя Try once (Повторить один раз). 4. Чтобы процесс резервного копирования повторял попытки чтения или записи в течение определенного времени, установите переключатель в положение Try for n minute(s) (Повторять на протяжении n минут(ы)), затем введите нужное значение в поле рядом с переключателем. 5. Щелкните кнопку OK. Настройка периода сохранности резервных копий SQL Server предоставляет множество возможностей для резервного копирования и восстановления данных (подробно об этом будет идти речь в главе 14). При записи данных на магнитные ленты можно указать количество дней, на протяжении которых нужно сохранять старые файлы. Это значение называется retention period (период со-хранности). Чтобы его задать, выполните следующие действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Database Settings (Параметры баз данных). 2. В поле Default backup media retention (in days) (Сохранность данных резервно-го копирования по умолчанию (в днях)) введите то количество дней, в течение которых следует хранить старые файлы. Минимальное значение 0 указывает, что старые файлы перезаписываются всегда. Допустимый диапазон - от 0 до 365. 3. Щелкните кнопку OK. Соответствующей инструкцией Transact-SQL, использующей хранимую процедуру sp_configure, является: EXEC sp_configure 'media retention', number_of_days
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 155 Сброс на диск содержимого кэша при помощи контрольных точек Контрольные точки сбрасывают на диск все кэшированные страницы данных; эта операция выполняется для каждой БД отдельно. Частоту выполнения можно кон-тролировать с помощью параметра recovery interval (интервал восстановления). По умолчанию значение этого параметра установлено равным 0, что позволяет SQL Server управлять выполнением контрольных точек динамически. Обычно это означает, что контрольные точки для БД с высокой интенсивностью изменения данных выполня-ются примерно раз в минуту. Если не существует проблем с производительностью, которые можно отнести на счет слишком частого выполнения контрольных точек, то этот параметр не следует менять. Чтобы установить интервал между контрольными точками вручную, выполните предложенные действия. 1. В диалоговом окне Server Properties (Свойства сервера) перейдите на страницу Database Settings (Параметры баз данных). 2. В поле Recovery interval (Minutes) (Интервал восстановления (Минуты)) введите время выполнения контрольных точек в минутах. Допустимый диапазон - от 0 до 32 767. Параметр действителен для всего сервера. 3. Щелкните кнопку OK. Соответствующей инструкцией Transact-SQL, использующей хранимую процедуру sp_configure, является: EXEC sp_configure 'recovery interval', number_of_minutes Добавление и удаление информации в службу каталогов Active Directory Если SQL Server является частью домена Active Directory, для управления инфор-мацией о нем, размещенной в службах каталогов, можно перейти на одноименную страницу диалогового окна Server Properties (Свойства сервера) и воспользоваться следующими кнопками. Add (Добавить) Публикация информации об экземпляре SQL Server. Refresh (Обновить) Обновление связанной с экземпляром SQL Server инфор-мации. Это полезно при создании БД, кубов сервера или моделей поиска неявных закономерностей в данных, а также для обновления информации без ожидания обычной репликации. Remove (Удалить) Удаление информации об экземпляре SQL Server. Устранение проблем конфигурации Существует два специальных метода, которые можно применить для решения про-блем настройки SQL Server. В этом разделе вы узнаете, как восстановить систему после неправильной установки параметров конфигурации и как перестроить базу данных master. Восстановление после неправильной установки параметров конфигурации Несмотря на то что в SQL Server 2005 предусмотрено множество мер предосторожно-сти, направленных на предотвращение установки параметров конфигурации, которые бы не давали SQL Server возможности запуститься, подобная случайность не может 
156 Часть II Администрирование Microsoft SQL Server 2005 быть исключена. При возникновении такой ситуации необходимо восстановить эк-земпляр сервера, для чего выполните следующую последовательность действий. 1. Войдите в систему локально или удаленно через Telnet или Terminal Server (Сервер терминалов), где установлен ошибочно сконфигурированный сервер БД. Для это-го используйте локальную учетную запись администратора или учетную запись, применяемую для запуска экземпляра SQL Server. 2. Убедитесь, что служба MSSQLServer или MSSQL$instance_name, где instance_name - имя экземпляра, остановлена. Если нет, остановите службу, используя одно из следующих средств: : утилиту SQL Server Configuration Manager; : компонент панели управления Computer Management (Управление компью-тером); : компонент панели управления Services (Службы). 3. В тех случаях, когда экземпляр SQL Server был установлен в качестве экземпляра по умолчанию, можно остановить службу, выполнив команду: net stop MSSQLSERVER 4. В командной строке перейдите в каталог экземпляра SQL Server (MSSQL.1\mssql\ binn для экземпляра по умолчанию). Чтобы использовать исполняемый файл sqlservr, необходимо находиться в этом каталоге. 5. Запустите SQL Server из командной строки, задав такие параметры запуска: sqlservr -sinstance_name -f 6. Необходимо использовать параметр -s, чтобы указать экземпляр SQL Server, если установлено несколько экземпляров SQL Server. Параметр -f запускает SQL Server в однопользовательском режиме с минимальной конфигурацией. Это гарантирует, что неудачная конфигурация не загрузится. 7. Подождите, пока сервер запустится. SQL Server выведет на экран несколько стра-ниц текста. Оставьте сервер запущенным. 8. В другом окне командной строки или сессии Telnet, запустите утилиту SQLCMD под учетной записью, обладающей на SQL Server администраторскими привиле-гиями: sqlcmd -U login -P password Примечание Если установлено несколько экземпляров SQL Server 2005, следует указать экземпляр, с которым производится соединение (sqlcmd -U login -P password -Scomputer_name\instance_name). 9. При удачном доступе с помощью утилиты SQLCMD приглашение командной строки поменяется на >. 10. Отмените неудачные изменения конфигурации, вводя команды так же, как в окне запросов утилиты SQL Server Management Studio. Основным отличием является то, что после каждой инструкции SQL должна следовать команда GO, как показано в следующем примере: EXEC sp_configure 'max server memory', 128 GO RECONFIGURE GO 11. Когда закончите, выйдите из утилиты SQLCMD, набрав команду EXIT.
Настройка SQL Server с помощью утилиты SQL Server Management Studio Глава 6 157 12. Из командной строки в другом окне, в котором запущен SQL Server, нажмите клавиши Ctrl+C. 13. При появлении запроса на подтверждение прерывания исполнения, введите Y. Это остановит SQL Server. 14. Перезапустите SQL Server как обычно. При надлежащих изменениях сервер дол-жен запуститься нормально. В противном случае повторите эту процедуру. Изменение сопоставления и перестройка БД master Перестройка БД master восстанавливает во всех системных таблицах их начальное со-держимое и атрибуты. Основные причины для перестройки БД master следующие. Установка нового сопоставления по умолчанию для экземпляра сервера БД. Совет В SQL Server 2000 или выше сопоставление может быть установлено отдельно для каждой БД, а также для таблиц, параметров и текстовых строк, без необходимости перестройки БД master. Восстановление поврежденной БД master, если резервная копия БД master недо-ступна. Восстановление поврежденной БД master, если экземпляр SQL Server не может быть запущен. Утилита Rebuildm больше не используется для перестройки БД master. Вместо этого запустите программу установки SQL Server 2005 повторно. Если вы решили перестроить БД master, примите к сведению перечисленные ниже рекомендации. После перестройки БД master нужно загрузить последние резервные копии БД master, model и msdb. Если сервер был настроен для репликации, требуется загрузить последнюю резервную копию БД распределения. Данные, которые невозможно восстановить, должны быть воссозданы вручную. После перестройки БД master все пользовательские базы данных будут отсоединены и не читаемы. Их следует создать повторно. Нельзя восстановить пользовательские БД из резервной копии - восстановление поддерживает информацию, указанную при создании резервной копии, поэтому, возможно, потребуется переместить базы данных на другой сервер посредством импорта-экспорта (см. об этом главу 10). Следует применить все обновления SQL Server повторно, чтобы состояние БД Resource отображало последние изменения. БД Resource обновляется при при-менении к SQL Server исправлений или пакетов обновлений. Чтобы перестроить БД master, выполните указанные ниже действия. 1. Войдите на сервер, используя учетную запись с привилегиями администратора. Запустите компонент панели управления Add Or Remove Programs (Установка и удаление программ). 2. В компоненте панели управления Add or Remove Programs (Установка и удале-ние программ) в списке Programs installed (Установленные программы) выберите элемент Microsoft SQL Server 2005, затем щелкните кнопку Change (Изменить). Когда откроется окно мастера SQL Server 2005 Maintenance (Сопровождение Microsoft SQL Server 2005), выберите необходимый экземпляр и щелкните кнопку Next (Далее). 3. На странице Feature Maintenance (Поддержка функциональных возможностей) укажите компонент, с которым следует работать, например Analysis Services (Анали -ти ческие службы) или Database Engine (Ядро базы данных), и щелкните кнопку Next (Далее).
158 Часть II Администрирование Microsoft SQL Server 2005 4. Откроется окно мастера SQL Server Installation (Установка SQL Server). Щелкните кнопку Next (Далее), чтобы позволить программе установки произвести проверку конфигурации системы. Когда проверка системной конфигурации завершится, исправьте возможные ошибки. Щелкните кнопку Next (Далее). 5. Программа установки проверит, какие компоненты установлены. На странице Change or Remove Instance (Изменить или удалить экземпляр) щелкните кнопку Change Installed Components (Изменить установленные компоненты). 6. На странице Feature Selection (Выбор функциональных возможностей) в иерар-хическом списке компонентов дважды щелкните мышью необходимый компонент. Это раскроет соответствующий узел компонента и отобразит подкомпоненты. Щелкните мышью значок слева от названия подкомпонента и в появившемся меню укажите, желаете ли вы, чтобы он был установлен, или его следует удалить. 7. Щелкните кнопку Next (Далее) и затем кнопку Install (Установить). SQL Server произведет проверку установленных компонентов и, при необходимости, пере-строит поврежденные. Когда процесс завершится, щелкните кнопку Next (Далее), а потом кнопку Finish (Готово).
Глава 7 Основные задачи администрирования БД Основные задачи администрирования баз данных включают в себя создание, пере-именование, отсоединение, присоединение, копирование и перемещение БД, установку их параметров и определение размеров, а также управление файлами баз данных и журналов транзакций. В Microsoft SQL Server 2005 БД - это совокупность данных и объектов, представляющих эти данные, и взаимодействуют с ними. Типичными объектами БД являются таблицы, представления, хранимые процедуры, триггеры и ограничения. Один экземпляр сервера баз данных может содержать до 32 767 БД, а каждая БД - более 2 млрд объектов. Это теоретические пределы, но они показывают, что SQL Server способен справиться практически с любой задачей. Для выполнения боль-шинства задач администрирования необходимо подключиться к серверу с помощью учетной записи, являющейся частью встроенной роли сервера sysadmin, например локальной учетной записи системного администратора sa. Детальная информация о ролях и безопасности SQL Server приводится в главе 8. Файлы и журналы транзакций БД Каждая база данных SQL Server имеет связанный с ней журнал транзакций. Этот журнал хранит историю изменений в БД, поэтому SQL Server использует его для обеспечения целостности базы данных. Все изменения, вносимые в БД, сначала за-писываются в журнал транзакций, а затем применяются к ней самой. Если обновление данных состоялось, транзакция завершается и записывается как успешная. Когда же обновить базу данных не удалось, SQL Server использует журнал транзакций, чтобы восстановить БД до исходного состояния (выполнить откат транзакции). Такой двухфазный процесс фиксации изменений позволяет SQL Server автоматически вос-станавливать базу данных в случае аварийного отключения электропитания, выхода сервера из строя или других проблем, возникающих при выполнении транзакции. Базы данных и журналы транзакций SQL Server хранятся в раздельных файлах БД. Это означает, что каждая база данных всегда имеет как минимум два связанных с ней файла: данных и журнала транзакций. Базы данных также могут иметь дополнитель-ные файлы данных. Таким образом, SQL Server использует три типа файлов БД. Основные файлы данных Каждая БД содержит один основной файл данных. По умолчанию он имеет расширение .mdf. В основных файлах хранятся данные и системная информация о самой базе данных, в том числе и записи о других файлах, используемых в БД. Дополнительные файлы данных Здесь хранятся только данные. По умолчанию эти файлы имеют расширение .ndf. Файлы журналов транзакций Каждая база данных имеет как минимум один файл журнала транзакций, в котором содержится информация, необходимая для восстановления БД. По умолчанию файлы журналов имеют расширение .ldf.
160 Часть II Администрирование Microsoft SQL Server 2005 Примечание SQL Server также использует для хранения информации устройства ре-зервного копирования. Ими могут быть физические устройства, например накопители на магнитных лентах, либо файлы, которые хранятся на локальном жестком диске или сетевом ресурсе. Файлы данных и журналов SQL Server могут храниться в разделах файловых систем FAT или NTFS, но только не в сжатых разделах. Примечание В SQL Server 2005 полнотекстовые каталоги обрабатываются как файлы и включены в набор файлов базы данных в целях резервного копирования и восста-новления. Для получения дополнительной информации обращайтесь к разделу "Работа с полнотекстовым поиском" главы 5. Файлы базы данных задаются во время создания или модификации БД. Посколь-ку разрешено использование нескольких файлов базы данных, в SQL Server можно создавать БД, расположенные на нескольких дисковых накопителях, размер которых может увеличиваться по мере необходимости. Несмотря на то что размеры баз данных SQL Server измеряются преимущественно в гигабайтах, во всех редакциях SQL Server, кроме Express Edition, размер БД может изменяться от 1 Мбайт до теоретического предела в 1 048 516 Тбайт. В редакции Express Edition максимальный размер базы данных ограничен - 4 Гбайт. При работе с базами данных следует помнить, что в SQL Server заложена возмож-ность в случае необходимости увеличивать размеры БД автоматически. Это означает, что в системных базах данных master, tempdb, msdb, а также других критических БД, при нормальных условиях не закончится свободное пространство - если, конечно, на используемых накопителях есть место для файлов базы данных и для них не уста-новлен максимальный размер. Системные БД являются самыми важными на сервере. Если вам требуется изме-нить в них таблицы, никогда не делайте это напрямую. Для модификации системных баз данных используйте соответствующие средства управления или хранимые про-цедуры. Единственным исключением является БД model, параметры которой можно обновлять с целью их повторения во вновь созданных базах данных. Основы администрирования БД Большая часть работы по администрированию баз данных выполняется с помощью утилиты SQL Server Management Studio, которая используется для решения многих типичных задач, включая: просмотр информации о БД; вывод информации о пользовательских и системных БД; просмотр объектов БД. Все указанные задачи рассмотрены в настоящем разделе. Просмотр информации о БД с помощью утилиты SQL Server Management Studio В SQL Server информация организована в виде иерархии. В верхнем уровне располо-жены группы серверов, в следующем - серверы, затем идут БД, а потом - объекты. Поэтому, чтобы увидеть базы данных, установленные на конкретном экземпляре серве-ра, следует спуститься на уровень БД. Для этого, если экземпляр сервера зарегистри-рован и с ним уже устанавливалось соединение, выполните следующие действия. 1. В панели Registered Servers (Зарегистрированные серверы) выберите тип сервера, например Database Engine (Ядро базы данных). Чтобы раскрыть группу серверов, щелкните знак + рядом с названием группы.
Основные задачи администрирования БД Глава 7 161 2. Для выбора сервера дважды щелкните его имя. В результате будет установлено соединение с сервером в панели Object Explorer (Обозреватель объектов). Совет Если служба SQL Server остановлена, перед обращением к серверу перезапу-стите ее. Кроме того, если ранее не была выполнена аутентификация для соединения с сервером, скорее всего придется ввести имя пользователя и его пароль. Также может потребоваться повторно установить соединение с сервером. В любом случае, введите всю необходимую информацию, а затем щелкните кнопку Connect (Подключиться) для продолжения работы. 3. В панели Object Explorer (Обозреватель объектов) щелкните знак + рядом с узлом Databases (Базы данных), чтобы увидеть перечень БД, доступных на сервере. 4. В контекстном меню базы данных, с которой необходимо работать, выберите коман-ду Properties (Свойства). Появится диалоговое окно Database Properties (Свойства базы данных), изображенное на рис. 7-1. Рис. 7-1. Страница General диалогового окна Database Properties 5. Это диалоговое окно имеет несколько страниц свойств. : General (Общие) Отображает общую информацию о БД, например о ее ста-тусе, владельце, дате создания, размере и доступном свободном пространстве. Также выводятся данные о дате последнего резервного копирования и уста-новленном порядке сопоставления символов. : Files (Файлы) Предоставляет сведения о файлах данных и журналов тран-закций, связанных с БД. Если база данных настроена для полнотекстового по-иска, установлен флажок Use full-text Indexing (Использовать полнотекстовые индексы). Однако файлы полнотекстовых каталогов, связанные с БД, здесь не перечислены.
162 Часть II Администрирование Microsoft SQL Server 2005 : Filegroups (Группы файлов) Выводит список групп файлов, связанных с базой данных, и позволяет добавлять и удалять группы файлов. : Options (Параметры) Отображает поля для просмотра и управления стан-дартными параметрами и установками БД. : Permissions (Разрешения) Выводит перечень пользователей и ролей, для которых предоставлены или отклонены конкретные разрешения в базе данных, а также позволяет устанавливать разрешения уровня БД для пользователей или ролей. : Extended Properties (Расширенные свойства) Отображает поля для про-смотра и управления расширенными свойствами БД. : Mirroring (Зеркальное отображение) Предоставляет поля для просмотра и управления установками зеркального отображения БД. : Transaction Log Shipping (Передача журнала транзакций) Выводит деталь-ную информацию о текущей конфигурации (если она существует) передачи журнала транзакций и позволяет ею управлять. Просмотр информации о БД средствами Тransact-SQL Получить информацию о базе данных можно также с помощью Transact-SQL. Язык Transact-SQL, используемый SQL Server, является расширенной версией стандартного структурированного языка запросов (SQL, structured query language). Отобразите в SQL Server Management Studio окно Query (Запрос). Для этого в контекстном меню сервера, с которым уже установлено соединение в панели Object Explorer (Обозрева-тель объектов), выберите команду New Query (Создать запрос). Или щелкните кнопку Database Engine Query (Запрос к ядру базы данных) в панели инструментов, а затем установите соединение с ядром базы данных на конкретном сервере. Когда отобразится окно Query (Запрос), используйте следующую инструкцию, чтобы просмотреть информацию о БД: EXEC sp_helpdb database_name GO где database_name - имя БД, информацию о которой нужно просмотреть. Получая информацию о базе данных таким способом, вы имеете возможность уви-деть сводные сведения о БД, а также перечень текущих файлов данных и журналов транзакций. В табл. 7-1 представлена сводка тех данных, которые доступны при про-смотре информации о БД с помощью Тransact-SQL. Эта информация возвращается в виде двух наборов данных. Если дополнительный набор данных не виден, необходимо прокрутить вниз область Results (Результаты) окна Query (Запрос). Табл. 7-1. Свойства БД, просматриваемые с помощью Тransact-SQL Название столбца Описание compatibility_level Текущий уровень совместимости БД. Уровень 90 означает совмести-мость с SQL Server 2005 created Дата создания БД db_size Общий размер БД, включающий все файлы данных и журналов dbid Уникальный идентификатор БД на текущем сервере filegroup Группа файлов, связанная с файлом БД. Файловые группы позволяют группировать наборы файлов БД fileid Уникальный идентификатор файла в текущей БД
Основные задачи администрирования БД Глава 7 163 Название столбца Описание filename Полное имя и путь к файлу growth Количество мегабайтов или процентов, на которые увеличится файл maxsize Максимальный размер файла. Значение Unlimited означает, что ограничений нет name Имя БД или файла (без расширения) owner Владелец БД size Текущий размер файла status Статус БД usage Способ использования файла, например только для данных или только для журнала Системные БД и установка образцов БД В состав SQL Server после установки входят системные базы данных, перечисленные в табл. 7-2. Системные БД являются критическими для правильного функциониро-вания SQL Server, а их сопровождение и резервное копирование - важным аспектом процесса администрирования. Можно также установить образцы баз данных, но они предназначены только для предоставления примеров и не требуют сопровождения на постоянной основе. Табл. 7-2. Системные БД Имя БД Тип БД Описание master Системная Содержит информацию обо всех БД, установленных на сервере. Она изменяется каждый раз, когда создаются БД, изменяются учетные записи или параметры конфигурации. Следует регулярно создавать резервные копии БД master model Системная Предоставляет шаблоны для всех новых БД. Если требуется, что-бы все новые БД имели определенные свойства или набор разре-шений, нужно внести их в БД model tempdb Системная Предоставляет временное рабочее пространство для обработки запросов и выполнения других задач. Данная БД воссоздается заново при каждом запуске SQL Server из БД model msdb Системная Используется службой SQL Server Agent (Агент SQL Server) при обработке оповещений, уведомлений и назначенных заданий. До-ступ к информации, хранящейся в этой БД, можно получить с по-мощью SQL Server Management Studio distribution Системная/Репликация Используется Replication Services (Службы репликации), когда сервер конфигурируется как издатель, дистрибьютор или в обе-их ролях. Данная БД создается при настройке репликации, но не создается автоматически при новой установке Совет Образцы базы данных можно установить во время первоначальной установки или же впоследствии. Чтобы сделать это во время первоначальной установки, на странице Components to Install (Компоненты для установки) поставьте флажок Workstation Components, Books Online and development tools (Компоненты рабочей станции, электронная документация и инструменты разработки), затем щелкните кнопку Advanced (Дополни-тельно). На странице Feature Selection (Выбор функциональных возможностей) в иерар-хическом списке устанавливаемых компонентов раскройте узел Documentation, Samples, and Sample Databases (Документация, примеры кода и образцы баз данных) и выберите нужные примеры кода и образцы БД. Табл. 7-1. (окончание)
164 Часть II Администрирование Microsoft SQL Server 2005 Совет Чтобы установить образцы БД в любой момент после первоначальной установки, воспользуйтесь компонентом панели управления Add or Remove Programs (Установка и удаление программ). В окне Add or Remove Programs (Установка и удаление программ) выберите Microsoft SQL Server 2005 и щелкните кнопку Change (Изменить). Отобразится окно Microsoft SQL Server 2005 Maintenance (Сопровождение Microsoft SQL Server 2005). На странице Component Selection (Выбор компонентов) установите переключатель в по-ложение Workstation Components (Компоненты рабочей станции), определяя таким обра-зом компонент для изменения, и щелкните кнопку Next (Далее). Запустится программа установки, которая проверит систему. Щелкайте кнопку Next (Далее), пока не дойдете до страницы Change or Remove Instance (Изменить или удалить экземпляр). Здесь щелкните кнопку Change Installed Components (Изменить установленные компоненты). На странице Feature Selection (Выбор функциональных возможностей) в иерархическом списке ком-понентов раскройте узел Documentation, Samples, and Sample Databases (Документация, примеры кода и образцы баз данных) и выберите нужные для установки примеры кода и образцы БД. Щелкните кнопку Next (Далее). Отобразится страница Sample Databases Setup (Установка образцов баз данных). Для присоединения образцов БД установите переключатель в положение Install and attach sample databases (Установить и присоединить образцы баз данных). Просмотр объектов БД Основные элементы базы данных SQL Server называются объектами. Непосредствен-но к БД относятся такие объекты: ограничения; умолчания; индексы; ключи; хранимые процедуры; расширенные хранимые процедуры; таблицы; триггеры; пользовательские типы данных; пользовательские функции; представления. С базами данных также можно связать пользователей, роли, правила и полно-текстовые каталоги. Для просмотра объектов в БД выполните следующие действия. 1. В SQL Server Management Studio воспользуйтесь панелью Registered Servers (За-регистрированные серверы) для выбора типа сервера, например Database Engine (Ядро базы данных). Если необходимо раскрыть группу серверов, чтобы увидеть список доступных в ней серверов, щелкните знак + рядом с именем группы. 2. В панели Registered Servers (Зарегистрированные серверы) выберите сервер, дваж-ды щелкнув его имя. Это установит соединение с сервером в панели Object Explorer (Обозреватель объектов). 3. В панели Object Explorer (Обозреватель объектов) последовательно раскройте все узлы до уровня базы данных. Раскройте узел Databases (Базы данных), затем кон-кретной БД, чтобы увидеть перечень узлов, группирующих объекты базы данных. : Database Diagrams (Диаграммы базы данных) Содержит диаграммы, визу-ально отражающие структуру базы данных и хранящейся в ней информации. 
Основные задачи администрирования БД Глава 7 165 Для создания и изменения диаграмм используется Database Designer (Кон-структор баз данных). : Tables (Таблицы) Состоит из системных и пользовательских таблиц. Си-стемные таблицы применяются для многих задач, обеспечивающих поддерж-ку функционирования системы, включая почту и планы обслуживания базы данных, репликацию, резервное копирование и восстановление, а также пере-дачу журналов транзакций. Изменения в системные таблицы нельзя вносить напрямую. : Views (Представления) Имеет системные и пользовательские представления. Обычные представления объединяют данные из одной или нескольких таблиц, что упрощает работу. Индексированные представления используют уникальные кластерные индексы для повышения производительности запросов. Секциони-рованные представления объединяют горизонтально секционированные данные из таблиц, находящихся на одном или нескольких серверах. : Synonyms (Синонимы) Содержит синонимы, которые являются альтерна-тивными именами объектов, включенных в какую-либо схему. Приложения могут использовать синонимы, чтобы абстрагировать обращение к объектам базы данных. Потом можно изменить имя объекта БД, на который ссылается синоним, без необходимости менять код приложения. : Programmability (Программируемые возможности) Включает узлы, пред-ставляющие большинство программируемых типов и подтипов объектов, в том числе хранимые процедуры, функции, триггеры, сборки, типы данных, правила и умолчания. : Service Broker (Брокер служб) Состоит из объектов, принадлежащих Service Broker (Брокер служб), среди которых типы сообщений, контракты, очере-ди, службы, маршруты и привязки к удаленным службам. : Storage (Хранилища) Содержит объекты, имеющие отношение к хранению дан-ных, включая полнотекстовые каталоги, схемы и функции секционирования. : Security (Безопасность) Состоит из объектов, связанных с безопасностью, а именно пользователей, ролей, схем и ключей. Примечание Объекты БД детально обсуждаются в главах части 3. Например, допол-нительная информация о таблицах, индексах и представлениях приведена в главе 9. Создание БД В качестве прототипа для новых баз данных SQL Server использует БД model. Если необходимо, чтобы новые базы данных имели конкретные настройки, сначала сле-дует изменить БД model, а затем создавать новые базы данных. В противном случае придется изменять установки для каждой новой БД вручную. Простейший способ создания базы данных - использовать утилиту SQL Server Management Studio. Также можно создавать БД с помощью Тransact-SQL. Создание БД в SQL Server Management Studio В SQL Server Management Studio свойства базы данных задаются с помощью кнопок, полей ввода и флажков, а всю работу по генерированию необходимого для выполне-ния операции кода SQL берет на себя SQL Server. Для создания БД с параметрами по умолчанию выполните следующие действия. 1. В панели Registered Servers (Зарегистрированные серверы) выберите тип сервера, например Database Engine (Ядро базы данных). Чтобы раскрыть группу серверов, щелкните знак + рядом с названием группы.
166 Часть II Администрирование Microsoft SQL Server 2005 2. Затем выберите сервер, дважды щелкнув его имя. Это установит соединение с сер-вером в панели Object Explorer (Обозреватель объектов). 3. В контекстном меню узла Databases (Базы данных) щелкните команду New Data base (Создать базу данных). Откроется диалоговое окно, изображенное на рис. 7-2. Рис. 7-2. Диалоговое окно New Database 4. На странице General (Общие) введите имя БД в поле Database name (Имя базы дан ных). Несмотря на то, что имя базы данных может содержать до 128 символов, рекомендуется при сваивать краткие, но информативные имена, чтобы облегчить их отслеживание. 5. Щелкните кнопку ОК, и SQL Server создаст базу данных. Примечание Имена объектов БД называются идентификаторами. Идентификаторы могут содержать от 1 до 128 символов (кроме идентификаторов локальных временных таблиц, где количество символов варьируется от 1 до 116) и должны соответствовать соглаше-ниям о наименованиях класса идентификаторов, к которому они принадлежат. В общем случае, если идентификатор содержит пробелы или начинается с цифры, необходимо использовать квадратные скобки ([ ]) либо двойные кавычки (" ") для ограничения имени при обращении к нему в командах Transact-SQL*. Для того чтобы в процессе создания настроить дополнительные параметры базы данных, выполните пункты 1-4 (но не 5) из предыдущего примера, а затем продол-жите, выполняя указанные ниже действия. 1. На странице General (Общие) установите владельца БД, щелкнув кнопку справа от поля Owner (Владелец), чтобы открыть диалоговое окно Select Database Owner (Выбор владельца базы данных). * Сказанное относится также к идентификаторам, которые содержат символы кирил-лицы. - Прим. ред.
Основные задачи администрирования БД Глава 7 167 2. В этом окне щелкните кнопку Browse (Обзор), а затем в открывшемся диалоговом окне Browse for Objects (Обзор для поиска объектов) выберите имя пользователя, который будет владельцем БД. 3. Закройте диалоговые окна, щелкнув в каждом кнопку ОК. 4. Если БД будет использовать полнотекстовые индексы, установите флажок Use full-text indexing (Использовать полнотекстовое индексирование). После создания базы данных необходимо настроить полнотекстовое индексирование (см. раздел "Работа с полнотекстовым поиском" главы 5). 5. По умолчанию SQL Server создает имя файла данных на основе имени БД. На-пример, если введено имя Projects, файл данных тоже будет называться Projects. Значение по умолчанию можно изменить, задав другое имя. 6. Поле FileGroup (Группа файлов) показывает, к какой группе файлов принадлежит файл данных. По умолчанию все файлы помещаются в основную группу. Вновь созданные файлы можно помещать в разные группы, исключение составляет основ-ной файл данных. Группы файлов предоставляют дополнительные возможности для определения того, где хранятся данные, как они используются, а также каким образом организовано резервное копирование БД и их восстановление. Совет Группы файлов предназначены прежде всего для больших БД; применять их должны опытные администраторы. Но этот вопрос стоит рассматривать, только если база данных может возрасти до 1 Гбайт и больше. В противном случае нет особой не-обходимости использовать несколько групп файлов. Главная причина применения групп файлов - сокращение для БД времени отклика. Улучшение происходит благодаря тому, что файлы БД можно хранить на разных дисках и обращаться к ним через разные кон-троллеры дисков. 7. В поле Initial Size (Исходный размер) введите исходный размер БД в мегабайтах. Следует выбирать размер, соответствующий объему данных, которые будут хра-ниться в БД. По умолчанию новые базы данных имеют тот же размер, что и БД model. Размер базы данных может варьироваться от 1 Мбайт до многих терабайт. Примечание Задание исходного размера БД с разумным запасом снижает накладные расходы, связанные с возможным ростом базы данных. Если размер БД увеличивается вручную или SQL Server выполняет процесс автоматически, база данных блокируется, пока увеличение не завершится. Это может вызвать задержки при обработке запросов и транзакций. Совет Обычно нельзя сжать базу данных до размера меньше того, что был указан при ее создании (сжатие БД выполняется с помощью инструкции DBCC SHRINKDATABASE). Однако с помощью инструкции DBCC SHRINKFILE это ограничение можно обойти, сжимая отдельные файлы данных и журналов транзакций до размера меньше первоначального. Но важно помнить, что данная инструкция применяется к каждому файлу индивидуально, ею нельзя сжать всю БД. 8. По умолчанию для новых БД устанавливается автоматическое увеличение файла данных при каждой необходимости. Щелкните кнопку справа от поля Autogrowth (Автоматическое увеличение), чтобы изменить соответствующие параметры. Как показано на рис. 7-3, автоматический рост задается в процентах от первоначаль-ного размера или в мегабайтах; дополнительно можно ограничить максимальный размер файла либо разрешить неограниченное увеличение. 9. В поле Path (Путь) введите полный путь к файлу данных. Имя основного фай-ла данных должно заканчиваться расширением .mdf. По умолчанию SQL Server использует путь для хранения данных, выбранный во время установки сервера. 
168 Часть II Администрирование Microsoft SQL Server 2005 Щелкните кнопку справа от поля Path (Путь), чтобы выбрать новый путь, или введите его непосредственно. Рис. 7-3. Конфигурирование возможности Autogrowth Совет Возможность Autogrowth - хорошее средство обеспечения того, что свободное место в БД не закончится. Однако следует внимательно подойти к настройке роста базы данных. Например, задание 10 % темпа роста для БД размером 5 Гбайт приведет к ее возрастанию на 500 Мбайт каждый раз, когда потребуется расширение файла данных, и в результате такого роста на сервере с несколькими базами данных может закончиться свободное дисковое пространство. Если задавать рост в мегабайтах с минимальным приростом в 1 Мбайт, всегда будет известно, насколько вырастет БД после каждого расширения файла данных. Также можно посоветовать настроить оповещение, которое бы отправлялось в случае достижения базой данных определенного размера. Как на-страивать оповещения, рассказывается в главе 15. 10. Дополнительные файлы данных предоставляют дополнительное пространство для хранения данных. Если нужно настроить вторичные файлы данных, щелкните кнопку Add (Добавить), чтобы начать новую строку, а затем повторите пункты 5-9. Имена дополнительных файлов данных должны заканчиваться расширением .ndf. 11. Журналы транзакций приводятся в списке файлов как тип файла Log (Журнал). После конфигурирования файлов данных можно настроить один или больше фай-лов журнала транзакций способом, подобным тому, каким настраиваются файлы данных. Введите имя файла, группу файлов, исходный размер и путь. Если не-обходимо, настройте возможность Autogrowth (Автоматический рост). Убедитесь, что файлы журнала имеют расширение .ldf. Совет Есть определенные нюансы задания размеров файла журнала транзакций. Не стоит отбирать у системы необходимое пространство для хранения данных, но также сле-дует избегать ситуаций, когда размер журнала транзакций постоянно изменяется, так как во время расширения файл блокируется. Рекомендованным является выделение от 2 до 3 Мбайт как минимум для всех БД, а для БД средней активности - 25 % от общего объе ма файла данных. Также следует обратить внимание на то, что размещение журналов транзакций на отдельном от данных накопителе обычно повышает произво-дительность БД. 12. На странице Options (Параметры) используйте меню Collation (Сопоставление), чтобы выбрать порядок сопоставления для БД. Названия сопоставлений в Microsoft Windows имеют две составляющие: указатель сопоставления и стиль срав-нения. Указатель сопоставления задает алфавит или язык (правила сортировки будут применяться в отношении словарей) и кодовую страницу (для хранения 
Основные задачи администрирования БД Глава 7 169 кодировок, отличных от UNICODE). Стиль сравнения задает дополнительный стиль сопоставления, который определяется следующими аббревиатурами: : 90 - сортировка кодовых точек (code-point) (усовершенствованное сопостав-ление, включающее сортировку кодовых точек); : CI - нечувствительный к регистру; : CS - чувствительный к регистру; : AI - без учета диакритических символов; : AS - с учетом диакритических символов; : KS - kanatype-чувствительный; : WS - чувствительный к ширине; : BIN - бинарная сортировка; : BIN2 - бинарная сортировка кодовых точек (для сопоставлений, использую-щих исключительно сравнение кодовых точек). 13. Щелкните кнопку ОК для завершения процесса создания БД. После создания базы данных следует задать для нее параметры и разрешения. О том, как задавать параметры БД, будет рассказано в разделе "Установка параметров БД в SQL Server Management Studio" этой главы, а задание разрешений обсуждается в главе 8. Создание БД с использованием Transact-SQL Создавать базы данных можно также, используя инструкцию CREATE DATABASE. Параметры этой инструкции соответствуют тем, которые задаются в диалоговом окне Database Properties (Свойства базы данных), и лучшим способом узнать, как рабо-тает эта команда, - создать БД в SQL Server Management Studio, а затем пробовать применение инструкции CREATE DATABASE, синтаксис и использования которой приводятся в примере 7-1. Пример 7-1. Синтаксис и использование инструкции CREATE DATABASE Синтаксис: CREATE DATABASE database_name [ ON [ PRIMARY ] [ <filespec> [ ,...n ] ] [ , <filegroup> [ ,...n ] ] ] [ [ LOG ON { <filespec> [ ,...n ] } ] [ COLLATE collation_name ] [ WITH <external_access_option> ] ] [ ; ] <filespec> ::= { ( NAME = logical_file_name, FILENAME = 'os_file_name' [ , SIZE = size [ KB | MB | GB | TB ] ] [ , MAXSIZE = { max_size [ KB | MB | GB | TB ] | UNLIMITED } ] [ , FILEGROWTH = growth_increment [ KB | MB | % ] ] ) }
170 Часть II Администрирование Microsoft SQL Server 2005 <filegroup> ::= { FILEGROUP filegroup_name [ DEFAULT ] <filespec> [ ,...n ] } <external_access_option> :: = { DB_CHAINING { ON | OFF } | TRUSTWORTHY { ON | OFF } } Использование: USE master GO CREATE DATABASE Sample ON PRIMARY ( NAME = Sample1, FILENAME = 'c:\data\sampledat1.mdf', SIZE = 100MB, MAXSIZE = UNLIMITED, FILEGROWTH = 10% ), ( NAME = Sample2, FILENAME = 'c:\data\sampledat2.ndf', SIZE = 100MB, MAXSIZE = UNLIMITED, FILEGROWTH = 10% ) LOG ON ( NAME = SampleLog1, FILENAME = 'c:\data\samplelog1.ldf', SIZE = 3MB, MAXSIZE = UNLIMITED, FILEGROWTH = 5MB ) GO Изменение БД и их параметров Новые базы данных наследуют параметры от БД model. После создания БД эти уста-новки можно изменить в любое время, используя утилиту SQL Server Management Studio, а также инструкцию ALTER DATABASE или другие инструкции SQL. В боль-шинстве редакций SQL Server многие стандартные параметры могут принимать зна-чения TRUE (ON) или FALSE (OFF). Другие параметры принимают конкретные значения, указывающие заданное состояние, например GLOBAL или LOCAL. Установка параметров БД в SQL Server Management Studio Чтобы задать параметры базы данных в утилите SQL Server Management Studio, вы-полните указанные дальше действия. 1. В панели Registered Servers (Зарегистрированные серверы) выберите тип сервера, например Database Engine (Ядро базы данных). Чтобы раскрыть группу серверов, щелкните знак + рядом с названием группы. 2. Затем выберите сервер, дважды щелкнув его имя. Будет установлено соединение с сервером в панели Object Explorer (Обозреватель объектов).
Основные задачи администрирования БД Глава 7 171 3. Щелкните знак + рядом с узлом Databases (Базы данных). В контекстном меню БД выберите команду Properties (Свойства). Отобразится диалоговое окно Database Properties (Свойства базы данных). 4. В списке Select a pa ge (Выберите страницу) этого окна выберите страницу Options (Параметры), как показано на рис. 7-4. Теперь можно настраивать параметры базы данных, устанавливая и снимая соответствующие флажки. Рис. 7-4. Страница Options диалогового окна Database Properties 5. Щелкните ОК, когда закончите выбор параметров. Изменения вступают в силу сразу же, поэтому нет необходимости перезапускать сервер. Изменение БД с использованием инструкции ALTER DATABASE Утилита SQL Server Management Studio предоставляет пользователю визуальный спо-соб изменения конфигурации БД. Другой способ состоит в применении инструкции ALTER DATABASE, которая предназначена для выполнения следующих задач. Задавать параметры БД. Инструкцию ALTER DATABASE рекомендуется исполь-зовать вместо хранимой процедуры sp_dboption. Добавлять новые файлы данных и журналов транзакций в БД. Все файлы должны быть помещены в одну группу файлов. Изменять свойства файлов данных и журналов транзакций, например, увеличи-вать размер файла, изменять максимальный размер или задавать правила роста файлов. Добавлять новую группу файлов в БД.
172 Часть II Администрирование Microsoft SQL Server 2005 Изменять параметры существующей группы файлов, например указывать, является ли она доступной для записи или только для чтения, а также определять, какую группу файлов использовать по умолчанию. Удалять файлы и группы файлов из БД. Они могут удаляться только в случае, если не содержат данных. Инструкция ALTER DATABASE предназначена для изменения одного параметра за один вызов; ее синтаксис приведен в примере 7-2. Примеры из листинга показыва-ют, как можно использовать инструкцию ALTER DATABASE при решении типичных задач администрирования. Для выполнения инструкций используют окно Query (Запрос) в SQL Server Management Studio или утилиту командной строки SQLCMD, щелкнув кнопкой Execute (Выполнить) в панели инструментов или применив команду GO соответственно. Пример 7-2. Синтаксис и использование инструкции ALTER DATABASE Синтаксис: ALTER DATABASE database_name { <add_or_modify_files> | <add_or_modify_filegroups> | <set_database_options> | MODIFY NAME = new_database_name | COLLATE collation_name } [ ; ] <add_or_modify_files> ::= { ADD FILE <filespec> [ ,...n ] [ TO FILEGROUP filegroup_name ] | ADD LOG FILE <filespec> [ ,...n ] | REMOVE FILE logical_file_name | MODIFY FILE <filespec> } <filespec> ::= ( NAME = logical_file_name [ , NEWNAME = new_logical_file_name ] [ , FILENAME = 'os_file_name' ] [ , SIZE = size [ KB | MB | GB | TB ] ] [ , MAXSIZE = { max_size [ KB | MB | GB | TB ] | UNLIMITED } ] [ , FILEGROWTH = growth_increment [ KB | MB | GB | TB | % ] ] [ , OFFLINE ] ) <add_or_modify_filegroups> ::= { ADD FILEGROUP filegroup_name | REMOVE FILEGROUP filegroup_name | MODIFY FILEGROUP filegroup_name { <filegroup_updatability_option> | DEFAULT | NAME = new_filegroup_name } } <filegroup_updatability_option> ::= { { READONLY | READWRITE }
Основные задачи администрирования БД Глава 7 173 | { READ_ONLY | READ_WRITE } } <set_database_options> ::= SET { { <optionspec> [ ,...n ] [ WITH <termination> ] } | ALLOW_SNAPSHOT_ISOLATION { ON | OFF } | READ_COMMITTED_SNAPSHOT { ON | OFF } [ WITH <termination> ] } <optionspec> ::= { <db_state_option> | <db_user_access_option> | <db_update_option> | <external_access_option> | <cursor_option> | <auto_option> | <sql_option> | <recovery_option> | <database_mirroring_option> | <supplemental_logging_option> | <service_broker_option> | <date_correlation_optimization_option> | <parameterization_option> } <db_state_option> ::= { ONLINE | OFFLINE | EMERGENCY } <db_user_access_option> ::= { SINGLE_USER | RESTRICTED_USER | MULTI_USER } <db_update_option> ::= { READ_ONLY | READ_WRITE } <external_access_option> ::= { DB_CHAINING { ON | OFF } | TRUSTWORTHY { ON | OFF } } <cursor_option> ::= { CURSOR_CLOSE_ON_COMMIT { ON | OFF } | CURSOR_DEFAULT { LOCAL | GLOBAL } } <auto_option> ::= { AUTO_CLOSE { ON | OFF } | AUTO_CREATE_STATISTICS { ON | OFF } | AUTO_SHRINK { ON | OFF } | AUTO_UPDATE_STATISTICS { ON | OFF } | AUTO_UPDATE_STATISTICS_ASYNC { ON | OFF } } <sql_option> ::= { ANSI_NULL_DEFAULT { ON | OFF } | ANSI_NULLS { ON | OFF } | ANSI_PADDING { ON | OFF } | ANSI_WARNINGS { ON | OFF } | ARITHABORT { ON | OFF } | CONCAT_NULL_YIELDS_NULL { ON | OFF }
174 Часть II Администрирование Microsoft SQL Server 2005 | NUMERIC_ROUNDABORT { ON | OFF } | QUOTED_IDENTIFIER { ON | OFF } | RECURSIVE_TRIGGERS { ON | OFF } } <recovery_option> ::= { RECOVERY { FULL | BULK_LOGGED | SIMPLE } | TORN_PAGE_DETECTION { ON | OFF } | PAGE_VERIFY { CHECKSUM | TORN_PAGE_DETECTION | NONE } } <database_mirroring_option> ::= { <partner_option> | <witness_option> } <partner_option> ::= PARTNER { = 'partner_server_name' | FAILOVER | FORCE_SERVICE_ALLOW_DATA_LOSS | OFF | RESUME | SAFETY { FULL | OFF } | SUSPEND | REDO_QUEUE ( integer_value { KB | MB | GB } | UNLIMITED ) | TIMEOUT integer_value } <witness_option> ::= WITNESS { = 'witness_server_name' | OFF } <supplemental_logging_option> ::= SUPPLEMENTAL_LOGGING { ON | OFF } <service_broker_option> ::= { ENABLE_BROKER | DISABLE_BROKER | NEW_BROKER | ERROR_BROKER_CONVERSATIONS } <date_correlation_optimization_option> ::= { DATE_CORRELATION_OPTIMIZATION { ON | OFF } } <parameterization_option> ::= { PARAMETERIZATION { SIMPLE | FORCED } } <termination> ::= { ROLLBACK AFTER integer_value [ SECONDS ] | ROLLBACK IMMEDIATE | NO_WAIT } Использование (добавление файла к БД): ALTER DATABASE Customer ADD FILE ( NAME = Customerdata2, FILENAME = 'c:\data\customerdat2.ndf', SIZE = 10MB, MAXSIZE = 500MB,
Основные задачи администрирования БД Глава 7 175 FILEGROWTH = 5MB ) Использование (добавление группы файлов к БД): ALTER DATABASE Customer ADD FILEGROUP Secondary Использование (добавление файлов и помещение их в группу файлов): ALTER DATABASE Customer ADD FILE ( NAME = Customerdata3, FILENAME = 'c:\data\customerdat3.ndf', SIZE = 10MB, MAXSIZE = UNLIMITED, FILEGROWTH = 5MB ), ( NAME = Customerdata4, FILENAME = 'c:\data\customerdat4.ndf', SIZE = 10MB, MAXSIZE = UNLIMITED, FILEGROWTH = 5MB ) TO FILEGROUP Secondary Использование (задание группы файлов по умолчанию): ALTER DATABASE Customer MODIFY FILEGROUP Secondary DEFAULT Использование: изменение файла ALTER DATABASE Customer MODIFY FILE ( NAME = Customerdata3, SIZE = 20MB ) Использование (удаление файла из БД): USE Customer DBCC SHRINKFILE ( Customerdata3, EMPTYFILE ) ALTER DATABASE Customer REMOVE FILE Customerdata3 Использование (задание модели восстановления): ALTER DATABASE Customer SET RECOVERY FULL Использование (задание однопользовательского режима с откатом незавершенных транзакций): ALTER DATABASE Customer SET SINGLE_USER WITH ROLLBACK IMMEDIATE Примечание Параметр EMPTYFILE инструкции DBCC SHRINKFILE очищает файл, пере-мещая его данные в другие файлы этой же группы. Затем можно использовать параметр REMOVE FILE инструкции ALTER DATABASE, чтобы удалить файл.
176 Часть II Администрирование Microsoft SQL Server 2005 Настройка автоматических параметров В SQL Server 2005 есть несколько важных возможностей, управлять которыми можно автоматически. Автоматические параметры находятся на странице Options (Параме-тры) диалогового окна Database Properties (Свойства базы данных), изображенного на рис. 7-4. Значения этих параметров отображаются как True, когда они включены (ON), или False, когда они выключены (OFF). Ниже приводится перечень параметров диалогового окна Database Properties (Свойства базы данных), а в скобках даются соответствующие им ключевые слова инструкции ALTER DATABASE. Auto Close (AUTO_CLOSE) Когда этот параметр установлен как True, то по окончании последнего соединения пользователя и завершении всех процессов база данных закрывается и ресурсы освобождаются. БД открывается автоматически, когда пользователь снова устанавливает соединение с ней. В редакции Express Edition этот параметр по умолчанию имеет значение True. Во всех других редак-циях - False, что может улучшить производительность БД, так как исключаются накладные расходы на их открытие и закрытие. Когда установлено значение False, база данных остается открытой, даже если пользователи в этот момент не исполь-зуют ее. Совет В редакции Express Edition функциональность, предоставляемая параметром Auto Close, является полезной возможностью, позволяющей обрабатывать базы данных таким же образом, как и любые другие файлы. Когда БД закрыта, ее можно переместить, скопировать или изменить. Auto Create Statistics (AUTO_CREATE_STATISTICS) При значении True (значение параметра по умолчанию) автоматически генерируется статистика для столбцов, используемых в предложении WHERE, как и остальная необходимая статистика. Применение статистики дает возможность определить лучший способ оценки запроса, что, в свою очередь, позволяет улучшить быстродействие запроса. Auto Shrink (AUTO_SHRINK) Значение True для этого параметра означает, что файлы данных и журналов транзакций автоматически уменьшаются в размере и сжимаются. Когда записи удаляются, SQL Server автоматически уменьшает размер файлов данных или журналов транзакций, либо и тех, и других. Однако размеры файлов журнала транзакций уменьшаются только тогда, когда создается его ре-зервная копия или значение параметра Recovery Model (Модель восстановления) устанавливается в Simple (Простая). Примечание Использование параметра Auto Shrink требует некоторых разъяснений. Он применяется только в случае, когда более 25 % файла содержит неиспользованное про-странство. SQL Server уменьшает размер файла таким образом, чтобы только 25 % были свободными, либо возвращает размер файла к начальному значению, в зависимости от того, что больше. Процесс, сокращающий БД, проверяет размер файлов с интервалом в 30 мин. Как и в случае с возможностью автоматического увеличения, которая обсужда-лась раньше, база данных блокируется, когда SQL Server уменьшает файлы, что может увеличить время отклика БД. Поэтому обычно лучше периодически выполнять инструкцию DBCC SHRINKDATABASE или назначить ее автоматическое выполнение по определенному расписанию, как объясняется в разделе "Уплотнение и сжатие БД вручную" этой главы. Auto Update Statistics (AUTO_UPDATE_STATISTICS) Когда этот параметр имеет значение True (значение по умолчанию), существующая статистика ав-томатически обновляется при изменении данных в соответствующих таблицах. В противном случае ее можно обновить только вручную. Инструкция UPDATE STATISTICS включает автоматическое обновление статистики, если не указано ключевое слово NORECOMPUTE.
Основные задачи администрирования БД Глава 7 177 Auto Update Statistics Asynchronously (AUTO_UPDATE_STATISTICS_ ASYNC) Уста новка значения True означает, что запросы, инициирующие обнов-ление устаревшей статистики, будут компилироваться, не ожидая завершения обнов-ления статистики. В противном случае они перед компилированием будут ожидать завершения обновления статистики. Это новый параметр в SQL Server 2005. Для управления автоматическими параметрами из SQL Server Management Studio выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) щелкните в контекстном меню БД, которую необходимо настроить, команду Properties (Свойства). 2. В диалоговом окне Database Properties (Свойства базы данных) в списке Select a page (Выберите страницу) выберите страницу Options (Параметры). 3. Для отдельных автоматических параметров установите значение True или False, в зависимости от потребностей. Щелкните кнопку ОК, когда закончите установку параметров. Изменения вступают в силу немедленно, нет необходимости переза-пускать сервер. Чтобы управлять автоматическими параметрами средствами Тransact-SQL, по-вторите указанные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) щелкните в контекстном меню БД, которую необходимо настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите инструкцию ALTER DATABASE database_name SET option_name option_value, где database_name - имя БД, option_name - имя устанавливаемого параметра, а option_value - его значение. В следующем примере приведена инструкция, необходимая для включения параметра Auto Shrink для БД Personnel: ALTER DATABASE Personnel SET AUTO_SHRINK ON GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) или нажав клавишу F5. Если параметр установлен правильно, инструкция завер-шит выполнение успешно. Контроль совместимости со стандартом ANSI на уровне БД Совместимость со стандартом ANSI можно контролировать на уровне базы данных с использованием ее параметров. Они приведены в разделе Miscellaneous (Разное) на странице Options (Параметры) диалогового окна Database Properties (Свойства базы данных). Значения параметров отображаются как True, когда они включены (ON), или False, когда выключены (OFF). Ниже приводится перечень параметров диалогового окна Database Properties (Свойства базы данных), а в скобках даются соответствующие ключевые слова инструкции ALTER DATABASE. ANSI NULL Default (ANSI_NULL_DEFAULT) Устанавливает для БД значе-ние по умолчанию равным NULL. Этот параметр можно обойти, явным образом указав NULL или NOT NULL при создании пользовательских типов данных или определении столбцов. ANSI NULLs Enabled (ANSI_NULLS) Когда этот параметр имеет значение True, все сравнения с пустым значением дают результат NULL. В противном слу-чае сравнение значений в кодировке, отличной от UNICODE, только тогда дает в результате True, когда оба значения являются NULL.
178 Часть II Администрирование Microsoft SQL Server 2005 ANSI Padding Enabled (ANSI_PADDING) В случае значения True, не равные NULL и короче определенной длины столбца значения дополняются до полного заполнения длины столбца в соответствии с типом данных. Например, символьные столбцы дополняются завершающими пробелами, а бинарные - завершающими нулями. Когда значение параметра равно False, завершающие пробелы удаляются. ANSI Warnings Enabled (ANSI_WARNINGS) При выборе значения True SQL Server выдает некоторые предупреждения, которые не выводятся в противном случае. Например, при значении True выводятся ошибки деления на ноль, а при значении False эти ошибки не выводятся. Arithmetic Abort Enabled (ARITHABORT) Когда этот параметр имеет значение True, при появлении ошибок переполнения либо деления на ноль выполнение запроса прерывается. Если ошибка возникает в транзакции, происходит ее откат. При значении False могут выводиться предупреждения, но запросы и транзакции продолжают выполняться. Concat Null Yields Null (CONCAT_NULL_YIELDS_NULL) В случае значения True результатом конкатенации символьной строки, содержащей NULL, с другими строками будет NULL. Если параметр равен False, значение NULL трактуется как пустая строка. Numeric Round-Abort (NUMERIC_ROUNDABORT) Если выбрано значение True, генерируется ошибка при потере точности в выражении. Когда параметр имеет значение False, потери точности не генерируют ошибок, а результат окру-гляется до точности столбца или переменной, в которой сохраняется результат. Quoted Identifiers Enabled (QUOTED_IDENTIFIER) При значении True иден-тификаторы должны заключаться в двойные кавычки ("."), а литералы нужно ограничивать одинарными кавычками ('.'). Все символьные строки, заключенные в двойные кавычки, интерпретируются как идентификаторы объектов и могут не соответствовать правилам для идентификаторов, принятым в Transact-SQL. Если установлено значение False, идентификаторы следует брать в двойные кавычки лишь тогда, когда имена содержат пробелы или другие запрещенные символы, например буквы национальных алфавитов. Recursive Triggers Enabled (RECURSIVE_TRIGGERS) Когда этот параметр имеет значение True, триггеры выполняются рекурсивно. Триггеры могут запу-скаться напрямую или непрямо. Если триггер запущен напрямую, то определен-ный для таблицы А1 триггер изменяет данные в таблице А1, что, в свою очередь, приводит к повторному срабатыванию триггера. Если триггер запускается не-прямо, то триггер в таблице А1 может изменить данные в таблице А2, которая, в свою очередь, имеет триггер, изменяющий данные в таблице А1, что приводит к повторному срабатыванию начального триггера. При значении параметра False разрешаются только триггеры, запускаемые непрямо. Для управления с помощью SQL Server Management Studio параметрами, опреде-ляющими совместимость со стандартом ANSI, выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) щелкните в контекстном меню БД, которую необходимо настроить, команду Properties (Свойства). 2. В диалоговом окне Database Properties (Свойства базы данных) в списке Select a page (Выберите страницу) выберите страницу Options (Параметры). 3. Установите, в зависимости от потребностей, значение True или False для пара-метров совместимости со стандартом ANSI. После этого щелкните кнопку ОК. Изменения вступают в силу сразу же, перезапускать сервер нет необходимости.
Основные задачи администрирования БД Глава 7 179 Для управления параметрами совместимости со стандартом ANSI средствами Тransact-SQL выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) выберите в контекстном меню БД, которую нужно настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите инструкцию ALTER DATABASE database_name SET option_name option_value, где database_name - имя БД, option_name - имя устанавливаемого параметра, а option_value - значение указанного параметра. В следующем примере показана инструкция, которая включает параметр NUMERIC_ROUNDABORT для БД Personnel: ALTER DATABASE Personnel SET NUMERIC_ROUNDABORT ON GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) либо нажав клавишу F5. Если значение параметра задано правильно, инструкция успешно выполнится. Настройка параметров курсоров Курсоры используются в хранимых процедурах, триггерах, а также в сценариях, чтобы содержание результирующего множества стало доступным для других инструкций. Некоторый ограниченный контроль над поведением курсоров доступен через исполь-зование параметров, перечисленных в разделе Cursor (Курсор) на странице Options (Параметры) диалогового окна Database Properties (Свойства базы данных). Эти параметры имеют значение True, когда они включены (ON), и False, когда выключе-ны (OFF). В следующем списке перечислены параметры диалогового окна Database Properties (Свойства базы данных); в скобках даны соответствующие им ключевые слова инструкции ALTER DATABASE. Cursor Close on Commit Enabled (CURSOR_CLOSE_ON_COMMIT) Когда этот параметр имеет значение True, открытые курсоры закрываются после завершения или отката транзакции. Такое поведение соответствует стандарту SQL-92, но по умолчанию для этого параметра не устанавливается значение True. В результате курсоры остаются открытыми вне границ транзакции и закрываются только после закрытия связанного соединения либо когда курсор закрывается явно. Примечание SQL-92 является наиболее широко используемым стандартом SQL; иногда его называют ANSI SQL. Default Cursor (CURSOR_DEFAULT) При установке значения Local курсоры создаются в локальной области видимости, если не указано иначе; в результате имя курсора действительно только в этой области видимости. Когда выбрано значение Global, курсоры, не определенные при создании явно с использованием ключевого слова LOCAL, создаются в глобальной области видимости и к ним могут обращаться любые хранимые процедуры, пакеты инструкций или триггеры, выполняющиеся в текущем соединении. Для управления параметрами курсоров в SQL Server Management Studio выпол-ните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) щелкните в контекстном меню БД, которую необходимо настроить, команду Properties (Свойства). 2. В диалоговом окне Database Properties (Свойства базы данных) в списке Select a pa ge (Выберите страницу) выберите страницу Options (Параметры).
180 Часть II Администрирование Microsoft SQL Server 2005 3. Установите необходимые значения параметров курсоров, после чего щелкните кнопку ОК. Изменения вступают в силу сразу же, перезапускать сервер нет не-обходимости. Для управления параметрами курсоров с использованием Transact-SQL выполните приведенные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) выберите в контекстном меню БД, которую нужно настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите ALTER DATABASE database_name SET option_ name option_value, где database_name - имя БД, option_name - имя устанавлива-емого параметра, а option_value - его значение. В следующем примере показана инструкция, которая задает параметру CURSOR_DEFAULT значение GLOBAL для БД Personnel: ALTER DATABASE Personnel SET CURSOR_DEFAULT GLOBAL GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) либо нажав клавишу F5. Если значение параметра задано правильно, инструкция успешно выполнится. Контроль доступа пользователей и состояния БД Управление доступом пользователей и состоянием базы данных достаточно сложный процесс. С помощью SQL Server Management Studio можно контролировать общее состояние БД, например, открыта ли база данных только для чтения или для записи тоже, кто имеет к ней доступ и т. д. Когда база данных находится в режиме READ_ONLY, данные можно читать, но не изменять. Этот параметр используется, чтобы пользователи не могли изменить данные и параметры конфигурации БД. Относительно баз данных, открытых только для чтения, необходимо помнить следующее: при запуске системы автоматическое восстановление не выполняется, блокировки не устанавливаются, и БД невозможно сжать. Обычным режимом является READ_WRITE, который разрешает чтение и из-менение базы данных. Когда БД находится в режиме SINGLE_USER, доступ к ней имеет только ее вла-делец. Этот параметр используется, если при изменении базы данных необходимо временно заблокировать доступ к ней. В режиме RESTRICTED_USER работать с БД могут только члены ролей сервера db_owner, dbcreator или sysadmin. Режим MULTI_USER дает возможность подключаться и работать с базой данных всем поль-зователям с соответствующими разрешениями. Для управления состоянием БД из SQL Server Management Studio выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) щелкните в контекстном меню БД, которую необходимо настроить, команду Properties (Свойства). 2. В диалоговом окне Database Properties (Свойства базы данных) в списке Select a page (Выберите страницу) выберите страницу Options (Параметры). Теперь мож-но управлять состоянием БД. : Чтобы установить режим READ_WRITE, выберите значение False в списке Database Read-Only (База данных доступна только для чтения). : Для режима READ_ONLY в раскрывающемся списке Database Read-Only (База данных доступна только для чтения) выберите значение True.
Основные задачи администрирования БД Глава 7 181 : Если вы хотите разрешить доступ только владельцу БД, в раскрывающемся списке Restrict Access (Ограничить доступ) выберите значение Single (Одно-пользовательский). : Когда нужно, чтобы доступ имели лишь члены ролей db_owner, dbcreator или sysadmin, в раскрывающемся списке Restrict Access (Ограничить доступ) вы-берите значение Restricted (Ограниченный). : Для доступа всем пользователям с соответствующими разрешениями в рас-крывающемся списке Restrict Access (Ограничить доступ) выберите значение Multiple (Многопользовательский). 3. После установки значений этих параметров щелкните кнопку ОК. Изменения вступают в силу немедленно, перезапускать сервер нет необходимости. Чтобы управлять параметрами состояния с использованием Transact-SQL, по-вторите указанные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) выберите в контекстном меню БД, которую нужно настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите инструкции ALTER DATABASE database_name SET keyword, где database_name - имя БД, а keyword - одно из следующих зна-чений: READ_ONLY, READ_WRITE, SINGLE_USER, RESTRICTED_USER или MULTI_USER. В следующем примере устанавливается многопользовательский режим доступа для базы данных Personnel: ALTER DATABASE Personnel SET MULTI_USER GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) либо нажав клавишу F5. Если значение параметра задано правильно, инструкция успешно выполнится. Установка оперативного, автономного и аварийного режимов В SQL Server 2005 отдельную базу данных можно перевести в оперативный (ONLINE) или автономный (OFFLINE) режим, а также установить аварийный (EMERGENCY) режим, позволяющий устранять неполадки в работе БД. Когда установлен режим ONLINE, база данных открыта и доступна для использования. При выборе режима OFFLINE БД становится недоступна для подключения и ее можно подсоединять или отсоединять. В режиме EMERGENCY база данных обозначена как READ_ONLY, ведение журнала транзакций отключено, а доступ разрешен только для членов встро-енной роли сервера sysadmin. Примечание В SQL Server 2005 режимы ONLINE и OFFLINE файлов БД поддерживаются независимо от состояния базы данных. Чтобы группа файлов была доступной, все файлы в группе должны быть в режиме ONLINE. Когда группа файлов находится в режиме OFFLINE, невозможно выполнять запросы к данным с использованием инструкций SQL. Оптимизатор запросов не учитывает состояние группы файлов при выборе плана запроса. Чтобы установить для БД оперативный, автономный или аварийный режим, вы-полните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) выберите в контекстном меню БД, которую нужно настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите инструкцию ALTER DATABASE database_name SET keyword, где database_name - имя БД, а keyword - одно из следующих значе-ний: ONLINE, OFFLINE, EMERGENCY. В приведенном ниже примере показаны 
182 Часть II Администрирование Microsoft SQL Server 2005 инструкции, устанавливающие аварийное состояние с целью устранения неполадок для базы данных Personnel: ALTER DATABASE Personnel SET EMERGENCY GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) либо нажав клавишу F5. Если значение параметра задано правильно, инструкция успешно выполнится. Управление параметрами цепочек принадлежности между БД и доступом к внешним ресурсам Цепочки принадлежности используются для определения того, каким образом не-сколько объектов последовательно получают доступ один к другому. Когда цепочки принадлежности разрешены, SQL Server сравнивает владельца вызывающего объекта с владельцем вызываемого. Если оба объекта имеют одного владельца, считается, что вызываемый объект имеет те же разрешения, что и вызывающий. В таком случае при использовании начальных разрешений на представление, когда представлению нужен доступ к другим объектам, и владельцем этих объектов является владелец представ-ления, легко достичь каскадного эффекта. В некоторых ситуациях может понадобиться настроить использование цепочек принадлежности между конкретными базами данных или между всеми БД одно-го экземпляра сервера. Хотя эта возможность по умолчанию отключена, ее можно включить, используя инструкцию ALTER DATABASE SET DB_CHAINING ON. Когда параметр DB_CHAINING имеет значение TRUE (ON), база данных может выступать источником или целью цепочки принадлежности между БД. Параметр DB_CHAINING нельзя установить для БД master, model или tempdb. Для установки этого параметра необходимо подсоединиться в качестве члена встроенной роли сер-вера sysadmin. Связанным с предыдущим является параметр TRUSTWORTHY, определяющий доступ к внешним ресурсам. Когда параметр TRUSTWORTHY имеет значение TRUE (ON), модули базы данных, например пользовательские функции и хранимые про-цедуры, при помощи олицетворения могут получать доступ к ресурсам за пределами БД. По умолчанию параметр TRUSTWORTHY для БД master имеет значение ON. Тем не менее, для баз данных model и tempdb параметр TRUSTWORTHY имеет значение OFF, которое изменить нельзя. Если нужно другой БД открыть доступ к внешним ресурсам, следует установить для нее значение параметра TRUSTWORTHY равным TRUE (ON). Для этого необходимо подсоединиться в качестве члена встроенной роли сервера sysadmin. Чтобы настроить использование цепочек принадлежности и доступ к внешним ресурсам, выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) выберите в контекстном меню БД, которую нужно настроить, команду New Query (Создать запрос). 2. В окне Query (Запрос) введите инструкцию ALTER DATABASE database_name SET option_name option_value, где database_name - имя БД, option_name - имя устанавливаемого параметра, а option_value - значение указанного параметра. В следующем примере приведена инструкция, необходимая, чтобы включить ис-пользование цепочек принадлежности между базами данных для БД Personnel: ALTER DATABASE Personnel
Основные задачи администрирования БД Глава 7 183 SET DB_CHAINING ON GO 3. Выполните запрос, щелкнув в панели инструментов кнопку Execute (Выполнить) либо нажав клавишу F5. Если значение параметра задано правильно, инструкция успешно выполнится. Настройка параметров восстановления, ведения журнала транзакций и проверки ошибок дискового ввода/вывода SQL Server 2005 имеет несколько параметров, позволяющих управлять восстанов-лением, ведением журналов транзакций и проверкой ошибок ввода/вывода. Чтобы управлять параметрами восстановления в SQL Server Management Studio, нужно использовать раскрывающиеся списки Recovery Model (Модель восстановления) и Page Verify (Проверка страниц) на странице Options (Параметры). Для управления этими параметрами посредством Тransact-SQL следует применить инструкции ALTER DATABASET SET RECOVERY и ALTER DATABASE SET PAGE_VERIFY. Параметр модели восстановления может принимать одно из трех значений. FULL Когда выбран режим восстановления FULL, транзакции полностью за-писываются в журнал транзакций, с помощью которого БД можно восстановить до точки сбоя или до конкретного момента времени. BULK_LOGGED При режиме восстановления BULK_LOGGED (который рань-ше управлялся параметром БД select into/bulk copy) некоторые инструкции SQL не записываются в журнал транзакций. Это инструкции SELECT INTO и BULK INSERT относительно постоянных таблиц, выполняющие быстрое массивное ко-пирование данных, а также UPDATETEXT или WRITETEXT с параметром, от-ключающим запись в журнал транзакций. Если задать это значение для модели восстановления и выполнить инструкции, которые обходят журнал транзакций, восстановить базу данных на основании журналов транзакций окажется невоз-можным, а инструкции BACKUP LOG будут запрещены. Вместо них следует ис-пользовать инструкцию BACKUP DATABASE, чтобы создать резервную копию всей БД, а затем и резервную копию журнала транзакций (при условии, что не выполняются инструкции, обходящие журналы транзакций). SIMPLE Если выбран режим восстановления SIMPLE (раньше управлялся через параметр БД trunc. log on chkpt), журнал транзакций может автоматически усе-каться. Такое значение позволяет очищать журнал, когда транзакции завершились. После очистки журнала транзакций выполнение команд BACKUP/RESTORE возможно только на уровне БД (а не с помощью журнала транзакций). Примечание Контрольные точки могут выполняться в разные моменты. Для каждой БД выполняется контрольная точка, когда служба SQL Server нормально завершает работу. Контрольные точки не выполняются при использовании инструкции SHUTDOWN WITH NOWAIT. Для отдельной базы данных выполняется контрольная точка, когда БД изменяется с помощью хранимой процедуры sp_dboption. SQL Server также автоматически выполня-ет контрольную точку для базы данных с целью обеспечения достижения назначенного интервала восстановления, а также в случае, когда журнал заполняется на 70 %. Примечание Журнал транзакций должен быть достаточно большим, чтобы хранить все активные транзакции. В противном случае откат транзакций невозможен. При составлении плана внедрения системы использовать этот параметр следует только в том случае, если можно полностью положиться на резервное копирование баз данных и не дополнять его резервным копированием журнала транзакций. Также нужно помнить, что для БД tempdb журнал транзакций всегда усекается при выполнении контрольной точки независимо от значения этого параметра.
184 Часть II Администрирование Microsoft SQL Server 2005 Ошибки дискового ввода/вывода могут привести к повреждению базы данных и обычно являются результатом аварийных отключений питания или отказов диско-вых аппаратных средств, возникающих при записи страницы на диск. Существует три значения параметра проверки страниц, позволяющие определить незавершенные транзакции ввода/вывода, причиной которых стали ошибки дискового ввода/вывода: CHECKSUM Когда параметр PAGE_VERIFY принимает это значение, для поиска незавершенных операций ввода/вывода, причиной которых стали ошибки диско-вого ввода/вывода, используются контрольные суммы. Вычисляется контрольная сумма для всего содержания страницы и записывается в заголовок страницы при ее записи на диск. При считывании страницы с диска контрольная сумма вы-числяется повторно и сравнивается с контрольной суммой, которая хранится в заголовке. Если возникают несовпадения, сообщение об ошибке 824 записывается как в журнал ошибок SQL Server, так и в журнал ошибок Windows. Последний можно просмотреть с помощью компонента панели управления Event Viewer (Про-смотр событий). Все ошибки ввода/вывода, выявленные операционной системой, заносятся в журнал с сообщением об ошибке 823. TORN_PAGE_DETECTION При таком значении параметра в каждом 512-байтном секторе 8-килобайтной страницы БД во время записи страницы на диск резерви-руется один бит. Если при считывании страницы бит находится в ошибочном со-стоянии, значит, страница была записана неправильно, то есть обнаружен ее обрыв. Когда SQL Server выявляет обрыв страницы на протяжении сеанса соединения пользователя, он отправляет сообщение об ошибке 824, указывающее на обрыв страницы, и разрывает соединение с пользователем. Если же обрыв страницы об-наруживается при восстановлении, он отмечает БД как подозрительную. В любом случае может потребоваться восстановить базу данных из резервной копии и затем применить резервные копии журналов транзакций. Совет Желая точно знать, успешно ли данные записаны на диск и записаны ли они вооб-ще, используйте энергонезависимую дисковую кэш-память. Но в этом случае не следует включать выявление обрывов страниц. NONE. Данное значение параметра означает, что последующие записи на диск не будут содержать контрольной суммы или бита обрыва, а страницы - проверяться при считывании, даже если раньше записанные страницы содержат контрольную сумму или бит обрыва. Примечание Предыдущие версии SQL Server использовали параметр TORN_PAGE_DETECTION для выявления ошибок ввода/вывода. И хотя он до сих пор поддерживается, обычно вместо него используется параметр PAGE_VERIFY. Когда параметр TORN_PAGE_ DETECTION включен и его значение равно TRUE (ON), SQL Server автоматически опреде-ляет незавершенные операции ввода/вывода как обрывы страниц. SQL Server 2005 также поддерживает запись в журналы транзакций дополни-тельной информации для использования продуктами сторонних производителей. Включить запись в журналы дополнительной информации можно, задав для пара-метра SUPPLEMENTAL_LOGGING значение TRUE (ON). Использование этого параметра добавляет множество информации в журналы, однако может повлиять на общую производительность. Просмотр, изменение и замещение параметров БД Хотя SQL Server Management Studio облегчает установку параметров баз данных, часто возникает необходимость просмотреть их или изменить с использованием ин-
Основные задачи администрирования БД Глава 7 185 струкций SQL: хранимой процедуры sp_dboption, отдельных инструкций SET или инструкции ALTER DATABASE. С их помощью можно решить следующие задачи. Вывод списка параметров Используйте инструкцию EXEC sp_dboption. Просмотр значений параметров БД Выполните инструкцию EXEC sp_dboption database_name, где database_name - имя БД, например EXEC sp_dboption Subs. Включение параметров БД Используйте инструкцию ALTER DATABASE database_name SET option_name, где database_name - имя базы данных, option_name - имя параметра, который устанавливается в состояние TRUE (ON). Задание конкретных значений параметров БД Примените инструкцию ALTER DATABASE database_name SET option_name option_value, где database_name - имя БД, option_name - имя устанавливаемого параметра, а option_value - его значение. Замещение параметров БД Посредством инструкции SET для отдельных со-единений или драйверов баз данных замените установки по умолчанию. Прове-рить параметры можно, используя функцию databaseproperty(). Дополнительная информация приведена в разделе "Работа с параметрами пакета инструкций/со-единения" главы 4. Примечание Хранимая процедура sp_dboption не должна использоваться для изменения БД master или tempdb. Она поддерживается только ради обратной совместимости и при-меняется преимущественно для вывода параметров баз данных. Вместо нее следует исполь-зовать, где возможно, инструкцию ALTER DATABASE для изменения параметров БД. Управление размерами БД и журналов транзакций В SQL Server 2005 управление размерами баз данных и журналов транзакций можно осуществлять автоматически или вручную. Настройки размеров БД и файлов журна-лов производятся с использованием SQL Server Management Studio или Transact-SQL. В этом разделе в основном рассматривается настройка посредством утилиты SQL Server Management Studio. Настройка SQL Server для автоматического управления размерами файлов Для настройки автоматического управления размером базы данных и журнала транзак-ций при помощи SQL Server Management Studio выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к нужному сер-веру, затем для этого сервера раскройте узел Databases (Базы данных). 2. Щелкните в контекстном меню базы данных, которую нужно настроить, команду Properties (Свойства). 3. В диалоговом окне Database Properties (Свойства базы данных) выберите страницу Files (Файлы) в списке Select a page (Выберите страницу). Все файлы данных и журналов транзакций, связанные с БД, перечислены в списке Database Files (Фай-лы базы данных). Для каждого файла данных или журнала транзакций выполните следующее. : Щелкните кнопку справа от поля Autogrowth (Автоматическое увеличение), чтобы настроить связанные параметры. Откроется диалоговое окно Change Autogrowth for. (Изменить автоматическое увеличение для.). : Укажите увеличение файла в процентах или мегабайтах, а затем установите значение, ограничивающее максимальный размер файла, либо разрешите не-ограниченное увеличение файла. : Щелкните кнопку ОК.
186 Часть II Администрирование Microsoft SQL Server 2005 4. Перейдите на страницу Options (Параметры) диалогового окна Database Properties (Свойства базы данных) и установите для параметра Auto Shrink (Автоматическое сжатие) значение True. При таком значении БД будет периодически уплотняться и сжиматься. 5. Щелкните кнопку ОК, когда закончите. Изменения вступают в силу сразу же, нет необходимости перезапускать сервер. Совет За рекомендациями относительно размеров БД и журналов транзакций обра-щайтесь к разделу "Создание БД в SQL Server Management Studio" этой главы. Расширение БД и журналов транзакций вручную Иногда нужно вручную изменить размер файла базы данных или журнала транзакций. Для этого выполните указанные дальше действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером, затем раскройте узел Databases (Базы данных). 2. Щелкните в контекстном меню базы данных, которую нужно настроить, команду Properties (Свойства). 3. В диалоговом окне Database Properties (Свойства базы данных) выберите страни-цу Files (Файлы) в списке Select a page (Выберите страницу). Все файлы данных и журналов транзакций, связанные с БД, перечислены в списке Database Files (Файлы базы данных). 4. Для расширения файла данных щелкните соответствующее поле Initial Size (Ис-ходный размер), а затем введите большее значение для размера файла. (Также можно создать новый дополнительный файл БД и определить для него размер. Преимуществом использования нового файла по сравнению с расширением суще-ствующего является то, что в этом случае SQL Server не будет блокировать файл БД, с которым в данный момент могут работать пользователи.) 5. Для расширения файла журнала транзакций щелкните соответствующее поле Initial Size (Исходный размер), а затем введите большее значение для размера файла в поле, которое станет доступным. (Также можно создать и определить размер для нового дополнительного файла журнала транзакций.) Примечание Для файлов данных и журнала транзакций новый размер должен быть больше текущей величины. В противном случае будет выведено сообщение об ошибке. Причиной ошибки является то, что для сжатия БД применяются другие средства. Деталь-ная информация об уменьшении размеров файлов приводится в разделе "Уплотнение и сжатие БД вручную" этой главы. 6. Щелкните кнопку ОК, чтобы внести изменения. Во время расширения базы данных SQL Server ее блокирует, тем самым закрывая доступ к ней. Совет Добавлять файлы можно и с помощью Transact-SQL. Для этого используйте ин-струкцию ALTER DATABASE. Дополнительная информация об этой инструкции приведена выше, в разделе "Изменение БД с использованием инструкции ALTER DATABASE". Уплотнение и сжатие БД вручную Уплотнение и сжатие баз данных несколько отличается от их расширения, и во многих случаях необходим более точный контроль этого процесса, чем тот, который пред-лагает параметр Auto Shrink (Автоматическое сжатие). К счастью, этим процессом можно управлять вручную, а также назначать периодическое выполнение.
Основные задачи администрирования БД Глава 7 187 Чтобы уплотнить или сжать вручную все файлы БД (как файлы данных, так и файлы журнала транзакций) в утилите SQL Server Management Studio, выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером, затем раскройте узел Databases (Базы данных). 2. Щелкните в контекстном меню базы данных, которую нужно настроить, команду Tasks\Shrink\Database (Задачи\Сжать\База данных). Отобразится диалоговое окно Shrink Database (Сжатие базы данных), показанное на рис. 7-5. Рис. 7-5. Диалоговое окно Shrink Database 3. Раздел Database size (Размер базы данных) в диалоговом окне показывает общее пространство, занимаемое файлами БД, а также объем свободного пространства внутри нее. Эта информация используется для принятия решения о необходимости сжатия БД. 4. Чтобы упорядочить страницы данных и переместить их в начало файлов данных, установите флажок Reorganize files before releasing unused space (Упорядочить фай-лы перед освобождением неиспользуемого пространства). Это уплотняет данные, но не удаляет пустые страницы. С помощью этого флажка решаются те же задачи, что и посредством инструкции DBCC SHRINKDATABASE и указания, сколько свободного пространства должно остаться в базе данных после сжатия. Если снять флажок, файлы БД сжимаются та-ким же образом, как и при использовании инструкции DBCC SHRINKDATABASE с параметром TRUNCATEONLY, а это означает, что размер файла уменьшается без перемещения данных и перераспределения строк на не выделенные страницы. Размеры файлов журналов транзакций уменьшаются не сразу, а только при соз-дании резервной копии журнала транзакций либо когда производится усечение 
188 Часть II Администрирование Microsoft SQL Server 2005 журнала транзакций, в зависимости от того, что произойдет первым. Также обычно невозможно сжать базу данных до меньшего размера, чем БД model (являющейся шаблоном БД). 5. Процент свободного пространства в БД указывается в поле Maximum free space in files after shrinking (Максимальное свободное пространство в файлах после сжатия). Используйте 0 %, если нужно удалить все свободное место из базы дан-ных, но помните, что при следующей операции записи БД может автоматически увеличиться. 6. Щелкните кнопку ОК, чтобы начать процесс сжатия, или перейдите к пункту 7 для назначения периодического сжатия БД. В это время SQL Server блокирует базу данных, тем самым запрещая доступ к ней. 7. Установки свойств, сделанные в этом диалоговом окне, сохраняются и являются уникальными для текущей БД. Если вы хотите использовать эти свойства для периодического сжатия базы данных, в меню кнопки Script (Сценарий), находя-щейся в верхней части диалогового окна, выберите команду Script Action to Job (Создать сценарий действия в виде задания). Теперь можно назначить выполнение этого задания, как описано дальше, в главе 15. Чтобы в утилите SQL Server Management Studio уплотнить или сжать вручную отдельные файлы БД, выполните приведенные дальше действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером и раскройте для него узел Databases (Базы данных). 2. Щелкните в контекстном меню БД, которую нужно настроить, команду Tasks\ Shrink\Files (Задачи\Сжать\Файлы). Отобразится диалоговое окно Shrink File (Сжатие файла), изображенное на рис. 7-6. Рис. 7-6. Диалоговое окно Shrink File
Основные задачи администрирования БД Глава 7 189 3. В раскрывающихся списках File type (Тип файла), Filegroup (Группа файлов) и File name (Имя файла) выберите файл данных или файл журнала транзакций, который нужно сжать. После этого будет выведена информация о выделенном и свободном пространстве, которая может пригодиться для принятия решения о не-обходимости сжатия файла. 4. В разделе Shrink action (Действие при сжатии) выберите из перечисленных ниже действий, выполняемых при сжатии (установив соответствующий переключатель), нужное в данный момент. : Release unused space (Освободить неиспользованное пространство) Отсе-кает свободное пространство в конце файла. Неиспользованное пространство освобождается, и размер файла уменьшается до последнего выделенного экстен-та. Размер файла уменьшается без перемещения данных и перераспределения строк на невыделенные страницы. Эту же задачу можно выполнить, исполь-зуя инструкцию DBCC SHRINKFILE с ключевым словом TRUNCATEONLY и указав файл назначения. : Reorganize files before releasing unused space (Упорядочить файлы перед освобождением неиспользуемого пространства) Упорядочивает страницы данных и перемещает их в начало файлов, что уплотняет данные, но не удаляет пустые страницы. Эту же задачу можно выполнить, используя инструкцию DBCC SHRINKFILE с указанием количества свободного пространства, кото-рое должно остаться в файле назначения после сжатия. После выбора этого варианта необходимо указать значение в поле Shrink file to (Сжать файл до). Размер не может быть меньше текущего выделенного пространства или больше всех выделенных экстентов. : Empty file by migrating the data to other files in the same filegroup (Очистить файл, переместив данные в другие файлы в той же группе файлов) Пе-ремещает данные из этого файла в другие этой же группы. Данный вариант эквивалентен выполнению инструкции DBCC SHRINKFILE с параметром EMPTYFILE и позволяет впоследствии удалить файл, используя инструкцию ALTER DATABASE. 5. Если вы хотите использовать установленные значения, чтобы сжать файл данных или файл журнала транзакций позже, в меню кнопки Script (Сценарий), находя-щейся в верхней части диалогового окна, выберите команду Script Action to Job (Создать сценарий действия в виде задания). Теперь укажите дату и время вы-полнения этого задания. 6. Щелкните кнопку ОК. Другим способом сжатия БД является использование Transact-SQL. Как показано в примере 7-3, для этого существуют две инструкции. Пример 7-3. Синтаксис инструкций DBCC SHRINKDATABASE и DBCC SHRINKFILE Синтаксис инструкции DBCC SHRINKDATABASE: DBCC SHRINKDATABASE ( database_name | database_id | 0 [ , target_percent ] [ , { NOTRUNCATE | TRUNCATEONLY } ] ) [ WITH NO_INFOMSGS ]
190 Часть II Администрирование Microsoft SQL Server 2005 Синтаксис инструкции DBCC SHRINKFILE: DBCC SHRINKFILE ( { logical_file_name | file_id } { [ , EMPTYFILE ] | [ [ , target_size ] [ , { NOTRUNCATE | TRUNCATEONLY } ] ] } ) [ WITH NO_INFOMSGS ] Инструкция DBCC SHRINKDATABASE используется для сжатия всей базы данных, а инструкция DBCC SHRINKFILE - для сжатия конкретного файла. По умолчанию они также уплотняют данные в БД. Это действие можно отменить, задав параметр TRUNCATEONLY или же указав, что нужно только уплотнить базу данных с помощью параметра NOTRUNCATE. Для подавления вывода информационных сообщений используйте параметр WITH NO_INFOMSGS. Представленная ниже инструкция уплотняет данные, а затем сжимает БД Customer, оставляя 30 % свободного пространства: DBCC SHRINKDATABASE ( Customer, 30 ) Следующие инструкции уплотняют, а затем сжимают отдельный файл в БД Customer, оставляя 5 Мбайт свободного пространства: USE Customer DBCC SHRINKFILE ( Customer_Data, 5 ) Примечание Инструкция DBCC SHRINKFILE является единственным способом сжать отдельные файлы данных и журналов транзакций до размера, меньшего, чем исходный. При использовании инструкции DBCC SHRINKFILE необходимо уменьшать каждый файл отдельно. Следует иметь в виду, что параметры усечения для команд DBCC SHRINKDATABASE и DBCC SHRINKFILE применяются только к файлам данных; выполнить усечение журналов транзакций с помощью этих инструкций невозможно. Управление БД Другие основные задачи администрирования включают переименование, удаление, отсоединение, копирование и перемещение БД. Они и будут рассмотрены в этом разделе. Переименование БД Изменить имя базы данных можно в SQL Server Management Studio или с помощью инструкции ALTER DATABASE MODIFY NAME. Задав для БД однопользователь-ский или автономный режим, в SQL Server Management Studio щелкните в кон-текстном меню базы данных команду Rename (Переименовать). На месте имени БД отобразится поле, где следует ввести новое имя и затем нажать клавишу Tab. Чтобы перевести базу данных в однопользовательский режим и переименовать ее, используя Тransact-SQL, выполните следующие действия. 1. Попросите всех пользователей отсоединиться от БД. Убедитесь, что все соединения с базой данных из SQL Server Management Studio закрыты. Если необходимо, при-нудительно завершите пользовательские процессы, как объяснялось в главе 5. 2. Откройте окно Query (Запрос) в SQL Server Management Studio, затем переве-дите БД в однопользовательский режим, как это показано ниже на примере БД Customer:
Основные задачи администрирования БД Глава 7 191 USE master ALTER DATABASE Customer SET SINGLE_USER GO Примечание Команды в окне Query (Запрос) выполняются щелчком кнопки Execute (Вы-полнить) в панели инструментов или нажатием клавиши F5. При использовании утилиты SQLCMD инструкции можно выполнять, вводя команду GO. 3. Переименуйте базу данных, используя инструкцию ALTER DATABASE. В следу-ющем примере БД Customer переименована в cust: ALTER DATABASE Customer MODIFY NAME = cust GO 4. После выполнения инструкций SQL переведите базу данных обратно в много-пользовательский режим, как показано ниже на примере БД cust: ALTER DATABASE cust SET multi_user GO 5. Убедитесь, что все инструкции, сценарии, приложения и процессы, использующие старое имя базы данных, теперь указывают на ее новое имя. Если этого не сделать, возникнут проблемы с использованием БД. Удаление БД При удалении базы данных с сервера удаляются и все связанные с ней файлы, поэтому восстановить БД после этого без использования резервной копии невозможно. Что-бы удалить ссылки на базу данных без удаления файлов БД, используйте хранимую процедуру sp_detach_db, как описано ниже в этом разделе. Нельзя удалить системные БД, а также базы данных, используемые в данный мо-мент SQL Server или другими пользователями. БД может удаляться независимо от состояния. Однако перед ее удалением следует остановить репликацию или удалить все моментальные снимки. Кроме того, если база данных настроена для передачи журналов транзакций, перед удалением необходимо отключить эту возможность. Также важно помнить, что удаленная БД может быть повторно создана только при помощи восстановления из резервной копии. После удаления базы данных необходимо создать резервную копию БД master. Для того чтобы удалить базу данных, выполните следующие действия. 1. Выберите в контекстном меню БД, которую нужно удалить, команду Delete (Уда-лить). Откроется диалоговое окно Delete Object (Удаление объекта). 2. Для удаления информации о резервных копиях и истории из БД msdb установите флажок Delete backup and restore history information for databases (Удалить инфор-мацию о резервном копировании и восстановлении для баз данных). 3. Чтобы перед удалением закрыть существующие соединения с базой данных, уста-новите флажок Close existing connections (Закрыть существующие соединения). Примечание Невозможно удалить базу данных, которая используется SQL Server или другими пользователями, если БД восстанавливается из резервной копии, опубликована для репликации или когда существуют активные сеансы пользователей.
192 Часть II Администрирование Microsoft SQL Server 2005 4. Щелкните кнопку ОК. Дополнительно создайте резервную копию БД master, как описано в главе 14. Резервная копия БД master создается с целью сохранения более новой системной информации, а также для того, чтобы информация об удаленной базе данных случайно не была восстановлена при последующем восстановлении из резервной копии БД master. Удалять базы данных можно также, используя инструкцию DROP DATABASE. Синтаксис и использование этой инструкции приводятся в примере 7-4. Пример 7-4. Синтаксис и использование инструкции DROP DATABASE Синтаксис: DROP DATABASE { database_name | database_snapshot_name } [ ,..n ] Использование: USE master ALTER DATABASE Customer SET SINGLE_USER GO DROP DATABASE Customer GO Присоединение и отсоединение БД Операции присоединения и отсоединения БД в основном предназначены для пере-мещения файлов баз данных или отключения БД без удаления файлов. При отсо-единении базы данных удаляются ссылки на сервер в БД master, но не удаляются связанные файлы БД. Отсоединенные базы данных не отображаются в SQL Server Management Studio и являются недоступными для пользователей. Если возникает необходимость повторно использовать базу данных, ее можно снова присоединить. Присоединение БД создает новую БД, которая ссылается на данные, хранящиеся в существующих файлах данных и файлах журналов транзакций. Перед отсоединением БД следует убедиться, что не выполняется ни одно из пере-численных ниже условий. Существует моментальный снимок этой БД Перед отсоединением базы данных необходимо удалить все ее моментальные снимки. Однако отсоединить или при-соединить моментальные снимки нельзя. БД участвует в процессе зеркального отображения Требуется остановить про-цесс, а затем завершить сеанс зеркального отображения базы данных. БД реплицирована и опубликована Если база данных реплицирована, она не должна быть опубликованной. Перед отсоединением следует отключить публикацию, выполнив хранимые процедуры sp_replicationdboption или sp_removedbreplication. БД обозначена как подозрительная Базу данных необходимо перевести в режим EMERGENCY, а затем отсоединить. Обычно присоединение базы данных возвращает ее в состояние, в котором она находилась перед отсоединением. Однако когда БД присоединяется, SQL Server 2005 отключает для нее использование цепочек принадлежности между базами данных и устанавливает значение OFF параметру TRUSTWORTHY. При необходимости эти возможности можно повторно включить (см. раздел "Управление параметрами цепо-чек принадлежности между БД и доступом к внешним ресурсам" этой главы).
Основные задачи администрирования БД Глава 7 193 При присоединении БД все основные и дополнительные файлы данных должны быть доступными. Если путь к одному из файлов данных отличается от пути к нему при создании БД или при последнем ее присоединении, необходимо указать текущий путь. Отсоединение БД При отсоединении базы данных можно указать, следует ли перед этим обновить статистику, что будет облегчать использование БД на носителях, доступных только для чтения. Если же использование подобных средств не планируется, в обновлении статистики нет необходимости. При обновлении статистики необходимо установить для флага skipchecks значение TRUE. Так как с базами данных в SQL Server 2005 связаны полнотекстовые каталоги, су-ществует возможность контролировать, сохраняются они или удаляются при операции отсоединения. По умолчанию полнотекстовые каталоги сохраняются как часть БД. Чтобы удалить каталоги, задайте флагу keepfulltextindexfile значение FALSE. База данных отсоединяется с помощью хранимой процедуры sp_detach_db, как показано в примере 7-5*. Пример 7-5. Синтаксис и использование хранимой процедуры sp_detach_db Синтаксис: sp_detach_db [ @dbname = ] 'database_name' [ , [ @skipchecks = ] 'skipchecks' ] [ , [ @KeepFulltextIndexFile = ] 'KeepFulltextIndexFile' ] Использование: EXEC sp_detach_db 'sample', 'TRUE' Примечание Системные базы данных отсоединять нельзя, а пользовательские можно, только когда они не используются. Кроме этого, перед отсоединением пользовательской БД может понадобиться закрыть все текущие соединения, перевести базу данных в одно-пользовательский режим, а затем выполнить операцию отсоединения. Присоединение БД, использующей несколько файлов При повторном присоединении базы данных используйте инструкцию CREATE DATABASE с ключевым словом FOR ATTACH. Чтобы она выполнилась успешно, все основные и дополнительные файлы данных должны быть доступны. Если БД содержит несколько файлов журналов транзакций, они тоже должны быть доступ-ны. Исключением является только БД, доступная для чтения и записи, у которой недоступен ее единственный файл журнала транзакций. Если база данных перед отсоединением была закрыта без открытых сеансов пользователей или транзакций, при использовании предложения FOR ATTACH файл журнала транзакций будет автоматически перестроен и файл данных соответствующим образом обновлен. Файл журнала транза кций для БД, доступной только для чтения, нельзя перестроить, по-скольку файл данных не может быть обновлен. Файлы журналов или файлы данных необходимо указывать в предложении FOR ATTACH. * Возможно, более удобным способом является использование SQL Server Management Studio. Для отсоединения базы данных нужно в контекстном меню базы данных выбрать команду Tasks\ Detach (Задачи\Отсоединить). - Прим. ред.
194 Часть II Администрирование Microsoft SQL Server 2005 Все полнотекстовые каталоги, являющиеся частью присоединяемой базы данных, будут присоединены вместе с ней. Чтобы назначить новый путь к полнотекстовому каталогу, можно указать файл каталога, задав его папку без имени файла. При использовании инструкции CREATE DATABASE с предложением FOR ATTACH можно задавать только имя основного файла. Этот файл содержит указатели на исходные расположения всех других файлов БД. Если же их расположение не из-менилось, можно задать только имя основного файла и разрешить ядру баз данных использовать его для отыскания остальных файлов. В примере 7-6 показан код для присоединения БД при помощи инструкции CREATE DATABASE с предложением FOR ATTACH. Пример 7-6. Синтаксис и использование инструкции CREATE DATABASE с ключом FOR ATTACH Синтаксис: CREATE DATABASE database_name ON <filespec> [ ,...n ] FOR { ATTACH [ WITH <service_broker_option> ] | ATTACH_REBUILD_LOG } [ ; ] <filespec> ::= { ( NAME = logical_file_name, FILENAME = 'os_file_name' [ , SIZE = size [ KB | MB | GB | TB ] ] [ , MAXSIZE = { max_size [ KB | MB | GB | TB ] | UNLIMITED } ] [ , FILEGROWTH = growth_increment [ KB | MB | % ] ] ) } Использование: CREATE DATABASE Customer ON ( FILENAME = 'c:\data\customer_data.mdf' ) FOR ATTACH GO Присоединение БД без журнала транзакций Старые журналы транзакций могут оказаться ненужными в новой БД. В этом случае можно восстановить только файлы данных и позволить SQL Server создать новые файлы журналов. Для этого используется инструкция CREATE DATABASE с ключом FOR ATTACH_REBUILD_LOG, как показано в примере 7-7. Пример 7-7. Синтаксис и использование инструкции CREATE DATABASE с ключом FOR ATTACH_REBUILD_LOG Синтаксис: CREATE DATABASE database_name ON <filespec> [ ,...n ] FOR ATTACH_REBUILD_LOG [ ; ] <filespec> ::= { ( NAME = logical_file_name,
Основные задачи администрирования БД Глава 7 195 FILENAME = 'os_file_name' [ , SIZE = size [ KB | MB | GB | TB ] ] [ , MAXSIZE = { max_size [ KB | MB | GB | TB ] | UNLIMITED } ] [ , FILEGROWTH = growth_increment [ KB | MB | % ] ] ) } Использование: CREATE DATABASE Customer ON ( FILENAME = 'c:\data\customer_data.mdf' ) FOR ATTACH_REBUILD_LOG GO Советы и приемы работы Все опытные администраторы имеют в запасе пару-тройку "секретных" приемов, по-зволяющих им более эффективно управлять базами данных и обеспечивать беспере-бойное функционирование системы. Дальше приводятся некоторые советы, которые помогут при администрировании БД. Копирование и перемещение БД Все базы данных, кроме БД model, msdb и master, могут быть скопированы и перемеще-ны с помощью Copy Database Wizard (Мастера копирования базы данных). Благодаря ему можно создать копию какой-либо базы данных, копировать и перемещать БД между разными экземплярами Microsoft SQL Server, а также обновлять базы данных SQL Server 2000 до SQL Server 2005. Мастер копирования базы данных использует один из двух способов для операций копирования и перемещения. Отсоединение и присоединение Это самый быстрый способ копирования баз данных, но он требует перевода исходной БД в автономный режим, чтобы ее можно было отсоединить и скопировать/переместить. По завершении операции копиро-вания/перемещения база данных снова присоединяется. Для использования этого способа необходимо быть членом роли сервера sysadmin как на исходном сервере, так и на сервере назначения. Также перед началом операции копирования БД необходимо перевести в однопользовательский режим, чтобы гарантировать от-сутствие активных сеансов соединения. Если есть активные сеансы пользователей, мастер копирования базы данных не будет выполнять операцию копирования или перемещения. Объект управления SQL Server Этот метод медленнее, но он не требует пере-вода базы данных в автономный режим. Для его использования необходимо быть владельцем исходной БД и иметь разрешение CREATE DATABASE или быть членом встроенной роли сервера dbcreator. Нет необходимости переводить базу данных в однопользовательский режим перед началом операции копирования/перемещения. Активные подключения разрешены, так как БД не переводится в автономный режим. Примечание Операция копирования/перемещения сохраняет полнотекстовые каталоги, если исходный сервер и сервер назначения являются серверами SQL Server 2005. Но в том случае, когда исходный сервер является сервером SQL Server 2000, полнотексто-вые каталоги необходимо заново перестроить и заполнить после завершения операции копирования/перемещения.
196 Часть II Администрирование Microsoft SQL Server 2005 При перемещении базы данных между серверами или дисковыми накопителями Copy Database Wizard (Мастер копирования базы данных) копирует БД на сервер назначения и проверяет, чтобы она была в оперативном режиме. Когда база данных перемещается между двумя экземплярами сервера на одном компьютере, выполняется операция перемещения файлов в файловой системе. Если выбрано перемещение БД, мастер копирования базы данных по завершении операции перемещения автомати-чески удаляет исходную базу данных. Если же выполняется операция копирования, мастер не удаляет исходную БД. Чтобы скопировать или переместить базу данных, выполните следующую после-довательность действий. 1. В панели Object Explorer (Обозреватель объектов) SQL Server Management Studio выберите команду Tasks\Copy Database (Задачи\Копировать базу данных) в кон-текстном меню БД. 2. Когда запустится мастер копирования базы данных, щелкните кнопку Next (Далее). 3. На странице Select A Source Server (Выбор исходного сервера) укажите сервер, где находится база данных, которую нужно скопировать или переместить (рис. 7-7). Введите имя исходного сервера, например CORPSVR09. Или же щелкните кнопку справа от поля Source server (Исходный сервер), чтобы просмотреть список до-ступных серверов. Рис. 7-7. Страница Select a Source Server окна Copy Database Wizard 4. По умолчанию используется аутентификация Windows. Это означает, что для про-верки необходимых разрешений применяются параметры текущей учетной записи. Если надо использовать аутентификацию SQL Server, установите переключатель 
Основные задачи администрирования БД Глава 7 197 в положение Use SQL Server Authentication (Использовать аутентификация SQL Server) и введите в ставшие доступными поля имя пользователя и пароль. Щел-кните кнопку Next (Далее). 5. На странице Select a Destination Server (Выбор сервера назначения) укажите сервер, на который следует переместить или скопировать выбранную базу дан-ных, затем укажите используемый метод аутентификации. Щелкните кнопку Next (Далее). Примечание На сервере назначения должен быть запущен SQL Server Agent (Агент SQL Server). 6. Выберите метод переноса. Для этого установите переключатель либо в положение Use the detach and attach method (Использовать метод отсоединения и присоеди-нения), либо в положение Use the SQL Management Object method (Использовать метод объектов управления SQL Server). Если выбран метод отсоединения и при-соединения базы данных, в случае ошибки исходная БД автоматически будет снова присоединена. Чтобы избежать этого, снимите флажок If a failure occurs, reattach the source database (Присоединять базу данных при возникновении ошибки). Щел-кните кнопку Next (Далее). 7. Как показано на рис. 7-8, теперь можно выбрать базу данных, которую необходимо скопировать или переместить. Щелкните кнопку Next (Далее). Рис. 7-8. Страница Select Databases окна Copy Database Wizard 8. Используйте страницу Configure Destination Database (Настройка базы данных назначения), показанную на рис. 7-9, для определения конфигурации назначения 
198 Часть II Администрирование Microsoft SQL Server 2005 каждой копируемой или перемещаемой БД. Особое внимание следует уделить по-лям Source database (Исходная база данных) и Destination database (База данных назначения). В поле Source database (Исходная база данных) выводится текущее имя БД на сервере-источнике. В поле Destination database (База данных назначе-ния) задается имя БД, которое будет использоваться на сервере назначения. 9. Все файлы данных или журналов транзакций, связанные с БД, показаны вместе с их целевыми папками и именами файлов. Расположение по умолчанию можно изменить, введя новое значение. Если копия базы данных создается на том же экземпляре сервера, который является и исходным, измените имя БД и имена ее файлов. Рис. 7-9. Страница Configure Destination Database окна Copy Database Wizard 10. По умолчанию перенос прекращается, если база данных назначения уже существу-ет. Можно удалить существующую БД и принудительно продолжить передачу, установив переключатель в положение Drop any database on the destination server. (Удалить базу данных на сервере назначения.). 11. Щелкните кнопку Next (Далее). Если осуществляется копирование или пере-мещение сразу нескольких баз данных, страница Configure Destination Database (Настройка базы данных назначения) будет выведена для каждой БД. 12. После того как все базы данных назначения будут настроены, отобразится стра-ница Configure the Package (Настройка пакета). Задайте по своему усмотрению имя пакета и параметры ведения журнала ошибок, затем щелкните кнопку Next (Далее). 13. Теперь на странице Schedule the Package (Назначьте расписание для пакета) можно указать, выполнять ли задание сейчас или назначить для этого более поздний срок. 
Основные задачи администрирования БД Глава 7 199 В первом случае установите флажок Run immediately (Выполнить немедленно). Для выбора другого времени установите переключатель в положение Schedule (Расписание) и щелкните кнопку Change schedule (Изменить расписание). По-сле этого можно назначить выполнение этой задачи в качестве нового задания. Более детальную информацию о назначении расписания для заданий вы найдете в главе 15. 14. Щелкните кнопку Next (Далее). Просмотрите выбранные параметры, затем щел-кните кнопку Finish (Готово). Мастер выполнит задачи по подготовке и созданию пакета копирования/перемещения. Если во время выполнения этих заданий воз-никнет критическая ошибка, операция тоже завершится ошибкой, и нужно будет просмотреть отчет, чтобы обнаружить, какая именно ошибка произошла и как ее устранить. Перемещение БД С помощью инструкции ALTER DATABASE можно перемещать файлы всех систем-ных и пользовательских баз данных, кроме файлов БД Resource. Чтобы переместить файл, нужно указать его текущее логическое имя и новый путь, включающий новое имя файла. Таким способом можно перемещать файлы по одному. Чтобы переместить файлы данных или файлы журналов транзакций, выполните следующие действия. 1. Выясните логические имена файлов данных и файлов журналов транзакций, свя-занных с БД, с помощью таких инструкций: USE master SELECT name, physical_name FROM sys.master_files WHERE database_id = db_id( 'database_name' ); 2. Переведите нужную БД в автономный режим: ALTER DATABASE database_name SET OFFLINE 3. Переместите файлы по одному: ALTER DATABASE database_name MODIFY FILE ( NAME = logical_file_name, FILENAME = 'os_file_name' ) 4. Повторите предыдущий пункт для каждого файла данных или файла журнала транзакций. 5. Переведите БД в оперативный режим: ALTER DATABASE database_name SET ONLINE GO Проверить изменения можно, введя: USE master SELECT name, physical_name FROM sys.master_files WHERE database_id = db_id( 'database_name' );
200 Часть II Администрирование Microsoft SQL Server 2005 Полнотекстовые каталоги также можно перемещать, используя их логические имена. Однако при задании нового размещения каталога следует задавать новый путь (далее в примере - это параметр new_path) без указания имени файла. Чтобы переместить файл полнотекстового каталога в новое место, выполните следующие действия. 1. Переведите нужную БД в автономный режим: ALTER DATABASE database_name SET OFFLINE GO 2. Переместите файлы по одному: ALTER DATABASE database_name MODIFY FILE ( NAME = logical_file_name, FILENAME = 'new_path/file_name' ) GO 3. Если необходимо, повторите предыдущий пункт, чтобы переместить другие файлы полнотекстовых каталогов. 4. Переведите БД в оперативный режим: ALTER DATABASE database_name SET ONLINE GO Перемещение и изменение размера БД tempdb База данных tempdb содержит временные таблицы, созданные SQL Server и пользова-телями. SQL Server 2005 не сохраняет транзакции полностью для временных таблиц в БД tempdb. Для временных таблиц SQL Server 2005 хранит только информацию, которой достаточно для отката транзакции, но недостаточно для ее повтора. БД tempdb создается каждый раз при запуске службы SQL Server, что обеспечивает создание базы данных с чистого листа. Как и для других БД, структура по умолчанию БД tempdb базируется на БД model. Это означает, что при каждом запуске службы SQL Server создается моментальный снимок текущей БД model, который применяется к БД tempdb. По умолчанию основной файл БД tempdb имеет размер 8 Мбайт и настроен на автоматическое увеличение на 10 % в случае необходимости. На загруженном серве-ре 8 Мбайт могут быстро заполниться, и в результате сервер будет часто расширять БД tempdb, что приведет к ее блокированию SQL Server. Это замедлит выполнение запросов и увеличит время отклика сервера. Ниже приводятся некоторые способы повышения производительности БД tempdb. Расширьте БД tempdb, чтобы она соответствовала потребностям в пространстве во время периодов высокой загрузки (следуйте инструкциям раздела "Расширение БД и журналов транзакций вручную" этой главы). Даже если БД model имеет меньший размер, рассматриваемая база данных будет сохранять новый размер. По умолчанию БД tempdb хранится там же, где и остальные данные. Для разреше-ния проблем производительности можно создать дополнительный файл данных для БД tempdb и поместить его на отдельном дисковом накопителе. Или же пере-местить БД tempdb и все связанные с ней файлы в новое место. Чтобы переместить отдельные или все файлы БД tempdb, выполните указанные ниже действия.
Основные задачи администрирования БД Глава 7 201 1. Выясните логические имена файлов данных и журналов, связанных с БД tempdb, выполнив: USE master SELECT name, physical_name FROM sys.master_files WHERE database_id = db_id( 'tempdb' ); GO 2. Переместите файлы данных и журналов транзакций по одному в новое место рас-положения с помощью таких инструкций: USE master GO ALTER DATABASE tempdb MODIFY FILE ( NAME = logical_file_name, FILENAME = 'new_path/file_name' ) GO 3. Если необходимо, повторите предыдущий пункт, чтобы переместить другие файлы данных или файлы журналов транзакций. 4. Остановите и заново запустите SQL Server. Проверить изменения можно таким образом: USE master SELECT name, physical_name FROM sys.master_files WHERE database_id = db_id( 'tempdb' ); Создание дополнительных файлов данных и журналов транзакций Дополнительные файлы данных и журналов могут повысить производительность за-груженных баз данных, а также облегчить администрирование больших БД. Иногда дополнительные файлы создают, чтобы распределить нагрузку между несколькими дисковыми накопителями. Например, основные файлы можно поместить на диск D, дополнительные - на диск E, а журналы транзакций-на диск F. За рекомендациями по использованию дисковых накопителей и массивов RAID обращайтесь к разделу "SQL Server 2005 и требования к аппаратному обеспечению" главы 1. Другой причиной для создания дополнительных файлов является облегчение вос-становления из резервной копии больших баз данных. Например, если БД объемом 10 Гбайт хранится в одном файле, ее можно восстановить в случае отказа только на диск того же объема, которого может и не оказаться в наличии. А если бы вы создали несколько меньших файлов БД, например объемом по 2 Гбайт, то восстановить их на диски меньшей емкости гораздо проще. Для создания дополнительных файлов данных и файлов журналов выполните указанные действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером, затем раскройте для него узел Databases (Базы данных).
202 Часть II Администрирование Microsoft SQL Server 2005 2. Щелкните в контекстном меню БД, которой нужно управлять, команду Properties (Свойства). Откроется диалоговое окно Database Properties (Свойства базы данных). 3. В этом окне выберите страницу Files (Файлы) в списке Select a page (Выберите страницу). 4. Чтобы добавить дополнительный файл данных, щелкните кнопку Add (Добавить). Затем в списке Database Files (Файлы базы данных) введите имя нового файла, например Personnel_Data2 или Personnel_Log2. 5. Задайте тип файла, выбрав в раскрывающемся списке File Type (Тип файла): : элемент Data (Данные) - в случае создания нового файла данных; : элемент Log (Журнал) - для нового файла журнала. 6. Укажите исходный размер файла, а затем щелкните кнопку справа от поля Autogrowth (Автоматическое увеличение). 7. Теперь можно назначить параметры автоматического увеличения для нового файла данных или журнала транзакций. 8. Щелкните кнопку справа от поля Path (Путь), чтобы выбрать новый путь, или введите его непосредственно в поле. Имя файла создается на основе логического имени и типа файла. 9. Для подтверждения всех внесенных изменений щелкните кнопку ОК. Предупреждение ошибок журнала транзакций Журнал транзакций важен для бесперебойной работы SQL Server. Если он переполня-ется или отказ журнала происходит по каким-либо другим причинам, SQL Server не сможет обрабатывать большинство типов запросов. Следующие приемы обеспечивают бесперебойную работу журнала транзакций. Для уменьшения нагрузки на журнал транзакций используйте инструкции SQL, которые не вносятся в журнал. Это делает журналы транзакций недействитель-ными (подробно данный прием объясняется в главе 15). Чтобы обеспечить периодическую очистку журнала, задайте параметру БД Recovery Model (Модель восстановления) значение Simple. Это делает журналы транзакций недействительными (см. главу 15). Во избежание отсутствия в журнале свободного места, не устанавливайте макси-мальный размер файла; в то же время увеличьте частоту создания резервных копий журнала транзакций и внимательно следите за количеством свободного места на диске. Дабы обеспечить восстановление транзакций, увеличьте постоянный размер жур-нала транзакций и частоту выполнения резервного копирования журнала тран-закций. Предупреждение ошибки заполнения группы файлов В тех случаях, когда невозможно произвести запись в файл данных, выводится со-общение об ошибке Filegroup Is Full (Группа файлов заполнена). Это происходит либо когда размер файла данных достиг максимальной величины, либо при отсутствии в файле свободного пространства. Следующие приемы уменьшают вероятность по-явления этой ошибки: не задавайте максимальный размер файлов; внимательно следите за свободным пространством на диске;
Основные задачи администрирования БД Глава 7 203 назначьте периодическое уплотнение файлов данных; удалите неиспользуемые таблицы, индексы или объекты. Создание нового шаблона БД БД model используется как шаблон для всех новых баз данных. Если изменить пара-метры и свойства БД model, все новые базы данных, созданные на сервере, наследуют эти параметры и свойства.
Глава 8 Управление системой безопасности SQL Server 2005 Все чаще SQL Server используется не только для поддержки деловых процессов внутри предприятий, но и для организации доступа к внутренней информации извне. В ситуации, когда сотрудники, поставщики или сторонние пользователи получают доступ к БД предприятия, задача администратора заключается в эффективном управ-лении данным процессом. Это достигается посредством создания соответствующих пользовательских учетных записей, предоставления им необходимых разрешений и назначения ролей. Выданные разрешения и назначенные роли определяют действия, которые могут выполнять пользователи, а также тип информации, к какой они могут иметь доступ. Среди первоочередных задач управления системой безопасности на-зовем следующие. Нахождение разумного компромисса между потребностями пользователей в до-ступе к данным и необходимостью защиты от несанкционированного к ним до-ступа. Ограничение прав доступа к БД до оптимального минимума, что позволяет снизить вероятность выполнения пользователями разрушительных по своим последствиям команд и процедур (злонамеренно или случайно). Закрытие некоторых уязвимых мест в системе безопасности, например ограничение прав доступа тем пользователям Windows, которые состоят в группе Administrators (Администраторы), но не должны иметь административных полномочий в SQL Server. Обзор системы безопасности SQL Server 2005 В SQL Server 2005 любой объект БД находится в какой-либо схеме (schema). Каж-дой схемой могут владеть не только индивидуальные пользователи, но и роли, что позволяет упростить организацию управления объектами базы данных множеством пользователей. Также это решает проблему предыдущих версий SQL Server, в которых пользователь не мог быть удален из БД, пока все объекты, владельцем которых он являлся, не переназначались во владение другим пользователям. Теперь же требуется изменить лишь владельца схемы, а не каждого объекта. Работа с участниками безопасности и защищаемыми объектами В SQL Server 2005 широко применяются такие понятия, как участник безопасности и защищаемый объект. Сущность, которая может запросить ресурс сервера, базы данных или схемы, называется участником безопасности (security principal). Каждый из них имеет уникальный идентификатор безопасности (SID, security identifier). Участник безопасности управляется на трех уровнях: Windows, SQL Server и БД. Уровень, на котором участник безопасности определен, устанавливает пределы его области влияния. Обычно участники безопасности уровня Windows и SQL Server имеют область влияния, распространяющуюся на весь экземпляр сервера баз дан-
Управление системой безопасности SQL Server 2005 Глава 8 205 ных, а участники безопасности уровня БД ограничены в своих действиях рамками определенной базы данных. В табл. 8-1 приведен список участников безопасности на каждом уровне. Некото-рые из них, например группы Windows, роли базы данных и роли приложений, могут включать других участников безопасности, называемых коллекциями (collections). Каждый пользователь БД состоит в специальной роли базы данных public. Если пользователю не были явно разрешены или запрещены определенные действия над защищаемым объектом, он наследует разрешения на выполнение действий, предо-ставленные роли public. Табл. 8-1. Уровни системы безопасности SQL Server и их участники Уровень системы безопасности Включенные участники Уровень Windows Учетная запись домена Windows Локальная учетная запись Windows Группа Windows Уровень SQL Server Роль сервера Учетная запись SQL Server Учетная запись SQL Server, сопоставленная с асимметричным ключом Учетная запись SQL Server, сопоставленная с сертификатом Учетная запись SQL Server, сопоставленная с учетной записью Windows Уровень БД Пользователь БД Пользователь БД, сопоставленный с асимметричным ключом Пользователь БД, сопоставленный с сертификатом Пользователь БД, сопоставленный с учетной записью Windows Роль приложения Роль БД Специальная роль БД public Участникам безопасности могут быть выданы определенные разрешения на ие-рархические коллекции сущностей, называемые защищаемыми объектами (securable objects; securables). Как видно из табл. 8-2, тремя защищаемыми объектами верхнего уровня являются сервер, база данных и схема. Каждый из них тоже содержит защи-щаемые объекты, которые, в свою очередь, имеют другие защищаемые объекты. Эти иерархии объектов, вложенные одна в другую, носят название областей действия (scopes). Таким образом, основными областями действия в SQL Server являются сервер, база данных и схема. Табл. 8-2. Области действия защищаемых объектов SQL Server и содержащиеся в них объекты Область действия защищаемых объектов Содержащиеся защищаемые объекты Сервер Текущий экземпляр сервера БД Конечная точка Учетная запись Роль сервера БД Роль приложения Сборка Асимметричный ключ Сертификат (см. след. стр.)
206 Часть II Администрирование Microsoft SQL Server 2005 Область действия защищаемых объектов Содержащиеся защищаемые объекты БД Контракт Роль БД Полнотекстовый каталог Тип сообщения Привязка к удаленной службе Путь Схема Служба Симметричный ключ Пользователь Схема Агрегатная функция Функция Процедура Очередь Синоним Таблица Тип данных Представление Коллекция схем XML Понятие о разрешениях на защищаемые объекты Для каждого защищаемого объекта в SQL Server 2005 определен ассоциированный набор разрешений, которые могут быть даны участнику безопасности. Эти разреше-ния начинаются с ключевого слова или слов (табл. 8-3), определяющих предостав-ляемые права. Табл. 8-3. Ключевые слова разрешений и описание их действия Ключевые слова Предоставляемое разрешение на. В первую очередь применяется к... ALTER ANY <database>* Создание (CREATE), изменение (ALTER) и удаление (DROP) индивидуальных объек тов БД. Например, предоставление участнику без-опасности разрешения ALTER ANY SCHEMA на БД дает ему возможность создавать, изме-нять или удалять любую схему в БД ALTER Изменение свойств отдельного объекта, кроме права назначения его владельца. Когда предо-ставленное участнику безопасности разреше-ние ограничено областью действия, он имеет возможность изменять (ALTER), создавать (CREATE) или удалять (DROP) любой объект, содержащийся в этой области дей-ствия. Например, разрешение ALTER на схему дает участнику безопасности возмож-ность создавать, изменять или удалять любой объект в этой схеме Хранимым процеду-рам, очередям Service Broker (Брокер служб), функциям, синонимам, таблицам и представлениям * Под <database> здесь имеется в виду не конкретная база данных, а какой-либо класс объек-тов, для которого БД является областью действия. Аналогично для других элементов табли-цы. - Прим. ред. Табл. 8-2. (окончание)
Управление системой безопасности SQL Server 2005 Глава 8 207 Ключевые слова Предоставляемое разрешение на. В первую очередь применяется к... ALTER ANY <server> Создание (CREATE), изменение (ALTER) и удаление (DROP) индивидуальных объ-ектов сервера. Так, предоставление участнику безопасности разрешения ALTER ANY LOGIN для сервера дает ему возможность создавать, изменять или удалять любую учетную запись на этом экземпляре сервера BACKUP/DUMP Выполнение резервного копирования (дампа) CONTROL Предоставляет права, подобные правам вла-дения. Участник безопасности обладает всеми разрешениями на объект и может их предо-ставлять другим пользователям. При назна-чении разрешений CONTROL учитывайте иерархическую модель системы безопасности. Предоставление разрешения CONTROL в определенной области действия неявно вклю-чает применение разрешения CONTROL на все объекты в этой области действия. К при-меру, разрешение CONTROL на БД неявно разрешает все действия над ней, а также над всеми сборками и схемами в БД и всеми объектами во всех схемах Хранимым проце-дурам, функциям, синонимам, очередям Service Broker (Брокер служб), таблицам и представлениям CREATE <database_ securable> Создание объекта БД CREATE <schema_ contained_securable> Создание объекта, содержащегося в схеме. Помните, что для создания объекта в опреде-ленной схеме необходимо обладать разреше-нием ALTER на конкретную схему CREATE <server_ securable> Создание объекта сервера DELETE Удаление объекта Синонимам, таблицам и представлениям EXECUTE Выполнение объекта Хранимым процедурам, функциям и синонимам IMPERSONATE <login> Олицетворение учетной записи IMPERSONATE <user> Олицетворение пользователя БД INSERT Добавление данных в объект Синонимам, таблицам и представлениям RECEIVE Получение сообщений Service Broker (Брокер служб) Очередям Service Broker (Брокер служб) REFERENCES Возможность ссылаться на объект Функциям, очередям Service Broker (Брокер служб), таблицам и представлениям RESTORE/LOAD Восстановление (загрузку) SELECT Просмотр данных, хранящихся в объекте Синонимам, таблицам, табличным функциям и представлениям Табл. 8-3. (продолжение) (см. след. стр.)
208 Часть II Администрирование Microsoft SQL Server 2005 Ключевые слова Предоставляемое разрешение на. В первую очередь применяется к... TAKE OWNERSHIP Возможность стать владельцем объекта Хранимым процеду-рам, функциям, си-нонимам, таблицам и представлениям UPDATE Изменение данных, хранящихся в объекте Синонимам, таблицам и представлениям VIEW DEFINITION Просмотр определений объекта Хранимым процеду-рам, очередям Service Broker (Брокер служб), функциям, синонимам, таблицам и представлениям Просмотр разрешений на защищаемые объекты Для просмотра разрешений на защищаемые объекты можно использовать такие функ-ции: sys.fn_builtin_permissions(), has_perms_by_name(). Подробнее об использовании этих функций рассказано в следующих разделах. Просмотр встроенных разрешений С каждым классом объектов, начиная с области действия сервера и далее вниз по иерархии, связан предопределенный набор разрешений, которые могут быть предо-ставлены участникам безопасности для выполнения определенных действий над объектами этого класса. Табличная функция sys.fn_builtin_permissions() возвращает описание иерархии встроенных разрешений сервера: sys.fn_built_permissions( { DEFAULT | NULL | empty_string | <securable_class> } )<securable_class> ::= APPLICATION ROLE | ASSEMBLY | ASYMMETRIC KEY | CERTIFICATE | CONTRACT | DATABASE | ENDPOINT | FULLTEXT CATALOG | LOGIN | MESSAGE TYPE | OBJECT | REMOTE SERVICE BINDING | ROLE | ROUTE | SCHEMA | SERVER | SERVICE | SYMMETRIC KEY | TYPE | USER | XML SCHEMA COLLECTION При передаче в качестве параметра ключевых слов DEFAULT, NULL или пустой строки возвращается полный список встроенных разрешений. Также можно указать имя определенного класса защищаемых объектов для возврата всех разрешений, при-менимых к этому классу. Функция sys.fn_builtin_permissions() доступна членам роли БД public. Для про-смотра всех возможных предоставляемых разрешений на все объекты, используйте следующий запрос: USE master GO SELECT * FROM sys.fn_builtin_permissions( DEFAULT ) GO Табл. 8-3. (окончание)
Управление системой безопасности SQL Server 2005 Глава 8 209 Если необходимо просмотреть предоставляемые разрешения на конкретный класс объектов, выполните такой запрос: USE master GO SELECT * FROM sys.fn_builtin_permissions( 'object_class' ) GO где object_class является классом объекта, с которым требуется работать. Следующий пример просматривает разрешения, предоставляемые на класс объектов login: SELECT * FROM sys.fn_builtin_permissions( 'login' ) Можно также получить список классов объектов, на которые предоставляется определенное разрешение. В следующем примере выводится список классов объектов, на которые выдается разрешение SELECT: USE master GO SELECT * FROM sys.fn_builtin_permissions( DEFAULT ) WHERE permission_name = 'SELECT'; GO Просмотр действующих разрешений Действующие разрешения на защищаемый объект определяются с помощью встро-енной функции has_perms_by_name(). Они включают следующие разрешения (если какие-то из них не были явно отклонены): предоставленные непосредственно пользователю; вытекающие из разрешений более высокого уровня, имеющихся у пользователя; предоставленные той роли, членом которой является пользователь; принадлежащие роли, членом которой является пользователь. Функцию has_perms_by_name() могут выполнять все члены роли БД public. Тем не менее, ее нельзя использовать для проверки разрешений на связанный сервер. Базовый синтаксис функции has_perms_by_name() следующий: has_perms_by_name( securable, securable_class, permission_name [ , sub-securable ] [ , sub-securable_class ] )где параметр securable принимает значение имени защищаемого объекта или NULL, если защищаемым объектом является сам сервер; параметр securable_class - имя клас-са защищаемых объектов или NULL, если защищаемым объектом является сам сервер; и параметр permission_name принимает отличное от NULL значение, представляющее имя разрешения, наличие которого мы хотим проверить. Можно использовать имя раз-решения 'ANY' в качестве шаблона, чтобы определить, обладает ли защищаемый объ-ект вообще какими-либо действующими разрешениями. Необязательные параметры sub-securable и sub-securable_class указывают имя и класс подчиненного защищаемого объекта, для которого проверяется наличие разрешения. Оба необязательных параме-тра по умолчанию принимают значения NULL. Если функция возвращает значение 
210 Часть II Администрирование Microsoft SQL Server 2005 TRUE (1), защищаемый объект имеет действующее разрешение. При возвращении значения FALSE (0) защищаемый объект не имеет действующего разрешения. Если же возвращается значение NULL, значит, запрос завершился неудачно. Узнать, имеет ли подключенный в данное время пользователь определенное раз-решение на сервер, можно с помощью такого запроса: USE master GO SELECT has_perms_by_name( NULL, NULL, 'permission_name' ); GO где permission_name является именем проверяемого разрешения. Следующий пример проверяет, имеет ли текущий пользователь разрешение VIEW SERVER STATE: SELECT has_perms_by_name( NULL, NULL, 'VIEW SERVER STATE' ); Чтобы показать, предоставлено ли пользователю данное разрешение, возвращается значение TRUE (1) или FALSE (0). Желая проверить, обладает ли текущий пользователь какими-либо правами в опре-деленной БД, выполните подобный запрос: USE master GO SELECT has_perms_by_name( 'database_name', 'DATABASE', 'ANY' ) GO где database_name является именем базы данных, для которой определяются разре-шения. Следующий пример определяет, имеет ли текущий пользователь разрешения в БД Personnel: SELECT has_perms_by_name( 'Personnel', 'DATABASE', 'ANY' ) Если запрос возвращает значение 1, текущий пользователь имеет разрешения в определенной базе данных. Текущую БД можно указать с помощью функции db_name(), например так: SELECT has_perms_by_name( db_name(),'DATABASE', 'ANY' ) Разрешения, выданные определенному пользователю, можно получить, применив предложение EXECUTE AS. В следующем примере проверяется, имеет ли пользова-тель EdwardM какие-либо разрешения в БД Personnel: EXECUTE AS user = 'EdwardM' GO SELECT has_perms_by_name( 'Personnel', 'DATABASE', 'ANY' ) GO REVERT GO Также могут быть просмотрены разрешения на содержащиеся в схемах объек-ты, таких как таблицы и представления. Для этого в параметре securable укажите имя объекта, в параметре securable_class - класс защищаемого объекта как OBJECT и в параметре permission_name - разрешение, которое следует просмотреть. Чтобы 
Управление системой безопасности SQL Server 2005 Глава 8 211 определить, на какие таблицы текущий пользователь имеет разрешение SELECT, нужно использовать такой запрос: USE Personnel GO SELECT has_perms_by_name( name, 'OBJECT', 'SELECT' ) AS Have_Select, * FROM sys.tables; GO Текущий пользователь имеет разрешение SELECT на таблицы со значением 1 в столбце Have_Select. Указав двух-или трехсоставное имя, можно также просмотреть разрешения на определенную таблицу. Например, чтобы узнать, имеет ли текущий пользователь разрешение INSERT на таблицу Address в текущей базе данных, следует использовать двухсоставное имя (где к таблице добавляется имя схемы): SELECT has_perms_by_name( 'Employee.Address', 'OBJECT', 'INSERT' ) AS Have_Select, * FROM sys.tables; или трехсоставное имя (где к таблице и схеме добавляется имя БД): SELECT has_perms_by_name( 'Personnel.Employee.Address', 'OBJECT', 'INSERT' ) AS Have_Select, * FROM sys.tables; Режимы аутентификации SQL Server 2005 Модель безопасности SQL Server имеет два режима аутентификации. Только аутентификация Windows Лучше всего работает в ситуациях, когда БД доступна только внутри организации. Смешанный режим аутентификации Оптимален в тех случаях, если доступ к БД необходимо предоставлять сторонним пользователям или когда не используются домены Windows. Эти режимы аутентификации настраиваются на уровне сервера и применяются ко всем базам данных на сервере. Однако следует отметить, что каждый экземпляр сервера БД имеет отдельную архитектуру системы безопасности. Это означает, что для разных экземпляров сервера баз данных могут применяться разные режимы аутентификации. Аутентификация Windows В режиме аутентификации Windows можно применять учетные записи пользователей и групп, доступные в домене Windows. Благодаря этому, пользователи доменов по-лучают доступ к БД без отдельной учетной записи SQL Server и пароля, к тому же они не должны следить за множеством своих паролей и при изменении доменного пароля им не потребуется изменять также пароли SQL Server. Однако пользователи по-прежнему подчиняются всем правилам модели безопасности Windows, которую можно использовать для блокирования учетных записей, аудита попыток подключе-ния и принуждения пользователей к регулярной смене паролей. SQL Server, при использовании аутентификации Windows, аутентифицирует поль-зователей автоматически, основываясь на имени учетной записи пользователя или его членстве в группах. Если пользователю или группе пользователей Windows был предоставлен доступ к базе данных, они получают его автоматически. Некоторые локальные учетные записи получают доступ к SQL Server по умолчанию. Это учетная 
212 Часть II Администрирование Microsoft SQL Server 2005 запись локальной группы Administrators (Администраторы) и локальная учетная за-пись пользователя Administrator (Администратор). Что касается последней, то она включена, потому что по умолчанию является членом группы Administrators (Адми-нистраторы). В SQL Server Management Studio локальные учетные записи отобра-жаются в виде BUILTIN\account_name или computer_name\account_name. Например, группа Administrators (Администраторы) отображается как BUILTIN\Administrators (BUILTIN\Администраторы). Совет Учетные записи доменов являются лучшим способом управления пользователями, получающими доступ к базе данных внутри организации. Кроме того, назначив пользова-телей в доменные группы и настроив доступ этих групп к SQL Server, можно уменьшить объем требуемого администрирования. Например, если создать группу для пользователей из отдела маркетинга, то затем, настроив эту группу для работы в SQL Server, можно управлять только одной учетной записью вместо 10, 20, 50 или более. Если работники покидают организацию или меняют отделы, не требуется удалять учетные записи в SQL Server. Также при приеме на работу новых работников не требуется создавать новые учетные записи SQL Server - нужно всего лишь убедиться, что они добавлены в соот-ветствующую группу Windows. Смешанный режим аутентификации и учетные записи SQL Server При смешанном режиме аутентификации используются и аутентификация Windows, и учетные записи SQL Server. Учетные записи SQL Server в первую очередь исполь-зуются внешними пользователями, например теми, которые получают доступ к базе данных из Интернета. Приложения, получающие доступ к SQL Server из Интернета, можно настроить таким образом, чтобы они автоматически использовали опреде-ленные учетные записи SQL Server или запрашивали у пользователя имя учетной записи SQL Server и пароль. SQL Server при смешанном режиме аутентификации сначала определяет, подклю-чается ли пользователь с помощью существующей учетной записи SQL Server. Если при этом применяется правильный пароль, пользовательское соединение принима-ется. Если же пароль ошибочен, то даже при наличии существующей учетной записи соединение отклоняется. В тех случаях, когда пользователь такой записи не имеет, проверяется информация учетной записи Windows, то есть, имеет ли она право на под-ключение к серверу. Если да - соединение принимается, если нет - отклоняется. Все серверы SQL Server обладают встроенной учетной записью sa, а также - в за-висимости от конфигурации экземпляра сервера - учетной записью NETWORK SERVICE и SYSTEM. У всех БД есть встроенные пользователи dbo, guest, INFORMATION_SCHEMA и sys. Эти учетные записи и пользователи имеют специальное назначение, о чем пойдет речь в следующем разделе. Учетные записи и пользователи специального назначения Доступ к SQL Server настраивается с использованием учетных записей. Для этих учетных записей можно определить различные уровни доступа, посредством: ролей, к которым принадлежат учетные записи; разрешения доступа к определенным БД; предоставления разрешений или отклонения разрешений на объекты. Так же, как существуют два режима аутентификации, существуют и два типа учет-ных записей: доменные и учетные записи SQL Server. Доменные учетные записи 
Управление системой безопасности SQL Server 2005 Глава 8 213 создаются на основании учетных записей домена Windows, которые могут быть до-менными или локальными учетными записями пользователей, локальными учетны-ми записями групп или универсальными и глобальными учетными записями групп домена. Учетные записи SQL Server создаются посредством указания уникального идентификатора учетной записи и пароля. Некоторые учетные записи создаются и на-страиваются по умолчанию, например учетные записи для локальных учетных записей Windows - группы Administrators (Администраторы) и учетной записи Administrator (Администратор), а также учетные записи sa, NETWORK SERVICE и SYSTEM. При доступе к определенной базе данных используются пользователи БД. Неко-торые из них создаются и настраиваются по умолчанию, в том числе пользователи dbo (специальный пользователь БД), guest (специальный пользователь БД с ограни-ченным доступом), а также INFORMATION_SCHEMA и sys. Далее в этом разделе детально описываются учетные записи специального на-значения. Работа с группой Administrators Группа Administrators (Администраторы) является локальной группой Windows на сервере баз данных. В этой группе обычно состоят локальная учетная запись пользо-вателя Administrator (Администратор) и любые другие пользователи, которым дано право администрировать систему локально. В SQL Server данная группа по умолчанию включается в роль сервера sysadmin. Работа с учетной записью пользователя Administrator Administrator (Администратор) является локальной учетной записью Windows на сервере. Эта учетная запись предоставляет привилегии администратора на локальной системе и используется в первую очередь при ее установке. Если компьютер является частью домена Windows, учетная запись Administrator (Администратор), как правило, имеет привилегии, распространяющиеся на весь домен. В SQL Server по умолчанию эта учетная запись включается в роль сервера sysadmin. Работа с учетной записью sa Учетная запись sa (system administrator) является учетной записью системного адми-нистратора SQL Server. Она предоставляется прежде всего для обеспечения обратной совместимости с предыдущими версиями SQL Server. Как и другие учетные записи с административными полномочиями, учетная запись sa по умолчанию включена в роль сервера sysadmin. Ей при установке SQL Server пароль не назначается. Чтобы предотвратить несанкционированный доступ к серверу, для учетной записи sa необходимо указать надежный пароль и периодически его менять, следуя тем же правилам, что и для паролей учетных записей Windows. Совет Поскольку учетная запись sa широко известна злонамеренным пользователям, мы рекомендуем ее удалить или отключить. Более надежный вариант - включить членов группы Administrators (Администраторы) в роль сервера sysadmin таким образом, чтобы они могли подключаться и администрировать SQL Server, применяя собственные учетные записи. Если почему-либо вам будет отказано в соединении, подключитесь к серверу локально, используя учетную запись с привилегиями локального администратора, и затем переопределите пароли или назначьте необходимые привилегии. Работа с учетными записями NETWORK SERVICE и SYSTEM Учетные записи NETWORK SERVICE и SYSTEM являются встроенными учетными записями Windows на компьютере с установленным SQL Server. Будут ли для них 
214 Часть II Администрирование Microsoft SQL Server 2005 созданы учетные записи SQL Server, зависит от конфигурации сервера. Например, если сервер настроен в качестве Report Server (Сервер отчетов), будет создана учетная запись для учетной записи NETWORK SERVICE, которая станет членом специальной роли базы данных RSExecRole в БД master, msdb, ReportServer и ReportServerTempDB. Роль RSExecRole используется в первую очередь для управления схемой Report Server, и учетная запись для запуска экземпляра сервера также является членом этой роли. Во время установки экземпляра сервера учетные записи NETWORK SERVICE и SYSTEM могут быть выбраны в качестве учетных записей для запуска служб SQL Server, SQL Server Agent (Агент SQL Server), Analysis Services (Аналитические служ-бы) и Report Server (Сервер отчетов). В этом случае учетная запись SYSTEM обычно состоит в роли сервера sysadmin, что дает ей полный доступ для администрирования экземпляра сервера. Работа с пользователем guest Пользователь guest является специальным пользователем, которого можно доба-вить к любой базе данных и таким образом предоставить доступ к SQL Server всем, имеющим ее учетную запись. Пользователи, получающие доступ к базе данных с по-мощью учетной записи guest, идентифицируются в качестве гостя и наследуют все привилегии и разрешения, выданные учетной записи guest. Настроив для какой-либо группы Windows гостевой доступ, тем самым можно упростить администрирование, поскольку каждый пользователь, являющийся членом группы, получит доступ к лю-бой базе данных, имеющей пользователя guest, в качестве гостя. По умолчанию пользователь guest существует в БД model и ему предоставлены гостевые права. В связи с тем, что БД model является шаблоном для всех создаваемых баз данных, новые БД будут включать гостевую учетную запись с ограниченными правами. Пользователя guest можно удалить из всех баз данных, кроме master и tempdb. Большинство пользователей получают доступ к БД master и tempdb в качестве гостей, поэтому из указанных баз данных нельзя удалить гостевую учетную запись. Однако это не вызывает особых проблем, поскольку гость имеет ограниченные разрешения и привилегии в БД master и tempdb. Перед применением пользователя guest следует учесть, что он: является членом роли сервера public и наследует разрешения, предоставленные этой роли; должен существовать в базе данных, прежде чем кто-либо может получить к ней доступ в качестве гостя; используется только в случае, когда учетная запись получила доступ к SQL Server, но не имеет доступа к базе данных через ассоциированного с учетной записью пользователя БД. Работа с пользователем dbo Владелец базы данных, или dbo (database owner), является специальным типом поль-зователя БД и имеет особые права. В общем случае владельцем базы данных является пользователь, ее создавший. Пользователю dbo неявно даны все разрешения на БД, и он может предоставлять их другим пользователям. Поскольку члены роли сервера sysadmin автоматически сопоставляются с пользователем dbo, все учетные записи, состоящие в роли sysadmin, могут выполнять те же задачи, что и пользователь dbo. Объекты, создаваемые в базах данных SQL Server 2005, должны содержаться в какой-либо схеме (подробнее о схемах см. главу 9). В этом отличие от предыдущих 
Управление системой безопасности SQL Server 2005 Глава 8 215 версий SQL Server, где схемы и пользователи неразрывно связаны, и при создании объекта он автоматически попадает в схему, имя которой совпадает с именем поль-зователя. В SQL Ser ver 2005 объект при создании попадает в схему, указанную как схема по умолчанию для пользователя, создающего объект; она может иметь любое имя. Тем не менее, объекты, созданные членом роли сервера sysadmin, автоматически создаются в схеме dbo. Примечание С технической точки зрения, dbo - это специальный пользователь БД, а не специальная учетная запись. Ни к серверу, ни к базе данных нельзя подключиться под именем dbo. Тем не менее, можно создать БД и под этим именем создавать в ней объекты. Работа с пользователями sys и INFORMATION_SCHEMA Все системные объекты содержатся в схемах sys или INFORMATION_SCHEMA. Эти две специальные схемы создаются в каждой базе данных, но просматривать содержа-щиеся в них объекты можно только в БД master. Связанные с ними представления позволяют просматривать внутренние системные метаданные для всех объектов, хранящихся в БД. Пользователи sys и INFORMATION_SCHEMA применяются для ссылки на эти представления. Разрешения Разрешения - это права пользователя на проведение тех или иных действий на сер-вере или в базе данных. Разрешения предоставляются согласно идентификатору учетной записи, членству в группах и ролях. Пользователи должны иметь соответ-ствующие разрешения, прежде чем они смогут выполнить любое действие, связанное с изменением структуры БД или доступом к данным. В SQL Server используются три типа разрешений: на объекты; на инструкции; неявные разрешения. Разрешения на объекты В SQL Server 2005 все разрешения на объекты можно предоставлять: выдавать раз-решения на определенные объекты, на все объекты определенных типов и на все объ-екты, принадлежащие определенной схеме. Набор объектов, на которые назначаются разрешения, зависит от области действия. На уровне сервера предоставляются разре-шения на серверы, конечные точки, учетные записи и роли сервера. Также существует возможность управлять разрешениями на текущий экземпляр сервера. На уровне БД можно управлять разрешениями на следующее: роли приложений и баз данных, симметричные и асимметричные ключи, сборки, сертификаты, базы данных, полнотекстовые каталоги, функции, схемы, хранимые процедуры, синонимы, таблицы, пользовательские типы данных, пользователей, представления и коллекции схем XML. Доступ к этим объектам контролируется посредством разрешения или запрещения выполнения относительно объектов определенных инструкций или хранимых про-цедур. Например, можно предоставить пользователю право извлекать (SELECT) ин-формацию из таблицы, но лишить права добавлять (INSERT), обновлять (UPDATE) или удалять (DELETE) данные, относящиеся к таблице. В табл. 8-4 предоставлен перечень разрешений на объекты.
216 Часть II Администрирование Microsoft SQL Server 2005 Табл. 8-4. Разрешения на объекты Базовый защищаемый объект Настраиваемые разрешения Разрешение высшего уровня Содержится в Неявное разрешение, унаследованное от предка APPLICATION ROLE ALTER, CONTROL, VIEW DEFINITION CONTROL DATABASE ALTER ANY APPLICATION ROLE, CONTROL, VIEW DEFINITION ASSEMBLY ALTER, CONTROL, EXECUTE, REFERENCES, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY ASSEMBLY, CONTROL, EXECUTE, REFERENCES, VIEW DEFINITION ASYMMETRIC KEY ALTER, CONTROL, REFERENCES, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY ASYMMETRIC KEY, CONTROL, REFERENCES, VIEW DEFINITION CERTIFICATE ALTER, CONTROL, REFERENCES, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY CERTIFICATE, CONTROL, REFERENCES, VIEW DEFINITION DATABASE ALTER, ALTER ANY APPLICATION ROLE, ALTER ANY ASSEMBLY, ALTER ANY ASYMMETRIC KEY, ALTER ANY CERTIFICATE, ALTER ANY CONTRACT, ALTER ANY DATABASE EVENT NOTIFICATION, ALTER ANY DATASPACE, ALTER ANY FULLTEXT, CATALOG, ALTER ANY MESSAGE TYPE, ALTER ANY REMOTE SERVICE BINDING, ALTER ANY ROLE, ALTER ANY ROUTE, ALTER SERVICE, ALTER ANY SYMMETRIC KEY, ALTER ANY TRIGGER, ALTER ANY USER, ALTER ANY XML SCHEMA COLLECTION, AUTHENTICATE, BACKUP DATABASE, BACKUP LOG, CHECKPOINT, CONNECT, CONNECT REPLICATION, CONTROL, CREATE AGGREGATE, CREATE ASSEMBLY, CREATE CERTIFICATE, CREATE CONTRACT, CREATE CONTROL, CONNECT REPLICATION, ALTER ANY ASSEMBLY, ALTER ANY CERTIFICATE, ALTER ANY CONTRACT, ALTER ANY DATABASE EVENT NOTIFICATION, ALTER ANY FULLTEXT CATALOG, ALTER ANY MESSAGE TYPE, ALTER ANY REMOTE SERVICE BINDING, ALTER ANY ROLE, ALTER ANY ROUTE, ALTER ANY SCHEMA, ALTER ANY SERVICE, ALTER ANY SYMMETRIC KEY, ALTER ANY XML SCHEMA SERVER ALTER ANY DATABASE, CONTROL SERVER, EXTERNAL ACCESS, CREATE ANY DATABASE, VIEW ANY DEFINITION 
Управление системой безопасности SQL Server 2005 Глава 8 217 Базовый защищаемый объект Настраиваемые разрешения Разрешение высшего уровня Содержится в Неявное разрешение, унаследованное от предка DATABASE, CREATE DATABASE EVENT NOTIFICATION, CREATE DEFAULT, CREATE FULLTEXT CATALOG, CREATE FUNCTION, CREATE MESSAGE TYPE, CREATE PROCEDURE, CREATE QUEUE, CREATE REMOTE SERVICE BINDING, CREATE ROLE, CREATE ROUTE, CREATE RULE, COLLECTION CREATE SCHEMA, CREATE SERVICE, CREATE SYMMETRIC KEY, CREATE SYNONYM, CREATE TABLE, CREATE TYPE, CREATE VIEW, CREATE XML SCHEMA COLLECTION, DELETE, EXECUTE, INSERT, REFERENCES, SELECT, SHOWPLAN, SUBSCRIBE QUERY NOTIFICATION, TAKE OWNERSHIP, UPDATE, VIEW DEFINITION ENDPOINT ALTER, CONNECT, CONTROL, TAKE OWNERSHIP, VIEW DEFINITION CONTROL SERVER ALTER ANY ENDPOINT, CONTROL SERVER FULLTEXT CATALOG ALTER, CONTROL, REFERENCES, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY FULLTEXT CATALOG, CONTROL, REFERENCES, VIEW DEFINITION LOGIN ALTER, CONTROL, IMPERSONATE, VIEW DEFINITION CONTROL SERVER ALTER ANY LOGIN, CONTROL SERVER MESSAGE TYPE ALTER, CONTROL, REFERENCES, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY MESSAGE TYPE, CONTROL, REFERENCES, VIEW DEFINITION OBJECT ALTER, CONTROL, DELETE, EXECUTE, INSERT, RECEIVE, REFERENCES, SELECT, TAKE OWNERSHIP, UPDATE, VIEW DEFINITION CONTROL SCHEMA ALTER, CONTROL, DELETE, EXECUTE, INSERT, RECEIVE, REFERENCES, SELECT, UPDATE, VIEW DEFINITION Табл. 8-4. (продолжение) (см. след. стр.)
218 Часть II Администрирование Microsoft SQL Server 2005 Базовый защищаемый объект Настраиваемые разрешения Разрешение высшего уровня Содержится в Неявное разрешение, унаследованное от предка REMOTE SERVICE BINDING ALTER, CONTROL, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY REMOTE SERVICE BINDING, CONTROL, VIEW DEFINITION ROLE ALTER, CONTROL, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY ROLE, CONTROL, VIEW DEFINITION ROUTE ALTER, CONTROL, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY ROUTE, CONTROL, VIEW DEFINITION SCHEMA ALTER, CONTROL, DELETE, EXECUTE, INSERT, REFE RENCES, SELECT, TAKE OWNERSHIP, UPDATE, VIEW DEFINITION CONTROL DATABASE ALTER ANY SCHEMA, CONTROL, DELETE, EXECUTE, INSERT, REFE RENCES, SELECT, UPDA TE, VIEW DEFINITION SERVER ADMINISTER BULK OPERATIONS, ALTER ANY CONNECTION, ALTER ANY CREDENTIAL, ALTER ANY DATABASE, ALTER ANY ENDPOINT, ALTER ANY EVENT NOTIFICATION, ALTER ANY LINKED SER VER, ALTER ANY LOGIN, ALTER RESOURCES, ALTER SERVER CONTROL SERVER, ALTER ANY DATABASE, ALTER ANY EVENT NOTIFICATION, ALTER ANY ENDPOINT, ALTER SERVER STATE Не применимо Не применимо STATE, ALTER SETTINGS, ALTER TRACE, AUTHENTI CATE SERVER, CONTROL SERVER, CREATE ANY DATABASE, CREATE DDL EVENT, CREATE ENDPOINT, CREATE EVENT NOTIFI CATION, CREATE MANAGEMENT EVENT, CREATE SECURITY EVENT, CREATE USER EVENT, EXTERNAL ACCESS, SHUTDOWN, VIEW ANY DEFINITION, VIEW SERVER STATE SERVICE ALTER, CONTROL, SEND, TAKE OWNERSHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY SERVICE, CONTROL, VIEW DEFINITION SYMMETRIC KEY ALTER, CONTROL, RE FE RENCES, TAKE OWNER SHIP, VIEW DEFINITION CONTROL DATABASE ALTER ANY SYMMETRIC KEY, CONTROL, RE FE REN CES, VIEW DEFINITION Табл. 8-4. (продолжение)
Управление системой безопасности SQL Server 2005 Глава 8 219 Базовый защищаемый объект Настраиваемые разрешения Разрешение высшего уровня Содержится в Неявное разрешение, унаследованное от предка TYPE CONTROL, EXECUTE, REFE RENCES, TAKE OWNER SHIP, VIEW DEFINITION CONTROL SCHEMA CONTROL, EXECUTE, REFERENCES, VIEW DEFINITION USER ALTER, CONTROL, IMPERSONATE, VIEW DEFINITION CONTROL DATABASE ALTER ANY USER, CONTROL, VIEW DEFINITION XML SCHEMA COLLECTION ALTER, CONTROL, EXECUTE, REFERENCES, TAKE OW NERSHIP, VIEW DEFINITION CONTROL SCHEMA ALTER, CONTROL, EXE CUTE, REFERENCES, VIEW DEFINITION Разрешения на инструкции Разрешения на инструкции контролируют административные действия, например создание базы данных или добавление объектов в БД. Только члены роли sysadmin и владельцы баз данных могут назначать разрешения на инструкции. По умолчанию обычным учетным записям разрешения на инструкции не предоставлены, поэтому в случае необходимости требуется специально предоставлять эти разрешения учетным записям, не являющимся администраторами. Например, если пользователь должен создавать представления в БД, необходимо назначить ему разрешение на выполнение инструкции CREATE VIEW. В табл. 8-5 дан перечень инструкций, разрешения на которые можно предоставить или отменить, а также отклонить, если пользователь владеет ими неявно. Табл. 8-5. Инструкции, на которые можно предоставлять или отменять разрешения Инструкция Описание CREATE DATABASE Создание БД. Пользователь должен быть создан в БД master или являться членом роли сервера sysadmin CREATE DEFAULT Создание значения по умолчанию для столбца таблицы CREATE FUNCTION Создание в БД пользовательской функции CREATE PROCEDURE Создание хранимой процедуры CREATE RULE Создание правила для столбца таблицы CREATE TABLE Создание таблицы CREATE VIEW Создание представления BACKUP DATABASE Резервное копирование БД BACKUP LOG Резервное копирование журнала транзакций Неявные разрешения Только члены предопределенных системных ролей или владельцы баз данных либо объектов БД обладают неявными разрешениями. Неявные разрешения системной роли не могут быть изменены. Для предоставления учетным записям неявных раз-решений, ассоциированных с какой-либо встроенной ролью, следует сделать учетные записи членами этой роли. Например, члены роли сервера sysadmin могут произво-дить любые действия в SQL Server: увеличивать базы данных, уничтожать процессы и так далее. Эти задачи способна выполнять любая учетная запись, добавленная в роль sysadmin. Табл. 8-4. (окончание)
220 Часть II Администрирование Microsoft SQL Server 2005 Владельцы БД и объектов БД также обладают определенными неявными разре-шениями. Эти разрешения позволяют им выполнять все действия над базой данных или объектом, который им принадлежит. Например, пользователь, владеющий табли-цей, может просматривать, добавлять, изменять и удалять данные, а также изменять структуру таблицы и управлять разрешениями на нее. Роли Роли во многом схожи с группами Windows - они позволяют легко назначать раз-решения группе пользователей и могут иметь ассоциированный набор встроенных (неявных) разрешений, не подлежащих изменению. Доступны два типа ролей: роли сервера - применяются на уровне сервера; роли БД - применяются на уровне базы данных. Роли сервера Используйте роли сервера для предоставления возможности администрирования сервера. Если включить учетную запись в какую-либо роль, то пользователи, исполь-зующие эту учетную запись, смогут производить любые действия, разрешенные для этой роли. Например, пользователи роли sysadmin имеют наивысший в SQL Server уровень прав и могут выполнять любые задачи. Роли сервера устанавливаются на уровне сервера и являются предопределенными. Это означает, что ассоциированные с ними разрешения влияют на весь сервер и набор разрешений нельзя изменить. В расположенном ниже списке описано назначение всех ролей сервера: от роли с самым низким уровнем полномочий (bulkadmin) до роли наивысшего уровня полномочий (sysadmin). Bulkadmin - для учетных записей доменов, производящих операции массивного копирования в БД. Члены этой роли могут добавлять новых членов в роль bulkadmin и выполнять инструкции BULK INSERT. Dbcreator - для пользователей, создающих, изменяющих, удаляющих и восста-навливающих базы данных из резервной копии. Члены этой роли могут добавлять новых членов в роль dbcreator и выполнять следующие инструкции и хранимые процедуры: ALTER DATABASE, CREATE DATABASE, DROP DATABASE, EXTEND DATABASE, RESTORE DATABASE, RESTORE LOG и sp_renamedb. Diskadmin - для пользователей, управляющих дисковыми файлами. Члены этой роли могут добавлять новых членов в роль diskadmin и выплнять следующие инструкции и хранимые процедуры: DISK INIT, sp_addumpdevice, sp_diskdefault и sp_dropdevice. Processadmin - для пользователей, контролирующих процессы SQL Server. Члены этой роли могут добавлять новых членов в роль processadmin и завершать про-цессы. Securityadmin - для пользователей, управляющих учетными записями, создаю-щими разрешения и читающими журналы ошибок. Члены этой роли могут добав-лять новых членов в роль securityadmin, управлять разрешениями уровня серве-ра и уровня базы данных, переустанавливать пароли и читать журналы ошибок. Вдобавок, они могут выполнять такие хранимые процедуры: sp_addlinkedsrvlogin, sp_addlogin, sp_defaultdb, sp_defaultlanguage, sp_denylogin, sp_droplinkedsrvlogin, sp_droplogin, sp_grantlogin, sp_helplogins, sp_remoteoption и sp_revokelogin. Serveradmin - для пользователей, которым необходимо устанавливать параметры конфигурации, применяемые ко всему серверу, и завершать работу сервера. Члены 
Управление системой безопасности SQL Server 2005 Глава 8 221 этой роли могут добавлять членов в роль serveradmin и выполнять следующие инструкции и хранимые процедуры: DBCC FREEPROCCACHE, RECONFIGURE, SHUTDOWN, sp_configure, sp_fulltext_service и sp_tableoption. Setupadmin - для пользователей, управляющих связанными серверами и контро-лирующих процедуры запуска. Члены этой роли могут добавлять членов в роль setupadmin, добавлять, удалять и настраивать связанные серверы и контролировать процедуры запуска. Sysadmin - для пользователей, которым необходим полный контроль над SQL Server и установленными базами данных. Члены этой роли могут производить любые действия в SQL Server. Встроенным ролям сервера в SQL Server 2005 предоставляется детальный набор разрешений, как показано в табл. 8-6. Табл. 8-6. Набор разрешений, связанных со встроенными ролями сервера Встроенная роль сервера Разрешения, связанные с этой ролью bulkadmin ADMINISTER BULK OPERATIONS dbcreator CREATE DATABASE diskadmin ALTER RESOURCES processadmin ALTER SERVER STATE, ALTER ANY CONNECTION securityadmin ALTER ANY LOGIN serveradmin ALTER SETTINGS, SHUTDOWN, CREATE ENDPOINT, ALTER SERVER STATE, ALTER ANY ENDPOINT, ALTER RESOURCES setupadmin ALTER ANY LINKED SERVER sysadmin CONTROL SERVER Роли уровня БД Если требуется назначать разрешения на базу данных и ее объекты, можно исполь-зовать роли уровня БД. Эти роли определяются для каждой базы данных отдельно, поэтому каждая БД имеет собственный набор ролей. SQL Server 2005 на уровне баз данных поддерживает три типа ролей: стандартные пользовательские роли БД*; пользовательские роли приложений; предопределенные (встроенные) роли БД. Применение стандартных ролей базы данных позволяет создавать роли с уни-кальным набором разрешений и привилегий. С помощью стандартных ролей БД можно логически группировать пользователей и затем назначать разрешения только ролям, вместо предоставления разрешений каждому пользователю отдельно. Напри-мер, создать роль Users, которая обладала бы только разрешениями SELECT, INSERT и UPDATE на определенные таблицы в базе данных и не позволяла бы проводить другие действия. * Часто в русскоязычных источниках термин "стандартная роль" используется для обозначе-ния встроенных системных ролей. Но поскольку в электронной документации SQL Server термин standard role применяется для обозначения именно ролей, определяемых пользователями, мы решили не изменять этот подход. - Прим. ред.
222 Часть II Администрирование Microsoft SQL Server 2005 Пользовательские роли приложений позволяют создавать защищенные паролем роли для определенных приложений. Так, пользователь может подключаться через веб-приложение, называемое NetReady, которое способно активировать роль. Таким образом, пользователь получает разрешения и привилегии роли. Роли базы данных* или другие типы ролей не могут быть включены в роль приложения. Последняя ак-тивируется только приложением, подключающимся к БД. В SQL Server также встроен набор ролей базы данных. Они обладают предопреде-ленными разрешениями, которые не могут быть изменены. Используйте встроенные роли, чтобы назначить пользователям базы данных административные привилегии. Один пользователь может быть членом нескольких ролей. Встроенные роли и их права перечислены в следующем списке. Public - роль по умолчанию для всех пользователей БД. Пользователи наследуют разрешения и права роли public, которая предоставляет минимальные разрешения и привилегии. Любые роли, назначаемые пользователю, кроме роли public, могут расширять набор его разрешений и привилегий. Если требуется, чтобы все пользо-ватели БД имели определенные разрешения, назначьте разрешения роли public. Db_accessadmin - для пользователей, которым необходима возможность добав-лять или удалять других пользователей в БД. Db_backupoperator - для пользователей, выполняющих резервное копирование БД. Db_datereader - для пользователей, которым требуется просматривать данные в БД. Члены этой роли могут производить выборку любых данных из любой поль-зовательской таблицы в БД. Db_datawriter - для пользователей, добавляющих или изменяющих данные в лю-бой пользовательской таблице БД. Члены этой роли могут выполнять следующие инструкции относительно любых объектов в выбранной БД: DELETE, INSERT и UPDATE. Db_ddladmin - для пользователей, выполняющих задачи, для которых необхо-димо применение языка определения данных SQL Server. Члены этой роли могут выполнить любую инструкцию DDL, кроме GRANT, REVOKE или DENY. Db_denydatareader - для запрещения некоторым пользователям доступа к данным в БД. Члены этой роли не могут читать данные в пользовательских таблицах БД. Db_denydatawriter - для запрещения некоторым пользователям изменения дан-ных в БД. Члены этой роли не могут добавлять, изменять или удалять данные в пользовательских таблицах БД. Db_securityadmin - для пользователей, управляющих ролями, разрешениями на объекты и правами владения объектами. Db_owner - для пользователей, которым требуется полный контроль над всеми аспектами функционирования базы данных. Члены этой роли могут назначать разрешения, изменять параметры БД, выполнять операции по обслуживанию БД, а также любые другие задачи администрирования БД, включая ее удаление. Встроенными ролям базы данных в SQL Server 2005 предоставляется детальный набор разрешений, как показано в табл. 8-7. * Тут и далее, если не оговорено особо, под ролью базы данных подразумевается стандартная пользовательская роль БД. - Прим. ред.
Управление системой безопасности SQL Server 2005 Глава 8 223 Табл. 8-7. Набор разрешений, связанных с встроенными ролями БД Встроенная роль БД Разрешения, ассоциированные с ролью db_denydatareader Отклоняет: SELECT db_denydatawriter Отклоняет: DELETE, INSERT, UPDATE db_accessadmin ALTER ANY USER, CONNECT WITH GRANT OPTION, CREATE SCHEMA db_backupoperator BACKUP DATABASE, BACKUP LOG, CHECKPOINT db_datareader SELECT db_datawriter DELETE, INSERT, UPDATE db_ddladmin ALTER ANY ASSEMBLY, ALTER ANY CERTIFICATE, ALTER ANY CONTRACT, ALTER ANY EVENT NOTIFICATION, ALTER ANY DATASPACE, ALTER ANY FULLTEXT CATALOG, ALTER ANY MESSAGE TYPE, ALTER ANY REMOTE SERVICE BINDING, ALTER ANY ROUTE, ALTER ANY SCHEMA, ALTER ANY SERVICE, ALTER ANY SYMMETRIC KEY, ALTER ANY TRIGGER, ALTER ANY XML SCHEMA COLLECTION, CHECKPOINT, CREATE AGGREGATE, CREATE ASSEMBLY, CREATE CONTRACT, CREATE DEFAULT, CREATE FUNCTION, db_ddladmin CREATE MESSAGE TYPE, CREATE PROCEDURE, CREATE QUEUE, CREATE REMOTE SERVICE BINDING, CREATE ROUTE, CREATE RULE, CREATE SCHEMA, CREATE SERVICE, CREATE SYMMETRIC KEY, CREATE SYNONYM, CREATE TABLE, CREATE TYPE, CREATE VIEW, CREATE XML SCHEMA COLLECTION, REFERENCES db_owner CONTROL WITH GRANT OPTION db_securityadmin ALTER ANY APPLICATION ROLE, ALTER ANY ROLE, CREATE SCHEMA, VIEW DEFINITION Управление учетными записями сервера Наряду со своими учетными записями, SQL Server может использовать учетные записи Windows. Если на сервере настроен смешанный режим аутентификации, су-ществует возможность использовать оба типа учетных записей. В противном случае используются только учетные записи Windows. Просмотр и редактирование существующих учетных записей Для просмотра или редактирования существующей учетной записи выполните сле-дующую последовательность действий. 1. Запустите утилиту SQL Server Management Studio. В панели Object Explorer (Обо-зреватель объектов) подключитесь к соответствующему серверу, затем раскройте его узел для отображения узла Security (Безопасность). 2. Раскройте узел Security (Безопасность), а потом узел Logins (Учетные записи), чтобы увидеть текущий список учетных записей. Для просмотра свойств учетной записи выберите в ее контекстном меню команду Properties (Свойства). 3. Диалоговое окно Login Properties (Свойства учетной записи), показанное на рис. 8-1, имеет пять страниц. : General (Общие) Предоставляет общие параметры конфигурации учетной записи, включая режим аутентификации (не подлежит изменению), БД и язык по умолчанию (могут быть изменены), а также любые сопоставленные учетные данные (credentials) (могут быть добавлены или удалены).
224 Часть II Администрирование Microsoft SQL Server 2005 Рис. 8-1. Диалоговое окно Login Properties : Server Roles (Роли сервера) Приводит список ролей сервера, дающий воз-можность определить, в каких ролях сервера состоит данная учетная запись. : User Mapping (Сопоставление пользователей) Отображает список баз дан-ных, доступных учетной записи, и позволяет управлять (для каждой БД в от-дельности) схемой по умолчанию, сопоставленным пользователем и назначен-ными ролями базы данных. : Securables (Защищаемые объекты) Показывает текущие разрешения на объекты для учетной записи и предоставляет возможность управлять ими. : Status (Состояние) Отображает параметры, показывающие, разрешено ли данной учетной записи подключаться к ядру БД, а также позволяющие ее временно отключить (вместо удаления). 4. По завершении работы щелкните кнопку OK. Примечание В разделе Connection (Соединение) каждой страницы имеется ссылка View connection properties (Просмотр свойств соединения). Эта информация может пригодиться для разрешения проблем соединения. Чтобы просмотреть информацию об учетной записи с помощью Transact-SQL, ис-пользуйте хранимую процедуру sp_helplogins. В примере 8-1 показаны ее синтаксис и использование. Пример 8-1. Синтаксис и использование хранимой процедуры sp_helplogins Синтаксис: sp_helplogins [ [ @LoginNamePattern = ] 'login' ] Использование: EXEC sp_helplogins 'goteam'
Управление системой безопасности SQL Server 2005 Глава 8 225 Результаты, выводимые хранимой процедурой sp_helplogins, включают имя учетной записи, идентификатор безопасности, БД по умолчанию и язык по умолчанию. Чтобы определить роли сервера и группы Windows, в которых состоит (явно или неявно) подключенный в данное время пользователь, выполните следующий запрос: USE master GO SELECT * FROM sys.login_token; GO Создание учетных записей В SQL Server Management Studio новые учетные записи создаются при помощи диа-логового окна Login - New (Учетная запись - Новая). Если требуется использовать учетные записи пользователя или группы Windows, необходимо создать сначала эти учетные записи на локальном компьютере или в домене Windows, а затем - связанные учетные записи SQL Server. Попросите сетевого администратора настроить необхо-димые учетные записи Windows. Для создания учетной записи SQL Server выполните следующую последователь-ность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу, затем раскройте его узел для отображения узла Security (Безопасность). 2. В контекстном меню узла Logins (Учетные записи) выберите команду New Login (Создать учетную запись). Отобразится диалоговое окно Login - New (Учетная запись - Новая), показанное на рис. 8-2. Рис. 8-2. Диалоговое окно Login - New 3. Если создается учетная запись для учетной записи Windows, установите переклю-чатель в положение Windows authentication (Аутентификация Windows) и в поле 
226 Часть II Администрирование Microsoft SQL Server 2005 Login name (Имя учетной записи) введите имя пользователя в формате DOMAIN\ username, например CPANDL\wrstanek. Для поиска информации о домене и поль-зователе в службе каталогов Active Directory щелкните кнопку Search (Найти). В диалоговом окне Select User or Group (Выбор: Пользователь или Группа) выберите пользователя, для которого создается учетная запись SQL Server. Политика изме-нения пароля и ограничение срока действия пароля автоматически управляются локальной политикой паролей Windows. 4. При создании новой учетной записи SQL Server установите переключатель в по-ложение SQL Server authentication (Аутентификация SQL Server) и в поле Login name (Имя учетной записи) введите необходимое имя учетной записи, например Sales или WRSTANEK. Затем в поле Password (Пароль) введите пароль для учет-ной записи и подтвердите его в поле Confirm password (Подтверждение пароля). Чтобы применить для учетной записи SQL Server локальную политику паролей Windows, установите флажок Enforce password policy (Требовать применения по-литики паролей). Если этот параметр установлен, можно также потребовать огра-ничения срока действия пароля, установив флажок Enforce password expiration (Требовать ограничения срока действия пароля). 5. Укажите базу данных и язык, которые будут использоваться учетной записью по умолчанию. Назначение БД по умолчанию не дает автоматически учетной записи разрешения на доступ к ней. БД по умолчанию используется, если имя базы данных в инструкции не было явно указано. 6. Чтобы создать учетную запись, щелкните кнопку OK. Если уже существует учет-ная запись с таким же именем, отобразится сообщение об ошибке. Щелкните в нем кнопку OK и измените имя. Если же вы решите, что новая учетная запись не требуется, щелкните кнопку Cancel (Отмена). 7. На этот момент созданная учетная запись еще не включена ни в какие роли и не имеет никаких разрешений, кроме возможности подключиться к серверу. Чтобы узнать, как настроить эти параметры, обратитесь к разделам "Назначение ролей сервера" и "Контроль доступа к БД и управление администрированием" далее в этой главе. Учетные записи можно также создать средствами Transact-SQL. Для этого при-меняется инструкция CREATE LOGIN, как показано в примере 8-2. Для исполь-зования этой инструкции необходимо иметь разрешение ALTER ANY LOGIN на сервер (а в случае использования учетных данных требуется разрешение ALTER ANY CREDENTIAL). Пример 8-2. Синтаксис и использование инструкции CREATE LOGIN Синтаксис: CREATE LOGIN login { WITH <option_list1> | FROM <sources> } <sources> ::= WINDOWS [ WITH <windows_options> [ ,...n ] ] | CERTIFICATE certificate_name | ASYMMETRIC KEY asym_key_name <option_list1> ::= PASSWORD = 'password' [ HASHED ] [ MUST_CHANGE ] [ , <option_list2> [ ,...n ] ] <option_list2> ::= SID = sid | DEFAULT_DATABASE = database_name
Управление системой безопасности SQL Server 2005 Глава 8 227 | DEFAULT_LANGUAGE = language_id | CHECK_EXPIRATION = { ON | OFF } | CHECK_POLICY = { ON | OFF } [ CREDENTIAL = credential_name ] <windows_options> ::= DEFAULT_DATABASE = database_name | DEFAULT_LANGUAGE = language_id Использование для учетных записей SQL Server: CREATE LOGIN wrstanek WITH PASSWORD = 'MZ82$!408765RTM' Использование для учетных записей SQL, сопоставленных учетным данным: CREATE LOGIN wrstanek WITH PASSWORD = 'MZ82$!408765RTM', CREDENTIAL = StanekWR Использование для создания учетных записей на основе учетных записей домена Windows: CREATE LOGIN [CPANDL\wrstanek] FROM WINDOWS; Примечание Для создания учетных записей также можно применять хранимые про-цедуры sp_grantlogin и sp_addlogin*, однако следует иметь в виду, что созданные таким образом учетные записи, хотя и позволяют пользователям подключаться к SQL Server, не дают, тем не менее, доступа к базам данных. Чтобы настроить доступ к БД, нужно для каждой базы данных, к которой учетной записи требуется доступ, выполнить хранимую процедуру sp_grantdbaccess. Более подробно об этом смотрите в разделе "Контроль доступа к БД и управление администрированием" далее в этой главе. Изменение учетных записей с помощью Transact-SQL Учетные записи можно редактировать в SQL Server Management Studio, как описано выше, в разделе "Просмотр и редактирование существующих учетных записей". Изме-нение учетных записей с помощью Transact-SQL более трудоемко, поскольку требует использования инструкции ALTER LOGIN. Для изменения учетных записей необходи-мо разрешение ALTER ANY LOGIN (а при работе с учетными данными - разрешение ALTER ANY CREDENTIAL). Если учетная запись является членом роли сервера sysadmin, только другой член этой роли может произвести такие изменения: переустановить пароль без предоставления старого пароля; использовать в инструкции ALTER LOGIN ключевые слова MUST_CHANGE, CHECK_POLICY или CHECK EXPIRATION; изменить имя учетной записи; включить или отключить учетную запись; изменить учетные данные учетной записи. В примере 8-3 приведены синтаксис и использование инструкции ALTER LOGIN. Пример 8-3. Синтаксис и использование инструкции ALTER LOGIN Синтаксис: ALTER LOGIN login { <status_option> * Хранимые процедуры sp_grantlogin и sp_addlogin оставлены в SQL Server 2005 для обеспече-ния обратной совместимости и будут удалены в одной из будущих версий SQL Server. Рекомен-дуемым является использование инструкции CREATE LOGIN. - Прим. ред.
228 Часть II Администрирование Microsoft SQL Server 2005 | WITH <set_option> [ ,...n ] } <status_option> ::= ENABLE | DISABLE <set_option> ::= PASSWORD = 'password' [ OLD_PASSWORD = 'old_password' | <secadmin_pwd_option> [ <secadmin_pwd_option> ] ] | DEFAULT_DATABASE = database_name | DEFAULT_LANGUAGE = language_id | NAME = login | CHECK_POLICY = { ON | OFF } | CHECK_EXPIRATION = { ON | OFF } | CREDENTIAL = credential_name | NO CREDENTIAL <secadmin_pwd_opt> ::= MUST_CHANGE | UNLOCK Использование для изменения имени учетной записи: ALTER LOGIN wrstanek WITH NAME = stanekwr Использование для изменения пароля учетной записи: ALTER LOGIN wrstanek WITH PASSWORD = '3948wJ698FFF7'; Использование для включения учетной записи: ALTER LOGIN wrstanek ENABLE; Предоставление или запрещение доступа к серверу При создании новой учетной записи или изменении существующей, основанной на учетной записи Windows, можно явно предоставить или запретить доступ к ядру базы данных сервера. Явное запрещение доступа к серверу полезно, если определенной учетной записи Windows необходимо временно ограничить доступ к серверу. Чтобы предоставить или запретить доступ для существующей учетной записи, выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу, затем раскройте его узел для отображения узла Security (Безопасность). 2. Раскройте узел Security (Безопасность), а потом узел Logins (Учетные записи), чтобы увидеть список текущих учетных записей. В контекстном меню учетной записи выберите команду Properties (Свойства). Откроется диалоговое окно Login Properties (Свойства учетной записи), показанное выше на рис. 8-1. 3. В списке Select a page (Выберите страницу) выберите страницу Status (Состояние). 4. В разделе Permission to connect to database engine (Разрешение подключиться к ядру базы данных) установите переключатель в положение Grant (Предоставить) для предоставления доступа к серверу. 5. Чтобы запретить доступ к серверу, установите переключатель в положение Deny (Запретить).
Управление системой безопасности SQL Server 2005 Глава 8 229 Примечание Запрещение доступа к серверу не предотвращает подключения пользо-вателей к SQL Server (оно касается подключения при помощи учетных записей доме-нов Windows). Пользователи все же могут подключиться с использованием правильного идентификатора учетной записи SQL Server и пароля. 6. Щелкните кнопку OK. Предоставлять или запрещать доступ можно также средствами Transact-SQL. Для предоставления доступа применяется хранимая процедура sp_grantlogin, как показано в примере 8-4. Примечание Только члены встроенных ролей сервера sysadmin или securityadmin могут выполнять хранимые процедуры sp_grantlogin и sp_denylogin. Пример 8-4. Синтаксис и использование хранимой процедуры sp_grantlogin Синтаксис: sp_grantlogin [ @loginame = ] 'login' Использование: EXEC sp_grantlogin 'GALAXY\WRSTANEK' Чтобы запретить доступ к серверу для учетной записи, используйте хранимую процедуру sp_denylogin, как показано в примере 8-5. Пример 8-5. Синтаксис и использование хранимой процедуры sp_denylogin Синтаксис: sp_denylogin [ @loginame = ] 'login' Использование: EXEC sp_denylogin 'GALAXY\WRSTANEK' Включение, отключение и разблокирование учетных записей Подобно учетным записям Windows, учетные записи SQL Server могут быть включены и отключены администраторами. Учетные записи также бывают заблокированными, что зависит от параметров политики безопасности, например, если истек срок дей-ствия пароля учетной записи. В этих случаях вам придется их разблокировать. Совет Чтобы определить, отключена учетная запись или заблокирована, выберите в SQL Server Management Studio узел Logins (Учетные записи). Значок для учетной записи обновля-ется с целью отображения состояния заблокированных и отключенных учетных записей. Чтобы включить, отключить или разблокировать учетную запись, выполните сле-дующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу, затем раскройте его узел для отображения узла Security (Безопасность). 2. Раскройте узел Security (Безопасность), а потом узел Logins (Учетные записи), чтобы увидеть список текущих учетных записей. В контекстном меню учетной за-писи выберите команду Properties (Свойства). Откроется диалоговое окно Login Properties (Свойства учетной записи). 3. В списке Select a page (Выберите страницу) выберите страницу Status (Состояние). 4. Теперь можно: : включить учетную запись, установив в разделе Login (Учетная запись) пере-ключатель в положение Enabled (Включена);
230 Часть II Администрирование Microsoft SQL Server 2005 : отключить учетную запись, установив в разделе Login (Учетная запись) пере-ключатель в положение Disables (Отключена); : разблокировать учетную запись, сняв флажок Login is locked out (Учетная за-пись заблокирована). 5. Щелкните кнопку OK. Удаление учетных записей Когда пользователь покидает организацию или учетная запись больше не нужна по какой-то другой причине, ее нужно удалить из SQL Server. Для этого выполните указанные ниже действия. 1. Запустите SQL Server Management Studio и подключитесь к соответствующему серверу. 2. Для нужного сервера в панели Object Explorer (Обозреватель объектов) раскройте узел Security (Безопасность), затем узел Logins (Учетные записи). 3. В контекстном меню учетной записи, которую следует удалить, выберите команду Delete (Удалить). 4. Диалоговое окно Delete Object (Удаление объекта) показывает, какая учетная запись удаляется. Щелкните кнопку OK для удаления учетной записи. Помните, что может потребоваться также удалить связанных пользователей в каждой базе данных. Используйте хранимую процедуру sp_revokelogin, чтобы удалить учетные записи, основанные на пользователях и группах Windows; соответствующий фрагмент кода показан в примере 8-6. Пример 8-6. Синтаксис и использование хранимой процедуры sp_revokelogin Синтаксис: sp_revokelogin [ @loginame = ] 'login' Использование: EXEC sp_revokelogin 'GALAXY\WRSTANEK' Для удаления учетной записи SQL Server примените инструкцию DROP LOGIN, как показано в примере 8-7. Пример 8-7. Синтаксис и использование инструкции DROP LOGIN Синтаксис: DROP LOGIN login Использование: DROP LOGIN sarahm Изменение паролей Учетные записи пользователей и групп Window управляются в домене Windows или на локальном компьютере. Пользователи могут изменять собственные пароли или, если необходимо, попросить администратора Windows переустановить их пароли. Пароли учетных записей SQL Server меняются при помощи утилиты SQL Server Management Studio. Для этого выполните следующие действия. 1. Запустите SQL Server Management Studio и получите доступ к соответствующему серверу.
Управление системой безопасности SQL Server 2005 Глава 8 231 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Security (Без-опасность), затем узел Logins (Учетные записи). 3. В контекстном меню учетной записи, которую следует изменить, выберите команду Properties (Свойства). Отобразится диалоговое окно Login Properties (Свойства учетной записи). 4. Введите и подтвердите новый пароль в предоставляемые поля. 5. Щелкните кнопку OK. Чтобы изменить пароли средствами Transact-SQL, используйте инструкцию ALTER LOGIN, как было описано ранее, в примере 8-3. Примечание Пользователи могут изменять собственные пароли. Члены ролей сервера securityadmin и serveradmin могут менять пароли других учетных записей. Однако если пользователь, для которого меняется пароль, является членом роли сервера sysadmin, член роли сервера securityadmin должен предоставить старый пароль. Членам роли sysadmin никогда не требуется предоставлять старый пароль. Назначение ролей сервера Роли сервера устанавливают для учетных записей SQL Server определенные админи-стративные привилегии, действие которых распространяется на весь сервер. Роли сер-вера можно назначать учетным записям как по отдельности, так и нескольким сразу. Назначение ролей сервера отдельной учетной записи Чтобы определить набор ролей сервера, в которых состоит учетная запись, выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Security (Безопасность), затем узел Logins (Учетные записи). Ото-бразится список текущих учетных записей. В контекстном меню нужной учетной записи выберите команду Properties (Свойства). Отобразится диалоговое окно Login Properties (Свойства учетной записи). 3. Выберите страницу Server Roles (Роли сервера), как показано на рис. 8-3. 4. Включите учетную запись в нужные роли сервера, установив возле них флажки. (Роли сервера описаны выше, в разделе "Роли сервера".) 5. Щелкните кнопку OK. Также можно включить учетную запись в роли сервера с помощью Transact-SQL. Хранимая процедура sp_addsrvrolemember добавляет учетную запись в роль сервера. Ее использование показано в примере 8-8. Примечание Чтобы использовать хранимую процедуру sp_addsrvrolemember или sp_dropsrvrolemember, необходимо иметь разрешение ALTER ANY LOGIN на сервер и состоять в роли, в которую включается новый член. Пример 8-8. Синтаксис и использование хранимой процедуры sp_addsrvrolemember Синтаксис: sp_addsrvrolemember [ @loginame = ] 'login', [ @rolename = ] 'role_name' Использование: EXEC sp_addsrvrolemember 'GALAXY\WRSTANEK', 'sysadmin' Хранимая процедура sp_dropsrvrolemember удаляет учетную запись из роли. Ее можно использовать, как показано в примере 8-9.
232 Часть II Администрирование Microsoft SQL Server 2005 Пример 8-9. Синтаксис и использование хранимой процедуры sp_dropsrvrolemember Синтаксис: sp_dropsrvrolemember [ @loginame = ] 'login', [ @rolename = ] 'role_name' Использование: EXEC sp_dropsrvrolemember 'GALAXY\WRSTANEK', 'sysadmin' Рис. 8-3. Страница Server Roles диалогового окна Login Properties Назначение роли сервера нескольким учетным записям Назначить роль сервера нескольким учетным записям проще всего с помощью диа-логового окна Server Roles Properties (Свойства роли сервера). Для этого выполните следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу, затем раскройте его узел Security (Безопасность). 2. Раскройте узел Server Roles (Роли сервера) и щелкните правой кнопкой мыши роль, в которую нужно добавить учетные записи. Откроется диалоговое окно Server Role Properties (Свойства роли сервера), показанное на рис. 8-4. 3. Чтобы добавить учетные записи, щелкните кнопку Add (Добавить) и в диалоговом окне Select Logins (Выбор учетных записей) выберите нужные. Можно ввести неполные имена, а затем воспользоваться кнопкой Check Names (Проверить име-на), чтобы их дополнить. Для поиска имен щелкните кнопку Browse (Обзор). По окончании выбора щелкните кнопку OK. 4. Чтобы удалить учетную запись, выберите ее в списке Server role membership (Чле-ны роли сервера) и щелкните кнопку Remove (Удалить). 5. После добавления всех требуемых учетных записей щелкните кнопку OK.
Управление системой безопасности SQL Server 2005 Глава 8 233 Рис. 8-4. Диалоговое окно Server Role Properties Исключение учетной записи из ролей сервера и/или БД Чтобы исключить учетную запись из роли сервера и/или базы данных, выполните следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Security (Безопасность), затем узел Logins (Учетные записи). 3. Дважды щелкните мышью учетную запись, которую следует настроить. Отобра-зится диалоговое окно Login Properties (Свойства учетной записи). 4. Выберите страницу Server Roles (Роли сервера). Снимите флажки напротив ролей сервера, из которых следует исключить учетную запись. 5. Выберите страницу User Mapping (Сопоставление пользователей). Снимите флажки возле БД, к которым пользователь не должен иметь доступ. Дополнительно можно также выбрать базу данных, к которой разрешен доступ, и затем изменить набор ро-лей БД, в которых пользователь состоит, снимая соответствующие флажки в списке Database role membership for. (Принадлежность к ролям базы данных для.). 6. По окончании щелкните кнопку OK. Контроль доступа к БД и управление администрированием Для организации контроля доступа к базе данных и управления полномочиями по ее администрированию применяется механизм пользователей и ролей БД. Учетные записи сопоставляются с пользователями базы данных, имеющими право доступа к ней. Административные привилегии и другие права предоставляются пользователям путем их включения в соответствующие роли БД.
234 Часть II Администрирование Microsoft SQL Server 2005 Предоставление доступа и назначение ролей отдельной учетной записи Можно предоставить доступ к базам данных и назначить роли БД для отдельной учетной записи, выполнив следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Security (Безопасность), затем узел Logins (Учетные записи) для отображения списка текущих учетных записей. В контекстном меню нужной учет-ной записи выберите команду Properties (Свойства). Отобразится диалоговое окно Login Properties (Свойства учетной записи). Выберите страницу User Mapping (Сопоставление пользователей), как показано на рис. 8-5. Рис. 8-5. Страница User Mapping диалогового окна Login Properties 3. В списке Users mapped to this login (Пользователи, сопоставленные с этой учетной записью) установите флажок для базы данных, к которой должна иметь доступ учетная запись. Затем в списке Database role membership for... (Принадлежность к ролям базы данных для...) установите флажки возле ролей базы данных, в которых учетная запись должна состоять для БД, выбранной в данный момент. 4. Повторите пункт 4 для других БД, к которым учетная запись должна иметь до-ступ. 5. По завершении настройки ролей БД щелкните кнопку OK. Назначение ролей БД нескольким учетным записям одновременно На уровне базы данных можно назначить роли БД нескольким учетным записям одновременно. Для этого выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer подключитесь к соответствующему серверу. 2. Раскройте узел Databases (Базы данных), затем узел БД, которую нужно настроить.
Управление системой безопасности SQL Server 2005 Глава 8 235 3. Для выбранной базы данных раскройте последовательно узлы Security (Безопас-ность), Roles (Роли) и Database Roles (Роли базы данных). Дважды щелкните роль, которую следует настроить. Откроется диалоговое окно Database Role Properties (Свойства роли базы данных), показанное на рис. 8-6. Рис. 8-6. Диалоговое окно Database Role Properties 4. Чтобы включить в роль новых членов, щелкните кнопку Add (Добавить). Ото-бразится диалоговое окно Select Database User or Role (Выбор пользователя или роли базы данных). 5. В диалоговом окне введите имя пользователя или роли, которое нужно добавить. Отделяйте имена точками с запятой. Можно вводить неполные имена, затем вос-пользоваться кнопкой Check Names (Проверить имена), чтобы их дополнить. Для поиска имен щелкните кнопку Browse (Обзор). По окончании выбора щелкните кнопку OK. 6. Чтобы удалить члена роли, в списке Members of this role (Члены этой роли) выберите пользователя БД или другую роль, затем щелкните кнопку Remove (Удалить). 7. По окончании настройки роли базы данных щелкните кнопку OK. Создание стандартных ролей БД Хотя особый набор прав доступа предопределенных ролей и нельзя изменить, суще-ствует возможность установить разрешения для ролей, создаваемых в определенной базе данных. Предположим, есть три группы пользователей БД: обычные пользова-тели, просматривающие данные; руководители, изменяющие данные; и разработчики, которым необходимо изменять объекты БД. В этой ситуации оптимально создать три роли для каждого типа пользователей и затем управлять только этими ролями, а не многочисленными учетными записями пользователей. Чтобы создать стандартную роль базы данных, выполните указанную дальше по-следовательность действий.
236 Часть II Администрирование Microsoft SQL Server 2005 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Databases (Базы данных), затем узел необходимой базы данных. 3. Для выбранной базы данных раскройте узел Security (Безопасность). В контекст-ном меню узла Roles (Роли) выберите команду New\New Database Role (Создать\ Новую роль базы данных). Появится диалоговое окно Database Role - New (Роль базы данных - Новая), показанное на рис. 8-7. Рис. 8-7. Диалоговое окно Database Role - New 4. Введите имя для роли в поле Role name (Имя роли). Совет Используйте короткое, но информативное имя для роли, например Normal Users (Обычные пользователи), Editors (Редакторы) или Testers And Developers (Группа раз-работки). 5. По умолчанию владельцем роли является пользователь dbo. Чтобы указать другого владельца, щелкните кнопку справа от поля Owner (Владелец) для отображения диалогового окно Select Database User or Role (Выбор пользователя или роли базы данных). 6. В этом окне введите имя пользователя или роли. Можно ввести неполное имя, а за-тем щелкнуть кнопку Check Names (Проверить имена). Для поиска имен щелкните кнопку Browse (Обзор). По окончании выбора имени щелкните кнопку OK. 7. Чтобы включить в роль новых членов, щелкните кнопку Add (Добавить). Ото-бразится диалоговое окно Select Database User or Role (Выбор пользователя или роль базы данных). 8. В диалоговом окне введите имена пользователей или ролей, которые необходимо добавить. Отделяйте имена точками с запятой. Можно ввести неполные имена и затем щелкнуть кнопку Check Names (Проверить имена). Для поиска имен щел-кните кнопку Browse (Обзор). По окончании выбора щелкните кнопку OK.
Управление системой безопасности SQL Server 2005 Глава 8 237 9. В списке Select a page (Выберите страницу) выберите страницу Securables (Защищае-мые объекты) и используйте параметры этой страницы для настройки разрешений на объекты БД для этой роли. (Более подробная информация о настройке разрешений на объекты БД находится в разделе "Управление разрешениями БД".) 10. Щелкните кнопку OK. Создание ролей приложений Роли приложений разработаны для использования приложениями, осуществляющими доступ к БД и не имеющими связанных с ними пользователей базы данных. Можно определить роль приложения, выполнив следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Databases (Базы данных), затем узел нужной БД. 3. Раскройте узел БД Security (Безопасность). В контекстном меню узла Roles (Роли) выберите команду New\New Application Role (Создать\Новую роль приложения). Появится диалоговое окно Application Role - New (Роль приложения - Новая), показанное на рис. 8-8. Рис. 8-8. Диалоговое окно Application Role - New 4. Введите имя для роли в поле Role name (Имя роли). 5. Схемой по умолчанию для роли является dbo. Она устанавливает базовые разре-шения для новой роли. Чтобы установить иную схему по умолчанию, щелкните кнопку справа от поля Default schema (Схема по умолчанию). Отобразится диа-логовое окно Locate Schema (Поиск схемы). 6. В диалоговом окне введите имя схемы, которую нужно назначить схемой по умол-чанию. Можно ввести неполное имя, а затем щелкнуть кнопку Check Names (Про-верить имена), чтобы дополнить его. Для поиска имен щелкните кнопку Browse (Обзор). Закончив выбор, щелкните кнопку OK.
238 Часть II Администрирование Microsoft SQL Server 2005 7. Перейдите на страницу Securables (Защищаемые объекты) и используйте предо-ставленные там элементы интерфейса для настройки разрешений на объекты базы данных для этой роли. (Более подробную информацию о настройке разрешений на объекты БД смотрите в разделе "Управление разрешениями БД".) 8. Щелкните кнопку OK. Исключение пользователей из ролей БД Чтобы исключить пользователя из ролей базы данных, выполните такие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Databases (Базы данных), затем узел нужной БД. 3. Для выбранной БД последовательно раскройте узлы Security (Безопасность) и Users (Пользователи). Дважды щелкните мышью имя пользователя. Будет отображено диалоговое окно Database User (Пользователь базы данных). 4. На вкладке General (Общие) в списке Database role membership (Принадлежность к ролям базы данных) снимите флажки возле ролей БД, в которых пользователю не следует состоять. 5. Исключив пользователя из всех ненужных ролей БД, щелкните кнопку OK. Удаление пользовательских ролей Для удаления пользовательской роли выполните указанные действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Раскройте узел Databases (Базы данных), затем узел нужной базы данных. 3. Для выбранной БД последовательно раскройте узлы Security (Безопасность) и Roles (Роли). 4. Если необходимо удалить роль базы данных, раскройте узел Database Roles (Роли базы данных). Если нужно удалить роль приложения, раскройте узел Application Roles (Роли приложений). 5 В контекстном меню роли, которую следует удалить, выберите команду Delete (Удалить). 6. Отобразится диалоговое окно Delete Object (Удаление объекта) для удаляемой роли. Щелкните кнопку OK. Примечание Чтобы пользовательскую роль можно было удалить, следует сначала ис-ключить из нее всех включенных пользователей. Инструкции Transact-SQL для управления доступом и ролями SQL Server предоставляет различные инструкции Transact-SQL для управления до-ступом к базе данных и ролями. Сводка этих инструкций дана в примере 8-10. Пример 8-10. Инструкции для управления доступом к БД и ролями Добавление пользователя к текущей БД: CREATE USER user_name [ { FOR | FROM } { LOGIN login | CERTIFICATE certificate_name | ASYMMETRIC KEY asym_key_name
Управление системой безопасности SQL Server 2005 Глава 8 239 } ] [ WITH DEFAULT_SCHEMA = schema_name ] Переименование пользователя или изменение схемы по умолчанию: ALTER USER user_name WITH <set_item> [ ,...n ] <set_item> ::= NAME = new_user_name | DEFAULT_SCHEMA = schema_name Удаление пользователя из БД: DROP USER user_name Управление стандартными ролями БД: CREATE ROLE role_name [ AUTHORIZATION owner_name ] ALTER ROLE role_name WITH NAME = new_role_name DROP ROLE role_name sp_helprole [ [ @rolename = ] 'role_name' ] Управление членами ролей БД: sp_addrolemember [ @rolename = ] 'role_name', [ @membername = ] 'database_principal' sp_droprolemember [ @rolename = ] 'role_name', [ @membername = ] 'database_principal' sp_helprolemember [ [ @rolename = ] 'role_name' ] Управление ролями приложений: sp_addapprole [ @rolename = ] 'role_name', [ @password = ] 'password' sp_dropapprole [ @rolename = ] 'role_name' sp_setapprole [ @rolename = ] 'role_name', [ @password = ] { Encrypt N'password' } | 'password' [ , [ @encrypt = ] { 'none' | 'odbc' } ] [ , [ @fCreateCookie = ] TRUE | FALSE ] [ , [ @cookie = ] @cookie OUTPUT ] Управление разрешениями БД Владелец базы данных, а также члены группы sysadmin и члены группы securityadmin могут назначать разрешения БД. При работе с разрешениями применяются три основные инструкции. GRANT (Предоставить разрешение) Предоставляет разрешение на проведение тех или иных действий. При использовании ролей разрешение наследуют все члены роли. REVOKE (Отменить разрешение) Отменяет разрешение, ранее предоставленное с помощью инструкции GRANT, но явно не запрещает пользователю или роли выполнение какого-либо действия. Пользователь или роль может унаследовать разрешение на это действие через членство в другой роли.
240 Часть II Администрирование Microsoft SQL Server 2005 DENY (Отклонить разрешение) Явным образом запрещает проведение тех или иных действий и не допускает унаследование разрешения пользователем или ро-лью. Инструкция DENY имеет приоритет над всеми разрешениями, выданными с помощью инструкции GRANT. Примечание Инструкция DENY - это расширение Transact-SQL, не являющееся частью стандарта ANSI SQL-92. Можно предоставлять, отменять и отклонять разрешения на уровне базы данных или объекта. Можно также назначить разрешения, используя роли БД. Подробно об этом рассказывалось ранее, в разделе "Контроль доступа к БД и управление адми-нистрированием". Назначение разрешений БД на выполнение инструкций На уровне базы данных можно предоставить, отменить или отклонить разрешения на выполнение инструкций языка определения данных, таких как CREATE TABLE и BACKUP DATABASE. Эти инструкции были приведены в табл. 8-5. Чтобы предоставить, отменить или отклонить разрешения базы данных на ин-струкции в SQL Server Management Studio, выполните следующую последователь-ность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к соответствующему серверу. 2. Для необходимого сервера раскройте узел Databases (Базы данных), чтобы ото-бразить содержащиеся в нем ресурсы. 3. В контекстном меню нужной БД выберите команду Properties (Свойства). Ото-бразится диалоговое окно Database Properties (Свойства базы данных). 4. В списке Select a page (Выберите страницу) выберите страницу Permissions (Раз-решения), как показано на рис. 8-9. Рис. 8-9. Страница Permissions диалогового окна Database Properties
Управление системой безопасности SQL Server 2005 Глава 8 241 5. Чтобы назначить для всех пользователей разрешения по умолчанию, выдайте разрешения роли public. Щелкните кнопку Add (Добавить) и в диалоговом окне Select Users or Roles (Выбор пользователей или ролей) выберите пользователя или роль, которую следует добавить. В случае назначения разрешения для индивиду-альных пользователей или ролей выберите пользователя или роль и используйте список Explicit permissions for... (Явные разрешения для.), чтобы предоставить или отклонить разрешения. Для отмены ранее назначенных установок разрешений снимите оба флажка. 6. Для назначения разрешений щелкните кнопку OK. Чтобы управлять разрешениями с помощью Transact-SQL, можно использовать инструкции GRANT, REVOKE и DENY. В примере 8-11 показаны синтаксис и исполь-зование инструкции GRANT, в примере 8-12 - синтаксис и использование инструкции REVOKE и в примере 8-13 - синтаксис и использование инструкции DENY. Пример 8-11. Синтаксис и использование инструкции GRANT Упрощенный синтаксис: GRANT { ALL [ PRIVILEGES ] } | permission_name [ ( column_name [ ,...n ] ) ] [ ,...n ] [ ON [ class:: ] securable ] TO principal [ ,...n ] [ WITH GRANT OPTION ] [ AS principal ] Синтаксис для предоставления разрешений на серверы: GRANT permission_name [ ,...n ] TO <grantee_principal> [ ,...n ] [ WITH GRANT OPTION ] [ AS <grantor_principal> ] <grantee_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key <grantor_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key Синтаксис для предоставления разрешений на БД: GRANT <permission> [ ,...n ] TO <database_principal> [ ,...n ] [ WITH GRANT OPTION ] [ AS <database_principal> ] <permission> ::= permission_name | ALL [ PRIVILEGES ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group
242 Часть II Администрирование Microsoft SQL Server 2005 | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login Синтаксис для предоставления разрешений на объекты класса OBJECT: GRANT <permission> [ ,...n ] ON [ OBJECT:: ][ schema_name. ] object_name [ ( column_name [ ,...n ] ) ] TO <database_principal> [ ,...n ] [ WITH GRANT OPTION ] [ AS <database_principal> ] <permission> ::= ALL [ PRIVILEGES ] | permission_name [ ( column_name [ ,...n ] ) ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login Использование: GRANT CREATE DATABASE, CREATE TABLE TO Users, [GALAXY\Sales] GRANT SELECT ON customer..customers TO public GRANT INSERT, UPDATE, DELETE ON customer..customers TO Devs, Testers Пример 8-12. Синтаксис и использование инструкции REVOKE Упрощенный синтаксис: REVOKE [ GRANT OPTION FOR ] { [ ALL [ PRIVILEGES ] ] | permission_name [ ( column_name [ ,...n ] ) ] [ ,...n ] } [ ON [ class:: ] securable ] { TO | FROM } principal [ ,...n ] [ CASCADE] [ AS principal ] Синтаксис для отмены разрешений на серверы: REVOKE [ GRANT OPTION FOR ] permission_name [ ,...n ] { TO | FROM } <grantee_principal> [ ,...n ] [ CASCADE ] [ AS <grantor_principal> ] <grantee_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key
Управление системой безопасности SQL Server 2005 Глава 8 243 <grantor_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key Синтаксис для отмены разрешений на БД: REVOKE [ GRANT OPTION FOR ] <permission> [ ,...n ] { TO | FROM } <database_principal> [ ,...n ] [ CASCADE ] [ AS <database_principal> ] <permission> ::= permission_name | ALL [ PRIVILEGES ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login Синтаксис для отмены разрешений на объекты класса OBJECT: REVOKE [ GRANT OPTION FOR ] <permission> [ ,...n ] ON [ OBJECT:: ][ schema_name. ] object_name [ ( column_name [ ,...n ] ) ] { FROM | TO } <database_principal> [ ,...n ] [ CASCADE ] [ AS <database_principal> ] <permission> ::= ALL [ PRIVILEGES ] | permission_name [ ( column_name [ ,...n ] ) ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login Использование: REVOKE CREATE TABLE, CREATE DEFAULT FROM Devs, Testers REVOKE INSERT, UPDATE, DELETE FROM Users, [GALAXY\Sales] Пример 8-13. Синтаксис и использование инструкции DENY Упрощенный синтаксис: DENY { ALL [ PRIVILEGES ] } | permission_name [ ( column_name [ ,...n ] ) ] [ ,...n ] [ ON [ class:: ] securable ]
244 Часть II Администрирование Microsoft SQL Server 2005 TO principal [ ,...n ] [ CASCADE ] [ AS principal ] Синтаксис для отклонения разрешений на серверы: DENY permission_name [ ,...n ] TO <grantee_principal> [ ,...n ] [ CASCADE ] [ AS <grantor_principal> ] <grantee_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key <grantor_principal> ::= SQL_Server_login | SQL_Server_login_mapped_to_Windows_login | SQL_Server_login_mapped_to_Windows_group | SQL_Server_login_mapped_to_certificate | SQL_Server_login_mapped_to_asymmetric_key Синтаксис для отклонения разрешений на БД: DENY <permission> [ ,...n ] TO <database_principal> [ ,...n ] [ CASCADE ] [ AS <database_principal> ] <permission> ::= permission_name | ALL [ PRIVILEGES ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login Синтаксис для отклонения разрешений на объекты класса OBJECT: DENY <permission> [ ,...n ] ON [ OBJECT:: ][ schema_name. ] object_name [ ( column_name [ ,...n ] ) ] TO <database_principal> [ ,...n ] [ CASCADE ] [ AS <database_principal> ] <permission> ::= ALL [ PRIVILEGES ] | permission_name [ ( column_name [ ,...n ] ) ] <database_principal> ::= Database_user | Database_role | Application_role | Database_user_mapped_to_Windows_User | Database_user_mapped_to_Windows_Group | Database_user_mapped_to_certificate | Database_user_mapped_to_asymmetric_key | Database_user_with_no_login
Управление системой безопасности SQL Server 2005 Глава 8 245 Использование: DENY CREATE TABLE TO Devs, Testers DENY INSERT, UPDATE, DELETE ON customer..customers TO Users, [GALAXY\Sales] Назначение разрешений для отдельного пользователя на несколько объектов Разрешения на объекты применяются к таблицам, представлениям и хранимым про-цедурам. Наиболее часто используемыми на практике разрешениями, которые назна-чаются на эти объекты, являются SELECT, INSERT, UPDATE и DELETE для таблиц и представлений, и EXECUTE - для хранимых процедур. Сводный перечень разре-шенных действий по объектам приведен в табл. 8-4 ранее в этой главе. Чтобы предоставить, отменить или отклонить разрешения на объект в SQL Server Management Studio, выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к соответству-ющему серверу. 2. Для требуемого сервера раскройте узел Databases (Базы данных), затем узел не-обходимой БД. 3. Для нужной базы данных раскройте узлы Security (Безопасность) и Users (Поль-зователи). 4. Дважды щелкните мышью пользователя, которого следует настроить. Отобразится диалоговое окно Database User (Пользователь базы данных). 5. В списке Select a page (Выберите страницу) выберите страницу Securables (За-щищаемые объекты), как показано на рис. 8-10. Рис. 8-10. Страница Securables диалогового окна Database User
246 Часть II Администрирование Microsoft SQL Server 2005 6. Чтобы назначить разрешения на объект, щелкните кнопку Add (Добавить) для отображения диалогового окна Add Objects (Добавление объектов). 7. В диалоговом окне Add Objects (Добавление объектов) выберите тип объектов, для которых следует управлять разрешениями. : В тех случаях, когда известны имена объектов, на которые необходимо предо-ставить разрешения, установите переключатель в положение Specific Objects (Определенные объекты) и щелкните кнопку OK. Отобразится диалоговое окно Select Objects (Выбор объектов); щелкните в нем кнопку Object Types (Типы объектов). Далее, в диалоговом окне Select Object Types (Выбор типов объектов), выберите (установив соответствующие флажки) типы объектов, которые необходимо найти, например, типы Tables (Таблицы) и Views (Представления), и щелкните кнопку OK. В диалоговом окне Select Objects (Выбор объектов) введите имена объектов. Если вводятся несколько имен, отделяйте их точкой с запятой. Используйте кнопку Check Names (Проверить имена), чтобы дополнить введенные непол-ные имена. Для поиска типов объектов, выбранных в окне Select Object Types (Выбор типов объектов), щелкните кнопку Browse (Обзор). По завершении выбора объектов щелкните кнопку OK. Указанные объекты будут отображены в списке Securables (Защищаемые объекты) диалогового окна Database User (Пользователь базы данных). : Если требуется управлять разрешениями на все объекты определенного типа, например на таблицы и представления, установите переключатель в положение All objects of the types (Все объекты таких типов), затем щелкните кнопку OK. В диалоговом окне Select Objects (Выбор объектов) щелкните кнопку Object Types (Типы объектов). Далее в диалоговом окне Select Object Types (Выбор типов объектов) укажите типы объектов, которые нужно найти, например Tables (Таблицы) и Views (Представления), и щелкните кнопку OK. Все объекты выбранных типов бу-дут отображены в списке Securables (Защищаемые объекты) диалогового окна Database User (Пользователь базы данных). : Для того чтобы управлять разрешениями на все объекты, принадлежащие опре-деленной схеме, установите переключатель в положение All objects belonging to the schema... (Все объекты, принадлежащие такой схеме). После єтого в диалоговом окне Add Objects (Добавление объектов) в раскры-вающемся списке Schema Name (Имя схемы) выберите схему, содержащую объекты, которыми требуется управлять, и щелкните кнопку OK. Все объекты, принадлежащие схеме, будут отображены в списке Securables (Защищаемые объекты) диалогового окна Database User (Пользователь базы данных). 8. Чтобы установить разрешения на объект для пользователя, выбранного в данный момент, укажите объект в списке Securables (Защищаемые объекты), затем ис-пользуйте список Explicit permissions for... (Явные разрешения для...) для предо-ставления или отклонения разрешения. 9. Снимите оба флажка для отмены ранее назначенных установок разрешений. 10. По окончании щелкните кнопку OK, чтобы назначить разрешения.
Управление системой безопасности SQL Server 2005 Глава 8 247 Назначение разрешений на отдельный объект для нескольких пользователей Можно также назначать разрешения со стороны объекта и таким образом назначить разрешения на объект для нескольких пользователей. Для этого выполните следую-щую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных). 2. Раскройте узел нужной базы данных, затем узлы для типа объектов, с которыми требуется работать, например узлы Tables (Таблицы), Views (Представления) или Stored Procedures (Хранимые процедуры). 3. В контекстном меню объекта, который следует настроить, выберите команду Properties (Свойства). Отобразится диалоговое окно Properties (Свойства) для выбранного типа объекта, например диалоговое окно Table Properties (Свойства таблицы), показанное на рис. 8-11. Рис. 8-11. Диалоговое окно Table Properties 4. В диалоговом окне Properties (Свойства) в списке Select a page (Выберите стра-ницу) выберите страницу Permissions (Разрешения). 5. Любые пользователи или роли, имеющие назначенные разрешения на объект, приведены в списке Users or roles (Пользователи или роли). 6. Чтобы добавить определенные разрешения для пользователей, ролей или для тех и других, щелкните кнопку Add (Добавить). Откроется диалоговое окно Select Users or Roles (Выбор пользователей или ролей). 7. Введите имена пользователей или ролей, которые следует добавить. Отделяйте имена точками с запятой. Можно ввести неполные имена, затем щелкнуть кнопку 
248 Часть II Администрирование Microsoft SQL Server 2005 Check Names (Проверить имена), чтобы их дополнить. Для поиска имен щелкните кнопку Browse (Обзор). 8. Чтобы установить разрешения на объекты, выберите из списка Users or Roles (Поль-зователи или роли) пользователя или роль, а затем используйте список Explicit permissions (Явные разрешения), чтобы предоставить или отклонить разрешения. Снимите оба флажка для отмены ранее назначенных установок разрешений. 9. По окончании щелкните кнопку OK, чтобы назначить разрешения. Более подробная информация о командах Transact-SQL для назначения прав до-ступа была представлена ранее, в разделе "Назначение разрешений БД на выполнение инструкций".
Часть III Управление данными в Microsoft SQL Server 2005 Главы этой части содержат информацию об управлении данными в Microsoft SQL Server 2005. В главе 9 рассмотрены приемы работы со схемами, таблицами, индексами и представле-ниями. Кроме того, здесь вы найдете советы по использованию ограничений и правил. Прочитав главу 10, вы узнаете, как можно выполнить экспорт, импорт и преобразование данных. Глава 11 посвящена проблемам интеграции баз данных SQL Server друг с другом и остальными источниками информации. В ней подробно рассмотрены распределенные за-просы и транзакции, координатор распределенных транзакций и использование связанных серверов. Глава 12 в полном объеме освещает вопросы организации репликации данных. Среди других тем рассмотрено также использование новейших методов репликации, в том числе таких, как репликация сведением и немедленное обновление подписчиков. Глава 9. Работа со схемами, таблицами, индексами и представлениями ................... 250 Глава 10. Импорт, экспорт и преобразование данных ..................................................... 308 Глава 11. Связанные серверы и распределенные транзакции ....................................... 338 Глава 12. Реализация репликации моментальных снимков, репликации сведением и репликации транзакций ........................................... 351
Глава 9 Работа со схемами, таблицами, индексами и представлениями В SQL Server вводится новая модель управления основными элементами данных в БД. Все данные БД содержатся в объекте Database (База данных). Каждый объект Database состоит из объектов Schema (Схема), которые в свою очередь содержат та-блицы, индексы, представления и другие объекты, составляющие базу данных. Таким образом, есть три основных уровня, определяющих область действия и владения. База данных Включает все объекты, определенные в БД; ее владельцем является конкретный пользователь. Схема Включает все объекты, определенные внутри схемы; ее владельцем вы-ступает участник безопасности уровня БД. Объект, содержащийся в схеме Относится к любым конкретным таблицам, представлениям и т. п., определенным в БД; владеет объектом схема, в которой он содержится. Когда базы данных, разработанные для предыдущих версий SQL Server, пере-носятся в SQL Server 2005, эта модель также применима. В таких БД владельцем таблиц, представлений и других объектов является схема dbo. Можно расширять структуру базы данных, по мере необходимости добавляя другие схемы и используя их для хранения объектов. Работа со схемами Схемы - это контейнеры объектов, используемые для определения пространств имен (namespaces) для объектов БД. Схемы применяются для упрощения управления данными и создания подмножеств объектов, которыми можно управлять как единым целым. Схемы и пользователи баз данных в этой версии SQL Server разделены*. Пользователи владеют схемами и всегда имеют ассоциированную схему по умол-чанию, используемую сервером для разрешения не полностью определенных имен объектов в запросах. Это значит, что при обращении к объектам, содержащимся в схеме по умолчанию, имя схемы может быть опущено. Для обращения к объектам в других схемах нужно указать идентификатор, состоящий из двух или трех частей. Двухсоставный идентификатор указывает имена схемы и объекта в виде schema_name. object_name. Трехсоставный идентификатор указывает имена БД, схемы и объекта в формате database_name.schema_name.object_name. Используя механизм синонимов (synonyms), можно задать альтернативные имена объектов базы данных таким образом, что схема по умолчанию любого пользователя будет содержать ссылки на другую схему. Например, если для таблицы Customers.Contact определен синоним dbo.Contact, любой пользователь, для которого dbo - схема * В предыдущих версиях SQL Server пользователи БД (users) выполняли функцию схем, вы-ступая своеобразными контейнерами для объектов, которыми они владели. - Прим. ред.
Работа со схемами, таблицами, индексами и представлениями Глава 9 251 по умолчанию, может обратиться к таблице, указав только ее имя. Хотя синонимы могут ссылаться и на объекты в других базах данных, в том числе расположенных на удаленных серверах SQL Server, их область действия распространяется лишь на ту БД, где они определены. Таким образом, различные базы данных могут иметь синонимы с одинаковыми именами, которые, тем не менее, ссылаются на разные объекты. Использование схем дает много преимуществ. Поскольку пользователи уже не являются непосредственными владельцами объектов, удаление пользователей из базы данных упрощается: перед удалением пользователя больше не нужно переименовы-вать объекты, которые он создал. Несколько пользователей могут владеть одной и той же схемой через членство в какой-либо роли или группе Windows, что упрощает управление таблицами, представлениями и другими объектами, определенными в БД. Кроме того, одна и та же схема может являться схемой по умолчанию для многих пользователей, и это облегчает предоставление доступа к совместно используемым объектам. Схемы можно использовать для ограничения подмножества видимых объектов в зависимости от выполняемых функций, роли или назначения, благодаря чему орга-низация доступа к объектам становится проще. Например, можно создать отдельную схему для каждого приложения, использующего базу данных. В этом случае, когда пользователи какого-либо конкретного приложения обращаются к БД, пространство имен для тех объектов, с которыми они постоянно работают, устанавливается соот-ветствующим образом. Создание схем Перед тем как создать таблицу, тщательно продумайте имя схемы, которой она будет принадлежать. Длина имени схемы не может превышать 128 символов. При этом на-чинаться оно должно с буквы, а остальная часть может содержать как символы _, @, #, так и цифры. В пределах каждой БД имя схемы должно быть уникальным, однако в разных базах данных допускаются схемы с одинаковыми именами. Например, в двух разных БД могут быть определены схемы с именем Employees каждая. Чтобы создать новую схему с помощью SQL Server Management Studio, выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить содержащиеся в ней ресурсы. 3. Раскройте узел Security (Безопасность) выбранной базы данных. В контекстном меню узла Schemas (Схемы) выберите команду New Schema (Создать схему). Ото-бразится диалоговое окно Schema - New (Схема - Новая), показанное на рис. 9-1. 4. На странице General (Общие) в поле Schema name (Имя схемы) введите имя схемы, а в поле Schema owner (Владелец схемы) укажите ее владельца. Для поиска до-ступных участников безопасности уровня базы данных, которые могут выступить в роли владельца, щелкните кнопку Search (Найти). Откроется диалоговое окно Search Roles and Users (Найти роли и пользователей). Щелкните в нем кнопку Browse (Обзор), чтобы открыть диалоговое окно Browse for Objects (Обзор для поиска объектов). Выберите владельца схемы - пользователя или роль, и затем закройте оба окна, щелкнув в них кнопки OK. 5. Щелкните кнопку OK для создания схемы.
252 Часть III Управление данными в Microsoft SQL Server 2005 Рис. 9-1. Диалоговое окно Schema - New Примечание Владельцем схемы может быть любой участник безопасности уровня базы данных (пользователь БД, роль БД или роль приложения). Хотя он может владеть и другими схемами, лишь одна устанавливается в качестве схемы по умолчанию. Если владельцем схемы установлена роль или группа Windows, схемой будут владеть совместно несколько пользователей. Для создания схем средствами Transact-SQL применяется инструкция CREATE SCHEMA. В примере 9-1 показаны ее синтаксис и использование. Вместо элемента schema_element можно подставить инструкции CREATE TABLE, CREATE VIEW, GRANT, REVOKE и DENY для таблиц, представлений и разрешений, которые должны быть созданы в определяемой схеме. Примечание Чтобы назначить владельцем создаваемой схемы иного пользователя, нужно обладать разрешением IMPERSONATE относительно этого пользователя. Если владельцем указывается роль БД, необходимо быть членом этой роли или иметь раз-решение ALTER на эту роль. Пример 9-1. Синтаксис и использование инструкции CREATE SCHEMA Синтаксис: CREATE SCHEMA <schema_name_clause> [ <schema_element> [ ,...n ] ] <schema_name_clause> ::= { schema_name | AUTHORIZATION owner_name | schema_name AUTHORIZATION owner_name }
Работа со схемами, таблицами, индексами и представлениями Глава 9 253 <schema_element> ::= { table_definition | view_definition | grant_statement | revoke_statement | deny_statement } Использование: CREATE SCHEMA Employees AUTHORIZATION DataTeam Изменение схем Иногда возникает необходимость назначить схеме другого владельца, изменить раз-решения на действия над ней, а также предоставлять либо отклонять разрешения конкретным пользователям или ролям. Однако поскольку после создания схемы ее нельзя переименовать, приходится в таких случаях удалять схему и создавать новую с другим именем. Для изменения владельца схемы с помощью SQL Server Management Studio вы-полните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить содержащиеся в ней ресурсы. 3. Раскройте узел Security (Безопасность) выбранной БД. В контекстном меню узла Schemas (Схемы) выберите команду Properties (Свойства). Отобразится диалого-вое окно Schema Properties (Свойства схемы). 4. Для изменения владельца схемы на странице General (Общие) щелкните кноп-ку Search (Найти). Откроется диалоговое окно Search Roles and Users (Найти роли и пользователей). Щелкните в нем кнопку Browse (Обзор), чтобы открыть диалоговое окно Browse for Objects (Обзор для поиска объектов). Выберите вла-дельца схемы - пользователя или роль, и затем закройте оба окна, щелкнув в них кнопки OK. Вы можете более детально настроить разрешения для схемы на странице Permissions (Разрешения) диалогового окна Schema Properties (Свойства схемы). Все пользователи или роли, которым явно назначены разрешения на схему, перечислены в списке Users or roles (Пользователи или роли). Для того чтобы настроить разрешения для пользователя или роли, повторите указанные ниже действия. 1. В диалоговом окне Schema Properties (Свойства схемы) в списке Select a page (Выберите страницу) выберите страницу Permissions (Разрешения). 2. Чтобы добавить индивидуальные разрешения для пользователей, ролей, или и тех и других, щелкните кнопку Add (Добавить). Откроется диалоговое окно Select Users or Roles (Выбор пользователей или ролей). 3. Введите имена пользователей или ролей, которые необходимо добавить. Разде-ляйте имена точкой с запятой. Можно ввести неполные имена и затем щелкнуть кнопку Check Names (Проверить имена) для их дополнения. Для поиска имен щелкните кнопку Browse (Обзор). По окончании ввода щелкните кнопку OK. 4. В списке Users or roles (Пользователи или роли) выберите пользователя или роль. Далее используйте список Explicit permissions for . (Явные разрешения для .), чтобы назначить разрешения либо отказать в них для выбранного пользователя или роли. 5. Закончив, щелкните кнопку OK для применения изменений.
254 Часть III Управление данными в Microsoft SQL Server 2005 Перемещение объектов в другую схему Как уже говорилось выше, схемы - это контейнеры объектов. Время от времени возникает необходимость переместить объект из одного такого контейнера в другой. Перемещать объекты из схемы в схему можно лишь в пределах одной и той же базы данных. При этом изменяется пространство имен, ассоциированное с объектом, что в свою очередь меняет алгоритм, применяемый сервером для поиска объекта при доступе к нему и выполнении запросов. Перемещение объекта в новую схему влияет также на разрешения, выданные на объект. Все ранее установленные разрешения удаляются. Если владельцем объекта является конкретный пользователь или роль, они и далее будут оставаться владельца-ми объекта. Также когда владелец объекта определен как SCHEMA OWNER (это мож-но сделать с помощью инструкции ALTER AUTHORIZATION), эта установка не изменится, и после перемещения владельцем объекта станет владелец новой схемы. Для перемещения объекта между схемами необходимо обладать разрешением CONTROL на объект и разрешением ALTER на схему, в которую объект перемещается. Если установлен контекст выполнения EXECUTE AS OWNER и владельцем объекта установлен SCHEMA OWNER, требуется также разрешение IMPERSONATE в от-ношении владельца целевой схемы. Чтобы переместить объект в новую схему с помощью утилиты SQL Server Management Studio, выполните указанные ниже действия. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить содержащиеся в ней ресурсы. 3. В контекстном меню таблицы, представления или другого объекта, выбранного для перемещения, щелкните команду View Dependencies (Просмотр зависимостей). В диалоговом окне Object Dependencies (Зависимости объекта) отображены все объекты БД, необходимые для правильного функционирования перемещаемого объекта, а также объекты, от него зависящие. С помощью этого окна попытайтесь выяснить все связи, которые могут быть нарушены при перемещении объекта. Закройте окно, щелкнув кнопку OK. 4. В контекстном меню таблицы, представления или другого объекта выберите ко-манду Modify (Изменить). Если не отображена панель Properties (Свойства), от-кройте ее, нажав клавишу F4. 5. В панели Properties (Свойства) в раскрывающемся списке Schema (Схема), на-ходящемся в разделе Identity, выберите новую схему, которая будет содержать объект. Внимание! Если ранее был установлен флажок Don't warn me again, proceed every time (Больше не предупреждать, продолжать без подтверждения), то все разрешения, назна-ченные на объект, будут удалены немедленно и необратимо. В том случае, когда такое сообщение появилось, щелкните кнопку Yes (Да) для продолжения операции и перемещения объекта в выбранную схему, а чтобы ее отменить - щелкните кнопку No (Нет). Для перемещения объектов между схемами с помощью Transact-SQL используется инструкция ALTER SCHEMA. Пример 9-2 демонстрирует ее синтаксис и использова-ние. Когда применяется эта инструкция для изменения схемы, убедитесь, что текущей выбрана нужная база данных, а не master.
Работа со схемами, таблицами, индексами и представлениями Глава 9 255 Пример 9-2. Синтаксис и использование инструкции ALTER SCHEMA Синтаксис: ALTER SCHEMA target_schema TRANSFER source_schema.object_to_move Использование: ALTER SCHEMA Employees TRANSFER Location.Department Удаление схем Если схема больше не нужна, можно удалить ее из базы данных. Для этого необходимо обладать разрешением CONTROL на схему. Перед удалением схемы следует сначала переместить либо удалить все объекты, которые она содержит. Попытка удалить схему, содержащую другие объекты, закончится неудачей. Чтобы удалить схему с помощью SQL Server Management Studio, выполните ука-занные дальше действия. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить содержащиеся в ней ресурсы. 3. Раскройте узлы Security (Безопасность) и Schema (Схема) для нужной базы данных. В контекстном меню схемы, которую требуется удалить, выберите команду Delete (Удалить). Отобразится диалоговое окно Delete Object (Удаление объекта). 4. Щелкните кнопку OK, чтобы подтвердить операцию удаления. Для удаления схем средствами Transact-SQL используется инструкция DROP SCHEMA. Пример 9-3 демонстрирует ее синтаксис и использование. Когда для уда-ления схемы применяется эта инструкция, убедитесь, что текущей выбрана нужная база данных, а не master. Пример 9-3. Синтаксис и использование инструкции DROP SCHEMA Синтаксис: DROP SCHEMA schema_name Использование: DROP SCHEMA Employees Подготовка к работе с таблицами Такие объекты, как таблицы и индексы, в SQL Server 2005 так же важны, как и сама база данных, особенно когда речь идет о производительности. Таблицы - это вме-стилища информации о какой-либо сущности, например о клиенте или заказе. Чтобы описать свойства (атрибуты) этих сущностей, используются именованные столбцы. Например, для описания свойств клиента применяются столбцы cust_name, cust_address и cust_phone, содержащие имя, адрес и телефон клиента. Каждый экземпляр данных представляется в таблице в виде элементарного набора данных, или строки. Как правило, строки уникальны внутри таблицы, поскольку каж-дая имеет ассоциированный с ней уникальный идентификатор, именуемый первичным ключом (primary key). Тем не менее, согласно стандарту ANSI SQL, использование в таблице первичного ключа не является обязательным требованием. Не обязательно 
256 Часть III Управление данными в Microsoft SQL Server 2005 (но желательно) их применение и в SQL Server. Задача первичного ключа - одно-значно идентифицировать каждую строку таблицы, а также дать возможность SQL Server создать для этого ключа уникальный индекс. Индексы - это определяемые пользователем структуры данных, позволяющие организовать быстрый доступ к данным, если поиск производится по индексированному столбцу (ключу). Индексы хранятся отдельно от таблиц; их можно оптимизировать в автоматическом режиме при помощи утилиты Database Engine Tuning Advisor. Большинство таблиц связано с другими таблицами. Например, в таблице Customers с информацией о клиентах можно определить столбец cust_account, содержащий номер счета клиента. Также столбец cust_account может присутствовать в таблице заказов Orders и дебиторских счетов Receivables. В этом случае, если столбец cust_account является первичным ключом таблицы Customers, то она связана с таблицами Orders и Receivables с помощью внешних ключей (foreign key), каковыми являются столбцы cust_account в таблицах Orders и Receivables. Внешний ключ реализует связь между та-блицами, помогая поддерживать ссылочную целостность (referential integrity) БД. После того как связь установлена, невозможно удалить строку в таблице Customers, если в таблицах Orders или Receivables существуют строки, которые на нее ссылают-ся с помощью ключа cust_account. Эта возможность предотвращает ситуацию, когда ссылки на информацию в других таблицах могут стать недействительными. Поэтому перед удалением строки с первичным ключом в таблице Customers необходимо либо удалить связанные строки в таблицах Orders и Receivables, либо изменить в связанных строках значение внешнего ключа. Отношения между таблицами с помощью внешнего ключа позволяют в запросах объединять данные из связанных таблиц посредством сопоставления внешнего ключа одной таблицы с первичным или уникальным ключом в другой. Сочетание таблиц таким способом называется соединением таблиц (table join), при этом наличие ключей дает возможность SQL Server оптимизировать запрос и быстро найти связанные данные. Основные сведения о таблицах Таблицы являются объектами, определяемыми в БД SQL Server. Состоят таблицы из столбцов и строк данных, причем каждый столбец может хранить данные встроен-ного или пользовательского типа данных. Единицами хранения табличных данных на уровне файла БД являются страницы и экстенты. Страница (page) - основная единица хранения данных в таблице. Экстент (extent) - базовая единица хранения, используемая при выделении пространства для таблиц и индексов. Также данные в таблицах могут быть организованы, используя разделение на секции. Понятие о страницах данных Табличные данные всех типов, за исключением типов данных для больших объектов, хранятся на страницах, имеющих постоянный размер, - 8 Кбайт (8 192 байта). Каждая страница состоит из заголовка, строк данных, свободного пространства и таблицы смещений строк (row offset table). Заголовок страницы занимает первые 96 байтов каждой страницы, оставляя 8096 байтов для данных и таблицы смещений строк. Ука-занная таблица находится в конце страницы. Ее элементы - смещения строк - рас-полагаются в порядке, обратном порядку размещения строк на странице, то есть по-следнее значение в таблице соответствует первой строке на странице, предпоследнее значение - второй и т. д. Если таблица содержит данные типа text или image, то они могут не храниться вместе с остальными элементами строки. Вместо них SQL Server сохраняет 16-байтный указатель на действительные данные, хранящиеся в группе 8-килобайтных страниц, которые далеко не всегда располагаются последовательно. 
Работа со схемами, таблицами, индексами и представлениями Глава 9 257 Этот же метод используется для размещения данных столбцов переменной длины, если размер строки, содержащей такие столбцы, превышает 8 Кбайт. SQL Server 2005 поддерживает 8 типов страниц данных. Bulk Changed Map (Таблица изменений массивного копирования) Содержат информацию об экстентах, измененных операциями массивного копирования со времени создания последней резервной копии журнала транзакций. Data (Данные) Хранят строки данных всех типов, за исключением nvarchar(max), varchar(max), varbinary(max) и xml (также хранятся данные типов text, ntext и image, если параметр таблицы text in row установлен как ON и данные помещаются на странице). Differential Changed Map (Таблица изменений для дифференциальной резервной ко-пии) Содержат информацию об экстентах, измененных со времени создания послед-ней полной резервной копии БД (для их включения в дифференциальную копию). Global Allocation Map, Shared Global Allocation Map (Глобальная таблица распре-де ления пространства, Глобальная разделяемая таблица распределения простран-ства) Заключают информацию об экстентах, которые были выделены SQL Server. Index Allocation Map (Таблица распределения индексного пространства) Име-ют информацию об экстентах, используемых таблицами или индексами. Index (Индексы) Хранят данные индексов. Page Free Space (Свободное страничное пространство) Содержат информацию о свободном пространстве на страницах. Text/Image (Текст/Изображение) Хранят данные типа text, ntext, image, nvarchar(max), varchar(max), varbinary(max) и xml, а также данные столбцов переменной длины, если размер строки превышает 8 Кбайт (типы данных varchar, nvarchar, varbinary и sql_variant). SQL Server хранит данные внутри страниц в виде строк. Максимальный размер одной строки данных ограничен 8096 байтами (включая всю служебную информацию). На деле это означает, что размер столбца не может превышать 8000 байтов (кроме типов данных для больших объектов), а значит, в столбце хранится до 8000 символов ASCII или до 4000 двухбайтных символов в кодировке UNICODE. Значения типов данных для больших объектов могут достигать размера 2 Гбайт, что, конечно же, не помещается на одной странице. Большие объекты хранятся в группах 8-килобайтных страниц, размещающихся как последовательно, одна за другой, так и в произвольном порядке. Хотя для больших объектов, размер которых превышает 8096 байтов, хранение данных в группах страниц является оптимальным, в тех случаях, когда размер данных ниже этого предела, такой механизм не является наилучшим. Предпочтительнее в по-добных объектах сохранять все данные в одной строке. Для этого нужно установить параметр таблицы text in row в значение ON, и тогда все значения типов данных text, ntext и image, если их размер позволяет, будут храниться непосредственно в строке данных, а не на отдельных страницах*. Кроме того, такой подход позволит уменьшить объем данных, перемещаемых при их выборке операциями дискового ввода-вывода. * Параметр таблицы text in row устанавливается с помощью хранимой процедуры sp_tableoption. Microsoft не рекомендует использование этого параметра в новых разработках, поскольку планирует отказаться от него в одной из следующих версий SQL Server. Это означает, что следует постепенно отказываться и от типов данных text, ntext и image в пользу varchar(max), nvarchar(max) и varbinary(max), для которых параметром, управляющим сохранением данных в строке, является large value types out of row. - Прим. ред.
258 Часть III Управление данными в Microsoft SQL Server 2005 Примечание Для таблицы, имеющей постоянную длину строк, их количество на каждой странице одинаково. Однако для таблицы со строками переменной длины на каждой стра-нице хранится наибольшее количество из возможного, в зависимости от длины введенных данных. Очевидно, можно ожидать значительного улучшения производительности, если все данные, принадлежащие строке, физически размещены рядом, и если количество строк, помещающихся на странице, максимально. Чем больше строк на странице, тем выше процент успешных обращений к кэшу и тем меньше операций ввода-вывода. Понятие об экстентах Экстент - это группа из восьми смежных страниц. Выделение пространства для экс-тентов производится блоками по 64 Кбайт, то есть в 1 Мбайт - 16 экстентов. SQL Server 2005 использует два типа экстентов. Смешанный Экстенты данного типа содержат страницы, принадлежащие раз-личным объектам. То есть, владеть хотя бы одной страницей в экстенте могут до восьми объектов. Однородный В этом случае страницы экстента принадлежат одному объекту. Иначе говоря, владеет всеми восемью страницами экстента один и тот же объект. При создании новой таблицы или индекса SQL Server выделяет страницы из какого-либо смешанного экстента. Таблица или индекс используют страницы из сме-шанного экстента до тех пор, пока размер объекта не возрастет настолько, что сможет занять восемь страниц данных. Тогда SQL Server автоматически объединяет страницы в однородный экстент и применяет его для хранения таблицы или индекса до тех пор, пока они занимают не меньше восьми страниц. Понятие о секциях таблицы В SQL Server 2005 таблицы размещаются в одной или более секции (partition), каж-дая из которых содержит строки данных, организованные в виде кучи (heap) или кластерного индекса. Секционирование больших таблиц позволяет управлять под-множествами данных таблицы и уменьшать время отклика при обращении к ней. Для улучшения производительности операций чтения и записи различные секции можно также разместить в разных группах файлов. По умолчанию таблицы имеют одну секцию. Когда в таблице несколько секций, ее данные разделены горизонтально таким образом, что группы строк попадают в каждую секцию согласно определенному критерию, например значению столбца. Так, можно секционировать таблицу заказов клиента Customer_Order по дате покупки. В этом случае таблица будет разделена на основании диапазонов дат - с секциями, содержащими информацию в разрезе по годам, кварталам или месяцам. Таблицу Customer также можно секционировать, например по имени пользователя. Тогда секции, созданные на основании диапазонов имен, будут хранить информацию о клиентах, чьи имена начинаются с определенной буквы, скажем с A, B, C, D и т. д., или с сочетания букв, к примеру от Aa до Ez, от Fa то Jz, от Ka до Oz, от Pa до Tz, и от Ua до Zz. Работа с таблицами SQL Server предоставляет разнообразные средства для работы с таблицами. Создать таблицу можно, либо используя окно Table Designer (Конструктор таблиц) утилиты SQL Server Management Studio, которое открывается командой New Table (Создать таблицу) в контекстном меню таблицы, либо с помощью инструкции CREATE TABLE. Изменить структуру существующей таблицы также можно одним из двух способов: 
Работа со схемами, таблицами, индексами и представлениями Глава 9 259 в кне Table Designer (Конструктор таблиц), открыв его командой Modify (Изменить) в контекстном меню таблицы, или применив инструкцию ALTER TABLE. Подобные варианты выбора существуют и для проведения других операций с таблицами, таких как копирование, переименование и удаление. Создание таблиц Перед созданием таблицы необходимо дать ей имя, следуя, как и в случае со схемами, определенным правилам (см. раздел "Создание схем"). Исключением являются вре-менные таблицы, существующие лишь на протяжении текущего сеанса соединения. Локальные временные таблицы видимы только создавшему их пользователю; имена таких таблиц должны начинаться с символа #. Глобальные временные таблицы видны всем пользователям (пока не закроется соединение создавшего их пользователя); их нужно начинать с символов ##. Временные таблицы создаются в системной БД tempdb и автоматически удаляются по окончании сеанса создавшего их пользователя. Имя таблицы должно быть уникальным в пределах каждой схемы внутри базы данных. В то же время разные схемы могут содержать таблицы с одинаковыми име-нами. Это значит, например, что вполне реально создать множество таблиц с именем Contacts, определив их, однако, в различные схемы. То есть вы будете иметь схемы Customers, Employees и Services со своей таблицей Contacts каждая. Таблица может иметь до 1024 столбцов. Имена столбцов должны соответствовать тем же правилам, что и имена таблиц, при этом их уникальность обеспечивается в пределах таблицы. Таким образом, каждая конкретная таблица будет иметь, напри-мер, лишь один столбец StreetAddress, но столбец с таким именем может входить в структуру любого количества других таблиц. Для того чтобы создать таблицу в SQL Server Management Studio, выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. Для успешного продолжения работы нужно иметь разрешение CREATE TABLE в базе данных и разрешение ALTER на схему, в которой будет создаваться таблица. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить узлы содержащихся в ней ресурсов. 3. В контекстном меню узла Tables (Таблицы) выберите команду New Table (Создать таблицу). Откроется окно Table Designer (Конструктор таблиц), подобное изо-браженному на рис. 9-2. 4. Теперь можно разрабатывать структуру таблицы, используя предоставляемые элементы интерфейса. : Область Table (Таблица) окна Table Designer (Конструктор таблиц) Ото-бражает основные сведения о столбцах текущей таблицы: Column Name (Имя столбца), Data Type (Тип данных), Allow Nulls (Разрешить значения NULL). При выборе типа данных постоянной или переменной длины можно ввести длину соответствующего поля. : Вкладка Column Properties (Свойства столбца) окна Table Designer (Кон-структор таблиц) Когда в области Table (Таблица) выбирается определенный столбец таблицы, внизу на вкладке Column Properties (Свойства столбца) ото-бражаются его свойства. Здесь же можно устанавливать значения некоторых параметров. Свойства, отображенные как недоступные для выбора, имеют фиксированное значение и не могут быть изменены. Как правило, значения 
260 Часть III Управление данными в Microsoft SQL Server 2005 таких фиксированных свойств зависят от типа данных столбца и свойств, уна-следованных от объекта Database (База данных). : Панель Properties (Свойства) Позволяет просматривать и устанавливать общие свойства таблицы, в том числе ее имя, описание и имя схемы, которой она принадлежит. Если эта панель не отображена, ее можно вывести, нажав клавишу F4. Все свойства, показанные как недоступные для выбора, не могут быть изменены на уровне таблицы. Ими следует управлять на уровне БД. : Панель Summary (Сводная информация) Отображает перечень всех таблиц в БД, содержащий имя таблицы, ассоциированную с ней схему и время создания таблицы. Дважды щелкнув в списке таблицу, можно просмотреть связанные с ней объекты. Если эта панель не отображена, нажмите клавишу F7. Рис. 9-2. Создание и изменение таблиц в SQL Server Management Studio 5. Для проектирования таблицы можно также использовать команды меню Table Designer (Конструктор таблиц), которое добавляется в основное меню при ото-бражении окна конструктора таблиц. Применять команды меню следует таким образом: сначала выбирается необходимый столбец таблицы в области Table (Та-блица) окна конструктора таблиц, затем - команда меню Table Designer (Кон-структор таблиц). Те же самые команды можно выбрать в контекстном меню, щелкнув правой кнопкой мыши нужный столбец в области Table (Таблица) окна конструктора таблиц. При создании таблицы важно сделать следующее. Определить с помощью панели Properties (Свойства) имя и описание таблицы, а также указать содержащую ее схему. Введите имя таблицы в поле Name (Имя), а ее описание - в поле Description (Описание). Для выбора ассоциированной схемы используйте раскрывающийся список Schema (Схема).
Работа со схемами, таблицами, индексами и представлениями Глава 9 261 Используя панель Properties (Свойства), определить группу (или группы) файлов, в которых будут храниться данные таблицы. Параметры для обычных данных и для данных больших объектов задаются отдельно. : Для указания места хранения обычных данных раскройте узел раздела Regular Data Space Specification (Спецификация пространства для обычных данных) и в раскрывающемся списке Filegroup or Partition Scheme Name (Группа файлов или схема секционирования) выберите группу файлов. : Чтобы задать место хранения данных больших объектов, используйте рас-крывающийся список Text/Image Filegroup (Группа файлов для данных типа Text/Image). Определить столбцы, используя область Table (Таблица) окна конструктора таблиц. : Строки в области Table (Таблица) окна конструктора таблиц соответствуют столбцам таблицы, с которой производится работа. На рис. 9-2, например, среди других показаны столбцы CreditCardID, CardType и CardNumber. : Столбцы в области Table (Таблица) окна конструктора таблиц соответствуют свойствам столбцов таблицы, с которой производится работа. Так, на рис. 9-2 среди других показаны свойства Name (Имя), Data Type (Тип данных) и Allow Nulls (Разрешить значения NULL). С помощью команды меню Table Designer (Конструктор таблиц) назначить столбец первичным ключом, установить отношение между таблицами по внешнему ключу, определить для столбца ограничения на его значения и т. п. С помощью вкладки Column Properties (Свойства столбца) определить отображе-ние или установку таких свойств создаваемых столбцов, как: : Name (Имя) - имя; : Allow Nulls (Разрешить значения NULL) - разрешение или запрещение зна-чения NULL; : Default Value or Binding (Значения по умолчанию или связанные значения) - значение по умолчанию или связанное значение (глобальное умолчание), кото-рое используется каждый раз, когда строка со значением NULL в этом столбце добавляется в таблицу, и значения NULL для столбца запрещены; : Precision (Точность) - максимальное количество десятичных знаков для зна-чений столбца; применимо только для типа данных decimal; : Scale (Степень) - максимальное количество цифр после десятичной запятой; : Is Identity (Идентифицирующий столбец) - сохранение столбцом числовых идентификаторов строк; в раскрывающемся списке выберите Yes (Да) или No (Нет); : Identity Seed (Начальное значение идентифицирующего столбца) - началь-ное значение идентифицирующего столбца; применимо только к столбцам, для ко то рых свойство Is Identity (Идентифицирующий столбец) установлено в Yes (Да); : Identity Increment (Шаг прироста идентифицирующего столбца) - шаг при-роста идентифицирующего столбца; применимо только к столбцам, для которых свойство Is Identity (Идентифицирующий столбец) установлено в Yes (Да); : RowGuid (GUID строки) - наличие в столбце глобальных уникальных иден-тификаторов строк; применимо только к столбцам, для которых определен тип данных uniqueidentifier;
262 Часть III Управление данными в Microsoft SQL Server 2005 : Formula (Формула) - формула для вычисляемого столбца; : Collation (Сопоставление) - порядок сопоставления по умолчанию, приме-няемый SQL Server к столбцу, когда хранимые в нем значения используются для сортировки строк результатов запроса. По окончании создания таблицы щелкните кнопку Save (Сохранить) в панели инструментов или нажмите клавиши Ctrl+S. Создавать таблицы можно также средствами Transact-SQL. Для этого применяется инструкция CREATE TABLE. В примере 9-4 показаны ее синтаксис и использование. Здесь создается таблица Customers в схеме Sales. Необходимо обладать разрешением CREATE TABLE в БД и разрешением ALTER на схему, в которой создается таблица. Пример 9-4. Синтаксис и использование инструкции CREATE TABLE Синтаксис: CREATE TABLE [ database_name. [ schema_name ]. | schema_name. ] table_name ( { <column_definition> | <computed_column_definition> } [ <table_constraint> ] [ ,...n ] ) [ ON { partition_scheme_name ( partition_column_name ) | filegroup_name | "DEFAULT" } ] [ { TEXTIMAGE_ON { filegroup_name | "DEFAULT" } ] [ ; ] <column_definition> ::= column_name <data_type> [ COLLATE collation_name ] [ NULL | NOT NULL ] [ [ CONSTRAINT constraint_name ] DEFAULT constant_expression ] | [ IDENTITY [ ( seed, increment ) ] [ NOT FOR REPLICATION ] ] [ ROWGUIDCOL ] [ <column_constraint> [ ...n ] ] <data type> ::= [ type_schema_name. ] type_name [ ( precision [ , scale ] | max | [ { CONTENT | DOCUMENT } ] xml_schema_collection ) ] <column_constraint> ::= [ CONSTRAINT constraint_name ] { { PRIMARY KEY | UNIQUE } [ CLUSTERED | NONCLUSTERED ] [ WITH FILLFACTOR = fillfactor | WITH ( <index_option> [ ,...n ] ) ] [ ON { partition_scheme_name ( partition_column_name ) | filegroup_name | "DEFAULT" } ] | [ FOREIGN KEY ] REFERENCES [ schema_name. ] ref_table_name [ ( ref_column_name ) ]
Работа со схемами, таблицами, индексами и представлениями Глава 9 263 [ ON DELETE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ] [ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ] [ NOT FOR REPLICATION ] | CHECK [ NOT FOR REPLICATION ] ( logical_expression ) } <computed_column_definition> ::= column_name AS computed_column_expression [ PERSISTED [ NOT NULL ] ] [ [ CONSTRAINT constraint_name ] { PRIMARY KEY | UNIQUE } [ CLUSTERED | NONCLUSTERED ] [ WITH FILLFACTOR = fillfactor | WITH ( <index_option> [ ,...n ] ) ] | [ FOREIGN KEY ] REFERENCES ref_table_name [ ( ref_column_name ) ] [ ON DELETE { NO ACTION | CASCADE } ] [ ON UPDATE { NO ACTION } ] [ NOT FOR REPLICATION ] | CHECK [ NOT FOR REPLICATION ] ( logical_expression ) [ ON { partition_scheme_name ( partition_column_name ) | filegroup_name | "DEFAULT" } ] ] <table_constraint > ::= [ CONSTRAINT constraint_name ] { { PRIMARY KEY | UNIQUE } [ CLUSTERED | NONCLUSTERED ] ( column_name [ ASC | DESC ] [ ,...n ] ) [ WITH FILLFACTOR = fillfactor | WITH ( <index_option> [ ,...n ] ) ] [ ON { partition_scheme_name ( partition_column_name ) | filegroup_name | "DEFAULT" } ] | FOREIGN KEY ( column_name [ ,...n ] ) REFERENCES ref_table_name [ ( ref_column_name [ ,...n ] ) ] [ ON DELETE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ] [ ON UPDATE { NO ACTION | CASCADE | SET NULL | SET DEFAULT } ] [ NOT FOR REPLICATION] | CHECK [ NOT FOR REPLICATION ] ( logical_expression } } <index_option> ::= { PAD_INDEX = { ON | OFF } | FILLFACTOR = fillfactor | IGNORE_DUP_KEY = { ON | OFF } | STATISTICS_NORECOMPUTE = { ON | OFF } | ALLOW_ROW_LOCKS = { ON | OFF } | ALLOW_PAGE_LOCKS ={ ON | OFF } }
264 Часть III Управление данными в Microsoft SQL Server 2005 Использование: USE OrderSystemDB CREATE TABLE Sales.Customers ( cust_lname varchar(40) NOT NULL, cust_fname varchar(20) NOT NULL, phone char(12) NOT NULL, uid uniqueidentifier NOT NULL DEFAULT newid() ) Изменение структуры существующих таблиц Чтобы изменить структуру существующей таблицы при помощи SQL Server Management Studio, выполните указанные действия. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить узлы содержащихся в ней ресурсов. 3. Раскройте узел Tables (Таблицы) и в контекстном меню таблицы, которую нужно изменить, выберите команду Modify (Изменить). Отобразится окно Table Designer (Конструктор таблиц), показанное ранее на рис. 9-2. 4. Выполните все необходимые изменения в структуре таблицы, после чего щелкните в па нели инструментов кнопку Save (Сохранить) или нажмите клавиши Ctrl+S. Если изменения затрагивают множество таблиц, отобразится запрос на подтверж-дение операции, в котором будут перечислены сохраняемые таблицы. Щелкните кнопку Yes (Да). Для изменения структуры таблиц с помощью Transact-SQL применяется инструк-ция ALTER TABLE. Пример 9-5 демонстрирует ее синтаксис и использование. Здесь изменяется структура таблицы Customers, содержащейся в схеме Sales. Необходимо обладать разрешением ALTER TABLE. Пример 9-5. Синтаксис и использование инструкции ALTER TABLE Синтаксис: ALTER TABLE [ database_name. [ schema_name ]. | schema_name. ] table_name { ALTER COLUMN column_name { [ type_schema_name. ] type_name [ ( { precision [ , scale ] | max | xml_schema_collection } ) ] [ NULL | NOT NULL ] [ COLLATE collation_name ] | { ADD | DROP } { ROWGUIDCOL | PERSISTED } } | [ WITH { CHECK | NOCHECK } ] ADD { <column_definition> | <computed_column_definition> | <table_constraint> } [ ,...n ] | DROP { [ CONSTRAINT ] constraint_name [ WITH ( <drop_clustered_constraint_option> [ ,...n ] ) ] | COLUMN column_name } [ ,...n ]
Работа со схемами, таблицами, индексами и представлениями Глава 9 265 | [ WITH { CHECK | NOCHECK } ] { CHECK | NOCHECK } CONSTRAINT { ALL | constraint_name [ ,...n ] } | { ENABLE | DISABLE} TRIGGER { ALL | trigger_name [ ,...n ] } | SWITCH [ PARTITION source_partition_number_expression ] TO [ schema_name. ] target_table [ PARTITION target_partition_number_expression ] } [ ; ] <drop_clustered_constraint_option> ::= { MAXDOP = max_degree_of_parallelism | ONLINE = { ON | OFF } | MOVE TO { partition_scheme_name ( column_name ) | filegroup_name | "DEFAULT" } } Использование: USE OrderSystemDB ALTER TABLE Sales.Customers ADD uid2 uniqueidentifier NOT NULL DEFAULT newid() ALTER TABLE Sales.Customers ALTER COLUMN cust_fname char(10) NOT NULL ALTER TABLE Sales.Customers DROP Address2 Просмотр информации о размере таблицы и количестве строк в ней Чтобы в SQL Server Management Studio просмотреть информацию о размере таблицы и количестве строк в ней, выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить узлы содержащихся в ней ресурсов. 3. Раскройте узел Tables (Таблицы) и в контекстном меню таблицы, информацию о которой необходимо просмотреть, выберите команду Properties (Свойства). Ото-бразится диалоговое окно Table Properties (Свойства таблицы), показанное на рис. 9-3. 4. На странице General (Общие) в разделе Storage (Хранилище) предоставлены под-робные сведения об используемом пространстве: : объем дискового пространства, занимаемый таблицей, - в поле Data space (Пространство данных); : размер дискового пространства, занимаемый индексами таблицы, - в поле Index space (Пространство индексов); : количество строк в таблице - в поле Row count (Количество строк). Также информацию о количестве строк, размере и занимаемом дисковом простран-стве отдельных таблиц можно просмотреть, выполнив хранимую процедуру sp_spaceused. Следующий фрагмент кода переходит в БД OrderSystemDB и затем отображает статистическую информацию о таблице Customers, находящейся в схеме Sales:
266 Часть III Управление данными в Microsoft SQL Server 2005 USE OrderSystemDB EXEC sp_spaceused 'Sales.Customers' Рис. 9-3. Диалоговое окно Table Properties Отображение свойств и разрешений таблицы Для отображения свойств и разрешений таблицы при помощи SQL Server Management Studio выполните указанные действия. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить узлы содержащихся в ней ресурсов. 3. Раскройте узел Tables (Таблицы) и выберите в контекстном меню таблицы, инфор-мацию о которой нужно просмотреть, команду Properties (Свойства). Отобразится диалоговое окно Table Properties (Свойства таблицы), показанное ранее на рис. 9-3. 4. Используйте страницы General (Общие), Permissions (Разрешения) и Extended Properties (Расширенные свойства) этого диалогового окна для просмотра свойств и разрешений таблицы. Отображение текущих значений данных в таблицах Чтобы отобразить свойства и разрешения таблицы при помощи SQL Server Management Studio, выполните следующие действия. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД, чтобы отобразить узлы содержащихся в ней ресурсов.
Работа со схемами, таблицами, индексами и представлениями Глава 9 267 3. Раскройте узел Tables (Таблицы) и в контекстном меню таблицы, которую нужно просмотреть, выберите команду Open Table (Открыть таблицу). Отобразятся все строки, содержащиеся в таблице. 4. Открывшееся окно является, по сути, окном Query Designer (Конструктор за-просов), в котором отображена только область результатов. В нижней части окна расположены кнопки для перехода между строками таблицы и там же находится строка состояния. Если выбранная ячейка таблицы является недоступной для модификации, в строке состояния отображается сообщение Cell Is Read Only (Ячейка только для чтения). А сообщение Cell Is Modified (Ячейка изменена) выводится в строке состояния, когда значение ячейки было изменено в текущем сеансе редактирования. Просмотреть хранящиеся в таблице данные можно также, используя инструкцию SELECT FROM. Следующий фрагмент кода демонстрирует пример выборки данных из таблицы Department, принадлежащей схеме HumanResources, которая находится в БД Personnel: SELECT * FROM [Personnel].[HumanResources].[Department] или: SELECT DepartmentID, Name, GroupName, ModifiedDate FROM [Personnel].[HumanResources].[Department] Копирование таблиц Наипростейший способ создать копию таблицы - применить Transact-SQL. Исполь-зуйте инструкцию SELECT INTO для выборки всех строк из существующей таблицы в новую. Нельзя назначать создаваемой таблице имя, если уже существует аналогичное. В следующем примере таблица Customers, содержащаяся в схеме Sales, копируется в новую таблицу CurrCustomers, принадлежащую схеме BizDev: SELECT * INTO BizDev.CurrCustomers FROM Sales.Customers Новая таблица может содержать не все столбцы исходной таблицы, а определенное их подмножество. Для этого нужно указать имена столбцов после ключевого слова SELECT. Все столбцы, которые не будут перечислены таким образом, исключаются из результирующей таблицы. В представленном ниже примере в новую таблицу ко-пируются лишь определенные столбцы: SELECT CustName, Address, Telephone, Email INTO BizDev.CurrCustomers FROM Sales.Customers Переименование и удаление таблиц Для переименования или удаления таблицы в SQL Server Management Studio по-вторите представленные дальше действия. 1. Раскройте узел нужной базы данных, а затем узел Tables (Таблицы) для отобра-жения всех определенных в БД таблиц. 2. В контекстном меню таблицы, которую требуется переименовать или удалить, выберите команду View Dependencies (Просмотр зависимостей). Отобразится диа-логовое окно Object Dependencies (Зависимости объекта), где будут перечислены объекты, от которых зависит корректное функционирование выбранной таблицы, а также объекты, в свою очередь, зависящие от нее. Используйте сведения, пред-ставленные в этом окне, чтобы понять, какие зависимости существуют и могут быть разорваны после переименования или удаления выбранной таблицы. Закройте окно кнопкой OK.
268 Часть III Управление данными в Microsoft SQL Server 2005 3. Чтобы переименовать таблицу, выберите в ее контекстном меню команду Rename (Переименовать). На месте имени таблицы отобразится поле, где можно ввести новое имя. 4. Чтобы удалить таблицу, в ее контекстном меню выберите команду Delete (Удалить) и в появившемся диалоговом окне Delete Object (Удаление объекта) щелкните кнопку OK. Также можно переименовывать таблицы с помощью хранимой процедуры sp_rename. Для успешного завершения этой операции необходимо обладать разрешением ALTER TABLE и быть членом встроенных ролей сервера sysadmin или dbcreator. В следующем примере таблица Customers, содержащаяся в схеме Sales, переимено-вывается в CurrCustomers: EXEC sp_rename 'Sales.Customers', 'CurrCustomers' Удаляется таблица из базы данных с помощью инструкции DROP TABLE. Для этого необходимо иметь разрешение ALTER на схему, которой принадлежит таблица, или разрешение CONTROL на саму таблицу: DROP TABLE Sales.CurrCustomers Если необходимо удалить строки таблицы, оставив без изменений ее структуру, используйте инструкцию DELETE. В представленном ниже примере удаляются все строки таблицы, но структура таблицы остается в БД: DELETE Sales.CurrCustomers Для использования инструкции DELETE требуется обладать определенными привилегиями: быть членом встроенной роли сервера sysadmin либо встроенных ролей БД db_owner или db_datawriter; также можно быть владельцем таблицы или же обладать разрешением DELETE на таблицу. Добавление и удаление столбцов таблицы средствами Transact-SQL Мы уже научились добавлять и удалять столбцы таблицы с помощью SQL Server Management Studio: об этом рассказывалось в разделах "Создание таблиц" и "Из-менение структуры существующих таблиц". Средствами Transact-SQL это можно сделать при помощи инструкции ALTER TABLE, синтаксис и пример использования которой были показаны выше, в примере 9-5. Добавление столбцов В следующем примере в структуру таблицы Customers, принадлежащую схеме Sales, до-бавляется столбец, хранящий значения глобальных уникальных идентификаторов: USE OrderSystemDB ALTER TABLE Sales.Customers ADD uid uniqueidentifier NOT NULL DEFAULT newid() Изменение столбцов Для изменения свойств существующего столбца используйте инструкцию ALTER COLUMN, как показано в примере: USE OrderSystemDB ALTER TABLE Sales.Customers ALTER COLUMN cust_fname char(10) NOT NULL
Работа со схемами, таблицами, индексами и представлениями Глава 9 269 Удаление столбцов В следующем примере из таблицы Customers удаляется столбец Address2: USE OrderSystemDB ALTER TABLE Sales.Customers DROP COLUMN Address2 Создание сценариев для таблиц Все инструкции SQL, необходимые для создания таблиц в базе данных, можно вос-создать и записать в файл сценария (такие файлы имеют расширения .sql) для по-следующего использования. Чтобы сделать это, выполните представленные ниже действия. 1. В SQL Server Management Studio раскройте узел нужной базы данных, а затем узел Tables (Таблицы) для отображения всех таблиц БД. 2. В контекстном меню требуемой таблицы выберите команду Script Table as\CREATE To\File (Создать сценарий для таблицы как\CREATE в\Файл). 3. Отобразится диалоговое окно Select a file (Выберите файл). Укажите папку и имя для файла сценария и щелкните кнопку Save (Сохранить). В созданный файл сценария будут записаны все инструкции Transact-SQL, необ-ходимые для воссоздания структуры таблицы. Однако сами данные таким образом перенести невозможно. Для этого лучше использовать, например, процедуры экспорта и импорта. Управление значениями данных в таблицах В этом разделе описаны методы и разъяснены понятия, необходимые для работы со значениями данных в таблицах. Следует сказать, что как при создании, так и при изменении таблиц методы и понятия, в сущности, одинаковы. Использование встроенных типов данных Встроенные типы данных SQL Server поддерживаются непосредственно ядром базы данных. Все типы данных имеют длину (length), которая может быть постоянной или переменной. В отношении типа данных decimal или binary длина - это количество байтов, используемых для хранения числа, а у типа данных character она равна коли-честву символов в данных. Для данных типа decimal в большинстве случаев опреде-ляется их точность и степень. Точность (precision) - это максимальное число цифр в числе. Степень (scale) - максимальное количество цифр после десятичной запятой. Например, для числа 8 714,235 точность равна семи, а степень - трем. В табл. 9-1 приведены встроенные типы данных, предназначенные для хранения числовых и денежных значений. В первом столбце показаны встроенные типы данных SQL Server. Второй столбец представляет диапазон значений для данных каждого типа. А в третьем отображено количество байтов, выделяемых для хранения каждого типа данных. В табл. 9-2 приведены встроенные типы данных, предназначенные для хранения информации о дате и времени, а также символьных и бинарных данных. Как и в преды дущей таблице, в первом столбце перечислены встроенные типы данных SQL Server, во втором - представлен диапазон значений для данных каждого типа, в тре-тьем - количество байтов, выделяемых для хранения каждого типа данных.
270 Часть III Управление данными в Microsoft SQL Server 2005 Табл. 9-1. Встроенные типы данных для числовых и денежных значений Имя SQL Server Диапазон - описание Занимаемое пространство Целочисленные bit 0, 1 или NULL 1 байт на каж дые восемь столбцов bigint От -2^63 до 2^63-1 8 байтов int От -2^31 (-2 147 483 648) до 2^31-1 (2 147 483 647) 4 байта smallint От -2^15 (-32 768) до 2^15-1 (32 767) 2 байта tinyint От 0 до 255 1 байт Денежные money От -922 337 203 685 477,5808 до 922 337 203 685 477,5807 8 байтов smallmoney От -214 748,3648 до 214 748,3647 4 байта Десятичные числа decimal От -10^38+1 до 10^38-1 От 5 до 17 байтов Приблизительные числовые float От -1,79E+308 до -2,23E-308, 0 и от 2,23E-308 до 1,79E+308; float[(n)], где n = 1.53 От 4 до 8 байтов real От -3,40E+38 до -1,18E-38; 0 и от 1,18E-38 до 3,40E+38; float[(n)], где n = 1.24 4 байта Другие cursor Ссылка на курсор Переменное rowversion, timestamp Числовое значение, уникальное в пределах БД, указывающее порядок, в каком измене ния происходили в БД (rowversion - это си ноним для timestamp) 8 байтов sql_variant Специальный тип данных, позволяющий со х ранять в одном столбце данные раз лич ных типов (за исключе-нием text, ntext, image, timestamp, xml, varchar(max), varbina ry(max), nvarchar(max) и пользовательских типов данных .NET) Переменное table Специальный тип данных, используемый для временного хранения результирующего набора данных с целью после-дующей обра ботки. Может быть использован только для определения локальных переменных и как тип возвращае-мого значения в пользова тель ских функциях Переменное uniqueidentifier Глобальный уникальный идентификатор (GUID) 16 байтов xml Специальный тип данных, позволяющий хра нить данные XML, которые опреде ляют ся с использованием стандарт-ных текстовых символов Переменное Табл. 9-2. Встроенные типы данных для дат и времени, символьных и бинарных данных Имя SQL Server Диапазон - описание Занимаемое пространство Дата и время datetime От 1 января 1753 г. до 31 декабря 9999 г. с точностью до 3,33 мс Два 4-байтных целых smalldatetime От 1 января 1900 г. до 6 июня 2079 г. с точностью до 1 мин Два 2-байтных целых
Работа со схемами, таблицами, индексами и представлениями Глава 9 271 Имя SQL Server Диапазон - описание Занимаемое пространство Символьные/Текстовые char Символьные данные постоянной длины не в коди-ровке UNICODE; максимальная длина - до 8 000 сим волов 1 байт для каждо го символа (фик си рует ся при создании) varchar Символьные данные переменной длины не в кодировке UNICODE; максимальная длина - до 8 000 символов 1 байт для каждого символа + 2-байтный указатель (реально varchar(max) Символьные данные переменной длины не введенных данных) в кодировке UNICODE; максимальная длина - до 2^31-1 (2 147 483 647) символов. text Символьные данные переменной длины не в коди-ровке UNICODE; максимальная длина - до 2^31-1 (2 147 483 647) символов 1 байт для каждого символа nchar Символьные данные фиксированной длины в кодировке UNICODE; максимальная длина - до 4 000 символов 2 байта для каждого символа (фиксируется при создании) nvarchar Символьные данные переменной длины в кодировке UNICODE; максимальная длина - до 4 000 символов 2 байта для каждого символа + 2-байтный указатель (реально nvarchar(max) Символьные данные переменной длины введенных данных) в кодировке UNICODE; максимальная длина - до 2^30-1 (1 073 741 823) символов ntext Символьные данные переменной длины в кодировке UNICODE; максимальная длина - до 2^30-1 (1 073 741 823) символов 2 байта для каждого символа Бинарные binary Бинарные данные фиксированной длины; максимальная длина - до 8 000 байтов Размер данных в байтах (фиксируется при создании) varbinary Бинарные данные переменной длины; максимальная длина - до 8 000 байтов Размер данных в байтах + 2-байтный указатель (реально varbinary(max) Бинарные данные переменной длины; максималь-введенных данных) ная длина - до 2^31-1 (2 147 483 647) байтов image Бинарные данные переменной длины; максималь-ная длина - до 2^31-1 (2 147 483 647) байтов Размер данных в байтах При создании или изменении таблицы в SQL Server Management Studio (окно Table Designer (Конструктор таблиц)) для назначения столбцу встроенного типа данных нужно щелкнуть в столбце Data Type (Тип данных) ячейку, соответствующую редактируемому столбцу таблицы, и затем выбрать подходящий элемент в раскрыва-ющемся списке типов данных. Используя средства Transact-SQL, задать тип данных для столбца можно либо во время создания таблицы и, соответственно, добавления в нее столбцов, либо во время изменения структуры таблицы, когда также можно до-бавить столбцы или изменить их свойства. В примере 9-6 показано, как можно создать таблицу и ее столбцы с помощью инструкций Transact-SQL. Пример 9-6. Создание таблицы и ее столбцов USE OrderSystemDB CREATE TABLE Sales.Customers ( CustomerID nchar(5) NOT NULL, Табл. 9-2. (окончание)
272 Часть III Управление данными в Microsoft SQL Server 2005 CompanyName nvarchar(40) NOT NULL, ContactName nvarchar(30) NOT NULL, ContactTitle nvarchar(30) NOT NULL, Address nvarchar(60) NOT NULL, City nvarchar(15) NULL, Region nvarchar(15) NULL, PostalCode nvarchar(5) NULL, Country nvarchar(15) NULL, Phone nvarchar(24) NULL, Fax nvarchar(24) NULL ) Использование типов данных постоянной, переменной и максимальной длины Бинарные и символьные типы данных могут быть определены как имеющие посто-янную, переменную или максимальную длину. При использовании типов данных постоянной длины в БД для каждого столбца такого типа резервируется необходимое пространство в соответствии с указанной при его определении длиной. Это позволяет обойтись без сохранения информации о длине столбца и без пересчета его длины каждый раз при операциях с ним, что ускоряет изменение данных в таких столбцах по сравнению со столбцами переменной длины. В случае типов данных переменной длины SQL Server пытается разместить на странице данных максимально возможное количество строк, поскольку тогда данные считываются постранично, а значит, более эффективно. Таким образом, применение таких типов данных улучшает производи-тельность операций чтения. При использовании типов данных максимальной длины SQL Server сохраняет вместе с обычными данными таблицы двухбайтный указатель на реальные данные, которые находятся в пространстве, предназначенном для хранения больших объектов. В общем случае следует использовать: типы данных постоянной длины, когда размер данных изменяется незначительно; типы данных переменной длины, когда размер данных от значения к значению существенно меняется; типы данных максимальной длины, когда размер данных превосходит предел для данных постоянной или переменной длины. Чтобы лучше понять, как применение того или иного типа данных влияет на про-изводительность, рассмотрим такую ситуацию. Строка, состоящая из четырех столбцов постоянной длины по 80, 120, 40 и 500 байтов каждый, всегда занимает 750 байтов (740 байтов данных + 10 байтов служебной информации). В этом случае на каждой странице данных помещается 10 строк (8096 /750 нацело). Однако при использовании столбцов переменной длины, количество строк и длина каждой из них на странице могут меняться. Предположим, например, что средняя длина такой строки равна 400 байтов. Сюда входят 380 байтов данных и 20 байтов служебной информации (на каждую строку 12 байтов общей информации и по 2 байта на каждый столбец переменной длины, итого: 12 + 4 * 2 = 20). В этом случае на каж-дой странице данных помещается 20 строк (8096 /400 нацело), что может ускорить операции чтения по сравнению с примером, в котором использовались столбцы по-стоянной длины. Использование пользовательских типов данных Пользовательские типы данных - это специальные типы данных, созданные на основе встроенных типов данных. Их удобно применять в ситуациях, когда в нескольких 
Работа со схемами, таблицами, индексами и представлениями Глава 9 273 таблицах хранятся однотипные данные, которые должны иметь абсолютно одинаковые тип, длину и одинаково обрабатывать значения NULL. Пользовательские типы данных создаются, естественно, пользователями. В то же время SQL Server сам использу-ет некоторые полезные пользовательские типы данных, которые доступны также и пользователям. Например, пользовательский тип данных sysname применяется для хранения имен объектов БД. Он определен как символьный тип данных переменной длины в кодировке UNICODE с длиной до 128 символов; именно поэтому длина имен объектов в SQL Server ограничена 128 символами. Этот же принцип можно применять в тех случаях, когда нужно быть уверенным, что определенные данные будут храниться и использоваться точно определенным способом. Создание пользовательских типов данных Пользовательские типы данных создаются на уровне базы данных, а не на уровне таблицы. После создания их параметры нельзя модифицировать, можно лишь удалить тип данных и создать его заново. Такой подход позволяет избежать потери производи-тельности при работе с пользовательскими типами данных. Тем не менее, они все-таки имеют некоторые ограничения. Например, нельзя задать значение по умолчанию или ограничение CHECK как часть определения пользовательского типа данных, подобно тому, как это делается для столбцов таблиц; необходимо создать умолчания и правила как отдельные объекты и затем выполнить их привязку к пользовательскому типу данных. Также нельзя создать пользовательский тип данных, основываясь на другом пользовательском типе данных. Совет Пользовательские типы данных применяются только в той БД, где они были соз-даны. Если вы хотите использовать какой-либо пользовательский тип данных во многих БД, определите его в БД model, и тогда он станет доступным во всех вновь созданных базах данных. Чтобы создать пользовательский тип данных с помощью SQL Server Management Studio, выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, где находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных), а затем узел необходимой БД. Отобразятся содержащиеся в базе данных ресурсы. 3. Раскройте узел Programmability (Программируемые возможности). В контекстном меню узла Types (Типы) выберите команду New\User-Defined Data Type (Создать\ Пользовательский тип данных). Отобразится диалоговое окно New User-defined Data Type (Новый пользовательский тип данных), показанное на рис. 9-4. 4. Схема dbo предлагается в качестве схемы по умолчанию. Чтобы поместить тип дан-ных в другую схему, щелкните кнопку справа от поля Schema (Схема). Отобразится диалоговое окно Select Objects (Выбор объектов). Щелкните в нем кнопку Browse (Обзор). В диалоговом окне Browse for Objects (Обзор для поиска объектов) вы-берите схему и щелкните кнопку OK. Еще раз щелкните кнопку OK в диалоговом окне Select Objects (Выбор объектов). 5. В поле Name (Имя) введите имя нового типа данных. 6. В раскрывающемся списке Data type (Тип данных) выберите встроенный тип данных, на котором будет основан новый пользовательский тип данных. 7. Если тип данных разрешает устанавливать длину, введите ее в поле Length (Длина). Для некоторых типов данных, например int, установка длины невозможна.
274 Часть III Управление данными в Microsoft SQL Server 2005 8. Чтобы разрешить типу данных хранить значения NULL, установите флажок Allow NULLs (Разрешить значения NULL). Рис. 9-4. Диалоговое окно New User-defined Data Type 9. Можно также использовать необязательные поля Default (Умолчание) и Rule (Правило), чтобы указать умолчание или правило и выполнить их привязку к поль-зовательскому типу данных. 10. Щелкните кнопку OK. Теперь, при создании новой или изменении существующей таблицы в конструкторе таблиц, вновь созданный тип данных будет добавлен в конец раскрывающегося списка Data Type (Тип данных). Пользовательский тип данных можно также создать при помощи инструкции CREATE TYPE. В примере 9-7 показаны ее синтаксис и использование. Пример 9-7. Синтаксис и использование инструкции CREATE TYPE Синтаксис: CREATE TYPE [ schema_name. ] type_name { FROM base_type [ ( precision [ , scale ] ) ] [ NULL | NOT NULL ] | EXTERNAL NAME assembly_name [ .class_name ] } [ ; ] Использование: USE master CREATE TYPE USPhoneNumber FROM char(12) NOT NULL
Работа со схемами, таблицами, индексами и представлениями Глава 9 275 Управление пользовательскими типами данных После создания пользовательского типа данных может возникнуть необходимость просмотреть или изменить некоторые его свойства. Для этого выполните указанные действия. 1. Подключитесь к экземпляру сервера, на котором находится требуемая база данных. 2. В панели Object Explorer (Обозреватель объектов) последовательно раскройте узел Databases (Базы данных), а затем узел необходимой БД. Отобразятся содер-жащиеся в базе данных узлы ресурсов. 3. Чтобы отобразить определенные в БД пользовательские типы данных, последова-тельно раскройте узлы Programmability (Программируемые возможности), Types (Типы) и User-defined Data Types (Пользовательские типы данных). 4. Щелкните правой кнопкой мыши пользовательский тип данных, которым нужно управлять. Теперь в контекстном меню можно выбрать такие команды: : Properties (Свойства) - для просмотра свойств типа данных и установки за-висимостей; : Delete (Удалить) - для удаления типа данных; : Rename (Переименовать) - для переименования типа данных. 5. Если вы хотите узнать, где в БД используется тип данных, выберите в его кон-текстном меню команду View Dependencies (Просмотр зависимостей). Разрешение и запрет хранения значений NULL При определении столбцов таблицы можно указать, разрешено в них или нет хранение значения NULL, то есть маркера, означающего, что в столбце для этой строки данные отсутствуют. Значения NULL - это не то же самое, что ноль или строка нулевой дли-ны. Столбцы, определенные в качестве первичных ключей или идентификационных столбцов, не могут содержать значений NULL. Если при добавлении строки не указать значение для столбца, позволяющего от-сутствующие значения, SQL Server добавляет значение NULL - при условии, что для этого столбца не определено значение по умолчанию. Если же оно определено, то в столбец добавляется не значение NULL, а значение по умолчанию. Кроме того, когда для столбца разрешены отсутствующие значения, можно явно присвоить ему значение NULL при помощи ключевого слова NULL. В этом случае не используйте кавычки. В SQL Server Management Studio путем присвоения соответствующего значения свойству столбца Allow Nulls (Разрешить значения NULL) можно разрешить или запретить хранение значений NULL, используя для этого окно Table Designer (Кон-структор таблиц). Разрешить хранение значений NULL Это можно сделать, установив для столбца флажок Allow Nulls (Разрешить значения NULL) в области Table (Таблица), или же выбрав в раскрывающемся списке Allow Nulls (Разрешить значения NULL), раз-мещенном на вкладке Column Properties (Свойства столбца), значение Yes (Да). Запретить хранение значений NULL Для этого также существует две возможно-сти: снять для столбца флажок Allow Nulls (Разрешить значения NULL) в области Table (Таблица), либо выбрать в раскрывающемся списке Allow Nulls (Разрешить значения NULL), размещенном на вкладке Column Properties (Свойства столбца), значение No (Нет). Примеры кода, позволяющего разрешать и запрещать хранение значений NULL средствами Transact-SQL, даны в примере 9-4 ранее в этой главе.
276 Часть III Управление данными в Microsoft SQL Server 2005 Использование значений по умолчанию Значения NULL удобно использовать, когда значение неизвестно или отсутствует. Тем не менее, их применение вызывает много споров и возражений, поэтому предпочти-тельным является определение для столбца значения по умолчанию, которое будет ис-пользоваться, когда при добавлении строки в таблицу значение столбца явно не указано. Например, если для столбцов, хранящих символьные данные, определить значение по умолчанию N/A (Н/Д - недоступно), оно будет использоваться вместо NULL. В табл. 9-3 обобщены различные комбинации использования значений по умол-чанию и значений NULL, обрабатывающихся по разному. Главное, нужно помнить следующее: значение по умолчанию используется во всех случаях, когда при до-бавлении в столбец значение явно не указано (даже если хранение значений NULL в столбце разрешено). Табл. 9-3. Значения по умолчанию и возможность хранить значения NULL Определение столбца Значение столбца не указано, значение по умолчанию не определено Значение столбца не указано, значение по умолчанию определено Ввод значения NULL Разрешает значения NULL Присваивает значение NULL Присваивает значение по умолчанию Присваивает значение NULL Запрещает значения NULL Генерируется ошибка Присваивает значение по умолчанию Генерируется ошибка Использование свойства столбца Identity и глобальных уникальных идентификаторов При разработке таблиц часто приходится думать над тем, каким образом можно обе-спечить наличие уникальных идентификаторов, которые бы служили первичными ключами или гарантировали, что при объединении данных из разных БД не будет конфликтов. Уникальными идентификаторами для использования в качестве первич-ного ключа выступают номера счетов клиентов или номера социального страхования. Тем не менее, в случаях, когда уникальный идентификатор отсутствует, для генериро-вания последовательных значений, которые были бы уникальны в пределах таблицы для каждой из ее строк, можно использовать свойство столбца Identity. Полученный таким образом уникальный идентификатор можно также использовать в качестве номера счета клиента, номера заказа или любого другого уникального значения, для которого существует необходимость автоматического генерирования. Хотя использование свойства Identity предоставляет решение на уровне конкретной таблицы, этот метод не гарантирует уникальности полученных идентификаторов для всей базы данных. Другие таблицы БД могут иметь столбцы с установленным свой-ством Identity, содержащие такие же значения. В большинстве случаев это не является проблемой, поскольку такие идентифицирующие значения, как правило, используются только в контексте одной таблицы и не имеют отношения к другим таблицам. Тем не менее, в некоторых ситуациях может понадобиться использование значения, которое было бы уникальным в пределах одной или нескольких баз данных. В этих случаях применяются глобальные уникальные идентификаторы. Уникальность глобальных идентификаторов гарантирована для всех подключенных к сетям компьютеров мира, что чрезвычайно удобно для использования в репликации сведением. При сведении данных из множества БД глобальные уникальные иденти-фикаторы позволяют избежать ситуации, когда строки могут быть непреднамеренно приняты одна за другую. Например, подразделения компании, расположенные в Нью-
Работа со схемами, таблицами, индексами и представлениями Глава 9 277 Йорке, Чикаго и Сан-Франциско, могут использовать номера счетов своих клиентов, которые для этого регионального подразделения являются уникальными, но не яв-ляются таковыми на уровне всей компании. Использование глобальных уникальных идентификаторов позволяет гарантировать, что счет XYZ из Нью-Йорка и счет XYZ из Чикаго не будут сведены в один результирующий счет. Столбцы с установленным свойством Identity и столбцы, хранящие глобальные уникальные идентификаторы, не являются взаимоисключающими. В каждой табли-це может быть определен один столбец, хранящий числовые идентификаторы строк и один, содержащий глобальные уникальные идентификаторы. Их значения часто используются совместно, например в кластерных индексах, которые должны быть уникальными, но не уникальными глобально. Чтобы установить в окне Table Designer (Конструктор таблиц) SQL Server Management Studio идентифицирующие значения для строк таблицы, выполните следующую последовательность действий. 1. Создайте или измените соответствующим образом другие столбцы таблицы, затем начните создавать столбец для идентифицирующего значения. 2. Введите имя идентифицирующего столбца, после чего выберите для него тип данных. Разрешенные типы данных для столбцов, хранящих числовые идентифи-каторы, следующие: tinyint, smallint, int, bigint, а также decimal со степенью 0. Для столбцов, содержащих глобальные уникальные идентификаторы, единственным разрешенным типом данных является uniqueidentifier. Совет Выбирая тип данных для столбца числовых идентификаторов, обращайте вни-мание на текущее количество строк в таблице и количество строк, которое может быть добавлено в будущем. Идентификатор типа tinyint предоставляет лишь 256 уникальных значений (от 0 до 255). Идентификатор типа smallint дает возможность использовать 32 768 уникальных значений (от 0 до 32 767). 3. Снимите флажок Allow Nulls (Разрешить значения NULL) для идентифицирую-щего столбца. 4. Чтобы использовать столбец для хранения глобальных уникальных идентификато-ров строк, выберите его в области Table (Таблица) окна конструктора таблиц, затем на вкладке Column Properties (Свойства столбца) выберите в раскрывающемся списке RowGuid (GUID строки) значение Yes (Да)*. Автоматически для столбца будет создано значение по умолчанию, содержащее функцию newid(). Примечание Функция newid() генерирует новые значения глобальных уникальных иден-тификаторов, используя для этого номер сетевой платы и уникальное числовое значение, получаемое путем считывания системного времени. Если уникальный идентификатор гене-рируется процессом сервера, используется номер сетевой платы сервера; если уникальный идентификатор возвращает функция программного интерфейса, вызванная клиентским приложением, используется номер сетевой платы клиента. Производители сетевых плат гарантируют уникальность номеров сетевых плат в течение ближайших 100 лет. * Установка в конструкторе таблиц для свойств столбца Is Identity (Идентифицирующий столбец) или RowGuid (GUID строки) значений Yes (Да), как и соответствующее использование ключевых слов IDENTITY или ROWGUIDCOL в инструкциях CREATE TABLE или ALTER TABLE, в общем случае не гарантирует отсутствие в столбце одинаковых значений. Их можно добавить, например, явно указав в виде констант в инструкции INSERT (для столбцов IDENTITY следует предварительно выполнить SET IDENTITY_INSERT ON для таблицы). Чтобы гарантировать невозможность появ-ления в столбце повторяющихся значений, необходимо задействовать другие механизмы, например назначить ограничение на значения столбца PRIMARY KEY или UNIQUE. - Прим. ред.
278 Часть III Управление данными в Microsoft SQL Server 2005 5. Когда нужно использовать столбец для хранения числовых идентификаторов строк, выберите его в области Table (Таблица) окна конструктора таблиц, затем на вкладке Column Properties (Свойства столбца) раскройте раздел Identity Specification (Спецификация идентификации) и в раскрывающемся списке Is Identity (Идентифицирующий столбец) выберите значение Yes (Да). 6. В поле Identity Increment (Шаг прироста идентифицирующего столбца) введите значение шага прироста идентифицирующего столбца. Значение столбца будет увеличиваться на это значение для каждой добавленной строки. По умолчанию задано значение 1. 7. В поле Identity Seed (Начальное значение идентифицирующего столбца) введите начальное значение идентифицирующего столбца. Оно присваивается столбцу для первой строки, добавленной в таблицу. По умолчанию задано значение 1. 8. Если база данных настроена для репликации, как это описано в главе 12, но столбец не должен быть реплицирован, в раскрывающемся списке Not For Replication (Не для репликации), расположенном на вкладке Column Properties (Свойства столб-ца), выберите значение Yes (Да). Обычно устанавливается значение No (Нет), что позволяет столбцу участвовать в репликации. Примечание Начальное значение и шаг его прироста используются совместно для определения идентификатора для строк. Например, если было задано начальное зна-чение 100 и шаг прироста 10, первая добавленная строка будет иметь значение 100, вторая - 110 и т. д. При создании таблицы средствами Transact-SQL генерирование глобальных уни-кальных идентификаторов не задается автоматически. В этом случае для хранящего идентификаторы столбца следует явно указать функцию newid() в качестве значения по умолчанию, как это показано в следующем примере: USE OrderSystemDB CREATE TABLE Sales.Customers ( cust_lname varchar(40) NOT NULL, cust_fname varchar(20) NOT NULL, phone char(12) NOT NULL, uid uniqueidentifier NOT NULL DEFAULT newid() )Также можно при вставке новой строки в таблицу явно вызывать newid() для ге-нерирования глобального уникального идентификатора, например таким образом: INSERT INTO Sales.Customers VALUES ( 'Stanek', 'William', '123-555-1212', newid() ) Использование представлений Представления для конечного пользователя выглядят как виртуальные таблицы, поскольку результирующие наборы данных, возвращаемые представлениями, имеют табличную, со столбцами и строками, форму, и на представления можно ссылаться в запросе, как на таблицы. Допустимо создание нескольких типов представлений. В основном представления используются для объединения данных из нескольких таблиц, чтобы получать к ним доступ как к единому результирующему набору данных. Например, создание представления CustOrder, извлекающего имя, фамилию, адрес, номер счета и номер телефона клиента из таблицы Customers и сведения о последнем заказе клиента из таблицы Orders, делает информацию более удобной в использовании для торговых представителей компании.
Работа со схемами, таблицами, индексами и представлениями Глава 9 279 Представления создаются также на основе других представлений, что позволяет извлекать из них результирующие наборы, содержащие подмножества данных, а также получать расширенные результирующие наборы, объединяющие данные из нескольких представлений. Например, создание представления возможно на основе представле-ния CustOrder, выводящего только имя, фамилию и номер телефона клиента. А при создании расширенного представления объединяются элементы из представлений CustOrder, AllCustOrders и LastOrder. Работа с представлениями При создании представления используйте инструкцию SELECT, извлекающую дан-ные из одной или нескольких таблиц и отображающую их в качестве представления. Как и таблицы, представления могут быть секционированными и индексированны-ми. Секционированное представление объединяет горизонтально секционированные данные из набора базовых таблиц, расположенных на одном или нескольких серве-рах. Различают локальное секционированное представление, в котором все базовые таблицы находятся в одной БД, и распределенное секционированное представление, когда одна или более базовых таблиц расположены на одном или более различных удаленных серверах. Совет Обычно следует использовать распределенные, а не локальные секционированные представления, поскольку предпочтительным способом для секционирования локальных данных является использование секционированных таблиц (локальные секционированные представления поддерживаются только для обеспечения обратной совместимости). Рас-пределенные секционированные представления используются для создания объединения серверов БД. Объединением (federation) называется группа серверов, которые управляются отдельно, но работают совместно для распределения нагрузки при обработке запросов крупного приложения или веб-узла. Кроме того, секционированные представления могут быть обновляемыми (то есть обновляемыми копиями базовых таблиц) или только для чтения (неизменяемыми копиями лежащих в их основе таблиц).Чтобы производить обновления данных через секционированное представление, столбец, являющийся ключом секционирования, должен быть также частью первичного ключа базовой таблицы. Если это невозможно (или если нужно обновлять секционированные представления только для чтения), следует применять триггеры INSTEAD OF, которые выполняются, когда пользователь пытается изменить данные с помощью инструкций INSERT, UPDATE или DELETE. Представления, соединяющие несколько базовых таблиц, должны использовать триг-гер INSTEAD OF для выполнения добавлений, обновлений и удалений, затрагиваю-щих данные более чем в одной базовой таблице. Для повышения производительности запросов представления можно индекси-ровать. Первым индексом должен быть уникальный кластерный индекс. После него создаются дополнительные некластерные индексы. При этом представление не может ссылаться на другие представления, а только на базовые таблицы, которые должны на-ходиться в одной БД с представлением и принадлежать тому же самому владельцу. Обработчик запросов использует индексированные и неиндексированные пред-ставления различным образом. Строки индексированного представления хранятся в базе данных в том же формате, что и строки таблицы. Если оптимизатор запросов использует в плане выполнения запроса индексированное представление, то оно обрабатывается тем же способом, что и базовая таблица. Для неиндексированных представлений в БД хранятся только их определения, а не строки данных. Если опти-мизатор запросов в плане выполнения применяет неиндексированное представление, используется только код SQL из определения представления.
280 Часть III Управление данными в Microsoft SQL Server 2005 Когда инструкция SQL ссылается на неиндексированное представление, синтакси-ческий анализатор и оптимизатор запросов анализируют оба источника - и инструк-цию SQL, и представление, объединяя их в один план выполнения. Это означает, что не бывает одного плана для инструкции SQL и другого для представления - суще-ствует только один план выполнения. Подобно таблицам, представления содержатся в схемах и на них можно назначать разрешения. Как правило, базовые таблицы и ссылающиеся на них представления лучше располагать в одной и той же схеме. Также важно иметь в виду, что разрешения на таблицы и на представления назначаются отдельно. Создание представлений Представления могут иметь до 1024 столбцов. Если вы усвоили, как работать с та-блицами, создание представлений не составит никакого труда. Однако существует несколько правил, которых необходимо придерживаться. Хотя инструкция SELECT, использующаяся для определения представления, может ссылаться более чем на одну таблицу, а также на другие представления, для выборки данных из этих объектов не-обходимо иметь соответствующие разрешения. Определение представления не может включать предложения COMPUTE, COMPUTE BY или ORDER BY (кроме случаев, когда в определении присутствует также предложение TOP), ключевое слово INTO, предложение OPTION или ссылку на временную таблицу либо табличную переменную. Чтобы создать представление в SQL Server Management Studio, выполните следу-ющую последовательность действий. 1. Раскройте узел необходимой базы данных, затем узел Views (Представления); ото-бразится список текущих представлений БД. Доступно два типа представлений: системные и пользовательские. Системные представления выводят сводную ин-формацию о базе данных, например об ограничениях таблицы и выданных на нее разрешениях. Пользовательские представления определяются администратором или другими пользователями БД. 2. Чтобы создать новое представление, в контекстном меню узла Views (Представле-ния) выберите команду New View (Создать представление). Отобразится диалого-вое окно Add Table (Добавить таблицу), показанное на рис. 9-5. Диалоговое окно Add Table (Добавить таблицу) имеет вкладки, позволяющие работать с таблицами, представлениями, функциями и синонимами. Если его закрыть, выбрать в меню Query Designer (Конструктор запросов) команду Add New Derived Table (Добавить новую производную таблицу) и затем снова открыть диалоговое окно (щелкнув кнопку Add Table (Добавить таблицу) в панели инструментов), добавится вкладка Local Tables (Локальные таблицы), содержащая производные таблицы. 3. Выберите таблицу или другой содержащий данные объект, который следует до-бавить в представление, и щелкните кнопку Add (Добавить). Выбранный объект будет отображен в области диаграммы окна конструктора запросов в виде плава-ющей панели со списком столбцов объекта. 4. По окончании работы с диалоговым окном Add Table (Добавить таблицу) щел-кните кнопку Close (Закрыть). Можно отобразить диалоговое окно снова в любое время, выбрав команду Add Table (Добавить таблицу) в меню Query Designer (Кон-структор запросов) или щелкнув кнопку Add Table (Добавить таблицу) в панели инструментов.
Работа со схемами, таблицами, индексами и представлениями Глава 9 281 Рис. 9-5. Диалоговое окно Add Table 5. Предоставленные списки столбцов используйте для выбора тех столбцов, которые следует использовать в представлении, как показано на рис. 9-6. Таким образом создается инструкция SELECT, определяющая представление. Рис. 9-6. Выбор столбцов, использующихся в представлении 6. Панель Properties (Свойства) по умолчанию не отображается. Чтобы ее вывести, в конструкторе запросов щелкните вкладку с именем представления и нажмите клавишу F4. 7. В панели Properties (Свойства) введите в поле Description (Описание) описание представления. В раскрывающемся списке Schema (Схема) выберите схему, кото-рая будет содержать представление. Поле имени представления недоступно для 
282 Часть III Управление данными в Microsoft SQL Server 2005 выбора, однако имя можно задать при сохранении представления в диалоговом окне Choose Name (Выберите имя). 8. Создайте зависимость внутри схемы, которая бы гарантировала, что любые измене-ния структур, лежащих в основе представления, невозможны без предварительного изменения представления. Это выполняется посредством привязки представления к схеме, для чего в раскрывающемся списке Bind To Schema (Привязать к схеме) выберите значение Yes (Да). Примечание При привязке представления к схеме использующиеся в нем представления или таблицы не могут быть удалены до тех пор, пока вы не удалите представление или не измените его таким образом, чтобы исключить привязку к схеме. Кроме того, приме-нение инструкции ALTER TABLE к таблицам представления, имеющим привязку к схеме, закончится неудачно, если эта инструкция затрагивает определение представления. 9. Когда требуется, чтобы представление показывало только различающиеся и уда-ляло из результата запроса повторяющиеся строки, в раскрывающемся списке Distinct Values (Различающиеся значения) выберите значениеYes (Да). 10. Чтобы представление возвращало частичный набор результатов, содержащий толь-ко определенное количество начальных строк, в разделе Top Specification (Спе-цификация верхнего предела) из раскрывающегося списка Top (Верхний предел) выберите значение Yes (Да) и затем определите количество начальных строк, которые следует вернуть; значение можно установить либо в виде максимального предела возвращаемого количества строк, либо в виде процента от общего коли-чества строк в результирующем наборе. : Для определения максимального предела укажите в поле Expression (Выра-жение) максимальное количество начальных результирующих строк, которые следует вернуть, и в раскрывающемся списке Percent (Процент) выберите No (Нет). Например, введите значение 50, чтобы вернуть 50 начальных строк. : Чтобы определить количество возвращаемых начальных строк в виде процента от общего их количества в результирующем наборе, введите в поле Expression (Выражение) процент результирующих строк, который следует вернуть, и в раскры вающемся списке Percent (Процент) выберите элемент Yes (Да). Например, в поле Expression (Выражение) укажите значение 10, чтобы воз-вратить начальные 10 процентов строк результирующего набора. 11. При необходимости создать обновляемое представление в разделе Update Specification (Спецификация обновления) в раскрывающемся списке Update Using View Rules (Обновлять, используя правила представления) выберите элементYes (Да). Обновляемые преставления не могут быть созданы, если задано использование только различающихся значений (ключевое слово DISTINCT) или указан макси-мальный предел количества возвращаемых строк (ключевое слово TOP). Чтобы не допустить выполнения изменений, которые могут привести к исчезновению строки из результирующего набора представления, в раскрывающемся списке Check Option (Проверка соответствия критериям представления) выберите элемент Yes (Да). Однако помните, что изменения данных, производящиеся напрямую в базовых таблицах представления, не проверяются на соответствие критериям пред-ставления, даже если параметр Check Option (Проверка соответствия критериям представления) установлен в значение Yes (Да). 12. По окончании настройки представления проверьте синтаксис SQL, выбрав коман-ду Verify SQL Syntax (Проверить синтаксис SQL) в меню Query Designer (Кон-структор запросов). Прежде чем продолжить, исправьте все ошибки, о которых сообщалось во время процесса проверки.
Работа со схемами, таблицами, индексами и представлениями Глава 9 283 13. Чтобы создать представление, нажмите клавиши Ctrl+R или выберите команду Execute SQL (Выполнить SQL) в меню Query Designer (Конструктор запросов). 14. После выполнения представления сохраните его с целью обновления в соответ-ствии с последними изменениями. Для этого нажмите клавиши Ctrl+S или щел-кните кнопку Save (Сохранить) в панели инструментов. Представления можно также создавать с помощью инструкции CREATE VIEW. Вот пример создания простого представления, производящего выборку всех значений в таблице: CREATE VIEW Sales.CustomView AS SELECT * FROM Sales.Customers Затем можно работать с представлением напрямую: SELECT * FROM Sales.CustomView Пример 9-8 показывает полный синтаксис и использование инструкции CREATE VIEW. Пример 9-8. Синтаксис и использование инструкции CREATE VIEW Синтаксис: CREATE VIEW [ schema_name. ] view_name [ ( column_name [ ,...n ] ) ] [ WITH <view_attribute> [ ,...n ] ] AS select_statement [ ; ] [ WITH CHECK OPTION ] <view_attribute> ::= { [ ENCRYPTION ] [ SCHEMABINDING ] [ VIEW_METADATA ] } Использование: CREATE VIEW Sales.CustomView AS SELECT cust_id AS Account, cust_lname AS [Last Name], cust_fname AS [First Name], state AS Region FROM Sales.Customers WHERE ( state = 'WA' ) OR ( state = 'HI' ) OR ( state = 'CA' ) Изменение представлений Чтобы изменить представление в SQL Server Management Studio, выполните следу-ющую последовательность действий. 1. Раскройте узел необходимой базы данных, затем узел Views (Представления); отобразится список текущих представлений БД. 2. Чтобы изменить существующее представление, в его контекстном меню щелкните команду Modify (Изменить). 3. Если требуется добавить таблицы, представления и т. п., выведите диалоговое окно Add Table (Добавить таблицу), выбрав команду Add Table (Добавить таблицу) в меню Query Designer (Конструктор запросов). 4. При необходимости установить свойства представления щелкните вкладку с име-нем представления и нажмите клавишу F4 для отображения панели Properties (Свойства) со свойствами представления.
284 Часть III Управление данными в Microsoft SQL Server 2005 Чтобы изменить существующее представление без переустановки разрешений и прочих свойств, используйте инструкцию ALTER VIEW. В следующем примере изменяется определение представления Sales.CustomView, использованного в преды-дущих примерах: ALTER VIEW Sales.CustomView AS SELECT cust_id AS Account, cust_lname AS [Customer Last Name], cust_fname AS [Customer First Name], state AS Region FROM Sales.Customers WHERE ( state = 'WA' ) OR ( state = 'CA' ) В примере 9-9 показан полный синтаксис инструкции ALTER VIEW. Пример 9-9. Синтаксис инструкции ALTER VIEW Синтаксис: ALTER VIEW [ schema_name. ] view_name [ ( column_name [ ,...n ] ) ] [ WITH <view_attribute> [ ,...n ] ] AS select_statement [ ; ] [ WITH CHECK OPTION ] <view_attribute> ::= { [ ENCRYPTION ] [ SCHEMABINDING ] [ VIEW_METADATA ] } Использование обновляемых представлений SQL Server поддерживает также и обновляемые представления. Они характеризуются тем, что содержащуюся в них информацию можно изменять, используя инструкции INSERT, UPDATE и DELETE. Для создания обновляемых представлений необходимо, чтобы изменяемые столбцы таблицы не использовались в предложениях GROUP BY, HAVING или DISTINCT. Кроме того, обновляемое представление может быть из-менено только при изменении столбцов одной базовой таблицы, которые напрямую ссылаются на лежащие в основе данные. Это означает, что данные не могут быть производными от агрегатной функции или быть результатом вычисления выражения, использующего другие столбцы. При использовании обновляемых представлений обычно требуется установить параметр Check Option (Проверка соответствия критериям представления) в значение Yes (Да). В противном случае изменения в представлении могут привести к тому, что измененные строки больше не будут отображаться в результирующем наборе данных. Предположим, что было создано такое представление, как в предыдущем примере, включающее информацию о покупателях из штатов Вашингтон (Washington, WA), Гавайи (Hawaii, HI) и Калифорния (California, CA). Если изменить на GA какое-либо значение, идентифицирующее штат, строка исчезнет из представления, поскольку отображение покупателей из штата Джорджия (Georgia, GA) не предусматривалось при определении представления. Управление представлениями Просматривать свойства представления, устанавливать разрешения и выполнять другие задачи по управлению представлениями можно таким же образом, как и при управлении таблицами. Чтобы приступить к управлению представлениями, выполните указанные ниже действия.
Работа со схемами, таблицами, индексами и представлениями Глава 9 285 1. В SQL Server Management Studio раскройте узел необходимой базы данных, затем узел Views (Представления); отобразится список текущих представлений БД. 2. Щелчком правой кнопки отобразите контекстное меню нужного представления и вы получите следующие возможности для управления: : Open View (Открыть представление) - просмотр результирующего набора представления; : Properties (Свойства) - просмотр его свойств; : Rename (Переименовать) - переименование; : Delete (Удалить) - удаление; : View Dependencies (Зависимости представления) - просмотр объектов, за-висящих от представления, или объектов, от которых зависит представление. 3. Чтобы назначить разрешения на представление, щелкните в его контекстном меню команду Properties (Свойства) и в диалоговом окне View Properties (Свойства представления) выберите страницу Permissions (Разрешения). Теперь можно на-значать разрешения на представление. Создание индексов и управление ими Индексы позволяют организовать быстрый доступ к данным без поиска по всей БД. В SQL Server 2005 можно создавать индексы для таблиц, представлений и вычисля-емых столбцов. Индексы для таблиц обеспечивают быстрый поиск данных в таблице. Индексирование представлений создает индексированный "материализованный" набор результатов представления, хранящийся в БД. С помощью индексов для вычис-ляемых столбцов можно вычислять выражения столбца и индексировать результаты (если выполняются определенные условия). Индексы управляются отдельно от таблиц и настраиваются автоматически по-средством утилиты Database Engine Tuning Advisor. Далее в этом разделе рассмотрены приемы и методы, используемые при работе с индексами. Понятие об индексах Индексы, как и таблицы, хранятся на страницах. Структура страниц индексов подобна структуре страниц данных. Страницы индексов имеют размер 8 Кбайт (8 192 байта), из которых 96 байтов занимает заголовок. Однако в них, в отличие от страниц дан-ных, отсутствуют таблицы смещений строк. Каждому индексу соответствует строка в представлении каталога sys.indexes со значением идентификатора индекса (столбец index_id): для кластерных индексов - 1, для некластерных индексов - 2-250. Зна-чение идентификатора индекса 255 используется для индикации больших объектов данных типов image, ntext, text, varchar(max), nvarchar(max), varbinary(max) или xml. (Столбцы типов данных, предназначенных для хранения больших объектов, не мо-гут выступать ключевыми столбцами индексов, однако столбцы типов varchar(max), nvarchar(max), varbinary(max) и xml могут быть определены в качестве включенных (included) столбцов. Подробно об этом будет рассказано далее.) Для построения индексов SQL Server использует структуру B-дерева (B-tree, Balanced-tree), состоящую из корневого узла, промежуточных узлов и конечных узлов, или листьев. Древовидная структура позволяет организовать быстрый и эффективный поиск, иначе серверу пришлось бы поочередно считывать каждую страницу данных таблицы в поиске искомой записи. Чтобы было понятнее, представьте простую таблицу, в которой каждая страница данных содержит единственную строку. Если при этом индекс для таблицы не опреде-лен, SQL Server для поиска данных, находящихся, предположим, в строке 800, будет 
286 Часть III Управление данными в Microsoft SQL Server 2005 вынужден произвести поиск в предыдущих 799 строках прежде, чем доберется до нужной. Когда же используется древовидная структура, SQL Server проходит по узам индекса, в направлении от корневого узла к листьям, в поисках строки, соответствую-щей определенному ключу индекса. При оптимальном варианте расположения строк (то есть ключи индекса упорядочены в полное дерево) количество узлов, в которых требуется произвести поиск, пропорционально высоте дерева. Например, 27 000 строк могут быть представлены 30 уровнями узлов, в таком случае SQL Server достаточно просмотреть максимум 15 узлов, чтобы найти соответствующую строку. Примечание Искушенный читатель, вероятно, заметил, что с целью демонстрации воз-можностей индексирования этот пример был намеренно упрощен. Тем не менее, ин-дексирование способно повысить производительность на порядок, после чего доступ к неиндексированной базе данных может показаться чрезвычайно медленным. Однако следует иметь в виду, что индексирование информации, которая того не требует, тоже может привести к замедлению работы БД, поэтому так важно выбрать для индексирования наиболее часто используемый столбец таблицы. Повысить производительность индексирования в SQL Server 2005 можно мно-жеством способов. Выполнить операции индексирования в оперативном режиме, то есть при под-ключенных пользователях. Оперативное индексирование зависит от количества памяти, отведенной для индексирования. Оно дает пользователям возможность получать доступ к данным таблицы и использовать другие индексы в таблице во время создания, изменения или удаления индекса. Включить столбцы (при помощи предложения INCLUDE инструкции CREATE INDEX), не являющиеся частью индексного ключа, в некластерные индексы. В этом случае производительность запросов улучшается за счет того, что все необходимые данные становятся доступными в индексе без необходимости обращения к строкам данных таблицы*. Включенные столбцы позволяют обойти ограничение на размер индекса в 16 ключевых столбцов и максимальный размер ключа в 900 байтов. Разрешить при доступе к индексу блокировки на уровне строки и на уровне стра-ницы. При блокировке строки или страницы ядро базы данных будет определять, когда их следует применять. Установить параллелизм максимальной степени. Это выполняется с помощью клю-чевого слова MAXDOP, контролирующего количество процессоров, используемых в параллельных операциях при создании, изменении или удалении индекса. Секционировать индексы согласно диапазонам значений на основе существующих схем секционирования. При секционировании неуникального кластерного индекса ядро базы данных добавляет секционированный столбец в индекс в качестве не-ключевого (включенного) столбца (если он не был включен ранее). SQL Server 2005 поддерживает индексы двух типов: кластерные; некластерные (обычные). Кроме того, SQL Server 2005 поддерживает специальный тип индекса для данных XML. Индекс XML может быть определен и как некластерный (установка по умол-чанию), и как кластерный индекс. Кластерный индекс для данных XML создается из кластерного ключа пользовательской таблицы и идентификатора узла XML. В каждой * Столбцы, не являющиеся частью ключа, хранятся в конечных узлах (листьях) индексного B-дерева. - Прим. ред.
Работа со схемами, таблицами, индексами и представлениями Глава 9 287 таблице возможно до 249 индексов XML. (Подробнее об индексах XML см. далее в разделе "Использование индексов XML".) Кластерные и некластерные индексы можно создать почти для любого столбца. Исключениями являются пользовательские типы общеязыковой исполняющей среды и типы данных больших объектов. При создании индексов для вычисляемых столбцов необходимо, чтобы выражение вычисляемого столбца всегда возвращало одинаковый результат для определенного набора исходных значений. И хотя все остальные типы столбцов позволяют создание индекса, стоит уделить внимание правильному выбору индексного столбца. От этого зависит скорость времени отклика. Точной информацией о том, какой столбец следует индексировать, располагает утилита Database Engine Tuning Advisor. Использование кластерных индексов Кластерный индекс хранит страницы данных таблицы на уровне листьев B-дерева, при этом данные физически упорядочены согласно ключу. Для таблицы можно определить только один кластерный индекс; при его создании происходит следующее: изменяется физическое расположение данных в таблице; создаются новые индексные страницы; внутри таблицы перестраиваются все некластерные индексы. Во время этого процесса выполняется множество операций ввода-вывода и ин-тенсивно используются системные ресурсы и оперативная память. Поэтому, если планируется создание кластерного индекса, убедитесь, что имеется достаточное ко-личество свободного места на диске, - как минимум в полтора раза большее, чем раз-мер индексируемой таблицы. Дополнительное свободное место на диске гарантирует эффективное выполнение и безошибочное завершение операции. Обычно кластерный индекс создается для первичного ключа, тем не менее, его можно создать и для любого именованного (невычисляемого) столбца, например cust_lname или cust_id. Оптимальным вариантом является такой, когда индексируе-мые значения для кластерного индекса уникальны. Если значения неуникальны, SQL Server создает дополнительные ключи сортировки для строк, имеющих дубликаты для основных ключей сортировки. Использование некластерных индексов В некластерном индексе страницы на уровне листьев индексного дерева содержат ссылку, сообщающую SQL Server, где найти строку данных, соответствующую ключу в индексе. Если таблица имеет кластерный индекс, ссылка указывает на его ключ, а не на данные. Если же кластерный индекс в таблице отсутствует, ссылка является указателем на реальную строку. При создании некластерного индекса SQL Server создает необходимые страницы ин-декса, но не изменяет физическое расположение табличных данных и не удаляет другие индексы таблицы. Каждая таблица может иметь до 249 некластерных индексов. Использование индексов XML Как упоминалось ранее, индекс XML является особым типом индекса, который может быть кластерным или некластерным. Для создания индекса XML должен существо-вать кластерный индекс, основанный на первичном ключе таблицы и ограниченный 15 столбцами. Могут быть созданы два типа индексов XML: первичный и вторичный. Каждый столбец xml в таблице должен иметь один первичный индекс XML и один (или более) вторичный индекс XML. Однако вторичный индекс XML создается лишь 
288 Часть III Управление данными в Microsoft SQL Server 2005 при условии наличия первичного индекса XML, который при этом не может быть создан для вычисляемого столбца xml. Учтите, что индекс XML создается только для одного столбца xml, однако для этого столбца нельзя создать реляционный индекс. Индекс XML не создается также для: столбца другого типа данных, столбца xml в представлении, табличной переменной со столбцами xml или переменной типа xml. Наконец, параметры соединения должны быть теми же, что требуются для индексированных представлений и индексов вы-числяемых столбцов, то есть при создании индекса XML и при вставке, удалении или обновлении значений в столбце xml, параметр ARITHABORT должен быть установлен в значение ON. Выбор столбцов для индексирования Теперь, когда принцип функционирования индексов понятен, можно попытаться сформулировать критерии, используемые для определения того, какие столбцы нужно индексировать, а какие нет. В идеальном варианте выбирать столбцы для индексиро-вания следует, основываясь на типах запросов, выполняющихся к БД. Утилита SQL Server Profiler может помочь в определении типов выполняемых запросов. Используйте ее для создания трассировки, содержащей детальный снимок действий, производимых пользователями в базе данных. Эту трассировку можно просмотреть вручную, чтобы выяснить типы выполняющихся запросов. Также ис-пользуйте файл трассировки в утилите Database Engine Tuning Advisor в качестве сохраненного файла рабочей нагрузки. Однако независимо от используемого метода помните, что максимальная длина всех ключевых столбцов, входящих в состав индекса, не должна превышать 900 бай-тов. (Столбцы, не являющиеся частью ключа индекса, могут быть включены в индекс, чтобы с их помощью обойти ограничение на размер индекса в 16 ключевых столбцов и максимальный размер ключа в 900 байтов.) В табл. 9-4 перечислены типы таблиц и столбцов, подходящие для создания индекса, и индексирование которых не при-несет пользы. Табл. 9-4. Рекомендации по выбору таблиц и столбцов для создания индексов Индексировать Не индексировать Таблицы с большим количеством строк Таблицы с небольшим количеством строк Столбцы, часто используемые в запросах Столбцы, редко используемые в запросах Столбцы, хранящие широкий диапазон значений и имеющие большую вероятность быть выбранными в типичном запросе Столбцы, хранящие широкий диапазон значений и имеющие малую вероятность быть выбранными в типичном запросе Столбцы, используемые в агрегатных функциях Столбцы, имеющие большой размер в байтах Столбцы, применяемые в предложении GROUP BY Таблицы, где данные часто изменяются, но относительно редко считываются Столбцы, применяемые в предложении ORDER BY Столбцы, используемые в соединениях таблиц В табл. 9-5 даны указания относительно того, для каких типов столбцов следует использовать кластерные индексы, а для каких - некластерные.
Работа со схемами, таблицами, индексами и представлениями Глава 9 289 Табл. 9-5. Рекомендации по использованию кластерных или некластерных индексов Использовать кластерный индекс для Использовать некластерный индекс для Первичных ключей, часто используемых при поиске, например номеров счетов Первичных ключей, хранящих последователь-ные значения идентификаторов, например идентификационных столбцов Запросов, возвращающих обширные результирующие наборы Запросов, возвращающих небольшие результи-рующие наборы Столбцов, используемых во многих запросах Столбцов, используемых в агрегатных функциях Столбцов с высокой селективностью Внешних ключей Столбцов, применяемых в предложениях ORDER BY или GROUP BY Столбцов, используемых в соединениях таблиц Индексирование вычисляемых столбцов и представлений В SQL Server 2005 вычисляемые столбцы и представления можно индексировать таким же образом, как и таблицы. Создание индексов для вычисляемых столбцов или представлений предполагает, что значения, полученные в результате вычисле-ния столбцов или выполнения определяющего представление запроса, сохраняются в базе данных, чтобы на них можно было ссылаться в дальнейшем. Для вычисляемых столбцов их значения рассчитываются и затем используются при построении клю-чей, хранящихся в индексе. Для представлений результирующий набор сохраняет-ся посредством создания для представления кластерного индекса. В обоих случаях храни мые результаты допустимы только тогда, когда все соединения, ссылающиеся на результаты, могут воссоздать идентичный результирующий набор, что наклады-вает опре деленные ограничения на создание индексов для вычисляемых столбцов и представлений. Необходимо устанавливать соединения, ссылающиеся на результаты, используя определенные параметры соединения с одинаковыми значениями. Ниже перечислены такие параметры с указанием установки необходимого значения. ANSI_NULLS - ON. ANSI_PADDING - ON. ANSI_WARNINGS - ON. ARITHABORT - ON. CONCAT_NULL_YIELDS_NULL - ON. QUOTED_IDENTIFIER - ON. NUMERIC_ROUNDABORT - OFF. Более того, все операции, использующие представление, должны применять один и тот же алгоритм для построения результирующего набора представления, включающий: инструкцию CREATE INDEX, которая строит исходный результирующий набор или используется для расчета исходных значений ключей; все возможные последующие инструкции INSERT, UPDATE или DELETE, вли-яющие на данные и использующиеся для построения результирующего набора представления или расчета ключей; все запросы, для которых оптимизатор запросов должен определить, выгоднее ли использовать индексированное представление по сравнению с обычным.
290 Часть III Управление данными в Microsoft SQL Server 2005 Просмотр свойств индекса И таблицы, и представления могут иметь индексы. Для того чтобы просмотреть такие индексы в SQL Server Management Studio, выполните указанные действия. 1. Раскройте узел необходимой базы данных, затем узел Tables (Таблицы) или Views (Представления). 2. Раскройте узел нужной таблицы или представления для отображения списка со-держащихся в нем объектов. 3. Раскройте узел Indexes (Индексы), чтобы вывести список индексов, связанных с выбранной таблицей или представлением (если таковые имеются). 4. В контекстном меню индекса выберите команду Properties (Свойства). Откроется диалоговое окно Index Properties (Свойства индекса), показанное на рис. 9-7. Оно имеет несколько страниц, позволяющих просматривать свойства индекса и управ-лять ими. Рис. 9-7. Диалоговое окно Index Properties General (Общие) Отображает общие свойства, включая имя и тип индекса. Мож-но изменить тип индекса, а также добавить или удалить ключевые столбцы. Options (Параметры) Позволяет установить параметры, регулирующие пере-стройку индекса, перерасчет статистики, использование блокировок строк или страниц, установку фактора заполнения и определение максимальной степени параллелизма. Included Columns (Включенные столбцы) Позволяет просматривать включенные столбцы и управлять ими (для некластерных индексов). Storage (Хранилища) Приводит список текущих хранилищ данных. Позволяет настроить используемые группы файлов и схемы секционирования.
Работа со схемами, таблицами, индексами и представлениями Глава 9 291 Fragmentation (Фрагментированность) Приводит список данных о фрагмен-тированности индекса. Данная информация поможет решить, что лучше сделать: упорядочить или перестроить индекс. Extended Properties (Расширенные свойства) Приводит список расширенных свойств. Позволяет добавить или удалить расширенные свойства. С помощью хранимой процедуры sp_statistics также можно просмотреть индексы определенной таблицы или представления. Для этого просто укажите имя таблицы или представления в виде аргумента, как показано в следующем примере: USE OrderSystemDB EXEC sp_statistics Sales.Customers Создание индексов Только владелец таблицы или представления может создать для них индексы. Чтобы создать индексы для таблицы с помощью конструктора таблиц в SQL Server Management Studio*, выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, содержащему базу данных, с которой требу-ется работать. 2. В Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы дан-ных), а затем узел необходимой БД, чтобы отобразить узлы ее ресурсов. 3. Раскройте узел Tables (Таблицы). В контекстном меню нужной таблицы выберите команду Modify (Изменить). 4. В меню Table Designer (Конструктор таблиц) щелкните команду Indexes/Keys (Индексы/Ключи) для вывода диалогового окна Indexes/Keys (Индексы/Ключи), показанного на рис. 9-8. Рис. 9-8. Диалоговое окно Indexes/Keys 5. В левой части диалогового окна находится список, в котором приведены текущие первичные или уникальные ключи и индексы. Для управления свойствами любого * Можете воспользоваться другим способом создания индекса: раскройте узел конкретной таблицы или представления и в контекстном меню узла Indexes (Индексы) выберите команду New Index (Создать индекс). - Прим. ред.
292 Часть III Управление данными в Microsoft SQL Server 2005 ключа выберите его в списке и произведите необходимые изменения в правой части окна. Если нужно добавить индекс, щелкните кнопку Add (Добавить). 6. Щелкните поле Columns (Столбцы), затем - кнопку с троеточием, расположенную справа от поля. Отобразится диалоговое окно Index Columns (Столбцы индекса), показанное на рис. 9-9. 7. В столбце Column Name (Имя столбца) используйте раскрывающийся список с названиями столбцов таблицы, чтобы выбрать тот, который следует включить в индекс. Можно выбирать только столбцы с типами данных, позволяющими индексирование. 8. Каждый столбец может иметь отдельный порядок сортировки для индекса. По умолчанию порядок сортировки устанавливается как Ascending (По возрастанию). Если нужно, измените порядок сортировки на Descending (По убыванию). Рис. 9-9. Диалоговое окно Index Columns 9. По окончании выбора столбцов для индекса щелкните кнопку OK, чтобы закрыть диалоговое окно Index Columns (Столбцы индекса). Мы возвращаемся в диалого-вое окно Indexes/Keys (Индексы/Ключи) 10. При необходимости гарантировать уникальность введенных в индекс данных, установите параметр Is Unique (Уникальный) в значение Yes (Да). 11. По умолчанию для типа объекта в поле Type (Тип) установлено значение Index (Индекс). В поле Name (Имя) следует ввести имя индекса, в поле Description (Описание) - его описание. Имя индекса может включать до 128 символов, однако оптимальным вариантом является короткое и легко ассоциируемое с назначением индекса имя, например [Index for Cust ID]. 12. Если для выбранных столбцов нужно создать кластерный индекс, установите параметр Create As Clustered (Создать кластерный) в значение Yes (Да). В против-ном случае будет создан некластерный индекс. Помните, что можно иметь только один кластерный индекс на таблицу, поэтому если он уже есть, таблица окажется недоступной для выбора. 13. Для указания места хранения индекса раскройте узел раздела Data Space Specification (Спецификация пространства данных) и в раскрывающемся списке Filegroup or Partition Scheme Name (Имя группы файлов или схемы секционирования) вы-берите группу файлов.
Работа со схемами, таблицами, индексами и представлениями Глава 9 293 14. Чтобы установить параметры заполнения, раскройте узел раздела Fill Specification (Спецификация фактора заполнения). В поле Fill Factor (Фактор заполнения) задайте 0 (значение по умолчанию), чтобы позволить SQL Server использовать оптимизированное заполнение, как описано в разделе "Установка фактора запол-нения индексов" главы 6. Обратитесь к тому же разделу за информацией о том, в каких случаях фактору заполнения следует задавать другое значение. 15. Если нужно игнорировать повторяющиеся ключи, установите параметр Ignore Duplicates Keys (Игнорировать повторяющиеся ключи) в значение Yes (Да). Когда этот параметр включен, любая попытка вставить строки, нарушающие уникальность значений в индексе, закончится неудачей - появится предупреждение и строки не будут вставлены. Однако независимо от того, включен или выключен данный параметр, SQL Server не позволит создать уникальный индекс для столбцов, уже имеющих повторяющиеся значения. Для столбцов, использующихся в уникальном индексе, должно быть запрещено хранение значений NULL. Кроме того, параметр Ignore Duplicates Keys (Игнорировать повторяющиеся ключи) нельзя использовать с индексами XML или индексами, созданными для представлений. 16. Дополнительно можно включить автоматическое обновление статистики, уста-новив параметр Re-compute Statistics (Заново вычислить статистику) в значение Yes (Да). При выборе значения No (Нет) во время создания индекса устаревшая статистика не будет повторно вычислена. 17. По окончании настройки индекса щелкните кнопку Close (Закрыть). Для со-хранения таблицы, что позволит сохранить созданный индекс, щелкните в меню команду File\Save (Файл\Сохранить) или нажмите клавиши Ctrl+S. Для создания индексов средствами Transact-SQL используйте инструкцию CREATE INDEX. Ее синтаксис показан в примере 9-10. Пример 9-10. Синтаксис инструкции CREATE INDEX Синтаксис для создания реляционного индекса: CREATE [ UNIQUE ] [ CLUSTERED | NONCLUSTERED ] INDEX index_name ON <object> ( column_name [ ASC | DESC ] [ ,...n ] ) [ INCLUDE ( column_name [ ,...n ] ) ] [ WITH ( <relational_index_option> [ ,...n ] ) ] [ ON { partition_scheme_name ( column_name ) | filegroup_name | "DEFAULT" } ] [ ; ] <object> ::= { [ database_name. [ schema_name ]. | schema_name. ] table_or_view_name } <relational_index_option> ::= { PAD_INDEX = { ON | OFF } | FILLFACTOR = fillfactor | SORT_IN_TEMPDB = { ON | OFF } | IGNORE_DUP_KEY = { ON | OFF } | STATISTICS_NORECOMPUTE = { ON | OFF } | DROP_EXISTING = { ON | OFF } | ONLINE = { ON | OFF }
294 Часть III Управление данными в Microsoft SQL Server 2005 | ALLOW_ROW_LOCKS = { ON | OFF } | ALLOW_PAGE_LOCKS = { ON | OFF } | MAXDOP = max_degree_of_parallelism } Синтаксис для создания индекса XML: CREATE [ PRIMARY ] XML INDEX index_name ON <object> ( xml_column_name ) [ USING XML INDEX xml_index_name [ FOR { VALUE | PATH | PROPERTY } ] ] [ WITH ( <xml_index_option> [ ,...n ] ) ] [ ; ] <object> ::= { [ database_name. [ schema_name ]. | schema_name. ] table_name } <xml_index_option> ::= { PAD_INDEX = { ON | OFF } | FILLFACTOR = fillfactor | SORT_IN_TEMPDB = { ON | OFF } | STATISTICS_NORECOMPUTE = { ON | OFF } | DROP_EXISTING = { ON | OFF } | ALLOW_ROW_LOCKS = { ON | OFF } | ALLOW_PAGE_LOCKS = { ON | OFF } | MAXDOP = max_degree_of_parallelism } Управление индексами После создания индекса может потребоваться изменить его свойства, переименовать или удалить. Чтобы решить эти задачи в SQL Server Management Studio, выполните указанные ниже действия. 1. Раскройте узел необходимой базы данных, затем узел Tables (Таблицы) или Views (Представления). 2. Раскройте узел нужной таблицы или представления, чтобы отобразить список содержащихся объектов. 3. Для отображения списка индексов, связанных с выбранной таблицей или пред-ставлением, раскройте узел Indexes (Индексы). 4. Раскройте контекстное меню индекса, где вы сможете выполнить необходимые действия, выбрав следующие команды. Properties (Свойства) Позволяет просмотреть свойства индекса, включая сведения об используемом дисковом пространстве и фрагментированности. Rename (Переименовать) Используется для переименования индекса. Rebuild (Перестроить) Предоставляет возможность перестроить индекс. В диа логовом окне Rebuild Indexes (Перестроить индексы) используйте значе-ния, отображенные в полях Total Fragmentation (Общая фрагментированность) и Sta tus (Состояние), чтобы определить, следует ли продолжать перестройку. Если нужно, щелкните кнопку OK. Чтобы закончить без выполнения пере-стройки, щелкните кнопку Cancel (Отмена). SQL Server 2005 может перестра-ивать и упорядочивать индексы в оперативном режиме.
Работа со схемами, таблицами, индексами и представлениями Глава 9 295 Reorganize (Упорядочить) Упорядочивает структуру индекса. В диалоговом окне Reorganize Indexes (Упорядочить индексы) проверьте значение в поле Total Fragmentation (Общая фрагментированность), чтобы определить, требуется ли упорядочить индекс. По умолчанию производится упорядочивание данных как обычных, так и больших объектов. Снимите флажок Compact large object column data (Уплотнить данные столбцов больших объектов), если нужно уплотнить только обычные данные индексов. Щелкните кнопку OK для продолжения упо-рядочивания. Щелкните кнопку Cancel (Отмена), чтобы выйти без выполнения упорядочивания. Delete (Удалить) Используется для удаления индекса (если он не является первичным ключом или ограничением UNIQUE). Также можно управлять индексами с помощью инструкций ALTER INDEX и DROP IN DEX. Однако применяя эти инструкции, следует быть очень внимательным, по-скольку существуют некоторые ограничения на их использование. Например, нельзя удалить индекс, созданный при определении первичного ключа или ограничений UNIQUE. Вместо этого необходимо удалить ограничения с помощью инструкции ALTER TABLE. В примере 9-11 показан синтаксис инструкции ALTER INDEX, а в при-мере 9-12 - синтаксис инструкции DROP INDEX. Пример 9-11. Синтаксис инструкции ALTER INDEX ALTER INDEX { index_name | ALL } ON <object> { REBUILD [ [ WITH ( <rebuild_index_option> [ ,...n ] ) ] | [ PARTITION = partition_number [ WITH ( <single_partition_rebuild_index_option> [ ,...n ] ) ] ] ] | DISABLE | REORGANIZE [ PARTITION = partition_number ] [ WITH ( LOB_COMPACTION = { ON | OFF } ) ] | SET ( <set_index_option> [ ,...n ] ) } [;] <object> ::= { [ database_name. [ schema_name ]. | schema_name. ] table_or_view_name } <rebuild_index_option > ::= { PAD_INDEX = { ON | OFF } | FILLFACTOR = fillfactor | SORT_IN_TEMPDB = { ON | OFF } | IGNORE_DUP_KEY = { ON | OFF } | STATISTICS_NORECOMPUTE = { ON | OFF } | ONLINE = { ON | OFF } | ALLOW_ROW_LOCKS = { ON | OFF } | ALLOW_PAGE_LOCKS = { ON | OFF } | MAXDOP = max_degree_of_parallelism }
296 Часть III Управление данными в Microsoft SQL Server 2005 <single_partition_rebuild_index_option> ::= { SORT_IN_TEMPDB = { ON | OFF } | MAXDOP = max_degree_of_parallelism } <set_index_option> ::= { ALLOW_ROW_LOCKS = { ON | OFF } | ALLOW_PAGE_LOCKS = { ON | OFF } | IGNORE_DUP_KEY = { ON | OFF } | STATISTICS_NORECOMPUTE = { ON | OFF } } Пример 9-12. Синтаксис инструкции DROP INDEX DROP INDEX { <drop_relational_or_xml_index> [ ,...n ] | <drop_backward_compatible_index> [ ,...n ] } <drop_relational_or_xml_index> ::= index_name ON <object> [ WITH ( <drop_clustered_index_option> [ ,...n ] ) ] <drop_backward_compatible_index> ::= [ owner_name. ] table_or_view_name.index_name <object> ::= { [ database_name. [ schema_name ]. | schema_name. ] table_or_view_name } <drop_clustered_index_option> ::= { MAXDOP = max_degree_of_parallelism | ONLINE = { ON | OFF } | MOVE TO { partition_scheme_name ( column_name ) | filegroup_name | "DEFAULT" } } Использование утилиты Database Engine Tuning Advisor Утилита Database Engine Tuning Advisor является одним из лучших средств, при-званных прийти на помощь администратору для облегчения процесса индексирова-ния и оптимизации. Однако перед запуском этого мастера необходимо создать файл трассировки, содержащий репрезентативный снимок активности БД. Этот снимок будет использован в утилите в качестве файла рабочей нагрузки. За более точными указаниями по созданию файла трассировки обратитесь к разделу "Работа с журна-лами производительности" в главе 13. Чтобы использовать утилиту Database Engine Tuning Advisor, выполните следующую последовательность действий. 1. В меню Tools (Сервис) утилиты SQL Server Management Studio выберите команду Database Engine Tuning Advisor. Используйте диалоговое окно Connect to Server (Подключиться к серверу) для подключения к необходимому серверу. 2. Откроется окно утилиты Database Engine Tuning Advisor, готовое к началу нового сеанса оптимизации, как показано на рис. 9-10. На вкладке General (Общие) в по-ле Session name (Имя сеанса) введите имя сеанса, например Personnel DB Check. В раскрывающемся списке Database for workload analysis (База данных для анализа 
Работа со схемами, таблицами, индексами и представлениями Глава 9 297 рабочей нагрузки) выберите БД, к которой следует подключиться для анализа рабочей нагрузки. : Если данные трассировки были сохранены в файл, в разделе Workload (Рабо-чая нагрузка) установите переключатель в положение File (Файл) и щелкните кнопку Browse for a workload file (Обзор для поиска файла рабочей нагрузки) (значок бинокля). Затем в диалоговом окне Select Workload File (Выбор файла рабочей нагрузки) выберите созданный ранее файл трассировки и щелкните кнопку Open (Открыть). : Если же данные трассировки были сохранены в таблице, в разделе Workload (Рабочая нагрузка) установите переключатель в положение Table (Таблица) и щелкните кнопку Browse for a workload table (Обзор для поиска таблицы рабо-чей нагрузки), на которой изображен значок бинокля. Затем используйте диа-логовое окно Select Workload Table (Выбор таблицы рабочей нагрузки), чтобы указать, какую таблицу следует использовать в качестве источника данных. Рис. 9-10. Утилита Database Engine Tuning Advisor 3. Выберите БД, которую требуется анализировать. Можно анализировать несколько баз данных, а при необходимости также индивидуальные таблицы в определенных БД. В большинстве случаев для уменьшения времени анализа лучше работать с одной базой данных и (в некоторых случаях) подмножеством ее таблиц. Посколь-ку используется файл трассировки, совсем необязательно производить анализ на том же сервере, где находятся настраиваемая(ые) база(ы) данных. 4. Выберите таблицы, которые нужно анализировать. По умолчанию при выборе БД для настройки выбираются все ее таблицы. Щелкните соответствующую базе данных ячейку в столбце Selected Tables (Выбранные таблицы), чтобы отобразить список таблиц в выбранной БД. Установите флажок возле имени таблицы, которая должна быть добавлена, или установите флажок в заголовке столбца Name (Имя), чтобы добавить все таблицы.
298 Часть III Управление данными в Microsoft SQL Server 2005 5. Выберите вкладку Tuning Options (Параметры настройки), как показано на рис. 9-11. Здесь можно ограничить длительность настройки, задав определенное время остановки. По умолчанию указывается время, соответствующее примерно часу с момента создания сеанса. Рис 9-11. Вкладка Tuning Options утилиты Database Engine Tuning Advisor 6. В разделе Physical Design Structures (PDS) to use in database (Структуры физи-ческого уровня, которые следует использовать в базе данных) для выбора типов структур, которые мастер настройки будет рекомендовать для улучшения про-изводительности, используйте следующие параметры (выбираются установкой соответствующего переключателя). : Indexes and indexed views (Индексы и индексированные представле ния) Ути-литой рекомендуются кластерные и некластерные индексы, а также индекси-рованные представления. : Indexes (Индексы) Предлагаются кластерные и некластерные индексы. : Indexed views (Индексированные представления) Только индексированные представления. : Nonclustered indexes (Некластерные индексы) Только некластерные индексы. : Evaluate utilization of existing PDS only (Только оценить использование су-ществующих физических структур) Утилита не будет рекомендовать вари-анты улучшения производительности, а лишь проанализирует использование существующих структур. Примечание Этот параметр не может быть использован совместно с параметром Keep all existing PDS (Сохранить все существующие структуры физического уровня) из раз-дела Physical Design Structures (PDS) to keep in database (Структуры физического уровня, которые следует сохранить в базе данных).
Работа со схемами, таблицами, индексами и представлениями Глава 9 299 7. Для определения, следует ли утилите рассматривать стратегии секционирования, используйте следующие параметры в разделе Partitioning strategy to employ (При-меняемая стратегия секционирования). : No partitioning (Без секционирования) Не будут рассмотрены никакие стра-тегии секционирования. : Aligned partitioning (Совмещенное секционирование) Вновь рекомендуемые структуры будут совмещены с соответствующими секциями для упрощения сопровождения последних. Примечание Этот параметр не может быть использован совместно с параметром Keep indexes only (Сохранить только индексы) из раздела Physical Design Structures (PDS) to keep in database (Структуры физического уровня, которые следует сохранить в базе данных). : Full partitioning (Полное секционирование) Вновь рекомендуемые структуры также будут секционированы, чтобы предоставить наилучшую производитель-ность для заданной рабочей нагрузки. 8. Чтобы определить, какие существующие структуры (если таковые имеются) будут рассмотрены на предмет их удаления из БД, используйте в разделе Physical Design Structures (PDS) to keep in database (Структуры физического уровня, которые следует сохранить в базе данных) следующие параметры. : Do not keep any existing PDS (Не сохранять существующие структуры фи-зического уровня) Утилита рассмотрит возможность удаления из БД всех существующих структур. : Keep all existing PDS (Сохранить все существующие структуры физического уровня) Возможность удаления из БД каких-либо существующих структур рассматриваться не будет. : Keep aligned partitioning (Сохранить совмещенное секционирование) Будут оставлены существующие, совмещенные с секциями, структуры и все новые рекомендуемые структуры совмещены с существующей схемой секционирова-ния. Также должен быть выбран параметр Aligned partitioning (Совмещенное секционирование) из раздела Partitioning strategy to employ (Применяемая стратегия секционирования). : Keep indexes only (Оставить только индексы) Утилита сохранит существую-щие кластерные и некластерные индексы. Для всех остальных структур будет оценена возможность их удаления из БД. : Keep clustered indexes only (Оставить только кластерные индексы) Будут сохранены только существующие кластерные индексы. Для всех остальных структур утилита рассмотрит возможность их удаления из БД. Примечание Если при трассировке был запечатлен репрезентативный снимок активности БД, достаточно подробно отображающий происходящие в ней процессы, можно посовето-вать выбрать параметр, отличный от Keep all existing PDS (Сохранить все существующие структуры физического уровня), и тем самым позволить утилите Database Engine Tuning Advisor выдать все подходящие к случаю рекомендации. Такой подход гарантирует, что существующие структуры не будут конфликтовать с рекомендациями мастера. 9. Щелкните кнопку Advanced Options (Дополнительные параметры), чтобы уста-новить дополнительные параметры, как показано на рис. 9-12. 
300 Часть III Управление данными в Microsoft SQL Server 2005 Рис. 9-12. Диалоговое окно Advanced Tuning Options утилиты Database Engine Tuning Advisor В этом окне можно задать следующие параметры. : Define max. space for recommendations (MB) (Определить максимальное пространство для рекомендаций (Мбайт)) Устанавливает максимальное про-странство, которое может быть использовано рекомендованными структурами. Значение по умолчанию зависит от БД и типа выбранных структур. : Max. columns per index (Максимальное количество столбцов на ин декс) Опре-деляет максимальное количество столбцов, которые можно использовать в одном индексе. Значением по умолчанию является 1024, что позволяет при оценке принять во внимание все столбцы в таблице. : Online index recommendations (Рекомендации по созданию индекса в опе-ративном режиме) Устанавливает тип рекомендаций по индексированию. По умолчанию утилита использует рекомендации, для выполнения которых требуется перевод сервера в автономный режим (положение переключателя All recommendations are offline (Все рекомендации для автономного режима)). Кроме этого, можно выбрать создание рекомендованных индексов в оператив-ном режиме в случае возможности (положение переключателя Generate online recommendations where possible (Генерировать рекомендации для оперативного режима в случае возможности)), а также создание рекомендованных индексов только в оперативном режиме (положение переключателя Generate only online recommendations (Генерировать рекомендации только для оперативного режи-ма)). Генерирование индексов в оперативном режиме предполагает их создание при подключенных и работающих пользователях. 10. Закройте диалоговое окно Advanced Tuning Options (Дополнительные параметры), щелкнув кнопку OK. Чтобы продолжить, щелкните в панели инструментов кнопку Start Analysis (Начать анализ) или нажмите клавишу F5. Утилита начнет анализ файла рабочей нагрузки. Ход выполнения операции отображается на вкладке Progress (Ход выполнения). В любое время можно остановить анализ, щелкнув кнопку Stop Analysis (Остановить анализ) в панели инструментов. 11. После завершения анализа мастер отобразит на вкладке Recommendations (Реко-мендации), показанной на рис. 9-13, рекомендации в виде двух отдельных списков: Partition Recommendations (Рекомендации по секционированию) и Index Recommendations (Рекомендации по индексированию). Можно просмотреть сводку настройки и отчеты настройки на вкладке Reports (Отчеты). Обратите внимание на расчетный процент улучшения производительности от применения рекомен-дованных изменений, отображенный в поле Estimated improvement (Расчетное улучшение). В примере, показанном на рисунке, расчетное улучшение, равное 0 %, означает, что файл трассировки неточно отображает рабочую нагрузку БД.
Работа со схемами, таблицами, индексами и представлениями Глава 9 301 Рис. 9-13. Вкладка Recommendations 12. Теперь можно сделать следующее. : Выбрать в меню Actions (Действия) команду Save Recommendations (Сохранить рекомендации), чтобы сохранить рекомендуемые изменения в файле сценария в виде кода SQL. Просматривать или редактировать сценарий, используя тек-стовый редактор, а также назначить расписание для задания, если вы хотите реализовать изменения позже. : В меню Actions (Действия) щелкнуть команду Apply Recommendations (При-менить рекомендации), чтобы либо применить рекомендации немедленно, либо назначить их выполнение по расписанию. Для этого в открывшемся диалоговом окне Apply Recommendations (Применить рекомендации) нужно выбрать ко-манду Apply now (Применить) или Schedule for later (Назначить выполнение по расписанию) соответственно и щелкнуть кнопку OK. При выборе выполнения рекомендаций по расписанию можно также установить дату и время запуска. 13. Когда выбрано применение изменения, состояние каждого изменения будет ото-бражаться в диалоговом окне Applying Recommendations (Применение рекоменда-ций) как Success (Успешно). Если показано состояние ошибки, в соответствующем сообщении об ошибке будет описана ее причина. Ограничения столбцов и правила Определение правил и ограничений столбцов - важный аспект администрирования БД. Применение ограничений позволяет контролировать, каким образом использу-ются хранящиеся в столбце значения, например, являются ли они уникальными или имеют особый формат. Хотя обычно ограничения применяются непосредственно к конкретному столбцу, иногда удобно определить правила, по которым они будут при-меняться к нескольким таблицам в БД.
302 Часть III Управление данными в Microsoft SQL Server 2005 Использование ограничений SQL Server обеспечивает уникальность значений столбца при помощи ограничений UNIQUE и PRIMARY KEY. Часто ограничение UNIQUE используется для создания вторичных (secondary) ключей, которые можно применять параллельно с первичным ключом. Ограничение FOREIGN KEY устанавливает отношения между таблицами и гарантирует соблюдение ссылочной целостности. Другими типами ограничений являются CHECK и NOT NULL. С помощью ограничения CHECK можно запретить столбцу принимать значения определенного формата или диапазона. Ограничение NOT NULL предотвращает появление в столбце значения NULL. Ограничения могут применяться к столбцам или к целым таблицам. Ограничение столбца указывается как часть определения столбца и применяется только к этому столбцу. Ограничение таблицы задается независимо от определения столбца и может применяться к нескольким столбцам в таблице. Если требуется включить в ограниче-ние больше одного столбца, следует использовать ограничение таблицы. Например, если первичный ключ таблицы состоит из трех столбцов, единственным выходом является использование ограничения таблицы, что позволяет включить в первичный ключ все три столбца. Установка условий уникальности столбцов Условия уникальности столбцов в SQL Server могут быть установлены двумя способа-ми: назначением ограничения UNIQUE в определении столбца или явным созданием для столбца уникального индекса. При установке ограничения UNIQUE для одного или нескольких столбцов SQL Server автоматически создает уникальный индекс и производит проверку повторяющихся значений. Если существуют повторяющиеся ключевые значения, операция создания индекса отменяется и отображается сообще-ние об ошибке. Аналогично SQL Server проверяет данные каждый раз при их добав-лении в таблицу. Когда новые данные содержат повторяющиеся ключевые значения, операция вставки или обновления откатывается и выводится сообщение об ошибке. Параметр IGNORE_DUP_KEY определяет действия сервера при операциях вставки данных, пытающихся добавить несколько строк, в том числе и с повторяющимися значениями. Если параметр установлен в значение ON, строки, не вносящие в таблицу повторяющихся значений, будут добавлены, а дублирующие строки - отброшены, но транзакция в целом завершится успешно. Когда же для параметра выбрано значение OFF, происходит откат всей транзакции. Чтобы создать уникальный индекс в SQL Server Management Studio, задайте при создании индекса для параметра Is Unique (Уникальный) значение Yes (Да), как описывается выше, в разделе "Создание индексов", или установите флажок Unique (Уникальный) на странице General (Общие) диалогового окна Index Properties (Свой-ства индекса) либо New Index (Новый индекс). Уникальность индекса можно определить при его создании также средствами Transact-SQL, как показано в следующем примере: USE OrderSystemDB CREATE UNIQUE INDEX [Cust ID Index] ON Sales.Customers( cust_id ) Чтобы создать кластерный индекс, нужно явно указать ключевое слово CLUSTERED, например: USE Customer CREATE UNIQUE CLUSTERED INDEX [Cust ID Index] ON Sales.Customers( cust_id )
Работа со схемами, таблицами, индексами и представлениями Глава 9 303 Определение ограничения PRIMARY KEY SQL Server позволяет определить в качестве первичного ключа любой столбец или группу столбцов; тем не менее, наиболее вероятными кандидатами на роль первичного ключа являются идентифицирующие столбцы. Таблица может иметь только один первичный ключ. В связи с необходимостью обеспечить уникальность значений, столбец первичного ключа не может допускать хранение значений NULL. Кроме того, если используется составной ключ из нескольких столбцов, значения всех столбцов объединяются, чтобы определить уникальность строк. Как и при определении ограничения UNIQUE, SQL Server создает уникальный индекс для столбцов первичных ключей. Однако, в отличие от ограничения UNIQUE, по умолчанию индекс создается как кластерный, при условии, что в таблице не существует другого кластерного индекса и явно не задано создание некластерного индекса. Первичный ключ можно установить при создании новой или изменении суще-ствующей таблицы в SQL Server Management Studio, выполнив указанные ниже действия. 1. В конструкторе таблиц снимите флажок параметра Allow Nulls (Разрешить значе-ния NULL) для всех столбцов, которые будут использованы в первичном ключе. 2. Выберите столбец (столбцы), который (которые) необходимо использовать в каче-стве первичного ключа; для этого нажмите клавишу Ctrl и, удерживая ее нажатой, щелкните мышью на затененном поле слева от имени столбца (столбцов). 3. Щелкните кнопку Set Primary Key (Установить первичный ключ) в панели ин-струментов или выберите команду Set Primary Key (Установить первичный ключ) в меню Table Designer (Конструктор таблиц). Также можно установить первичный ключ при создании или изменении таблиц средствами Transact-SQL. Как это сделать, показано в примере 9-13. Пример 9-13. Создание таблицы и ее столбцов с применением ограничения PRIMARY KEY USE Customer CREATE TABLE Sales.Customers ( cust_id int NOT NULL, cust_lname varchar(40) NOT NULL, cust_fname varchar(20) NOT NULL, phone char(12) NOT NULL, CONSTRAINT PK_Cust PRIMARY KEY ( cust_id ) ) USE Customer ALTER TABLE Sales.Customers ADD CONSTRAINT PK_Cust PRIMARY KEY ( cust_id ) Использование ограничения FOREIGN KEY Ограничение FOREIGN KEY определяет отношения между таблицами и гарантирует соблюдение ссылочной целостности. Внешний ключ таблицы ссылается на потенци-альный ключ (candidate key)* другой таблицы, устанавливая тем самым связь между * В одной таблице может оказаться несколько столбцов или наборов столбцов, претендующих на роль первичного ключа. Такие претенденты называются потенциальными ключами. Из них вы-бирается первичный ключ, остальные становятся вторичными, или альтернативными (alternative) ключами. - Прим. ред.
304 Часть III Управление данными в Microsoft SQL Server 2005 таблицами (отношение предок/потомок). Внешние ключи предотвращают внесение таких изменений, для которых в связанной таблице не существует потенциальных ключей с таким же значением. Также нельзя добавить строку со значением внешне-го ключа, для которого в связанной таблице не существует потенциального ключа с таким же значением. Исключением является вставка во внешний ключ значения NULL (в отличие от первичных ключей, внешние ключи могут содержать значения NULL, если это явно не запрещено). В представленном ниже примере для таблицы Orders устанавливается с помощью внешнего ключа ссылка на таблицу Customer, определенную в предыдущем примере: CREATE TABLE Sales.Orders ( order_nmbr int, order_item varchar(20), qty_ordered int, cust_id int FOREIGN KEY REFERENCES Sales.Customers( cust_id ) ON DELETE NO ACTION ) Предложение ON DELETE определяет действия, предпринимаемые при попытке удалить строку, на которую указывают существующие внешние ключи. Для этого в предложении используются несколько параметров. NO ACTION Удаление завершается неудачно, выдается ошибка и выполняется откат действия по удалению строки. CASCADE Все строки с внешними ключами, ссылающимися на удаляемую стро-ку, также должны быть удалены. (Данный параметр не может быть использован, если для удаления определен триггер INSTEAD OF DELETE.) SET NULL Всем столбцам, составляющим внешний ключ, при удалении соот-ветствующей строки в таблице-предке должно быть присвоено значение NULL. (Столбцы внешних ключей должны допускать хранение значений NULL.) SET DEFAULT Всем столбцам, составляющим внешний ключ, при удалении соответствующей строки в таблице-предке должно быть присвоено значение по умолчанию. (Для столбцов внешнего ключа должны быть определены значения по умолчанию. Если столбец допускает хранение значений NULL и для него явно не определено значение по умолчанию, ему будет присвоено значение NULL.) Также с помощью Transact-SQL можно задать предложение ON UPDATE, как показано в примере: CREATE TABLE Sales.Orders ( order_nmbr int, order_item varchar(20), qty_ordered int, cust_id int FOREIGN KEY REFERENCES Sales.Customers( cust_id ) ON UPDATE CASCADE )Предложение ON UPDATE определяет действия, предпринимаемые при попытке обновить строку, на которую указывают существующие внешние ключи. Подобно ON DELETE, это предложение поддерживает параметры NO ACTION, CASCADE, SET NULL и SET DEFAULT.
Работа со схемами, таблицами, индексами и представлениями Глава 9 305 Использование ограничения CHECK Ограничение CHECK позволяет контролировать формат и/или диапазон значений, сохраняемых в таблицах и столбцах, например, если нужно указать, что почтовые индексы должны быть введены в формате 99999, а номера телефонов - в формате 9999999999. Ограничение CHECK можно установить при создании новой или изменении су-ществующей таблицы в SQL Server Management Studio. Для этого выполните ука-занные действия. 1. В окне конструктора таблиц в меню Table Designer (Конструктор таблиц) выберите команду Check Constraints (Ограничения CHECK). Отобразится диалоговое окно Check Constraints (Ограничения CHECK), показанное на рис. 9-14. Рис. 9-14. Диалоговое окно Check Constraints 2. Теперь можно делать следующее. : Редактировать существующее ограничение Для этого сначала выберите его в списке Selected Check Constraint (Выбранное ограничение CHECK), за-тем измените существующее выражение ограничения и другие параметры его определения, используя предоставляемые поля. : Удалить ограничение Выберите его в списке Selected Check Constraint (Вы-бранное ограничение CHECK) и щелкните кнопку Delete (Удалить). В диало-говом окне Delete Object (Удаление объекта) подтвердите удаление, щелкнув кнопку OK. : Создать новое ограничение Щелкните кнопку Add (Добавить), затем в поле Name (Имя) введите имя ограничения и в поле Description (Описание) - его описание. Щелкните кнопку справа от поля Expression (Выражение), в диа-логовом окне Check Constraint Expression (Выражение ограничения CHECK) введите выражение ограничения и щелкните кнопку OK. 3. По окончании работы с ограничением CHECK в диалоговом окне Check Constraints (Ограничения CHECK) щелкните кнопку Close (Закрыть). Разрешенные символы указываются в выражениях ограничения CHECK при по-мощи регулярных выражений.
306 Часть III Управление данными в Microsoft SQL Server 2005 Регулярное выражение [0-9] указывает, что в данной позиции разрешено любое число от 0 до 9. Например, чтобы отформатировать столбец для вмещения девя-тизначного почтового индекса, следует использовать такое выражение: PostalCode LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' Регулярное выражение [a-z] или [A-Z] указывает, что в назначенной позиции разрешена любая строчная или любая прописная буква*. Например, чтобы отфор-матировать столбец для хранения любого слова из пяти букв с заглавной первой буквой, следует использовать следующее выражение: PostalCode LIKE '[A-Z][a-z][a-z][a-z][a-z]' Регулярное выражение [a-zA-Z0-9] указывает, что в назначенной позиции раз-решена любая буква или цифра. Как пример, чтобы отформатировать столбец для вмещения любого значения из пяти символов, следует использовать такое выражение: PostalCode LIKE '[a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9][a-zA-Z0-9]' Можно также добавить или удалить ограничение средствами Transact-SQL с по-мощью инструкции CREATE TABLE или ALTER TABLE, как это сделано в следу-ющем примере: USE CUSTOMER ALTER TABLE Sales.Customers ADD CONSTRAINT CheckZipFormat CHECK ( ( [PostalCode] LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' ) )Использование ограничения NOT NULL Ограничение NOT NULL предписывает, что столбец не может принимать значений NULL. Как правило, ограничения NOT NULL задаются при создании таблицы. Их можно установить и впоследствии при изменении таблицы. В SQL Server Management Studio использование этого ограничения задается в столбце Allow Nulls (Разрешить значения NULL) конструктора таблиц: при снятом флажке столбец таблицы не при-нимает значения NULL. Использование правил Правило - это ограничение, в котором можно использовать несколько столбцов или таблиц. Правила выполняют ту же функцию, что и ограничения CHECK, однако поддерживаются в SQL Server 2005 только для обеспечения обратной совместимости с предыдущими версиями SQL Server. Microsoft рекомендует использование ограни-чения CHECK вместо правил, поскольку они легче настраиваются и являются более краткими. Например, к одному столбцу можно применить только одно правило, а ограничений CHECK - несколько. Однако в некоторых ситуациях предпочтитель-нее использовать правила. Так, ограничения CHECK задаются внутри определений таблиц, тогда как правила являются объектами, определяемыми независимо, и по-этому они не ограничены применением только в одной конкретной таблице. Правила привязываются к таблице после ее создания и не удаляются при удалении таблицы. Другим преимуществом правил является то, что они могут быть привязаны к любому пользовательскому типу данных. Чтобы просмотреть существующие правила в SQL Server Management Studio, вы-полните следующую последовательность действий. * Для кириллицы используйте [а-я] и [А-Я] соответственно. - Прим. ред.
Работа со схемами, таблицами, индексами и представлениями Глава 9 307 1. Подключитесь к экземпляру сервера, содержащему БД, с которой требуется ра-ботать. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных) и затем БД, чтобы отобразить узлы ее ресурсов. 3. Раскройте узлы Programmability (Программируемые возможности) и Rules (Пра-вила). Отобразится список существующих правил. Инструкциями Transact-SQL по созданию правил и их управлению являются CREATE RULE и DROP RULE. Инструкцию CREATE RULE можно использовать следующим образом: CREATE RULE CheckFormatZip AS @value LIKE '[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]' Правило после создания необходимо активировать для использования. Для при-вязки его к определенному столбцу или пользовательскому типу данных примените специальную хранимую процедуру sp_bindrule. С помощью хранимой процедуры sp_unbindrule можно удалить привязку правила к столбцу таблицы или пользователь-скому типу данных. Для вызова управляющих привязкой правил хранимых процедур используется следующий синтаксис: sp_bindrule 'rule_name', 'object_name' [ , 'futureonly_flag' ] sp_unbindrule 'object_name' [ , 'futureonly_flag' ]
Глава 10 Импорт, экспорт и преобразование данных Требуется ли произвести однократный перенос данных из старой системы в новую или регулярно копировать данные между оперативной БД и хранилищем данных - в лю-бом случае наилучшим средством для решения подобных задач являются Integration Services (Службы интеграции). Это хорошая полнофункциональная платформа для извлечения, преобразования и загрузки данных, полностью настраиваемая под любое конкретное приложение и оптимизированная для высокопроизводительного переноса и преобразования данных. Integration Services (Службы интеграции) можно исполь-зовать для копирования и преобразования данных практически между любыми ис-точниками, включая текстовые файлы, а также источники данных OLE DB и ODBC. Хорошим дополнением к такому мощному инструменту будет старая добрая утилита BCP, которая продолжает оставаться одним их основных средств импорта и экспорта данных в SQL Server 2005. Работа со службами интеграции SQL Server Перечислим основные административные задачи по сопровождению Integration Services (Службы интеграции): установка компонентов Integration Services (Службы интеграции) при помощи программы установки SQL Server 2005; использование SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server) для переноса данных; обновление компонентов Data Transformation Services (Службы преобразования данных) до Integration Services (Службы интеграции); управление существующими пакетами DTS 2000 или, при необходимости, их миграция в Integration Services (Службы интеграции); создание и сопровождение пакетов SSIS с использованием утилиты Business Intelligence Development Studio; запуск пакетов SSIS при помощи как графических утилит - Business Intelligence Development Studio или SQL Server Management Studio, так и утилиты командной строки dtexec. Однако прежде чем приступить к выполнению любой из этих задач, следует из-учить принципы функционирования Integration Service (Службы интеграции). После ознакомления с используемыми в них средствами управления и структурами данных применить компоненты служб интеграции для решения вышеперечисленных задач не составит особого труда. Начало работы со службами интеграции SQL Server Integration Services (Службы интеграции) способны безошибочно и эффективно пере-носить и преобразовывать данные между разнородными источниками. Их можно использовать, если требуется выполнить одну из следующих задач. Перенесение данных между неоднородными системами, например из Oracle в SQL Server или из SQL Server в Oracle.
Импорт, экспорт и преобразование данных Глава 10 309 Перенесение данных между серверами SQL (при этом сохраняются первичные и внешние ключи). Перенесение данных из Microsoft Access или Microsoft Excel в SQL Server или из SQL Server в Microsoft Access или Microsoft Excel. Извлечение данных путем сопоставления столбцов источника и назначения, под-становки недостающих значений и т. д., а затем импортирование в систему на-значения. Копирование представлений из одной БД в другую. Хотя SQL Server 2005 поддерживает существующие пакеты DTS 2000 и предо-ставляет средства для обновления/миграции для них, все же рекомендуется перейти к использованию Integration Services (Службы интеграции), которые пришли на смену Data Transformation Services (Службы преобразования данных) и предостав-ляют много новых функциональных возможностей. Архитектура Integration Services (Службы интеграции) была кардинально изменена. В Data Transformation Services (Службы преобразования данных) управление последовательностью выполняемых действий и переносом данных производилось с помощью одного компонента - ядра служб преобразования данных. В службах интеграции с этой целью применяются два отдельных компонента. Ядро исполняющей среды служб интеграции Хранит структуру пакетов, вы-полняет пакеты, управляет последовательностью выполняемых задач, а также осуществляет другие важные задачи поддержки выполнения пакетов. Ядро управления потоком данных служб интеграции Управляет переносом и преобразованием данных, поддерживает множество типов источников, преоб-разований и мест назначения данных. В основе Integration Services (Службы интеграции) лежит расширяемая объектная модель, включающая интерфейс программирования исполняющей среды, а также ин-терфейс программирования потока данных, поддерживающий .NET Framework. Оба эти интерфейса позволяют разработчикам расширить объектную модель Integration Services (Службы интеграции) и настроить ее под конкретное приложение. Пользовательские расширения могут быть разработаны для таких элементов пакетов, как задачи, постав-щики журналов, диспетчеры соединений, компоненты потока данных и др. Средства для работы со службами интеграции SQL Server Основными средствами для работы с Integration Services (Службы интеграции) яв-ляются графические среды Business Intelligence Development Studio и SQL Server Management Studio. Первая названная утилита используется для разработки решений преобразования данных, а SQL Server Management Studio - для управления паке-тами SSIS. Через Business Intelligence Development Studio можно получить доступ к SSIS Designer (Конструктор пакетов SSIS) - графическому средству для создания пакетов SSIS. SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server) является новой версией мастера импорта и экспорта, используемого в Data Transformation Services (Службы преобразования данных). Для поддержки Integration Services (Службы интеграции) мастер был обновлен, кроме того, расширены его функциональные возможности, предоставляющие теперь лучшую поддержку для работы с данными в текстовых файлах и для предварительного просмотра данных в реальном времени. Пакеты SSIS, созданные с помощью мастера импорта и экспорта, могут открываться в Business Intelligence Development Studio и затем дорабатываться при помощи SSIS Designer (Конструктор пакетов SSIS).
310 Часть III Управление данными в Microsoft SQL Server 2005 Совет Мастер импорта и экспорта способен выполнять операцию импорта или экспорта между любыми доступными источниками данных; совсем не обязательно указывать SQL Server в качестве источника либо места назначения данных. Например, с помощью мастера вы можете копировать данные из текстового файла в электронную таблицу Excel. Пакеты SSIS, как и пакеты DTS 2000, могут храниться в БД msdb или в виде файла. Служба SQL Server Integration Services*, являющаяся ядром Integration Services (Службы интеграции), отвечает за управление хранением пакетов. Управлять пакетами, а именно копировать, перемещать, подписывать и удалять их, можно из командной строки с помощью утилиты dtutil. Для запуска пакетов используется графическая утилита Execute Package Utility (Утилита выполнения пакетов) (dtexecui), доступ к которой предоставляют Business Intelligence Development Studio или SQL Server Management Studio. Ее эквивалентом для запуска пакетов из командной строки является утилита dtexec. Integration Services (Службы интеграции) содержат Package Configuration Wizard (Мастер настройки пакетов), облегчающий управление конфигурацией пакетов. За-пустив из Business Intelligence Development Studio утилиту развертывания пакетов SSIS, можно установить пакеты в базу данных msdb какого-либо экземпляра SQL Server 2005 или разместить их в файловой системе. Утилита развертывания автома-тически обнаруживает и включает все зависимости пакетов, что упрощает разверты-вание последних. В SQL Server 2005 включены средства для управления пакетами DTS 2000 и их миграции из предыдущих версий SQL Server. Список доступных пакетов DTS 2000 можно просмотреть с помощью SQL Server Management Studio, подключившись к серверу в панели Object Explorer (Обозреватель объектов) и последовательно раскрыв узлы Management (Управление), Legacy (Предыдущая версия) и Data Transformation Services (Службы преобразования данных). Пакеты DTS 2000 можно редактировать или выполнять, а также мигрировать их в формат Integration Services (Службы ин-теграции). Службы интеграции SQL Server и поставщики данных Поставщики данных являются ключевой частью Integration Services (Службы инте-грации). Без них невозможно было бы установить связь с другими системами. SQL Server включает поставщики данных .NET Framework, OLE DB и ODBC для следу-ющих источников информации: SQL Server; Oracle; Microsoft Access и Excel; Microsoft Analysis Services; Microsoft Data Mining Services; Microsoft Internet Publishing; SQLXML; Текстовые файлы. Драйвер текстового файла является наиболее универсальным средством импорта и экспорта. Если по какой-либо причине для устаревшей СУБД отсутствует собствен-ный поставщик данных, и нет возможности использовать универсальный поставщик * Таково выводимое имя службы; имя же, используемое операционной системой, - MsDtsServer. - Прим. ред.
Импорт, экспорт и преобразование данных Глава 10 311 ODBC, в большинстве случаев можно экспортировать данные в текстовый файл, а за-тем импортировать его в SQL Server. Пользуясь этим же методом, можно перенести данные из SQL Server в любую систему. Пакеты служб интеграции Самый быстрый и простой способ перенесения данных между системами - использо-вать SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server). Этот мастер применяется для создания базовых пакетов SSIS, которые затем можно просмотреть или изменить в SSIS Designer (Конструктор пакетов SSIS). Пакеты состоят из наборов задач для импорта, преобразования и экспорта данных и могут использоваться повторно, для чего либо запускаются вручную, либо их запуск на-значается по расписанию с необходимой периодичностью. Пакеты можно: хранить в БД msdb на локальном или удаленном сервере; сохранять в виде файла с расширением DTSX, когда предполагается их копи ровать, перемещать или отправлять по электронной почте для размещения в другом месте. Примечание Integration Services (Службы интеграции) не поддерживают хранение пакетов в файлах Visual Basic. Пакеты DTS 2000, хранящиеся в файлах Visual Basic, не могут быть мигрированы в Integration Services (Службы интеграции). Пакеты выполняются непосредственно из SQL Server Management Studio или Business Intelligence Development Studio. Но также можно это делать из командной строки при помощи утилиты dtexec. В пакетах Integration Services (Службы интегра-ции) используются следующие типы объектов. Connections (Соединения) Хранят информацию об источнике или месте назна-чения данных. В них указывается поставщик данных (например, Microsoft OLE DB Data Provider for SQL Server), сервер, учетная запись и БД, которые следует использовать для выполнения импорта или экспорта. В SSIS Designer (Конструк-тор пакетов SSIS) соединения выбираются с помощью меню Data (Данные). Tasks (Задачи) Определяют операции, которые должны быть выполнены внутри пакета. Задачи могут состоять из сценариев ActiveX, сценариев SQL, запросов SQL, команд для переноса объектов SQL Server, управляемых данными запросов, команд для осуществления массивного копирования и внешних программ, кото-рые следует выполнить. По завершении исполнения пакета даже можно послать сообщение по электронной почте. Workflow containers (Контейнеры последовательности выполнения) Задают условия, определяющие, когда и каким образом должна выполниться конкретная задача: после завершения предыдущей задачи (вне зависимости от возможных ошибок), только после неудачного или только после удачного ее завершения. Например, можно назначить задачу, которая при неудачном либо успешном за-вершении посылала бы сообщение по электронной почте. Control flow procedures (Процедуры потока управления) Поток управления состоит из одной или нескольких задач и контейнеров, которые при исполнении пакета выполняются последовательно или параллельно. Ограничения предшество-вания соединяют задачи и контейнеры в пакете и определяют условия для запуска следующей задачи или контейнера в потоке управления пакетом. Также задачи и контейнеры могут быть сгруппированы в цикл и выполняться неоднократно как единое целое внутри потока управления пакетом. Data flow procedures (Процедуры потока данных) Устанавливают пошаговый процесс преобразования данных. Прежде чем добавить поток данных в пакет, 
312 Часть III Управление данными в Microsoft SQL Server 2005 в поток управления пакета следует включить задачу Data Flow (Поток данных), отвечающую за обработку потока данных. Поток данных состоит из объектов-адаптеров источников и мест назначения, которые извлекают и загружают данные; объектов-преобразований, изменяющих и расширяющих данные; а также путей, связывающих объекты-адаптеры и объекты-преобразования. Пакеты SSIS можно хранить на любом сервере SQL Server, то есть совсем не обя-зательно создавать или хранить их на исходном сервере или сервере назначения, свя-занном с пакетом. Чтобы изменить, назначить на выполнение или просто просмотреть пакет SSIS, необходимо использовать учетную запись владельца пакета или учетную запись, состоящую в роли sysadmin на сервере SQL Server, где пакет размещен. Создание пакетов при помощи мастера импорта и экспорта Создание пакета SSIS является одной из самых сложных задач, возложенных на плечи администраторов баз данных. Хотя на выручку приходит SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server), призванный облегчить процесс разработки пакетов SSIS, тем не менее, это достаточно нетривиальная задача. Чтобы упростить ее понимание, разделим процесс создания пакета на этапы и рас-смотрим каждый в отдельности. Этап 1. Указание источника и места назначения данных. Этап 2. Настройка извлечения данных: копирование или запрос. Этап 3. Задание форматирования и преобразования данных. Этап 4. Сохранение и выполнение пакета. Чтобы приступить к использованию Integration Services (Службы интеграции), запустите мастер импорта и экспорта. Если отобразилась стартовая страница, щелкни-те кнопку Next (Далее), чтобы перейти на страницу выбора источника. Для запуска мастера из SQL Server Management Studio выполните следующую последовательность действий. 1. Подключитесь к экземпляру сервера, содержащему базу данных, с которой требу-ется работать. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных). В контекстном меню необходимой БД выберите команду Tasks\Import Data (Задачи\Импорт данных) или Tasks\Export Data (Задачи\Экспорт данных). Также можно запустить мастер импорта и экспорта из командной строки, набрав команду dtswizard. Этап 1. Указание источника и места назначения данных Первой задачей при создании пакета SSIS является выбор источника и места назна-чения данных для операции импорта или экспорта. При запуске SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server) обычно отображается стартовая страница (если установить флажок Do not show this page again (Не выво-дить эту страницу в дальнейшем), при последующих запусках она будет пропущена). Щелкните кнопку Next (Далее) для вывода страницы Choose a Data Source (Выберите источник данных). Далее выполните следующую последовательность действий. 1. В раскрывающемся списке Data source (Источник данных) выберите источник данных для операции импорта или экспорта. В SQL Server включены поставщики данных .NET Framework, OLE DB и ODBC, которые позволяют работать с такими 
Импорт, экспорт и преобразование данных Глава 10 313 источниками, как SQL Server, Oracle Access и Excel, Microsoft Analysis Services, Microsoft Data Mining Services, Microsoft Internet Publishing, SQLXML, а также текстовыми файлами. Выберите источник данных, соответствующий типу файла, приложению или БД, используемым в качестве источника. Например, если дан-ные будут копироваться из электронной таблицы Excel, выберите Microsoft Excel в качестве источника для операции импорта или экспорта. 2. Введите дополнительную информацию, необходимую для установки соединения с источником данных. (Набор отображаемых полей для ввода дополнительной информации зависит от выбранного источника данных.) Щелкните кнопку Next (Далее). 3. Отобразится страница Choose a Destination (Выберите место назначения данных). В раскрывающемся списке Destination (Место назначения) выберите место на-значения данных для операции импорта или экспорта. 4. Введите дополнительную информацию, необходимую для установки соединения с местом назначения данных. Как и в случае с источником данных, набор доступ-ных полей для ввода дополнительной информации зависит от выбранного места назначения данных. 5. Щелкните кнопку Next (Далее), чтобы перейти к следующему этапу операции, определяющему метод извлечения данных: копирование или запрос. Довольно часто выбор источника и места назначения данных бывает таким же про-стым, как и в вышеперечисленной последовательности действий. Но иногда бывает неясно, какую дополнительную информацию нужно вводить, поскольку существует несколько различных типов источников и мест назначения данных, предлагаемых для выбора. Среди них: соединения через поставщиков данных .NET Framework; соединения с файлами данных; соединения с серверами БД, отличными от SQL Server; соединения с серверами SQL Server; текстовые файлы. Рассмотрим каждую из этих категорий подробнее. Соединения через поставщиков данных .NET Framework В SQL Server 2005 включены поставщики данных .NET Framework для ODBC, Oracle и SQL Server. Первый из указанных является единственным поддерживаемым драй-вером ODBC. Настройка поставщиков данных .NET Framework производится через диалоговое окно, подобное изображенному на рис. 10-1. В зависимости от исполь-зуемого поставщика данных .NET Framework, необходимо предоставить указанную ниже информацию. При использовании .NET Framework для ODBC: строку соединения (поле ConnectionString), имя источника данных (поле DSN) и имя драйвера ODBC (поле ввода Driver), используемого при подключении к источнику данных. В случае .NET Framework для Oracle: строку соединения (поле ConnectionString), идентификатор пользователя (поле User ID) и пароль (поле Password), а также имя БД, к которой следует подключиться (поле Data Source (Источник данных)). При необходимости можно также настроить и другие параметры, перечисленные в разделах Initialization (Инициализация), Pooling (Организация пула) и Security (Безопасность).
314 Часть III Управление данными в Microsoft SQL Server 2005 Рис. 10-1. Страница SQL Server Import and Export Wizard для соединений поставщиков данных .NET Framework Соединения с файлами данных Применяйте соединения с файлами данных при работе с приложениями и СУБД, оперирующими с файлами, например при работе с данными Access и Excel. Чтобы настроить соединение с файлом данных, используйте диалоговое окно, подобное изображенному на рис. 10-2. Для соединения с файлом данных Access необходимо предоставить следующую информацию. File name (Имя файла) Полное имя файла или путь в формате UNC (uniform naming convention - стандартный формат записи пути) к исходному файлу либо файлу назначения, например \\omega\data\access\cust.mdb. User name (Имя пользователя) Допустимое имя пользователя для получения доступа к файлу. Password (Пароль) Допустимый пароль для получения доступа к файлу ис-точника. Для соединения с файлом данных Excel требуется информация, указанная ниже. Excel file path (Путь к файлу Excel) Полное имя файла или путь в формате UNC к исходному файлу либо файлу назначения, например \\omega\data\excel\cust.xls. Excel version (Версия Excel) Версия Excel, файл которой служит источником копирования данных. Примечание Если первая строка электронной таблицы Excel не содержит имен столбцов, снимите флажок First row has column names (Первая строка содержит имена столбцов).
Импорт, экспорт и преобразование данных Глава 10 315 Рис. 10-2. Страница SQL Server Import and Export Wizard для соединения с файлом данных Access Соединения с серверами БД, отличными от SQL Server Соединения с серверами баз данных применяются для подключения к СУБД, отлич-ным от SQL Server. Этот тип соединения используется с такими источниками данных, как Microsoft OLE DB Provider for Oracle (Поставщик OLE DB для Oracle), Microsoft OLE DB Provider for Analysis Services 9.0 (Поставщик OLE DB для аналитических служб версии 9.0), Microsoft OLE DB Provider for Data Mining Services (Поставщик OLE DB для служб поиска данных), Microsoft OLE DB Provider for OLAP Services 8.0 (Поставщик OLE DB для служб OLAP версии 8.0) и SQLXMLOLEDB (Поставщик OLE DB для SQLXML). Чтобы настроить соединение с такими серверами, следует установить свойства связи с данными (data link), используемой для подключения к источнику данных. Есть четыре категории свойств связи с данными. Поставщик OLE DB Выбирается из раскрывающегося списка Data source (Источ-ник данных) или Destination (Место назначения) в мастере импорта и экспорта. Параметры соединения Задаются на вкладке Connection (Подключение) в диа-логовом окне Data Link Properties (Свойства связи с данными). Параметры со-единения обычно включают имя источника данных или строку соединения вместе с информацией об имени пользователя и пароле. Дополнительные параметры Устанавливаются с использованием вкладки Advanced (Дополнительно) в диалоговом окне Data Link Properties (Свойства связи с данными). Дополнительные параметры позволяют настроить параметры сети, время ожидания и права доступа (в случае, если эти параметры являются настра-иваемыми).
316 Часть III Управление данными в Microsoft SQL Server 2005 Свойства инициализации Находятся на вкладке All (Все) диалогового окна Data Link Properties (Свойства связи с данными). Свойства инициализации отображают все параметры, настроенные для поставщика. Именно на этой вкладке следует редактировать значения всех свойств, для чего нужно дважды щелкнуть мышью выбранное свойство. При работе с Oracle его клиент и сетевые компоненты должны быть установлены на компьютере, где запущен SQL Server. Если эти компоненты не установлены, ис-пользовать поставщик OLE DB для Oracle не удастся. При условии, что в системе установлен клиент Oracle, свойства связи с данными Oracle можно задать, выполнив следующую последовательность действий. 1. В мастере импорта и экспорта в раскрывающемся списке Data source (Источ-ник данных) или Destination (Место назначения) выберите источник Microsoft OLE DB Provider for Oracle (Поставщик OLE DB для Oracle), затем щелкните кнопку Pro perties (Свойства). Отобразится диалоговое окно Data Link Pro perties (Свойства связи с данными) с вкладкой Connection (Подключение), как показано на рис. 10-3. Рис. 10-3. Вкладка Connection диалогового окна Data Link Properties для Oracle 2. В поле Enter a server name (Введите имя сервера) введите имя сервера Oracle, к которому следует подключиться. 3. Затем в поле User name (Имя пользователя) введите имя пользователя, а в поле Password (Пароль) - пароль, необходимые для подключения к БД. 4. Чтобы проверить соединение к серверу, щелкните кнопку Test Connection (Про-верить соединение). Если не удается установить соединение, возможно, клиент Oracle неправильно настроен. 5. Для просмотра дополнительных параметров можно использовать вкладки Advanced (Дополнительно) и All (Все). При необходимости измените эти параметры. 6. По окончании настройки свойств связи с данными Oracle щелкните кнопку OK.
Импорт, экспорт и преобразование данных Глава 10 317 Соединения с серверами SQL Server В дополнение к использованию поставщика данных .NET Framework для SQL Server можно подключиться к SQL Server с помощью технологии SQL Native Client или поставщика Microsoft OLE DB для SQL Server. Параметры, доступные при исполь-зовании данных альтернативных соединений, показаны на рис. 10-4. Рис. 10-4. Страница SQL Server Import and Export Wizard для SQL Native Client или поставщика Microsoft OLE DB для SQL Server Соединение рассматриваемого типа можно настроить, выполнив такие действия. 1. В раскрывающемся списке Server name (Имя сервера) выберите SQL Server, с ко-торым следует установить соединение. Если сервер, который необходимо исполь-зовать, не значится в списке, введите его имя. 2. Выберите тип используемой аутентификации. При необходимости введите имя пользователя и пароль. 3. Используйте раскрывающийся список Database (База данных) для выбора базы данных. Необходимо предоставить допустимые учетные данные, которые должны обладать достаточными привилегиями. 4. Если доступна кнопка Advanced (Дополнительно), можно щелкнуть ее, чтобы установить дополнительные параметры для драйвера/поставщика. Импорт и экспорт текстовых файлов Текстовые файлы можно использовать и в качестве источника, и в качестве места на-значения данных. При этом необходимо предоставить дополнительную информацию о форматировании данных в исходном файле и файле назначения. Последовательность действий одинакова как для настройки использования текстового файла в качестве 
318 Часть III Управление данными в Microsoft SQL Server 2005 источника данных, так и для его использования в качестве места назначения данных. Ниже приведена ориентировочная последовательность действий. 1. В мастере импорта и экспорта в раскрывающемся списке Data source (Источник данных) выберите источник Flat File Source (Источник - текстовый файл). Ото-бразятся поля для ввода соответствующей информации. В поле File name (Имя файла) введите полное имя файла или путь к файлу в формате UNC. Файл дол-жен быть сохранен в допустимом формате, например ANSI (текст ASCII), IBM EBCDIC, MAC, OEM (original equipment manufacturer - производитель оборудо-вания), UTF-7 или UTF-8. Примечание При импорте данных формат OEM обычно означает собственный формат SQL Server. Если файл содержит символы в кодировке UNICODE, следует установить флажок Unicode (Юникод). Совет Когда файл используется другими процессами, обычно отображается сообщение об ошибке. В этом случае щелкните кнопку OK и выберите файл повторно. (Мастер импорта и экспорта попытается снова прочитать файл. Если ему это не удастся, редак-тирование спецификации формата для файла окажется невозможным.) 2. После ввода информации о текстовом файле страница мастера обновится, подобно показанной на рис. 10-5. Рис. 10-5. Страница SQL Server Import and Export Wizard для источника данных - текстового файла 3. Значения в раскрывающихся списках Locale (Язык) и Code page (Кодовая стра-ница) устанавливаются автоматически на основании данных выбранного файла. При неверных значениях укажите надлежащие. 4. Укажите, каким образом ограничены поля файла, используя раскрывающийся список Format (Формат). Если файл содержит столбцы фиксированной шири-
Импорт, экспорт и преобразование данных Глава 10 319 ны, выберите параметр Fixed width (Фиксированной ширины). Если же столбцы ограничены запятыми, табуляциями, точками с запятой или другими одинарными символами, выберите параметр Delimited (Ограничены). 5. Используйте поле Text qualifier (Квалификатор текста) для указания квалифика-тора текста. Например, можно задать двойные кавычки ("), одинарную кавычку (') или <none> (<отсутствует>). 6. В раскрывающемся списке Header row delimiter (Ограничитель заголовка стро-ки) укажите ограничитель заголовка строки. Доступными вариантами выбора являются: {CR}{LF} (возврат каретки и перевод строки); {CR} (только возврат каретки); {LF} (только перевод строки); Semicolon {;} (точка с запятой); Colon {:} (двоеточие); Comma {,} (запятая); Tab {t} (табуляция); Vertical Bar {|} (вертикальная черта). 7. Если необходимо пропустить строки в начале файла, воспользуйтесь полем Header rows to skip (Пропустить строк заголовка), чтобы задать количество таких строк. Примечание В том случае, когда указывается, что первая строка содержит имена столбцов (см. п. 8), она сначала считывается и только затем пропускается заданное количество строк. 8. Если первая строка содержит имена столбцов, установите флажок Column names in the first data row (Первая строка данных содержит имена столбцов). Совет Наличие имен столбцов упрощает импорт данных. Если файл не содержит имен столбцов, щелкните кнопку Cancel (Отмена), добавьте их в первую строку и перезапу-стите мастер. 9. К этому моменту завершена настройка параметров на странице General (Общие). Если осуществляется экспорт данных, то другие страницы недоступны или не применимы, поэтому сразу перейдите к пункту 15. 10. Чтобы продолжить импорт, из списка в левой части окна мастера выберите стра-ницу Columns (Столбцы). Мастер попытается применить указанные ограничители строк и столбцов и затем отобразит данные для предварительного просмотра. 11. Если было определено, что используются столбцы с фиксированной шириной, необходимо указать мастеру, где начинаются и где заканчиваются столбцы. Это показывают вертикальные линии. Чтобы добавить метки столбцов, щелкните в области Source Data Columns (Столбцы источника данных). Для того чтобы убрать метки столбцов, дважды щелкните их мышью. А при необходимости передвинуть границы столбцов, щелкните метку мышью и, удерживая кнопку нажатой, пере-местите ее в новую позицию. 12. Если же используются ограниченные столбцы, можно, в случае необходимости, указать ограничитель строк в раскрывающемся списке Row delimiter (Ограни-читель строк) и/или ограничитель столбцов (внутри строк) в раскрывающемся списке Column delimiter (Ограничитель столбца). 13. Из списка в левой части окна мастера выберите страницу Advanced (Дополни-тельно), чтобы настроить свойства результата для каждого столбца, включая имя, 
320 Часть III Управление данными в Microsoft SQL Server 2005 ширину и тип данных столбца. Если между столбцами используются разные огра-ничители, можно указать ограничитель для каждого столбца отдельно. 14. Из того же списка выберите страницу Preview (Предварительный просмотр), чтобы просмотреть формат данных, выводимых в соответствии с заданными па-раметрами. Если элементы данных отображаются не на своем месте, то, прежде чем продолжить, следует перенастроить параметры. Также может потребоваться изменить (отредактировать или записать заново) исходный файл. В этом случае щелкните кнопку Cancel (Отмена), измените файл и перезапустите SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server). 15. Когда все параметры для источника данных заданы, щелкните кнопку Next (Далее), чтобы выбрать место назначения для операции импорта или экспорта. Процесс указания параметров места назначения практически идентичен процессу задания параметров источника. После выбора места назначения можно переходить ко второму этапу создания пакета SSIS. Этап 2. Настройка извлечения данных: копирование или запрос В большинстве операций импорта или экспорта на втором этапе процесса задаются таблицы и представления для копирования или строится запрос для указания объе к тов, которые следует перенести. Выбор типа операции - копирование или запрос - произво-дится в диалоговом окне, показанном на рис. 10-6, а затем, в зависимости от результата выбора, можно продолжить операцию, как это описано в следующих разделах. Рис. 10-6. Страница Specify Table Copy or Query мастера импорта и экспорта Указание таблиц и представлений для копирования Если стоит задача скопировать таблицы и представления в определенное место на-значения, необходимо выбрать, какие именно. Если же источником данных является текстовый файл, выбирать, собственно, не из чего - доступна только одна таблица и нет никаких представлений. Однако в случае любых других источников данных вы-бор делать придется, используя страницу Select Source Tables and Views (Выберите исходные таблицы и представления), показанную на рис. 10-7.
Импорт, экспорт и преобразование данных Глава 10 321 Рис. 10-7. Страница Select Source Tables and Views мастера импорта и экспорта Для выбора таблиц и представлений выполните следующую последовательность действий. 1. На странице Specify Table Copy or Query (Укажите тип операции: копирование таблиц или запрос), показанной на рис. 10-6, установите переключатель в поло-жение Copy data from one or more tables or views (Копировать данные из одной или более таблиц или представлений) и щелкните кнопку Next (Далее). 2. На странице Select Source Tables and Views (Выберите исходные таблицы и пред-ставления), показанной на рис. 10-7, выберите таблицу или представление, щел-кнув их в списке Tables and views (Таблицы и представления), затем произведите предварительный просмотр данных, содержащихся в таблице или представлении, щелкнув кнопку Preview (Предварительный просмотр). 3. Для включения таблицы или представления в результирующий набор объектов, данные которых следует скопировать, установите флажок рядом с именем таблицы в столбце Source (Источник). 4. По умолчанию имя таблицы назначения устанавливается таким же, как и имя исходной таблицы. При необходимости его изменить укажите соответствующее значение в столбце Destination (Место назначения). 5. Если требуется преобразовать значения, содержащиеся в строках таблицы, вы-берите таблицу и щелкните в столбце Mapping (Сопоставление) соответствую-щую кнопку Edit (Редактировать). Сопоставление и преобразование значений, хранящихся в строках, описывается в разделе "Этап 3. Задание форматирования и преобразования данных" далее в этой главе. Построение запроса Другим способом выборки данных для экспорта является построение запроса SQL и выполнение его относительно исходного файла, электронной таблицы или БД. Независимо от выбранного типа источника данных, построение запроса происходит одинаково (для некоторых источников эта возможность недоступна).
322 Часть III Управление данными в Microsoft SQL Server 2005 Чтобы построить запрос, выполните указанные дальше действия. 1. На странице Specify Table Copy or Query (Укажите тип операции: копирование таблиц или запрос) установите переключатель в положение Write a query to specify the data to transfer (Написать запрос для извлечения данных, которые следует перенести) и щелкните кнопку Next (Далее). 2. Теперь на странице Provide a Source Query (Введите запрос к источнику) сделайте следующее. : Введите запрос непосредственно в предоставляемое поле SQL statement (Ин-струкция SQL), затем проверьте правильность синтаксиса запроса, используя кнопку Parse (Анализировать). : Щелкните кнопку Browse (Обзор), чтобы открыть сохраненный ранее за-прос. Совет Можно также создать запрос в любом конструкторе запросов и вставить ре-зультаты в поле SQL statement (Инструкция SQL). Подробнее об использовании Query Designer (Конструктор запросов), встроенного в SQL Server Management Studio, читайте далее в этом разделе. 3. Щелкните кнопку Next (Далее). На странице Select Source Tables and Views (Вы-берите исходные таблицы и представления) отображается список таблиц и пред-ставлений - результат выполнения ранее определенного запроса. 4. По умолчанию имя таблицы назначения устанавливается таким же, как и имя ис-ходной таблицы. Если требуется изменить имя таблицы, укажите соответствующее значение в столбце Destination (Место назначения). 5. Когда необходимо преобразовать значения, содержащиеся в строках таблицы, выберите таблицу и щелкните в столбце Mapping (Сопоставление) соответству-ющую кнопку Edit (Редактировать). Сопоставление и преобразование значений, хранящихся в строках, описывается в разделе "Этап 3. Задание форматирования и преобразования данных" далее в этой главе. Существует еще один, достаточно простой, способ создать запрос. Он заключается в использовании Query Designer (Конструктор запросов), входящего в состав SQL Server Management Studio. Чтобы им воспользоваться, выполните такую последова-тельность действий. 1. Подключитесь к экземпляру сервера, содержащего необходимую базу данных. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных). В контекстном меню нужной БД выберите команду New Query (Создать запрос). Отобразится окно Query (Запрос) с требуемой панелью инструментов. Команды, соответствующие кнопкам панели инструментов, находятся в меню Query (Запрос), где их список расширен. 3. Войдите в Query Designer (Конструктор запросов), выбрав в меню Query (Запрос) команду Design Query in Editor (Конструировать запрос в редакторе) или нажав сочетание клавиш Ctrl+Shift+Q. 4. При первом запуске Query Designer (Конструктор запросов) отображается диало-говое окно Add Table (Добавить таблицу), показанное на рис. 10-8. Оно содержит вкладки, позволяющие выбрать для работы таблицы, представления, функции и синонимы. 5. В диалоговом окне Add Table (Добавить таблицу) выберите таблицу или другой содержащий данные объект, который следует добавить в запрос, и щелкните кнопку Add (Добавить). В области диаграмм окна конструктора выбранный объект будет 
Импорт, экспорт и преобразование данных Глава 10 323 отображен в виде плавающей панели - ее можно использовать для добавления столбцов и полей в конструируемый запрос. По завершении работы с диалоговым окном Add Table (Добавить таблицу) щелкните кнопку Close (Закрыть). Когда окно снова понадобится, щелкните правой кнопкой мыши на свободном месте в области диаграмм конструктора запросов и выберите в контекстном меню команду Add Table (Добавить таблицу)*. Рис. 10-8. Диалоговое окно Add Table 6. Для выбора столбцов и полей, необходимых в запросе, используйте предоставля-емые панели объектов, как это показано на рис. 10-9. Так создается инструкция SELECT, которая будет использована для реализации запроса. Рис. 10-9. Диалоговое окно Query Designer * Query Designer (Конструктор запросов) в некоторых случаях (например, при создании пред-ставлений) может быть отображен не в виде диалогового окна, а в виде окна в SQL Server Management Studio. В этом случае необходимые команды выбираются не в контекстном меню, а в меню Query Designer (Конструктор запросов). - Прим. ред.
324 Часть III Управление данными в Microsoft SQL Server 2005 7. Закончив проектирование запроса, щелкните кнопку OK, чтобы закрыть диало-говое окно Query Designer (Конструктор запросов). Созданный запрос добавится в окно Query (Запрос). 8. Результатом работы в Query Designer (Конструктор запросов) является полная ин-струкция SQL, используемая при выборе данных для экспорта. Щелкните кнопку Parse (Анализировать) в панели инструментов, чтобы убедиться в правильности запроса. При необходимости создайте запрос заново или удалите инструкции, вызывающие ошибки. 9. Скопируйте запрос в окно мастера импорта и экспорта. Этап 3. Задание форматирования и преобразования данных Преобразование - это процесс управления исходными данными, в ходе которого им придается формат, необходимый для записи в выбранное место назначения. Способы, применяемые для преобразования и форматирования данных, зависят от места на-значения. Для большинства типов файлов, БД и электронных таблиц предусмотрен процесс сопоставления столбцов источника и назначения, при этом можно назначать различные преобразования. Но если в качестве места назначения выбран текстовый файл, требуется также указать формат файла назначения. Учитывая, что параметры форматирования те же, что и использующиеся при импорте, основная информация об этих параметрах была дана ранее, в разделе "Импорт и экспорт текстовых файлов". SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server) задает сопоставление по умолчанию для всех выбранных таблиц, если не указано обратное. Это сопоставление предусматривает: копирование всех столбцов исходных таблиц; задание для таблицы назначения того же имени таблицы, а также типов данных столбцов, их размера, точности, степени и обработки значений NULL, что и в ис-ходной таблице; добавление данных источника в существующую таблицу назначения или создание новой таблицы назначения. Чтобы задать свои сопоставления столбцов, выполните предлагаемые дальше действия. 1. На странице Select Source Tables and Views (Выберите исходные таблицы и пред-ставления) приводится список результатов запроса, извлекающего данные или все доступные таблицы в исходной БД, электронной таблице или файле. Если выбрать определенную таблицу в списке Tables and views (Таблицы и представления), то в столбце Mapping (Сопоставление) становится доступной для выбора кнопка Edit (Редактировать). Щелкните эту кнопку, чтобы открыть диалоговое окно Column Mappings (Сопоставления столбцов), показанное на рис. 10-10. 2. В этом окне сначала следует указать общие параметры переноса данных (установ-кой соответствующих переключателей или флажков). : Create destination table (Создать таблицу назначения) Создает таблицу на-значения перед копированием исходных данных. Если таблица назначения уже существует, необходимо установить флажок Drop and re-create destination table (Удалить и вновь создать таблицу назначения), иначе выполнение закончится ошибкой. : Delete rows in destination table (Удалить строки в таблице назначения) Перед копированием исходных данных все строки в таблице назначения удаляются. Индексы и ограничения остаются.
Импорт, экспорт и преобразование данных Глава 10 325 Рис. 10-10. Диалоговое окно Column Mappings : Append rows to the destination table (Добавить строки в таблицу назначе-ния) Добавляет исходные данные в таблицу назначения, а не перезаписывает существующие данные. Этот параметр оставляет без изменений существующие данные, индексы или ограничения, содержащиеся в таблице назначения. Совет Строки не обязательно добавляются в конец таблицы назначения. Чтобы опреде-лить, каким образом строки физически размещаются в таблице назначения, создайте для нее кластерный индекс. : Drop and re-create destination table (Удалить и вновь создать таблицу назначе-ния) Удаляет и вновь создает таблицу назначения, прежде чем попытаться копировать в нее данные. Удаляются все существующие данные и индексы. Совет Если таблица существует в месте назначения, стоит выбрать этот параметр, чтобы определить новые значения столбцов в таблице назначения. В противном случае можно только сопоставлять исходные столбцы с существующими столбцами назначения. : Enable identity insert (Разрешить вставку значений в идентифицирующие столбцы) Позволяет вставить явные значения в идентифицирующие столб-цы таблицы. Эта возможность доступна только в SQL Server и только если определен столбец со свойством IDENTITY. : Edit SQL (Редактировать SQL) Щелчок этой кнопки отображает диалого-вое окно Create Table SQL Statement (Инструкция SQL для создания табли-цы), где можно изменить инструкцию CREATE TABLE, предоставляемую по умолчанию. 3. После установки основных параметров переноса используйте поля в списке Mappings (Сопоставления), чтобы определить, каким образом исходные значения 
326 Часть III Управление данными в Microsoft SQL Server 2005 сопоставляются со значениями назначения. Все значения полей установлены по умолчанию на основании исходных столбцов. Если для новой таблицы нужны другие значения или существующую таблицу требуется удалить и создать заново, эти значения можно изменить. Столбцы списка Mappings (Сопоставления) ис-пользуются следующим образом. : Source (Источник) Устанавливается исходный столбец. : Destination (Место назначения) Устанавливается столбец назначения. Щел-кните этот столбец и в раскрывающемся списке выберите имя существующего столбца или введите имя нового столбца для таблицы назначения. Используйте элемент раскрывающегося списка <ignore>, чтобы предотвратить создание столбца назначения. Примечание Если выбрать параметр <ignore> при существующем столбце назначения, исходные данные не будут скопированы в этот столбец. : Type (Тип) Выбирается тип данных для столбца назначения. Если выбрать тип данных, отличающийся от типа данных в исходном столбце, данные во время переноса будут преобразованы в новый тип. Примечание Убедитесь, что задано допустимое преобразование типов. Мастер импорта и экспорта не допустит усечения данных, а при попытке сделать это выведет сообщение об ошибке. : Nullable (Хранение значений NULL) Установите флажок, если место на-значения позволяет хранение значений NULL. : Size (Размер) Задается длина столбца назначения. Это значение применимо только при работе с типами данных char, varchar, nchar, nvarchar, binary и varbinary. Примечание Установка размера, меньшего, чем длина данных источника, может при-вести к усечению данных. Если это случится, мастер импорта и экспорта выведет со-общение об ошибке и не завершит перенос данных. : Precision (Точность) Устанавливается максимальное количество десятичных знаков, включая знаки после запятой. Применимо только для типа данных decimal. : Scale (Степень) Устанавливается максимальное количество знаков справа от запятой. Это значение должно быть менее или равно значению параметра Precision (Точность); применяется только к типу данных decimal. 4. Щелкните кнопку OK, затем повторите этот процесс для остальных таблиц, столб-цы которых следует преобразовать. 5. Когда завершите указание преобразований, щелкните кнопку Next (Далее). Этап 4. Сохранение и выполнение пакета Процесс создания пакета SSIS почти завершен. На этом этапе необходимо указать, когда использовать созданный пакет, и решить, следует ли сохранить его для дальней-шего использования. После нажатия кнопки Next (Далее) на странице Select Source Tables and Views (Выберите исходные таблицы и представления) отобразится другая страница - Save and Execute Package (Сохранить и выполнить пакет), показанная на рис. 10-11. Далее выполните указанную последовательность действий. 1. Если в данный момент не требуется выполнение пакета, снимите установленный по умолчанию флажок Execute immediately (Выполнить немедленно).
Импорт, экспорт и преобразование данных Глава 10 327 Рис. 10-11. Страница Save and Execute Package мастера импорта и экспорта 2. При необходимости сохранить пакет для дальнейшего использования примените элементы управления в разделе Save (Сохранить), где установите флажок Save SSIS Package (Сохранить пакет SSIS) и укажите, куда следует сохранить пакет (выбрав соответствующий переключатель). Доступными местами размещения пакетов являются следующие. : SQL Server Сохраняет в качестве локального пакета в базу данных msdb; таким образом, пакет становится доступен для использования на назначенном сервере. : File system (Файловая система) Сохраняет в виде файла с расширением DTSX. В дальнейшем можно добавить в файл дополнительные пакеты, если их имена будут разными. При необходимости файл копируется, перемещается или от-правляется по электронной почте для размещения в другом месте. 3. По завершении настройки параметров запуска и сохранения пакета щелкните кноп-ку Next (Далее). Отобразится диалоговое окно Package Protection Level (Уровень безопасности пакета). 4. В раскрывающемся списке Package protection level (Уровень безопасности пакета) выберите следующие параметры шифрования пакета. : Do not save sensitive data (Не сохранять уязвимые данные) Создает пакет, но не сохраняет в нем уязвимые данные. : Encrypt sensitive data with user key (Зашифровать уязвимые данные с помо-щью ключа пользователя) Создает пакет, в котором уязвимые данные будут зашифрованы. Пакет может быть открыт для редактирования или выполнен только пользователем, создавшим пакет (текущей учетной записью). : Encrypt sensitive data with password (Зашифровать уязвимые данные с по-мощью пароля) Создает пакет, в котором уязвимые данные будут зашифро-ваны. Пакет открывается для редактирования или выполнения при указании 
328 Часть III Управление данными в Microsoft SQL Server 2005 заданного пароля. То есть его может открыть или выполнить каждый, кто знает пароль. : Encrypt all data with user key (Зашифровать все данные с помощью ключа пользователя) Создает пакет, в котором будут зашифрованы все данные. Пакет открывается для редактирования только пользователем, который его создал (текущая учетная запись). : Encrypt all data with password (Зашифровать все данные с помощью пароля) Бу-дет сохранен пакет, в котором зашифрованы все данные. Пакет может быть открыт для редактирования или выполнен при указании заданного пароля. : Rely on server storage and roles for access control (Использовать серверные хранилища и роли для контроля доступа) Создает пакет, использующий для контроля доступа разрешения и роли SQL Server (доступно, если ранее было решено сохранить пакет в SQL Server). 5. Если было выбрано сохранение пакета, следующая страница позволяет установить место размещения (рис. 10-12). Параметры могут немного отличаться от изо-браженных на рисунке, в зависимости от того, выбрано сохранение в SQL Server или в файл. Рис. 10-12. Страница Save SSIS Package мастера импорта и экспорта 6. Введите имя и описание пакета в поля Name (Имя) и Description (Описание). Имя должно быть уникальным для места размещения. 7. При сохранении пакета в SQL Server используйте раскрывающийся список Server name (Имя сервера) для выбора SQL Server, куда следует сохранить пакет. Пакет сохраняется в БД msdb на указанном сервере. 8. Выберите тип аутентификации, который следует использовать; для этого уста-новите переключатель в положение Use Windows Authentication (Использовать аутентификацию Windows) или Use SQL Server Authentication (Использовать аутентификацию SQL Server). Если выбрана аутентификация SQL Server, введите имя авторизованного пользователя и пароль.
Импорт, экспорт и преобразование данных Глава 10 329 9. При сохранении пакета в файл укажите место расположения файла, используя поле File name (Имя файла). 10. Щелкните кнопку Next (Далее). На странице Complete the Wizard (Завершить вы-полнение мастера) просмотрите все действия, которые будут выполнены пакетом, затем щелкните кнопку Finish (Готово). Если был выбран немедленный запуск пакета, SQL Server запустит пакет. Со-стояние выполнения пакета обновляется по мере завершения (или сбоя) каждого действия. При возникновении ошибки щелкните в списке сообщение об ошибке, чтобы просмотреть подробный отчет о ее причинах. Ошибки могут прервать выпол-нение пакета; если это произойдет, придется отредактировать пакет с помощью SSIS Designer (Конструктор пакетов SSIS) или заново создать его, используя SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server). SQL Server размещает пакеты SSIS в качестве локальных пакетов в базе данных msdb назначенного сервера или в виде пакетов, хранящихся в файлах. Управляйте пакетами при помощи SQL Server Management Studio, Business Intelligence Development Studio или Execute Package Utility (Утилита выполнения пакетов). В некоторых ситуациях могут пригодиться две утилиты командной строки, поставляющиеся с сервером: утилита dtutil для копирования, перемещения, подписывания и удаления пакетов и утилита dtexec для выполнения пакетов. Понятие об утилите BCP Утилита BCP является альтернативой SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server). Кроме того, операции импорта можно выполнить средствами Transact-SQL при помощи инструкции BULK INSERT. Указанная ин-струкция имеет параметры, аналогичные параметрам утилиты BCP для импорта данных. Возможности утилиты BCP будут рассмотрены в следующем порядке: основы использования утилиты; синтаксис командной строки утилиты; необходимые разрешения; режимы утилиты; импорт данных; экспорт данных. Основы использования утилиты BCP Утилита BCP остается средством, весьма популярным среди администраторов БД, главным образом благодаря своей высокой производительности и минимальным на-кладным расходам на выполнение. Операции импорта и экспорта утилита BCP вы-полняет очень быстро, а кроме того, для работы ей необходимо значительно меньше оперативной памяти, чем другим, поскольку эта утилита не имеет графического ин-терфейса пользователя. Утилиту BCP лучше всего использовать в двух ситуациях: для импорта данных из текстового файла в отдельную таблицу или представление SQL Server; для экспорта данных в текстовый файл из отдельной таблицы или представления SQL Server. При переносе данных утилита BCP использует интерфейс программиро-вания ODBC. При этом даты записываются в формате ODBC. Так, данные типа datetime записываются в формате yyyymmdd hh:mm:ss, а не в виде mmm dd yyy hh:mm 
330 Часть III Управление данными в Microsoft SQL Server 2005 (A.M./P.M), используемом для вывода на экран. Что касается данных типа money, то они не содержат запятых и имеют четыре цифры после десятичной запятой (вместо запятой и двух цифр после нее при отображении). Совет При импорте данных посредством BCP столбцы, содержащие вычисляемые значения и штампы времени, игнорируются. SQL Server может назначать им значения автоматически. Для указания, что столбцы вычисляемых значений или штампов вре-мени в таблице должны быть пропущены, используйте файл форматирования; таким образом SQL Server сам назначает значения для столбца. Во время экспорта данных вычисляемые значения и штампы времени обрабатываются так же, как и другие значения. Синтаксис командной строки утилиты BCP Прежде чем применять утилиту BCP на практике, давайте рассмотрим ее синтаксис командной строки, показанный в краткой форме в примере 10-1 и расширенный в табл. 10-1 и 10-2. Как видно, синтаксис весьма обширен. Ключи утилиты BCP чув-ствительны к регистру и последовательности указания в командной строке, поэтому необходимо использовать ключи в точности, как показано в примере, иначе могут возникнуть проблемы при выполнении утилиты BCP. Пример 10-1. Синтаксис командной строки и использование утилиты BCP Синтаксис: bcp { [ [ database_name. ][ schema_name ]. ]{ table_name | view_name } | "query" }{ in | out | queryout | format } data_file [ -m max_errors ] [ -f format_file ] [ -x ] [ -e err_file ] [ -F first_row ] [ -L last_row ] [ -b batch_size ] [ -n ] [ -c ] [ -w ] [ -N ] [ -V ( 60 | 65 | 70 | 80 ) ] [ -6 ] [ -q ] [ -C { ACP | OEM | RAW | code_page } ] [ -t field_terminator ] [ -r row_terminator ] [ -i input_file ] [ -o output_file ] [ -a packet_size ] [ -S server_name[ \instance_name ] ] [-U login ] [ -P password ] [ -T ] [ -v ] [ -R ] [ -k ] [ -E ] [ -h "hint [ ,...n ]" ] Использование: bcp pubs..customer out customers.txt -c -U sa -P"guerilla" bcp pubs..customer in customers.txt -f customers.fmt -U sa -P"guerilla" В табл. 10-1 перечислены ключевые параметры утилиты BCP. Табл. 10-1. Ключевые параметры, использующиеся утилитой BCP Параметр Описание database_name Имя БД. Данный параметр необязателен; при его отсутствии будет исполь-зоваться БД по умолчанию schema_name Схема, содержащая таблицу или представление. Используйте две точки (..) для обозначения схемы по умолчанию, например pubs..authors вместо pubs.dbo.authors table_name Имя таблицы, к которой следует получить доступ. Используйте символы # или ## для копирования временной таблицы view_name Имя представления назначения при копировании данных в SQL Server или исходного представления при копировании данных из SQL Server
Импорт, экспорт и преобразование данных Глава 10 331 Параметр Описание query Инструкция Transact-SQL, создающая результирующий набор данных. Обязательно следует использовать двойные кавычки для ограничения строки запроса, а также указать параметр queryout in Предписывает выполнение операции импорта out Предписывает выполнение операции экспорта format Устанавливает, что следует создать файл форматирования. Необходимо задать имя файла форматирования с помощью ключа -f, а также указать форматирование, используя ключи -n, -c, -w, -6 или -N. При создании файла XML необходимо также указать ключ -x queryout Используется при экспорте результата выполнения запроса SQL или хра-нимой процедуры data_file Имя файла, из которого осуществляется импорт, или имя файла, который следует создать во время экспорта. Параметр может включать полный путь к файлу Также утилита BCP поддерживает множество ключей. Эти ключи и связанные с ними параметры приводятся в табл. 10-2. Табл. 10-2. Ключи, использующиеся утилитой BCP Ключ Описание -a packet_size Количество байтов в сетевом пакете, передаваемом между клиентом и сервером. По умолчанию 4096 байтов. Допустимый диапазон от 512 до 65 535 байтов -b batch_size Количество строк данных, которые нужно включить в пакет. Для каждого пакета создается отдельная транзакция. По умолчанию все строки копируются в одном пакете. Не используйте совместно с параметром -h "ROWS_PER_BATCH= rows_per_batch" -c Символьный режим записи данных (текст ASCII); используется при работе с продуктами, отличными от SQL Server -C code_page Кодовая страница, используемая файлом импорта. Этот параметр приме-ним только в случае, когда в копируемых столбцах типа char, varchar или text содержатся символы с кодом больше 127 или меньше 32. Используйте значение кодовой страницы ACP для данных в формате ANSI/Microsoft Windows (ISO 1252); значение RAW, если не следует производить пре-образований типов (дает максимальную производительность); значение OEM для использования кодовой страницы клиента по умолчанию; или укажите конкретное значение кодовой страницы, например 850 -e err_file Сохраняет сообщения об ошибках в указанном файле -E Предписывает импортировать данные для столбцов с установленным свойством IDENTITY. В противном случае значения для этих столбцов, указанные в файле импорта, игнорируются, и SQL Server сам генерирует и присваивает столбцам идентифицирующие значения -F first_row Номер первой строки, начиная с которой будет производиться копирование -f format_file Указывает полный путь к файлу форматирования утилиты BCP. По умол-чанию именем файла является BCP.FMT. Если используются ключи -n, -c, -w, -6 или -n и не указан параметр -f, будет запрошена информация о форматировании и ответы сохранены в файл форматирования (по умол-чанию названный BCP.FMT) Табл. 10-1. (продолжение) (см. след. стр.)
332 Часть III Управление данными в Microsoft SQL Server 2005 Ключ Описание -h load_hints Используется для установки указаний для процесса загрузки: FIRE_TRIGGERS, ROWS_PER_BATCH, KILOBYTES_PER_BATCH, TABLOCK, CHECK_CONSTRAINTS и ORDER -i input_file Имя файла, содержащего ответы на вопросы, задаваемые утилитой в командной строке для каждого поля при произведении массивного копирования в интерактивном режиме -k Предписывает, что при вставке пустых значений столбцов, заданных во входном файле, в таблице назначения следует использовать значение NULL, а не определенное для соответствующего столбца значение по умолчанию -L last_row Номер последней строки, которая будет скопирована -m max_errors Устанавливает максимальное количество ошибок, которые могут произойти, прежде чем будет прервана работа утилиты BCP. Значение по умолчанию - 10 -N Все несимвольные данные экспортируются в собственном формате БД, а символьные - в кодировке UNICODE -n Предписывает использование собственного формата БД для всех типов данных. Зависит от версии SQL Server -o out_file Полный путь к файлу, в котором будут сохраняться строки текста, выводимые утилитой BCP на экран, что полезно при выполнении операций в автоматическом режиме -P password Пароль, который следует использовать для входа в систему. Не храните пароли в файлах, так как это не лучший способ обеспечения безопасности -q Указывает, что для ограничения идентификаторов используются двойные кавычки -R При указании этого ключа используются региональные установки для формата даты, времени и валюты, определенные на локальном компьютере -r row_terminator Указывает разделитель строк. Разделителем по умолчанию является символ начала новой строки (\n) -S server_name Указывает имя SQL Server. Можно также добавить к имени сервера имя экземпляра: -S server_name\instance_name -t field_terminator Указывает разделитель полей. Разделителем по умолчанию является символ табуляции (\t) -T Предписывает использовать доверительное соединение; рекомендуется для обеспечения безопасности -U login Устанавливает имя пользователя для подключения -V Устанавливает версию типа данных для собственных и символьных форматов, используемых в предыдущих версиях SQL Server. Для форма-та SQL Server 6.0 используйте значение 60; для SQL Server 6.5 - 65; для SQL Server 7.0 - 70; для SQL Server 2000 - 80 -v Отображает версию утилиты BCP -w Устанавливает режим UNICODE -x Используется совместно с параметрами format и -f для создания файла форма тирования XML вместо стандартного текстового файла форматирования Разрешения, необходимые для работы, и режимы утилиты BCP Хотя запустить утилиту BCP может любой пользователь, только пользователи с со-ответствующими правами получают доступ к SQL Server и указанным объектам базы данных. При запуске утилиты BCP информация для подключения задается при помо-Табл. 10-2. (окончание)
Импорт, экспорт и преобразование данных Глава 10 333 щи ключей -U и -P или же используется более безопасное доверительное соединение. Для операций, выполняемых без участия конечных пользователей, использование этих ключей является абсолютно необходимым, что позволяет обеспечить предоставление соответствующих разрешений. Для импорта данных в таблицу пользователь должен иметь разрешение INSERT на таблицу назначения. Для экспорта данных из таблицы пользователю необходимо обладать разрешением SELECT на исходную таблицу. В утилите BCP используются три различных режима. Символьный режим Когда необходимо произвести импорт или экспорт данных в виде текста ASCII. Ключом для задания этого режима является -c. Собственный режим При импорте или экспорте данных в собственном формате. Ключом для установки этого режима является -n или -N. Режим Unicode В случае импорта или экспорта данных в кодировке UNICODE. Ключом для указания этого режима является -w. Символьный режим и режим Unicode следует применять при переносе данных на продукт, отличный от SQL Server. При копировании данных между таблицами SQL Server используйте собственный режим. Все эти режимы имеют свои достоинства и недостатки. Так, символьный режим или режим Unicode дает возможность просматри-вать содержимое файлов, чтобы убедиться в правильности набора данных, но для их импорта необходимо сообщить SQL Server, как данные должны форматироваться. Эту информацию можно задать интерактивно, отвечая на вопросы, выводимые на экран, или используя файл, уже содержащий ответы на эти вопросы. При использовании соб-ственного режима файлы данных становятся "неудобочитаемыми", однако при этом не требуется указывать информацию о форматировании данных для их импорта. Импорт данных при помощи утилиты BCP Данные с помощью BCP можно импортировать двумя способами. Первый - начать интерактивный сеанс, второй - указать необходимые ответы на вопросы утилиты в файле форматирования. В следующем примере показано, как начать интерактивный сеанс, используя доверительное соединение: bcp pubs..customer in customers.txt -T Чтобы указать файл форматирования, используйте ключ -f, как это сделано в при-мере: bcp pubs..customer in customers.txt -w -f customers.fmt -T В интерактивном сеансе утилита BCP запросит ввод информации, необходимой для завершения процесса импорта или экспорта. Утилита BCP входит в интерактив-ный сеанс, если происходит следующее: производится импорт без указания параметров -c, -n, -w или -N; производится экспорт без указания параметров -c, -n, -w или -N. Интерактивный сеанс позволяет настроить операцию массивного копирования таким же образом, как и при использовании файла форматирования. Перед тем как создавать файл форматирования, следует запустить утилиту BCP в интерактивном режиме и позволить ей самой создать необходимый файл. С помощью этой операции можно выяснить оптимальный путь настройки файла форматирования. Во время интерактивного сеанса для каждого столбца импортируемой таблицы задаются вопросы, подобные представленным ниже: Enter the file storage type of field field_name [nchar] (Введите тип поля field_name [nchar]):
334 Часть III Управление данными в Microsoft SQL Server 2005 Enter prefix length of field field_name [0] (Введите длину префикса поля field_name [0]): Enter length of field field_name [5] (Введите длину поля field_name [5]): Enter field terminator [none] (Введите разделитель полей [нет]): Примечание При нажатии клавиши Enter принимаются значения по умолчанию. Чтобы пропустить столбец в файле импорта, введите 0 для длины префикса, 0 для длины поля и none для типа разделителя. При экспорте столбец пропустить нельзя. Подобные запросы просят ввести различную информацию, причем во всех случаях значение по умолчанию для текущего столбца указывается в квадратных скобках. В конце интерактивного сеанса нужно ответить на вопрос, следует ли сохранить от-веты в файле форматирования. При утвердительном ответе (нажав клавишу Y) можно ввести имя файла форматирования. Это выглядит подобным образом: Do you want to save this format information in a file? [Y/N] Host filename [bcp.fmt]: customers.fmt Затем можно использовать файл форматирования, установив ключ -f, как объяс-нялось ранее. Поскольку файл форматирования имеет строгий синтаксис, которому необходимо следовать, рекомендуется для начала создать пробный файл. Как показано в примере 10-2, каждая строка в файле содержит поля информации, определяющие, каким образом данные должны быть импортированы. Пример 10-2. Текстовый (не-XML) файл форматирования утилиты BCP 9.0 50 1 SQLINT 0 8 "" 1 CUSTOMERID "" 2 SQLNCHAR 2 25 "" 2 CUSTNAME SQL_Latin1_General_CP1_CI_AS 3 SQLNCHAR 2 20 "" 3 CUSTORG SQL_Latin1_General_CP1_CI_AS ... 50 SQLNCHAR 2 9 "" 3 POSTALCODE SQL_Latin1_General_CP1_CI_AS В строках задана следующая информация. Первая строка устанавливает используемую версию утилиты BCP. В нашем случае версия 9.0. Вторая строка устанавливает количество столбцов в импортируемой таблице. В нашем примере таблица содержит 50 столбцов. Последующие строки устанавливают формат для каждого столбца таблицы, с пер-вого по последний. Строки, определяющие столбцы таблицы, разбиты на поля, каждое из которых устанавливает какой-либо входной параметр. Обычно эти поля разделены пробелами. Их количество не имеет значения, но не менее одного; утилита BCP обрабатывает один или более пробелов как разделитель поля. Поля файла форматирования ука-зывают следующее. Поле 1 - номер описываемого столбца в файле данных. Поле 2 - тип данных столбца. Поле 3 - длину префикса для данных, сохраненных в собственном формате. Зна-чение 0 означает, что префикс не используется. Поле 4 - длину строки, то есть количество байтов, необходимых для хранения типа данных. Всегда старайтесь использовать предоставляемое значение по умолчанию.
Импорт, экспорт и преобразование данных Глава 10 335 Поле 5 - разделитель полей. По умолчанию утилита BCP использует для раз-деления всех полей табуляции (\t), кроме последнего поля, которое отделяет символами возврата каретки и начала новой строки (\r\n). Поле 6 - номер столбца в таблице базы данных. Например, значение 1 означает, что поле исходного файла соответствует первому столбцу в БД. Поле 7 - имя столбца таблицы. Поле 8 - сопоставление (collation) столбца. Экспорт данных при помощи утилиты BCP При экспорте данных утилита BCP создает файл данных, используя заданное имя. Когда происходит экспорт данных в несобственных форматах (текст ASCII и Unicode) по умолчанию поля в этом файле отделяются табуляциями, а последний столбец ограничен символами возврата каретки и новой строки. Для указания табуляции ис-пользуется символ \t, а возврата каретки и новой строки - символы \r\n. В файле форматирования табуляция может быть действительно символом табуляции или серией из пяти или более пробелов. Как и при импорте данных, экспортом данных можно управлять в интерактивном режиме. Например, если начать экспорт без указания информации формата, она будет запрашиваться. В следующем примере производится экспорт таблицы в файл с именем customers.txt, причем точка с запятой используется в качестве ограничителя полей: bcp pubs..customer out customers.txt -c -t; -T? Сценарии утилиты BCP Сценарий BCP - это просто пакетный файл или файл сервера сценариев Windows (Windows Script Host), содержащий команды BCP. В примере 10-3 показано, как запустить утилиту BCP, используя разные типы сценариев. Если вы не знаете, как использовать пакетные файлы или файлы сервера сценариев Windows, подробные сведения можно найти в двух замечательных книгах - Windows Command-Line Administrator's Pocket Consultant (Microsoft Press, 2005) и Windows 2000 Scripting Guide (Microsoft Press, 2002). Пример 10-3. Использование BCP в сценариях sched-export.bat: @echo off @if not "%OS%"=="Windows_NT" goto :EXIT bcp pubs..customer out customers.txt -c -t, -T :EXIT sched-export.vbs: 'Nightly Bulk Copy export for the customers table 'Writes output to cust.txt and errors to err.txt Set ws = WScript.CreateObject( "WScript.Shell" ) ret = ws.Run( "bcp pubs..customers out cust.txt -c -t, -T -eerr.txt", 0, "TRUE" ) sched-export.js: \\Nightly Bulk Copy export for the customers table \\Writes output to cust.txt and errors to err.txt var ws = WScript.CreateObject( "WScript.Shell" ); ret = ws.Run( "bcp pubs..customers out cust.txt -c -t, -T -eerr.txt", 0, "TRUE" )
336 Часть III Управление данными в Microsoft SQL Server 2005 После создания файла сценария для запуска утилиты массивного копирования можно назначить его выполнение по расписанию. Например, чтобы запускать эти сценарии ежедневно в полночь, введите в командной строке следующие команды: AT 00:00 /every:M,T,W,Th,F,S,Su "sched-export.bat" AT 00:00 /every:M,T,W,Th,F,S,Su "cscript //B sched-export.js" AT 00:00 /every:M,T,W,Th,F,S,Su "cscript //B sched-export.vbs" Совет Более подробную информация по назначению задачам расписания можно найти в Micorsoft Windows Server 2003 Administrator's Pocket Consultant, 2nd ed. (Microsoft Press, 2005) или Microsoft Windows XP Administrator's Pocket Consultant, 2nd ed. (Microsoft Press, 2005). Использование инструкции BULK INSERT Для импорта данных в БД средствами Transact-SQL используется инструкция BULK INSERT. Применение инструкции BULK INSERT очень похоже на использование ути-литы BCP. Фактически, большинство параметров инструкции BULK INSERT имеют тот же смысл, что и для BCP, однако их названия и синтаксис немного отличаются. Синтаксис инструкции BULK INSERT показан в примере 10-4. Пример 10-4. Синтаксис и использование инструкции BULK INSERT Синтаксис: BULK INSERT [ [ database_name. ] [ schema_name ]. ] { table_name | view_name } FROM 'data_file' [ WITH ( [ [ , ] BATCHSIZE = batch_size ] [ [ , ] CHECK_CONSTRAINTS ] [ [ , ] CODEPAGE = { 'ACP' | 'OEM' | 'RAW' | 'code_page' } ] [ [ , ] DATAFILETYPE = { 'char' | 'native'| 'widechar' | 'widenative' } ] [ [ , ] FIELDTERMINATOR = 'field_terminator' ] [ [ , ] FIRSTROW = first_row ] [ [ , ] FIRE_TRIGGERS ] [ [ , ] FORMATFILE = 'format_file' ] [ [ , ] KEEPIDENTITY ] [ [ , ] KEEPNULLS ] [ [ , ] KILOBYTES_PER_BATCH = kilobytes_per_batch ] [ [ , ] LASTROW = last_row ] [ [ , ] MAXERRORS = max_errors ] [ [ , ] ORDER ( { column_name [ ASC | DESC ] } [ ,...n ] ) ] [ [ , ] ROWS_PER_BATCH = rows_per_batch ] [ [ , ] ROWTERMINATOR = 'row_terminator' ] [ [ , ] TABLOCK ] [ [ , ] ERRORFILE = 'file_name' ] ) ] Использование: BULK INSERT pubs..customers FROM 'c:\data\customer.txt' BULK INSERT pubs..customers FROM 'c:\cust.txt' WITH ( DATAFILETYPE = 'char', FORMATFILE = 'c:\cust.fmt' )
Импорт, экспорт и преобразование данных Глава 10 337 Для использования инструкции BULK INSERT нужно обладать разрешениями INSERT и ADMINISTER BULK OPERATION. Может также потребоваться разрешение ALTER TABLE, если выполняется любое из перечисленных ниже условий. Ограничения CHECK отключены (установка по умолчанию). Чтобы во время опе-рации импорта проверять ограничения CHECK, используйте параметр CHECK_ CONSTRAINTS (ограничения UNIQUE, PRIMARY KEY, FOREIGN KEY и NOT NULL проверяются всегда). Триггеры отключены (установка по умолчанию). Чтобы разрешить запуск триг-геров, применяйте параметр FIRE_TRIGGER. Используется параметр KEEPIDENTITY, позволяющий импортировать из ука-занного файла данные идентифицирующих значений. Кроме того, перед применением инструкции BULK INSERT может потребоваться установить модель восстановления базы данных как BULK_LOGGED (это можно сделать с помощью инструкции ALTER DATABASE либо в SQL Server Management Studio). В этом режиме при операциях массивного копирования в журнал транзакций записывается минимум информации, что повышает производительность при вставке больших объемов данных. Чтобы установить этот параметр, в SQL Server Management Studio выберите БД, откройте для нее диалоговое окно Properties (Свойства), найдите страницу Options (Параметры) и в раскрывающемся списке Recovery model (Модель восстановления) щелкните пункт Bulk-Logged (Минимальное ведение журнала). Нелишним будет также установить для табличного параметра table lock on bulk load значение TRUE (это делается с помощью хранимой процедуры sp_tableoption). Когда этот параметр имеет значение FALSE (установка по умолчанию), процесс массив-ной загрузки при вставке в пользовательские таблицы устанавливает блокировки на уровне строк. Если же задать этому параметру значение TRUE, процесс массивной загрузки устанавливает блокировку массивного обновления. Изменять значение па-раметра table lock on bulk load имеют право члены встроенной роли сервера sysadmin и встроенных ролей БД db_owner и db_ddladmin, а также владелец таблицы. В примере 10-5 показано, как установить параметр table lock on bulk load с по-мощью хранимой процедуры sp_tableoption. Пример 10-5. Синтаксис и использование хранимой процедуры sp_tableoption Синтаксис: sp_tableoption [ @TableNamePattern = ] 'table' , [ @OptionName = ] 'option_name' , [ @OptionValue = ] 'option_value' Использование: EXEC sp_tableoption 'Sales.Customers', 'table lock on bulk load', 'TRUE'
Глава 11 Связанные серверы и распределенные транзакции Сетевые среды становятся все более и более сложными. Организациям, которым прежде для управления данными было достаточно одного сервера Microsoft SQL Server, теперь требуется установка дополнительных серверов или интеграция суще-ствующего с разнородными источниками данных. SQL Server 2005 предоставляет несколько функциональных возможностей, обеспечивающих интеграцию БД SQL Server как с другими базами данных SQL Server, так и с другими источниками инфор-мации - это работа с распределенными данными, связанные серверы и репликация. Данная глава посвящена связанным серверам и распределенным данным. Обработка распределенных данных включает поддержку распределенных запросов и транзакций, а также удаленное выполнение хранимых процедур. Эти возможности управляются посредством связанных серверов, которые могут быть и серверами SQL Server, и дру-гими источниками данных. Репликация описана в следующей главе. Работа со связанными серверами и распределенными данны ми Перед использованием распределенных данных необходимо настроить связанные серверы, которые взаимодействуют с помощью поставщиков OLE DB. Применяя технологию OLE DB, можно связать экземпляры SQL Server между собой, а также с другими источниками данных. Связанные серверы используются при работе с распределенными запросами, рас-пределенными транзакциями, удаленными вызовами хранимых процедур и реплика-цией. По существу, запросы и транзакции являются распределенными (distributed), когда в них задействовано два или более экземпляра сервера баз данных. Например, если клиент подключен к одному экземпляру сервера и посылает на выполнение запрос, который получает доступ к другому экземпляру сервера, такой запрос яв-ляется распределенным. С другой стороны, если один и тот же клиент запрашивает две разные БД на одном и том же экземпляре сервера, запрос считается локальным и обрабатывается внутренне*. Использование распределенных запросов При выполнении распределенного запроса SQL Server интерпретирует инструкцию и отправляет ее поставщику OLE DB места назначения в виде отдельных запросов, создающих наборы данных. Набор данных (rowset) - это объект, позволяющий по-ставщикам OLE DB обеспечить представление данных в табличном формате. Как * Как уже было отмечено в примечании к разделу "Запуск, остановка и настройка координатора распределенных транзакций" главы 5, с технической точки зрения транзакции между разными БД одного экземпляра также являются распределенными, однако SQL Server скрывает от пользователя их истинную природу. - Прим. ред.
Связанные серверы и распределенные транзакции Глава 11 339 можно понять из самого названия, объекты наборов данных представляют собой набор строк и столбцов данных. После создания объектов набора данных поставщик OLE DB вызывает источник данных, открывает необходимые файлы и возвращает запрошенную информацию в виде наборов данных. Затем SQL Server форматирует наборы данных в виде наборов результатов и добавляет все применимые выходные параметры. Примечание Если требуется обеспечить совместимость со стандартом SQL-92, пользо-вательские соединения, прежде чем через них можно будет выполнять распределенные запросы, должны иметь установленными параметры ANSI_NULLS и ANSI_WARNINGS. При необходимости убедитесь, что эти параметры заданы. Более подробную информа-цию смотрите в разделе "Настройка пользовательских и удаленных серверных соедине-ний" главы 6. Для создания простых распределенных запросов и пользовательских наборов данных "на лету" применяется функция openrowset(), для которой не требуется орга-низовывать связанные серверы. Функцию openrowset() можно использовать в запросе вместо таблицы; конечно, при этом нужно предоставить параметры, идентифициру-ющие поставщика и источник данных OLE DB. Используйте функцию openrowset() таким же образом, как и виртуальные табли-цы, возвращаемые представлениям, лишь вместо обращения к виртуальной таблице поставьте обращение к функции openrowset(). В примере 11-1 показаны синтаксис и использование функции openrowset(). Пример 11-1. Синтаксис и использование функции openrowset() Синтаксис для инструкции SELECT с применением псевдонима таблицы: SELECT selection FROM openrowset( rowset_options ) AS table_alias Синтаксис функции openrowset(): openrowset ( { 'provider_name', {'data_source'; 'login'; 'password' | 'provider_string' } , { [ catalog. ][ schema_name. ]object_name | 'query' } | BULK 'data_file', { FORMATFILE = 'format_file' [ <bulk_options> ] | SINGLE_BLOB | SINGLE_CLOB | SINGLE_NCLOB } } ) <bulk_options> ::= [ , CODEPAGE = { 'ACP' | 'OEM' | 'RAW' | 'code_page' } ] [ , ERRORFILE = 'file_name' ] [ , FIRSTROW = first_row ] [ , LASTROW = last_row ] [ , MAXERRORS = max_errors ] [ , ROWS_PER_BATCH = rows_per_batch ] Использование: USE pubs GO SELECT a.*
340 Часть III Управление данными в Microsoft SQL Server 2005 FROM openrowset( 'SQLOLEDB','Pluto';'netUser';'totem12', 'SELECT * FROM pubs.dbo.authors ORDER BY au_lname, au_fname' ) AS a GO SELECT o.* FROM openrowset( 'Microsoft.Jet.OLEDB.4.0', 'C:\northwind.mdb';'Admin'; '', 'Orders' ) AS o Применение поставщика массивного копирования (активируется параметром BULK) во многом подобно использованию инструкции BULK INSERT. Параметр data_file указывает исходный файл данных, из которого данные копируются в та-блицу назначения. Для определения типов столбцов результирующего набора тре-буется файл форматирования, за исключением случаев использования параметров SINGLE_BLOB, SINGLE_CLOB или SINGLE_NCLOB. Если применяется параметр SINGLE_BLOB, функция openrowset() возвращает содержимое файла данных в виде набора данных, состоящего из единственной строки и единственного столбца типа данных varbinary(max). При использовании параметра SINGLE_CLOB файл дан-ных считывается как текст ASCII и его содержимое возвращается в виде набора данных, состоящего из единственной строки и единственного столбца типа данных varchar(max). В случае параметра SINGLE_NCLOB файл данных считывается как текст UNICODE и его содержимое возвращается в виде набора данных, состоящего из единственной строки и единственного столбца типа данных nvarchar(max). Для параметров SINGLE_CLOB и SINGLE_NCLOB применяется сопоставление текущей базы данных. При использовании функции openrowset() с параметром BULK INSERT можно применять стандартные указания таблиц, например TABLOCK, а также специальные указания инструкции BULK INSERT, такие как IGNORE_CONSTRAINTS, IGNORE_ TRIGGERS, KEEPDEFAULTS и KEEPIDENTITY. При использовании поставщика массивного копирования с функцией openrowset() необходимо задать либо псевдони-мы столбцов в предложении FROM, либо имена столбцов в файле форматирования. Синтаксис для применения инструкции SELECT с псевдонимом таблицы таков: SELECT selection FROM openrowset( BULK rowset_options ) AS table_alias [ ( column1_alias [ ,...n ] ) ] Использование распределенных транзакций Распределенными являются транзакции, использующие распределенные запросы или удаленный вызов процедур. Распределенные транзакции более сложны, чем распре-деленные запросы, в первую очередь из-за необходимости применения механизма, гарантирующего одновременную фиксацию или одновременный откат транзакции на всех связанных серверах. Например, если транзакция обновляет базы данных на трех разных экземплярах сервера, следует убедиться, что она фиксируется при удачном завершении или откатывается при ошибке. Таким образом гарантируется целостность баз данных, вовлеченных в распределенную транзакцию. Для правильной обработки распределенных транзакций в SQL Server требуются три компонента. Диспетчеры ресурсов Таковыми являются используемые в распределенных транзакциях связанные серверы, которые необходимо настроить. (За подробными сведениями о конфигурировании диспетчеров ресурсов обращайтесь к разделу "Управление связанными серверами" далее в этой главе.)
Связанные серверы и распределенные транзакции Глава 11 341 Координатор распределенных транзакций Данный компонент должен быть запу-щен на всех серверах, принимающих участие в распределенных транзакциях. Если это не так, распределенные транзакции не будут работать должным образом. Диспетчер транзакций В SQL Server это координатор распределенных транзак-ций, который управляет распределенными транзакциями, координируя их работу. Совет Кроме SQL Server, координатор распределенных транзакций могут использовать и другие приложения. На это стоит обращать внимания, производя анализ его произво-дительности. Каждый экземпляр сервера, вовлеченный в распределенную транзакцию, называ-ется диспетчером ресурсов. Они координируют транзакции через диспетчера транзак-ций, которым может выступать, например, координатор распределенных транзакций. Допустимо использование и других диспетчеров транзакций, если они поддерживают спецификацию X/Open XA для обработки распределенных транзакций. Распределенные транзакции обрабатываются таким же образом, как и локальные. Приложения могут начать распределенную транзакцию несколькими способами: явно, применив инструкцию BEGIN DISTRIBUTED TRANSACTION; явно, при помощи методов OLE DB или функций ODBC, позволяющих присо-единиться к распределенной транзакции, начатой приложением; неявно, выполнив распределенный запрос внутри локальной транзакции; неявно, вызвав удаленную хранимую процедуру в теле локальной транзакции (при условии, что для параметра соединения REMOTE_PROC_TRANSACTIONS установлено значение ON). В конце транзакции приложение запрашивает фиксацию или откат транзакции. Чтобы гарантировать правильную обработку транзакции всеми участвующими серве-рами, независимо от возможных ошибок отдельных участников, диспетчер транзакций использует двухфазный протокол фиксации транзакции. Фаза 1: фаза подготовки Диспетчер транзакций посылает всем диспетчерам ресурсов, принимающим участие в транзакции, запрос на подготовку к фиксации транзакции. Каждый диспетчер ресурсов производит необходимые подготовитель-ные действия и уведомляет диспетчера транзакций об их удачном или неудачном выполнении. Если все диспетчеры ресурсов готовы к фиксации транзакции, дис-петчер транзакций рассылает сообщение об этом и транзакция переходит к фазе фиксации. Фаза 2: фаза фиксации Диспетчеры ресурсов пытаются зафиксировать тран-закцию, после чего отправляют сообщение об удачном или неудачном исходе этой операции. Если все диспетчеры ресурсов сообщают об успешном исходе, диспетчер транзакций отмечает транзакцию как завершенную и сообщает об этом приложению. Если же в каком-либо диспетчере ресурсов во время выполнения одной из фаз воз-никают ошибки, транзакция откатывается и пользователю сообщается об ошибке. Приложения SQL Server управляют распределенными транзакциями либо сред-ствами Transact-SQL, либо через программный интерфейс приложений БД. Сам SQL Server поддерживает распределенные транзакции, используя такие интерфейсы OLE DB, как ITransactionLocal (для локальной транзакции) и ITransactionJoin (для рас-пределенных транзакций), а также объекты наборов данных, описанные выше. Если поставщик OLE DB не поддерживает интерфейс ITransactionJoin, то для него доступ-ны только операции чтения. Аналогично, типы запросов, которые можно выполнять на связанном сервере, зависят от используемого поставщика OLE DB.
342 Часть III Управление данными в Microsoft SQL Server 2005 При работе с распределенными транзакциями и запросами разрешено использовать большинство инструкций языка управления данными, например SELECT, INSERT, UPDATE и DELETE, однако невозможно использование инструкций языка опреде-ления данных, таких как CREATE, DROP или ALTER. Если на связанных серверах требуется применить инструкции определения данных, следует создать хранимые процедуры, содержащие такие инструкции, и при необходимости выполнить эти процедуры удаленно. Для выполнения инструкций Transact-SQL и хранимых процедур на связанном сервере можно использовать инструкцию EXECUTE. В примере 11-2 приведен син-таксис для использования указанной инструкции в подобном случае. Пример 11-2. Применение инструкция EXECUTE к связанному серверу Cинтаксис: EXEC[UTE] ( { @string_variable | [ N ]'command_string' } [+ ...n] [ { , { value | @variable [ OUTPUT ] } } [ ...n ] ] ) [ AS { LOGIN | USER } = 'name' ] [ AT linked_server_name ] [ ; ] Использование: EXEC ( 'SELECT * FROM william.sales' ) AT ORADBSVR8; Запуск службы координатора распределенных транзакций Служба координатора распределенных транзакций должна быть запущена на каждом сервере, обрабатывающем распределенные транзакции, поэтому важно, чтобы служба запускалась автоматически при начале работы системы. Это должно гарантировать, что распределенные транзакции будут выполняться, как ожидалось. Службой коор-динатора распределенных транзакций, а также любой другой службой, относящейся к SQL Server, можно управлять при помощи утилиты SQL Server Configuration Manager. (Более подробно о службах SQL Server и управлении ими смотрите в разделе "Настройка служб SQL Server" главы 3.) Чтобы просмотреть информацию о службе координатора распределенных тран-закций в SQL Server Management Studio, выполните следующие действия. 1. Подключитесь к серверу, который следует использовать. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Management (Управление). Будет отображено состояние служб Distributed Transaction Coordinator (Координатор распределенных транзакций) и Full-Text Search (Полнотек-стовый поиск). Значок в виде зеленого кружка с треугольником рядом с именем службы указывает на то, что она запущенна. Красный кружок с квадратом означает, что служба остановлена. Управление связанными серверами Надлежащее функционирование распределенных запросов и транзакций зависит от правильной настройки связанных серверов. Конфигурирование связанных серверов производится посредством регистрации в SQL Server информации об используемых ими соединениях и источниках данных. После этого можно ссылаться на связанный сервер, используя простое логическое имя. Если ссылаться на связанный сервер боль-ше не потребуется, удалите соединение с ним.
Связанные серверы и распределенные транзакции Глава 11 343 Добавление связанных серверов Когда нужно, чтобы сервер использовал распределенные запросы, распределенные транзакции или удаленно выполнял инструкции, необходимо настроить соединения с другими серверами для организации связанных серверов. Например, если клиенты, подключающиеся к серверу Zeta, выполняют запросы к серверам Pluto и Omega, на сервере Zeta необходимо настроить серверы Pluto и Omega в качестве связанных серверов. Если клиенты, подключающиеся к серверу Pluto, выполняют распределен-ные запросы к серверам Zeta и Omega, тогда на сервере Pluto необходимо настроить серверы Zeta и Omega в качестве связанных серверов. Чтобы добавить связанный сервер, выполните указанную ниже последовательность действий. 1. В SQL Server Management Studio подключитесь к экземпляру сервера, который следует настроить. 2. В панели Object Explorer (Обозреватель объектов) раскройте узел Server Objects (Объекты сервера). 3. В контекстном меню узла Linked Servers (Связанные серверы) выберите команду New Linked Server (Создать связанный сервер). Отобразится диалоговое окно New Linked Server (Новый связанный сервер), показанное на рис. 11-1. Рис. 11-1. Диалоговое окно New Linked Server 4. В поле Linked server (Связанный сервер) введите имя создаваемого связанного сервера. 5. При необходимости обращаться к серверу SQL Server выберите для переключателя Server type (Тип сервера) положение SQL Server. 6. Если производится связывание с иным источником данных, установите пере-ключатель Server type (Тип сервера) в положение Other data source (Другой ис-точник данных) и затем настройте источник данных, используя предоставляемые поля. Когда поле для какого-либо параметра недоступно, значит, для выбранного 
344 Часть III Управление данными в Microsoft SQL Server 2005 поставщика этот параметр невозможно настроить. Для ввода информации имеются следующие поля. Provider (Поставщик) В раскрывающемся списке поля выберите имя постав-щика OLE DB, который собираетесь использовать для соединения с указанным связанным сервером. Product name (Имя продукта) Укажите имя продукта, используемого в ка-честве источника данных, получаемых через OLE DB. Data source (Источник данных) Задайте источник данных OLE DB, который используется для инициализации поставщика OLE DB. Provider string (Строка поставщика) Введите строку соединения поставщика, идентифицирующую уникальный источник данных. Location (Размещение) Укажите поставщику OLE DB размещение БД. Catalog (Каталог) Задайте дополнительную БД, которую следует использо-вать при подключении к поставщику OLE DB. Совет Наиболее часто используются такие параметры, как имя поставщика и источ-ник данных. Например, при настройке связанного сервера для БД Microsoft Access или электронной таблицы Microsoft Excel следует выбрать в качестве поставщика Microsoft Jet 4.0 OLE DB Provider (Поставщик OLE DB для Jet 4.0) и затем указать имя источника данных. Для Oracle следует выбрать в качестве поставщика Microsoft OLE DB Provider for Oracle (Поставщик OLE DB для Oracle) и задать имя источника данных. 7. В списке Select a page (Выберите страницу) выберите страницу Server Options (Параметры сервера). На ней можно настроить следующие параметры связанного сервера. Collation Compatible (Совместимость сопоставлений) Включите этот пара-метр, чтобы позволить SQL Server делегировать поставщику операции сравне-ния символьных столбцов. В противном случае SQL Server будет выполнять сравнения символьных столбцов локально. Этот параметр следует устанавли-вать, только когда связанный сервер имеет те же характеристики сопоставления, что и локальный. Примечание Данный параметр управляет порядком сортировки; если параметр не уста-новлен, SQL Server использует порядок сортировки, определенный на локальном сервере. Эта установка влияет на порядок данных в результирующих наборах, поэтому следует принять ее во внимание при разработке приложений для SQL Server или при настройке клиентов, поддерживающих распределенные транзакции. Data Access (Доступ к данным) Позволяет для связанного сервера выпол-нение распределенных запросов. Rpc (Удаленный вызов процедур) Разрешает удаленный вызов процедур со связанного сервера. Rpc Out (Вызов удаленных процедур к серверу) Разрешает удаленный вы-зов процедур к связанному серверу. Use Remote Collation (Использовать удаленное сопоставление) Установка этого параметра предписывает SQL Server использовать сопоставление, за-данное для символьных столбцов связанного сервера. В противном случае SQL Server будет обрабатывать данные из связанного сервера, используя со-поставление по умолчанию экземпляра локального сервера. Следует помнить, что этот параметр применим только к БД SQL Server.
Связанные серверы и распределенные транзакции Глава 11 345 Collation Name (Имя сопоставления) Назначает конкретное сопоставление, используемое для запросов и транзакций. Значение выбирается в раскрываю-щемся списке; для задания имени сопоставления нужно сначала установить параметр Collation Compatible (Совместимость сопоставлений) в False. Connection Timeout (Время ожидания соединения) Задается время ожида-ния для соединений, установленных к удаленному серверу. Query Timeout (Время ожидания запроса) Задается время ожидания для запросов к удаленному серверу. 8. Щелкните кнопку OK, чтобы создать связанный сервер. После этого необходимо настроить параметры связанного сервера, как описано дальше, в разделе "На-стройка безопасности связанных серверов". Соответствующей инструкцией Transact-SQL для добавления связанных серверов является хранимая процедура sp_addlinkedserver. Ее синтаксис и использование даны в примере 11-3. Пример 11-3. Синтаксис и использование хранимой процедуры sp_addlinkedserver Синтаксис: sp_addlinkedserver [ @server = ] 'server_name' [ , [ @srvproduct = ] 'product_name' ] [ , [ @provider = ] 'provider_name' ] [ , [ @datasrc = ] 'data_source' ] [ , [ @location = ] 'location' ] [ , [ @provstr = ] 'provider_string' ] [ , [ @catalog = ] 'catalog' ] Использование: EXEC sp_addlinkedserver @server = 'ORADBSVR8', @srvproduct = 'Oracle', @provider = 'OraOLEDB.Oracle', @datasrc = 'ORACLE10'; GO В табл. 11-1 приведена сводка значений параметров, которые можно использовать при настройке различных поставщиков OLE DB. Поскольку некоторые поставщики имеют несколько вариантов конфигурации, определенным типам источников данных может соответствовать больше одной строки. Табл. 11-1. Значения параметров для настройки поставщиков OLE DB Удаленный источник данных OLE DB Поставщик OLE DB product_name provider_name data_source Прочее SQL Server Microsoft SQL Native Client OLE DB Provider SQL Server (по умолча-нию) - - - SQL Server Microsoft SQL Native Client OLE DB Provider - SQLNCLI Сетевое имя SQL Server (дл я экземпля ра по умолчанию) имя БД для параметра catalog (необя-зательно) (см. след. стр.)
346 Часть III Управление данными в Microsoft SQL Server 2005 Удаленный источник данных OLE DB Поставщик OLE DB product_name provider_name data_source Прочее SQL Server Microsoft SQL Native Client OLE DB Provider - SQLNCLI server_name\ instance_name (для конкрет-ного экземпля-ра) имя БД для параметра catalog (необя-зательно) Oracle Microsoft OLE DB Provider for Oracle Любое MSDAORA SQL*Netalias для БД Oracle - Oracle 8.0 и выше Oracle Provider for OLE DB Любое OraOLEDB. Oracle Псевдоним для БД Oracle - Access/Jet Microsoft OLE DB Provider for Jet Любое Microsoft.Jet. OLEDB.4.0 Полный путь файла БД Jet - Источник данных ODBC Microsoft OLE DB Provider for ODBC Любое MSDASQL Системное имя источника данных ODBC - Источник данных ODBC Microsoft OLE DB Provider for ODBC Любое MSDASQL - Строка соеди-нения ODBC для параметра provider_string Файловая система Microsoft OLE DB Provider for Indexing Service Любое MSIDXS Имя каталога Indexing Service - Электронная таблица Microsoft Excel Microsoft OLE DB Provider for Jet Любое Microsoft.Jet. OLEDB.4.0 Полный путь к файлу Excel Excel 5.0 для параметра provider_string БД IBM DB2 Microsoft OLE DB Provider for DB2 Любое DB2OLEDB - Имя катало га БД DB2 для параметра catalog Настройка безопасности связанных серверов Настройте конфигурацию безопасности связанных серверов для контроля доступа и определения того, каким образом используются локальные учетные записи. Новые связанные серверы по умолчанию настраиваются таким образом, чтобы не иметь контекста безопасности, если пользовательская учетная запись не определена. Это запрещает доступ всем учетным записям, не сопоставленным со связанным сервером явным образом. Чтобы изменить параметры безопасности связанного сервера, выполните пред-ложенные действия. 1. Запустите SQL Server Management Studio, затем подключитесь к локальному серверу, содержащему определения связанных серверов, которые требуется изменить. 2. В панели Object Explorer (Обозреватель объектов) последовательно раскройте узлы Server Objects (Объекты сервера) и Linked Servers (Связанные серверы). Отобра-зятся связанные серверы, созданные на сервере, выбранном в данный момент. Табл. 11-1. (окончание)
Связанные серверы и распределенные транзакции Глава 11 347 3. В контекстном меню связанного сервера, который следует настроить, выберите команду Properties (Свойства). Отобразится диалоговое окно Linked Server Properties (Свойства связанного сервера). 4. Выберите страницу Security (Безопасность), как показано на рис. 11-2. Рис. 11-2. Страница Security диалогового окна Linked Server Properties 5. Чтобы сопоставить локальные учетные записи с удаленными учетными записями, щелкните кнопку Add (Добавить). 6. Для каждой учетной записи в отдельности настройте следующие параметры: Local Login (Локальная учетная запись) Задает идентификатор локальной учетной записи, которая может подключиться к связанному серверу. Impersonate (Олицетворять) Установка этого флажка позволяет использовать для подключения к связанному серверу идентификатор локальной учетной за-писи, который должен в точности соответствовать учетной записи на связанном сервере. Примечание Если установлен флажок Impersonate (Олицетворять), невозможно сопо-ставить локальную учетную запись с удаленной. Remote User (Удаленный пользователь) Определяет удаленную учетную запись, которая на связанном сервере сопоставляется с локальной учетной записью. Remote Password (Удаленный пароль) Устанавливает пароль для удаленной учетной записи. Если пароль не задан, он запрашивается при подключении. 7. В нижней части страницы Security (Безопасность) размещены кнопки переключа-теля For a login not defined in the list above, connections will (Для учетных записей, не определенных в вышеприведенном списке соединения), с помощью которых можно установить контекст безопасности по умолчанию для всех учетных записей, 
348 Часть III Управление данными в Microsoft SQL Server 2005 не имеющих определенной настройки для связанного сервера. Переключатель можно установить в следующие положения. Not be made (Не устанавливать) Для учетных записей, не указанных в списке, соединение не будет установлено. Be made without using a security context (Устанавливать без использования контекста безопасности) Запрещает доступ учетным записям, явно не сопо-ставленным со связанным сервером. Be made using the login's current security context (Устанавливать, используя текущий контекст безопасности учетной записи) Учетные записи, явно не сопоставленные со связанным сервером, используют для подключения к нему текущий идентификатор и пароль учетной записи. Доступ запрещается, если идентификатор учетной записи и пароль не существуют на связанном сервере. Be made using this security context (Устанавливать, используя следующий контекст безопасности) Учетные записи, явно не сопоставленные со связан-ным севером, будут использовать учетную запись и пароль, заданные в полях Remote login (Удаленная учетная запись) и With password (С паролем). 8. По окончании настройки учетных записей щелкните кнопку OK. Соответствующей инструкцией Transact-SQL для настройки учетных записей является хранимая процедура sp_addlinkedsrvlogin. Ее синтаксис и использование показаны в примере 11-4. Пример 11-4. Синтаксис и использование хранимой процедуры sp_addlinkedsrvlogin Синтаксис: sp_addlinkedsrvlogin [ @rmtsrvname = ] 'remote_server_name' [ , [ @useself = ] 'useself'] [ , [ @locallogin = ] 'login' ] [ , [ @rmtuser = ] 'remote_login' ] [ , [ @rmtpassword = ] 'remote_password' ] Использование: EXEC sp_addlinkedsrvlogin @rmtsrvname = 'ORADBSVR8', @useself = 'false', @locallogin = NULL, @rmtuser = 'william', @rmtpassword = 'tango98'; GO Установка параметров сервера для удаленных и связанных серверов Установить параметры сервера для удаленных и связанных серверов можно, используя хранимую процедуру sp_serveroption. Ее синтаксис и использование показаны в при-мере 11-5, а основные параметры приведены в табл. 11-2. Пример 11-5. Синтаксис и использование хранимой процедуры sp_serveroption Синтаксис: sp_serveroption [ @server = ] 'server_name' , [ @optname = ] 'option_name' , [ @optvalue = ] 'option_value'; Использование: EXEC sp_serveroption 'ORADBSVR8', 'rpc out', TRUE;
Связанные серверы и распределенные транзакции Глава 11 349 Табл. 11-2. Основные параметры для хранимой процедуры sp_serveroption Параметр Использование/Описание collation compatible Если задано значение TRUE, используется сопоставление, совмести-мое по кодировке и последовательности символов (порядку сорти-ровки), поэтому сравнение символьных столбцов SQL Server делеги-рует поставщику. В противном случае SQL Server всегда выполняет сравнение символьных столбцов локально collation name Устанавливает имя сопоставления, используемого удаленным источни-ком данных; при этом параметр use remote collation (см. ниже) должен быть установлен в значение TRUE и источником данных не может являться SQL Server. Указывается имя одиночного сопоставления, поддерживаемого SQL Server connect timeout Устанавливает время ожидания для подключения к связанному серве-ру. Задайте 0 для использования глобального значения по умолчанию, установленного с помощью хранимой процедуры sp_configure data access Указывается значение TRUE, когда нужно разрешить распределенным запросам доступ к связанному серверу, и FALSE, чтобы запретить доступ lazy schema validation Если задано значение TRUE, SQL Server в начале запроса пропускает проверку схем удаленных таблиц query timeout Устанавливает время ожидания для запросов к связанному серверу. Задайте 0 для использования глобального значения по умолчанию, установленного с помощью хранимой процедуры sp_configure rpc Значение TRUE позволяет удаленный вызов процедур со связанного сервера rpc out Значение TRUE позволяет удаленный вызов процедур к связанному серверу use remote collation Если задано значение TRUE, для источников данных SQL Server ис-пользуется сопоставление удаленных столбцов, а для иных источников данных - сопоставление, указанное в параметре collation name. При значении FALSE распределенные запросы всегда будут использовать сопоставление по умолчанию локального сервера, игнорируя параметр collation name и сопоставление удаленных столбцов Удаление связанных серверов Если связанный сервер больше не требуется, его можно удалить, выполнив указанные ниже действия. 1. Запустите SQL Server Management Studio и подключитесь к локальному серверу, содержащему определения связанных серверов, которые требуется удалить. 2. В панели Object Explorer (Обозреватель объектов) последовательно раскройте узлы Server Objects (Объекты сервера) и Linked Servers (Связанные серверы). Отобразятся связанные серверы, определенные на сервере, выбранном в данный момент. 3. В контекстном меню узла связанного сервера, который требуется удалить, выберите команду Delete (Удалить). Отобразится диалоговое окно Delete Object (Удаление объекта). 4. Щелкните в этом диалоговом окне кнопку OK. Связанные серверы можно также удалить средствами Transact-SQL. Соответству-ющей инструкцией является хранимая процедура sp_droplinkedsrvlogin. Ее синтаксис и использование показаны в примере 11-6. Чтобы удалить учетную запись связанного 
350 Часть III Управление данными в Microsoft SQL Server 2005 сервера, применяется хранимая процедура sp_droplinkedsrvlogin. Ее синтаксис и ис-пользование приведены в примере 11-7. Пример 11-6. Синтаксис и использование хранимой процедуры sp_dropserver Синтаксис: sp_dropserver [ @server = ] 'server_name' [ , [ @droplogins = ] { 'droplogins' | NULL } ] Использование: EXEC sp_dropserver 'ORADBSVR8', 'droplogins' Пример 11-7. Синтаксис и использование хранимой процедуры sp_droplinkedsrvlogin Синтаксис: sp_droplinkedsrvlogin [ @rmtsrvname = ] 'remote_server_name', [ @locallogin = ] 'login' Использование: EXEC sp_droplinkedsrvlogin 'ORADBSVR8', 'william'
Глава 12 Реализация репликации моментальных снимков, репликации сведением и репликации транзакций Репликация данных позволяет распределять данные из исходной БД в одну или более БД назначения. Исходные БД и БД назначения могут находиться на разных серверах SQL Server, а также управляться другими СУБД при условии, что для каждой базы данных назначения имеется поставщик OLE DB. Существует возможность установить точный контроль над тем, когда происходит репликация, какие данные реплицируются и как реализуются другие аспекты репликации. Например, настроить репликацию таким образом, чтобы она выполнялась либо непрерывно, либо периодически по расписанию. Но прежде чем приступить непосредственно к реализации репликации, давайте выясним, в каких случаях ее нужно использовать, и проанализируем прин-ципы, лежащие в ее основе. Обзор репликации Репликация используется для копирования данных на один сервер и последующего распределения их на другие серверы. С ее помощью можно также преобразовывать скопированные данные и затем распределять их на множество серверов. Как правило, репликация используется в случаях, когда необходимо управлять данными, храня-щимися на нескольких серверах, причем делать это периодически. Если, например, требуется создать копию БД однократно, применять репликацию не следует; вместо этого лучше произвести копирование БД, как описано в разделе "Советы и приемы работы" главы 7 или в разделе "Восстановление БД в другое месторасположение" главы 14. Не нужна репликация и когда необходимо скопировать данные из одного сервера на другой, выполнив при этом их преобразование. В таком случае стоит применить процедуру импорта и экспорта, описанную в главе 10. Причины для ис-пользования репликации могут быть следующими. Синхронизация изменений удаленных БД с центральной БД Например, если сотрудники отдела сбыта используют переносные ноутбуки, нужно создать на них копии данных для каждого региона продаж. Позже, продавец на месте до-бавит информацию или внесет изменения в автономном режиме. А при помощи репликации эти изменения могут быть синхронизированы с центральной базой данных. Создание нескольких экземпляров БД, позволяющих распределить рабочую нагрузку Так, при наличии регулярно обновляемой центральной БД из нее можно копировать изменения в базы данных департаментов, чтобы доступ к данным сотруд-ники получали через эти БД вместо подключения к центральной базе данных. Перемещение определенных наборов данных с центрального сервера и распре-деление их на другие В этом случае репликация используется, когда нужно рас-пределить данные о продажах из центральной БД на все БД магазинов компании.
352 Часть III Управление данными в Microsoft SQL Server 2005 Преобразование формата данных и распределение их среди множества под-писчиков Например, если компания продает подписки на БД экономической информации, то имеет смысл с помощью репликации преобразовывать данные для их предоставления подписчикам в том виде, в котором они предпочтительны каждому клиенту. Репликация применима в широком диапазоне компьютерных сред. Архитектура репликации включает разные процессы, процедуры и компоненты, используемые для настройки репликации под конкретную ситуацию. Среди них назовем следующие. Компоненты репликации Компоненты сервера и данных, используемые в репли-кации. Агенты репликации Приложения, участвующие в процессе репликации. Типы репликации Настраиваемые разновидности репликации. Компоненты репликации Прежде чем начать применять репликацию на практике, необходимо знать основные компоненты процесса репликации и приемы их использования. Итак, серверы, уча-ствующие в репликации, в зависимости от ее топологии могут выполнять одну или более указанных ниже функций. Издатель Издателями являются серверы, предоставляющие данные для репли-кации на другие серверы. Они также отслеживают изменения в данных и под-держивают другую информацию об исходных БД. Каждая группа данных имеет только одного издателя. Дистрибьютор Под ними имеются в виду серверы, распространяющие реплици-руемые данные. На каждом дистрибьюторе хранится БД распространения, мета-данные, исторические данные и (в случае репликации транзакций) транзакции. Подписчик Таковыми считаются серверы назначения, которые хранят реплици-рованные данные и получают обновления. Подписчики также могут вносить изме-нения в данные. Допустимо публиковать данные для нескольких подписчиков. Данные, публикуемые для репликации, организовываются в статьи (articles) и публикации (publications). Статьи являются базовыми единицами репликации и могут состоять из одной таблицы, подмножества данных таблицы, а также из других объектов БД. Публикации - это совокупность статей, предназначенных для подпис-чиков. Статьи, которые включаются в публикацию, могут содержать: целую таблицу; только определенные столбцы из таблицы, получаемые наложением вертикального фильтра; только определенные строки из таблицы, получаемые наложением горизонтального фильтра; подмножество данных таблицы, состоящее из определенных строк и столбцов; представление, индексированное представление или пользовательскую функцию; хранимую процедуру. Также можно указать, производится ли репликация объектов схемы, то есть огра-ничений, индексов, триггеров, сопоставлений и расширенных свойств. Если на пу-бликуемом объекте таблицы, представления, процедуры, функции или триггеры при помощи инструкций языка определения данных (например, ALTER TABLE или ALTER VIEW) изменяются, то эти изменения по умолчанию распространяются среди всех подписчиков. Нельзя опубликовать для репликации следующее: БД model, tempdb и msdb; системные таблицы в БД master.
Реализация репликации моментальных снимков Глава 12 353 В модели репликации SQL Server, которая основана на метафоре "опубликуй и подпишись", настройка репликации включает перечисленные ниже действия. 1. Выбор типа и топологии репликации. 2. Выполнение необходимых подготовительных задач. 3. Настройка дистрибьютора и издателя, а также баз данных публикаций. 4. Создание публикации. 5. Создание подписок на публикацию и назначение подписчиков. Агенты и задания репликации Для осуществления процесса репликации SQL Server использует следующие специ-ализированные приложения, называемые агентами репликации. Snapshot Agent (Агент моментальных снимков) (snapshot.exe) Создает мо-ментальные снимки, включающие структуру данных и сами данные, которые со-храняются для последующего распространения. Обновляет в БД распространения информацию о состоянии репликации. Выполняется на дистрибьюторе. Каждая опубликованная база данных имеет собственного агента моментальных снимков, который запускается на дистрибьюторе и подключается к издателю. Используется при реализации всех типов репликации. Distribution Agent (Агент распространения) (distrib.exe) Применяет к подпис-чикам данные репликации моментальных снимков или репликации транзакций. Может быть запущен на дистрибьюторе или подписчиках. На дистрибьюторе работает при реализации подписки с принудительной репликацией (push subscription), а на подписчике - подписки с репликацией по запросу (pull subscription). Не используется в репликации сведением. Merge Agent (Агент сведения) (replmerg.exe) Синхронизирует изменения, сде-ланные на подписчике после копирования с издателя первоначального моменталь-ного снимка. Если во время синхронизации происходят конфликты изменений, они решаются при помощи специализированного механизма разрешения конфликтов, использующего набор правил, основанный на приоритетах. Каждая публикация имеет своего собственного агента сведения, который запускается на издателе или подписчиках, в зависимости от конфигурации. Используется только при репли-кации сведением. Log Reader Agent (Агент чтения журналов) (logread.exe) Перемещает тра нз-ак ции, отмеченные для репликации, из журнала транзакций на издателе в базу дистрибьютора. Каждая БД, опубликованная для репликации транзакций, имеет собственного агента журналов, запускаемого на дистрибьюторе и подключающе-гося к издателю. Используется только при репликации транзакций. Queue Reader Agent (Агент чтения очереди) (qrdrsvc.exe) Сохраняет измене-ния БД в очередь, при помощи которой обновления могут быть распространены издателю асинхронно. Это позволяет подписчикам вносить изменения в опубли-кованные данные и синхронизировать их при отсутствии постоянного сетевого соединения с издателем. Используется только при репликации обновляющих транзакций с организацией очереди. SQL Server 2005 не имеет отдельного агента очистки. Вместо этого используются указанные ниже задания обслуживания репликации. Agent History Clean Up: distribution_database_name (Очистка истории агента в distribution_database_name) Удаляет историю агента репликации из базы данных распространения. По умолчанию запускается каждые десять минут.
354 Часть III Управление данными в Microsoft SQL Server 2005 Distribution Clean Up: distribution_database_name (Очистка базы данных рас-пространения: distribution_database_name) Деактивирует подписки, которые не были синхронизированы на протяжении максимального периода сохранности, определенного для распространения, а также удаляет реплицированные транзакции из БД распространения. По умолчанию запускается каждые десять минут. Expired Subscription Clean Up (Очистка подписок с истекшим сроком хранения) Удаляет из опубликованных баз данных подписки с истекшим сроком хранения. По умолчанию запускается раз в сутки: в 1:00. Reinitialize Subscriptions Having Data Validation Failures (Повторная инициали-зация подписок при возникновении ошибок в данных) Отмечает все подписки, имеющие ошибки проверки правильности данных. При следующем запуске Merge Agent (Агент сведения) или Distribution Agent (Агент распространения) к под-писчику будет применен новый моментальный снимок. По умолчанию это задание не включено. Replication Agents Checkup (Проверка агентов репликации) Обнаруживает агентов репликации, активно не ведущих журнал, и записывает ошибку в жур-налы событий Windows при неудаче выполнения шага задания. По умолчанию запускается каждые десять минут. Replication Monitoring Refresher For distribution_database_name (Обновление запросов мониторинга репликации для distribution_database_name) Обновляет кэшированные запросы, используемые Replication Monitor (Монитор репликации). По умолчанию запускается автоматически при запуске SQL Server Agent и работает непрерывно. Типы репликации SQL Server поддерживает несколько типов репликации. Репликация моментальных снимков Создает моментальный снимок текущих данных, копируя их полную копию на один или несколько подписчиков. При по-следующих снимках подписчикам снова отправляется полная копия данных. Хотя репликация моментальных снимков гарантирует согласованность данных между издателем и подписчиком, этот тип увеличивает накладные расходы и загрузку сети при работе с большими БД. Другим недостатком репликации моментальных снимков является то, что она выполняется периодически, то есть подписчики не имеют самой свежей информации. В SQL Server 2005 подготовка моментальных снимков улучшена: при создании сценария для схемы или при массивном копиро-вании данных обрабатывать несколько статей можно одновременно. Этот способ, называющийся параллельной обработкой, используется автоматически. В SQL Server 2005 также предусмотрено автоматическое возобновление прерванной до-ставки моментальных снимков. При этом возобновляется только доставка файлов, не переданных совсем или частично; файлы моментальных снимков, полученные полностью, повторно не передаются. Репликация транзакций Для распространения изменений использует транзакции. Применяется преимущественно в средах с топологией сервер-сервер. В начале репликации подписчикам посылается моментальный снимок данных. Затем вы-бранные транзакции в журнале транзакций издателя отмечаются для репликации и направляются каждому подписчику в отдельности. В дальнейшем моментальные снимки создаются периодически, позволяя гарантировать синхронность БД. Для обеспечения согласованного применения последовательных изменений применяет-ся механизм распределенных транзакций. Преимуществом репликации транзакций 
Реализация репликации моментальных снимков Глава 12 355 является то, что производится репликация отдельных транзакций, а не всего набора данных. Помимо этого, репликация транзакций может происходить как непрерыв-но, так и периодически, что делает эту процедуру более гибкой, чем репликацию моментальных снимков. Чтобы упростить для больших баз данных реализацию репликации транзакций, SQL Server 2005 позволяет инициализировать подпи-ску из резервной копии. Таким образом, вместо использования моментального снимка для инициализации подписки можно восстановить на подписчике любую резервную копию, сделанную после создания публикации. Также при любой воз-можности SQL Server 2005 создает моментальные снимки в режиме параллельной обработки, что сокращает время блокировок, накладываемых в процессе генериро-вания моментального снимка. Это позволяет уменьшить влияние на пользователей, работающих с базой данных при создании моментального снимка. Репликация сведением Позволяет подписчикам вносить изменения в реплициро-ванные данные независимо друг от друга. Применяется главным образом в средах с топологией сервер-клиент. Впоследствии эти изменения можно свести воедино и применить ко всем связанным базам данных: как исходным, так и конечным. Мо-ментальные снимки, требуемые для инициализации репликации сведением, могут быть предварительно сгенерированы для каждого подписчика; также подписчики могут инициализировать создание моментального снимка во время первоначальной синхронизации. Репликация сведением не использует распределенные транзакции и поэтому не может гарантировать согласованности данных. В то же время, реплика-ция сведением использует механизм разрешения конфликтов для определения того, какие изменения применяются. По умолчанию репликации сведением обрабатывает изменения построчно. Также можно группировать наборы связанных строк в одну логическую запись, что всегда гарантирует обработку связанных наборов записей на подписчике как единое целое. В ходе репликации сведением SQL Server 2005 предоставляет статистическую информацию на уровне статьи. Это дает возможность более точно отслеживать фазу сведения, а также позволяет определить порядок об-работки статей во время синхронизации сведением. Данный способ, называющийся декларативным упорядочиванием (declarative ordering), полезен при использовании триггеров, а особенно, когда важна последовательность их запуска. При репликации моментальных снимков и репликации транзакций подписчики обычно не изменяют данные. Однако в процессе реализации репликации транзакций встречаются варианты, указанные ниже. Немедленное обновление Позволяет подписчикам вносить изменения и безот-лагательно обновлять издателя. Затем издатель реплицирует эти изменения другим подписчикам. Обновление с организацией очереди Разрешает подписчикам вносить измене-ния и сохранять их в очередь, где они находятся до момента, пока смогут быть применены к издателю. Последний реплицирует изменения другим подписчикам. Немедленное обновление и обновление с организацией очереди поддерживается только в публикациях, участвующих в репликации моментальных снимков или репликации транзакций. Обновление с организацией очереди предоставляет определенный уровень от-казоустойчивости, которая может потребоваться, если базы данных географически удалены. Такое обновление, в отличие от немедленного, не требует постоянного со-единения с издателем. Используя обновление с организацией очереди, подписчики могут применять изменения асинхронно: сохранять изменения, когда связи нет, а по-сле ее восстановления отправлять изменения издателю.
356 Часть III Управление данными в Microsoft SQL Server 2005 Существуют ситуации, когда оптимальным является совместное применение не-медленного обновления и обновления с организацией очереди, например, если очень важно не потерять возможности вносить изменения и тогда, когда связь между из-дателями и подписчиками прервется. В таком случае нужно настроить обе возмож-ности обновления, используя немедленное обновление как первичный механизм, а при необходимости переключаться на обновление с организацией очереди. Запасной механизм можно активировать в любое время. Однако вернуться к основному методу репликации нельзя будет до тех пор, пока подписчик и издатель вновь не соединят-ся и Queue Reader Agent (Агент чтения очередей) не применит все незавершенные обновления, находящиеся в очереди. И немедленное обновление, и обновление с организацией очереди для применения изменений на издателе используют транзакции и стандартный двухфазный протокол фиксации. Использование транзакций гарантирует, что при удачном исходе обновле-ние будет зафиксировано, а в случае проблем - данные возвращены в предыдущее состояние. Транзакции применяются от конкретного подписчика к издателю, который реплицирует затем изменения другим подписчикам. Транзакции после обновления завершаются автоматически; управляются они коор-динатором распределенных транзакций. Пользовательские приложения, изменяющие данные подписчика, могут быть разработаны как обновляющие единственную базу данных. В стандартной конфигурации (по умолчанию) обновления к подписчику применяются, только когда их можно реплицировать посредством транзакции. В про-тивном случае подписчик не сумеет изменить данные подписки. SQL Server отслеживает на подписчике изменения, которые могут конфликтовать с изменениями на издателе. При нахождении конфликта транзакция отклоняется, и данные не изменяются. Обычно отклонение транзакции означает, что подписчика необходимо синхронизировать с издателем и затем лишь пытаться вносить изменения локально. Если при репликации моментальных снимков в качестве статей включаются хранимые процедуры, SQL Server копирует от издателя к подписчикам всю хранимую процедуру полностью. Изменения, вызванные выполнением хранимых процедур, реплицируются с новыми моментальными снимками. Однако, если используется ре-пликация транзакций, существует возможность реплицировать выполнение хранимых процедур вместо репликации изменений, вызванных их выполнением. Послав только команду выполнения вместо измененных данных, можно уменьшить количество дан-ных, передающихся по сети, и тем самым повысить производительность приложений, использующих репликацию. При репликации выполнения хранимых процедур имеются два параметра настрой-ки: стандартное (standard) и сериализуемое (serialized). В первом случае выполне-ние процедур реплицируется всем подписчикам, даже если это происходит в разных транзакциях. Поскольку одновременно могут выполняться несколько транзакций, согласованность данных подписчика с данными издателя не гарантируется. При ис-пользовании сериализуемого параметра процедуры выполняются последовательно, если обращение к ним производится в сериализуемых транзакциях. Если же проце-дуры выполняются вне сериализуемых транзакций, то вместо этого реплицируются изменения данных. Такой подход гарантирует, что данные подписчика будут согла-сованы с данными издателя. Планирование репликации Как уже было сказано ранее, архитектура репликации расширяема. Это обеспечивает достаточную гибкость, позволяющую соответствовать требованиям почти любой си-туации. К сожалению, эта гибкость также усложняет настройку репликации. Чтобы 
Реализация репликации моментальных снимков Глава 12 357 репликация выполнялась надлежащим образом, следует потратить немного времени на ее планирование, которое состоит в выборе определенной топологии репликации и выполнении необходимых подготовительных задач. Выбор топологии репликации Основная задача при выборе топологии репликации - определить физическое рас-положение баз данных издателя, дистрибьютора и подписчика. К использованию предлагаются следующие топологии репликации. Топология с равноправными участниками Организует репликацию между рав-ными участниками. Преимущество этой топологии заключается в возможности динамически менять функции участвующих в репликации узлов, что предоставляет дополнительную гибкость при сопровождении и управлении системой в случае сбоя. Недостаток - дополнительные накладные расходы на администрирование, связанные с переназначением функций. Топология с центральным издателем БД издателя и дистрибьютора находятся на одном и том же сервере, а один или более подписчиков - на других серверах. Преимуществом этой топологии является управляемость и простота обслужива-ния, недостатком - дополнительная нагрузка на центральный сервер-издатель. Совет Топология с центральным издателем является наиболее используемой топологией репликации. К сожалению, часто можно столкнуться с ситуацией, когда дополнительная нагрузка (в виде дистрибьютора) на сервер-издатель понижает его производительность. Чтобы уменьшить загруженность сервера, следует поместить дистрибьютор на отдельный сервер. Однако имейте в виду, что и при этом нагрузка на сервер-издатель остается до-вольно существенной, ведь издателю и дистрибьютору необходимо связываться между собой и передавать друг другу данные. Топология с центральным издателем и удаленным дистрибьютором Базы данных издателя и дистрибьютора находятся на разных серверах, а один и более подпис-чиков организованы на своих серверах. Преимуществом этой топологии является более равномерное распределение рабочей нагрузки, недостатком - необходимость обслуживать дополнительный сервер-дистрибьютор. Топология с центральным подписчиком В этом случае в центральную БД под-писчика собираются данные от нескольких издателей. Например, если имеются ServerA, ServerB и ServerC, то ServerA и ServerB могут выступать в роли централь-ных издателей, а ServerC - в роли центрального подписчика. В этой конфигурации обновления распространяются из ServerA и ServerB и собираются на ServerC. После чего центральный подписчик, то есть ServerC, может выступать издателем для дру-гих серверов. Для этой топологии необходимо, чтобы все таблицы, использованные в публикации, имели уникальный первичный ключ, в противном случае репликация будет работать некорректно. Топология с издающим подписчиком В распространении данных эта топология полагается на других подписчиков; ее можно использовать как дополнение к осталь-ным топологиям. Например, если имеются две географически удаленные группы серверов, издатель реплицирует данные на серверы, входящие в ту же группу, что и он, и затем передает данные единственному издающему подписчику в удаленной группе; последний распространяет далее данные серверам своей группы. Подготовительные задачи репликации После выбора типа и топологии репликации перед ее реализацией необходимо выпол-нить некоторые подготовительные задачи. В следующих разделах описаны основные подготовительные задачи для каждого типа репликации.
358 Часть III Управление данными в Microsoft SQL Server 2005 Подготовка к репликации моментальных снимков При использовании репликации моментальных снимков реплицируемые данные це-ликом копируются в файлы данных на дистрибьюторе. Как правило, файлы момен-тальных снимков (по умолчанию хранящиеся в папке MSSQL\repldata) имеют размер, практически равный размеру реплицируемых данных. Следует убедиться, что диски, на которых предполагается хранить реплицируемые данные, имеют достаточно сво-бодного места. Например, если одна публикация предоставляет для распространения посредством репликации моментальных снимков 500 Мбайт, другая - 420 Мбайт и третья - 900 Мбайт данных, необходимо иметь не менее 2 Гбайт свободного дис-кового пространства. Из этого объема некоторое количество свободного пространства необходимо для самого процесса обработки, остальное занимают данные. Также существует возможность сохранять данные моментальных снимков в аль-тернативном каталоге, откуда подписчики смогут забрать их позже. При этом файлы моментального снимка можно сжать. Это уменьшает требования к дисковому про-странству, но только для сжимаемых файлов, - общие требования к дисковому про-странству остаются неизменными, кроме того, начальные и конечные требования к дисковому пространству также не всегда отличаются. Если применяется сжатие фай-лов, Snapshot Agent (Агент моментальных снимков) генерирует необходимые файлы данных, а затем сжимает их в формате Microsoft CAB. Когда подписчик получает сжатые файлы моментального снимка, они записываются в каталог клиента для хра-нения временных файлов, который является либо рабочим каталогом по умолчанию, либо альтернативным каталогом, указанным в свойствах подписки. Перед чтением файлов подписчик распаковывает их из формата Microsoft CAB. Примечание При создании моментального снимка в каталоге по умолчанию и в альтер-нативном каталоге файлы создаются отдельно, если каталоги находятся на разных дисках. Это означает, что общий объем необходимого дискового пространства можно примерно оценить на основании размеров файлов. Однако когда файлы моментальных снимков создаются в указанных каталогах, расположенных на одном диске, оба файла изначально создаются в каталоге по умолчанию, а затем файл, предназначенный для альтернатив-ного каталога, туда копируется. Поэтому размер свободного пространства на диске, где находится каталог по умолчанию, должен превышать расчетный в два раза. Сжатие файлов не помогает, поскольку Snapshot Agent (Агент моментальных снимков) сначала генерирует необходимые файлы данных в обычном формате и лишь затем сжимает. Следует хорошо продумать расписание создания моментальных снимков. Ког-да Snapshot Agent (Агент мгновенных снимков) создает снимок опубликованной таблицы, во время копирования данных от издателя к дистрибьютору блокируется целая таблица. В результате пользователи не могут обновлять данные в таблице, пока блокировка не будет снята. Чтобы уменьшить влияние на другие операции, следует внимательно подойти к планированию расписания репликации, то есть определить следующее: время наименьшей активности пользователей или время, когда пользователям не требуется производить запись в реплицируемые таблицы; время, когда моментальные снимки должны быть созданы, и запланировать работу пользователей таким образом, чтобы на протяжении этого отрезка времени им не потребовалось писать в реплицируемые таблицы. SQL Server 2005 обрабатывает множество статей одновременно при создании сце-нария для схемы или массивном копировании данных. Параллельная обработка может увеличить скорость и эффективность процесса создания моментального снимка.
Реализация репликации моментальных снимков Глава 12 359 Подготовка к репликации транзакций Поскольку репликация транзакций основана на репликации моментальных снимков, следует подготовиться к обеим. При репликации транзакций начальный моменталь-ный снимок отправляется дистрибьютору и затем периодически, например раз в месяц, обновляется. В промежутках между рассылкой новых моментальных снимков для обновления подписчиков используются транзакции, которые записываются в БД дистрибьютора и удаляются только после создания нового моментального снимка. Журналы транзакций опубликованных баз данных играют ключевую роль в успеш-ной репликации. Ожидающие распространения транзакции нельзя удалить из журнала транзакций опубликованной БД до тех пор, пока они не будут переданы дистрибью-тору. По этой причине может потребоваться увеличить размер журнала транзакций опубликованной базы данных. Следует также принять во внимание, что если издатель не может связаться с дистрибьютором или если не запущен Log Reader Agent (Агент чтения журналов), транзакции будут продолжать накопляться в журналах транзакций издателя. При использовании репликации транзакций всем опубликованным таблицам не-обходимо присвоить первичный ключ. В существующую таблицу его можно добавить при помощи инструкции ALTER TABLE (см. главу 9). Кроме того, если публикация использует типы данных для хранения больших объектов, важно помнить о следу-ющих ограничениях. При обновлении типов данных varchar(max), nvarchar(max) и varbinary(max) нуж-но использовать предложение .WRITE инструкции UPDATE для частичного или полного обновления. Частичное обновление столбца типа varchar(max) означает, например, что нужно изменить первые 100 символов столбца. Полное обновление заключается в необходимости изменить все данные в столбце. Значения параметров @Offset и @Length предложения .WRITE указываются в байтах для типов данных varbinary(max) и varchar(max), и в символах - для nvarchar(max). Примечание Для оптимальной производительности следует добавлять или обновлять данные в количествах, кратных 8 040 байтов, что гарантирует запись данных с использова-нием целых страниц данных. Любые обновления при помощи предложения .WRITE, которые вставляют или добавляют новые данные, минимально записываются в журнал транзакций, если модель восстановления БД установлена в SIMPLE или BULK_LOGGED. Минимальное ведение журнала не используется при обновлении уже существующих значений. При изменении типов данных text, ntext или image инструкция UPDATE ини-циализирует столбец, назначает допустимый указатель на него и выделяет как минимум одну страницу данных (если столбцу не присваивается значение NULL). Чтобы заменить или изменить большие блоки данных типов text, ntext или image, Microsoft рекомендует использовать вместо инструкции UPDATE инструкции WRITETEXT или UPDATETEXT. Однако следует иметь в виду, что поддержка инструкций WRITETEXT и UPDATETEXT может быть прекращена в одной из будущих версий SQL Server. Параметр настройки сервера max text repl size контролирует максимальный раз-мер (в байтах) для реплицируемых текстовых и графических данных. Операции, превышающие этот лимит, завершаются неудачей. Параметр сервера max text repl size устанавливается с помощью хранимой процедуры sp_configure. В процесс использования моментального снимка для репликации транзакций могут быть внесены несколько важных изменений. Во-первых, для упрощения реализации репликации транзакций для больших баз данных SQL Server позволяет инициализиро-вать подписчика из резервной копии. Таким образом, вместо того чтобы использовать 
360 Часть III Управление данными в Microsoft SQL Server 2005 для инициализации моментальный снимок, на подписчике можно восстановить любую резервную копию, сделанную после создания публикации. Во-вторых, SQL Server 2005 всегда, когда это возможно, создает моментальные снимки в режиме параллельной обработки, что сокращает время блокировок, накладываемых при генерировании моментального снимка. Это позволяет уменьшить влияние на пользователей, рабо-тающих с базой данных во время создания моментального снимка. Подготовка к репликации сведением При репликации сведением все опубликованные таблицы должны иметь первичные ключи. Если таблица содержит внешние ключи или ее ссылочная целостность под-держивается другим образом, в публикацию необходимо включить связанную таблицу. В противном случае не удастся произвести операции обновления, добавляющие новые строки, поскольку SQL Server не сможет найти требуемый первичный ключ. Кроме того, репликация сведением влияет на использование столбцов штампа времени. Значения штампа времени генерируются автоматически, однако их уникальность гарантирована только в пределах определенной базы данных. По этой причине SQL Server реплицирует столбцы типа timestamp, но не копирует значений штампа времени, содержащихся в столбцах. Эти значения генерируются во время применения строк начального моментального снимка на подписчике. Как и репликация транзакций, репликация сведением имеет несколько ограниче-ний, касающихся текстовых и графических столбцов. Например, столбцы типа text и image необходимо явным образом обновлять с помощью инструкция UPDATE. При репликации сведением пользователи могут вносить изменения в реплицированные данные независимо друг от друга и от издателя, после чего эти изменения сводятся воедино и направляются во все связанные базы данных. Агент сведения отслеживает изменения, конфликтующие между собой. Если конфликт обнаружен, используется механизм разрешения конфликтов, основанный на приоритетах; при этом определя-ется, какое изменение применяется, а какое откатывается. Изменения отслеживаются как на уровне столбца, так и на уровне строки. При отслеживании на уровне столбца конфликт обнаруживается, если изменения были внесены в один и тот же столбец более чем одной копии таблицы. При отслеживании на уровне строки конфликт существует, если изменения были внесены в одну и ту же строку более чем одной копии таблицы. Обычно подписчики публикаций репликации сведением синхронизируют обнов-ления только с издателем. Однако они могут синхронизироваться и с другими серве-рами путем назначения альтернативных партнеров синхронизации. Таких партнеров полезно иметь, когда необходимо гарантировать, что обновления будут внесены, даже если первичный издатель находится в автономном режиме или недоступен по другим причинам. Примечание По умолчанию репликация сведением обрабатывает изменения построчно. Можно сгруппировать наборы связанных строк в одну логическую запись. Это гарантирует, что связанные наборы строк всегда обрабатываются подписчиком одновременно и как единое целое. Также можно использовать декларативное упорядочивание для определения последовательности обработки статей во время синхронизации сведением. Администрирование дистрибьютора Дистрибьюторы занимаются распространением (дистрибуцией) реплицируемых дан-ных. При работе с ними основными задачами администрации являются: настройка нового и обновление существующего дистрибьютора, а также удаление.
Реализация репликации моментальных снимков Глава 12 361 Настройка нового дистрибьютора Настройка нового дистрибьютора является первым важным шагом в подготовке к ре-пликации. Прежде чем приступить к ней, необходимо сделать следующее. Выбрать тип репликации - моментальных снимков, транзакций или сведением. Выбрать топологию репликации, например топологию с центральным издателем. Выполнить все необходимые подготовительные задачи. Чтобы соответствовать определенным ограничениям, возможно, потребуется произвести обновление кли-ентов и приложения, изменяющих опубликованные базы данных напрямую. Когда будете готовы продолжить, настройте дистрибьютор, выполнив указанные ниже действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому серверу и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). Совет Если не удается успешно подключиться к удаленному серверу, это может означать, что он не настроен для допуска удаленных соединений. Чтобы разрешить удаленные соеди нения, используйте утилиту SQL Server 2005 Surface Area Configuration (подробнее об этом рассказывается в главе 3). 2. В контекстном меню узла Replication (Репликация) выберите команду Configure Distribution (Настроить распространение). Запустится мастер Configure Distribution Wizard (Мастер настройки распространения). 3. Щелкните кнопку Next (Далее), чтобы покинуть стартовую страницу. На следую-щей странице мастера можно выбрать дистрибьютор, как показано на рис. 12-1. Рис. 12-1. Мастер Configure Distribution Wizard 4. Поскольку на данном этапе требуется настроить новый дистрибьютор, примите предоставляемые значения по умолчанию, чтобы позволить текущему серверу выступать в роли дистрибьютора собственных данных, и щелкните кнопку Next (Далее).
362 Часть III Управление данными в Microsoft SQL Server 2005 5. Если SQL Server Agent (Агент SQL Server) не запущен и не настроен на автома-тический запуск, то отобразится страница SQL Server Agent Start (Запуск SQL Server Agent). Установите переключатель в положение Yes, configure the SQL Server Agent service to start automatically (Да, настроить автоматический запуск службы SQL Server Agent) и щелкните кнопку Next (Далее). 6. На странице Snapshot Folder (Папка моментального снимка) установите местопо-ложение папки, используемой для хранения моментальных снимков, и щелкните кнопку Next (Далее). По умолчанию предлагается папка %ProgramFiles%\Microsoft SQL Server\MSSQL.n\MSSQL\ReplData на сервере, назначенном дистрибьютором. Для гарантии, что запущенным на подписчиках агентам Distribution Agent (Агент распространения) и Merge Agent (Агент сведения) будут доступны моментальные снимки, следует поместить папку моментальных снимков на сетевой общий ресурс и указать сетевой путь к ней, набрав его в поле Snapshot folder (Папка моменталь-ного снимка), например \\CorpSvr09\ReplData. 7. На странице Distribution Database (База данных распространения) введите инфор-мацию о БД распространения, используя диалоговое окно, показанное на рис. 12-2. В поле Distribution database name (Имя базы данных распространения) введите ее имя, в поле Folder for the distribution database file (Папка для файла базы данных распространения) - расположение ее файла и в поле Folder for the distribution database log file (Папка для файла журнала транзакций базы данных распростра-нения) - расположение файла транзакций БД распространения. Щелкните кнопку Next (Далее). Рис. 12-2. Страница Distribution Database мастера Configure Distribution Wizard Совет В качестве места расположения для файлов данных и журналов транзакций нельзя использовать подключенные сетевые диски. Совет Применяйте описательное имя для базы данных, например EmployeeDistribution или EmpDistr. 8. Как показано на рис. 12-3, необходимо разрешить серверам использовать скон-фигурированный дистрибьютор, когда они будут настроены в качестве издателей. 
Реализация репликации моментальных снимков Глава 12 363 В списке Publishers (Издатели) показаны только зарегистрированные серверы для текущего домена. Если требуется добавить сервер, щелкните кнопку Add (Доба-вить). Отобразится меню кнопки, в котором можно сделать следующее. : Выбрать команду Add SQL Server Publisher (Добавить издателя SQL Server), чтобы настроить соединение к SQL Server, используя диалоговое окно Connect to Server (Подключиться к серверу). Зарегистрированные серверы приведены в раскрывающемся списке Server name (Имя сервера); также можно произвести поиск других серверов, выбрав в раскрывающемся списке элемент <Browse for more>. Предлагаемым по умолчанию типом аутентификации является Windows Authentication (Аутентификация Windows), которая использует текущую учет-ную запись и пароль. Щелкните кнопку Connect (Подключиться). : Выбрать команду Add Oracle Publisher (Добавить издателя Oracle), чтобы на-строить соединение к серверу Oracle, используя диалоговое окно Connect to Server (Подключиться к серверу). Зарегистрированные серверы приведены в раскрывающемся списке Server instance (Экземпляр сервера); также можно произвести поиск других серверов, выбрав в раскрывающемся списке элемент <Browse for more>. Предлагаемым по умолчанию типом аутентификации явля-ется Oracle Standard Authentication (Стандартная аутентификация Oracle), для которой требуется ввести учетную запись и пароль пользователя. Щелкните кнопку Connect (Подключиться). Рис. 12-3. Страница Publishers мастера Configure Distribution Wizard 9. Крайний справа столбец в списке Publishers (Издатели) содержит кнопку с много-точием (...) для каждого зарегистрированного издателя. Щелкните эту кнопку, чтобы открыть диалоговое окно Properties (Свойства), позволяющее установить параметры соответствующего сервера-издателя. Как показано на рис. 12-4, до-ступными являются следующие параметры. : Agent Connection Mode (Режим соединения агента) Дистрибьюторы исполь-зуют для выполнения задач репликации SQL Server Agent (Агент SQL Server), который должен быть настроен для автоматического запуска. По умолчанию 
364 Часть III Управление данными в Microsoft SQL Server 2005 агенты репликации подключаются к издателям, используя учетную запись SQL Server Agent (Агент SQL Server). Такая возможность определяется выбором значения Impersonate the agent process account (Олицетворять учетную запись процесса агента) в раскрывающемся списке Agent Connection Mode (Режим соединения агента). Если требуется, чтобы агенты репликации подключались к издателям при помощи конкретной учетной записи, выберите в раскрыва-ющемся списке Agent Connection Mode (Режим соединения агента) значение SQL Server Authentication (Аутентификация SQL Server) и введите в ставшие доступными поля Login (Учетная запись) и Password (Пароль) соответственно учетную запись и пароль, которые будете использовать. : Default Snapshot Folder (Папка моментальных снимков по умолчанию) Уста-навливает местоположение папки, используемой для хранения моментальных снимков. Поскольку эта папка размещается на дистрибьюторе, ее расположение может быть разным для каждого издателя, использующего БД распространения. Рис. 12-4. Диалоговое окно Properties (Свойства) 10. Щелкните кнопку Next (Далее). Если в качестве возможного издателя указан уда-ленный сервер, следует задать и подтвердить пароль, который будут использовать издатели для подключения к дистрибьютору. Этот пароль предоставляется при подключении удаленного издателя к дистрибьютору для произведения операций управления репликацией. Пароль должен соответствовать требованиям политики Windows по длине и сложности. Щелкните кнопку Next (Далее). 11. Если нет необходимости немедленно создавать дистрибьютор, а требуется, чтобы мастер сгенерировал сценарий с описанием шагов создания дистрибьютора, который можно будет запустить позже вручную или назначить ему для запуска определенное время, установите флажок Generate a script file with steps to configure distribution (Сгенерировать файл сценария с шагами для настройки дистрибьютора). 12. Щелкните кнопку Next (Далее), затем кнопку Finish (Готово). Мастер настроит дистрибьютор или сгенерирует сценарий согласно указанным параметрам. Успеш-
Реализация репликации моментальных снимков Глава 12 365 ное или неуспешное завершение каждого действия будет отображено на заверша-ющей странице Configuring. (Настройка.). Если действие завершилось неудачно, активизируйте предоставленную ссылку, чтобы отобразить подробные сведения об ошибке. Щелкните кнопку Close (Закрыть). При назначении сервера в качестве дистрибьютора на нем производится множе-ство изменений. Появляется новая системная база данных - БД распространения, могут быть созданы дополнительные задания, оповещения и прокси, а также другие обновления. Кроме того, становится доступной утилита Replication Monitor (Монитор репликации). Работа с ней в SQL Server описана в главе 13. После этого настройте публикации и подписки, как объясняется дальше, в разделах "Разрешение использования и изменения конфигурации издателей", "Разрешение использования БД публикаций" и "Создание подписок". Изменение конфигурации дистрибьютора При настройке нового дистрибьютора создается и новая база данных распространения, как описано выше, в разделе "Настройка нового дистрибьютора". Если дистрибьютор уже настроен, можно изменить его конфигурацию и создать дополнительные БД рас-пространения. Для этого выполните указанные действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Replication (Репликация) выберите команду Distributor Properties (Свойства дистрибьютора). Откроется одноименное диалоговое окно, показанное на рис. 12-5. Рис. 12-5. Диалоговое окно Distributor Properties
366 Часть III Управление данными в Microsoft SQL Server 2005 3. Используйте элементы управления этого окна, чтобы изменить некоторые свойства дистрибьютора, выбранного в данный момент. Для этого отобразите две страницы параметров. General (Общие) Настройка БД распространения, профилей агентов, а также установка параметров, определяющих время сохранности данных репликации и организацию очередей. Publishers (Издатели) Разрешение и запрещение для дистрибьютора ис-пользования издателей, установка свойств издателя и настройка паролей для административных соединений. 4. На странице General (Общие) в списке Databases (Базы данных) показаны текущие БД распространения и их параметры, задающие время сохранности транзакций и истории сеансов репликации. По умолчанию новые БД распространения хранят транзакции до тех пор, пока они нужны (для этого параметру времени сохранности следует задать значение 0), но не больше 72 часов, и сохраняют данные истории выполнения репликации не менее 48 часов. 5. Чтобы просмотреть текущее расположение базы данных и файлов журналов тран-закций для выбранной БД распространения или изменить время сохранности, щелкните кнопку с многоточием (...) в третьем столбце справа от имени базы данных. Отобразится диалоговое окно Distribution Database Properties (Свойства базы данных распространения), показанное на рис. 12-6. Используйте предостав-ленные поля и переключатели для управления параметрами времени сохранности. По завершении щелкните кнопку OK для применения изменений. Рис. 12-6. Диалоговое окно Distributor Database Properties 6. На странице Publishers (Издатели) в списке Publishers (Издатели) отображаются текущие издатели для этого дистрибьютора, а также базы данных распространения, которые они используют. Флажок возле имени издателя показывает, что разреша-ется его использование. 7. Щелкните кнопку OK для закрытия окна и применения любых изменений.
Реализация репликации моментальных снимков Глава 12 367 Создание БД распространения В базах данных распространения хранится информация, предназначенная для от-правления подписчикам. Каждому издателю, использующему дистрибьюторы, на-значается БД распространения, к которой он может подключиться. Издатели могут использовать базы данных распространения совместно, а при необходимости создать дополнительные БД. Если дистрибьютор уже настроен, для создания дополнительных баз данных распространения выполните указанные дальше действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, который следует использовать и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Replication (Репликация) выберите команду Distributor Properties (Свойства дистрибьютора). Откроется одноименное диалоговое окно, показанное ранее, на рис. 12-5. 3. На странице General (Общие) щелкните кнопку New (Создать). Отобразится диа-логовое окно New Distribution Database (Новая база данных распространения). Теперь можно настроить БД распространения. 4. В поле Name (Имя) введите ее имя, в поле Folder for database file (Папка для файла базы данных) - полный путь к папке для файла БД и в поле Folder for log file (Пап-ка для файла журнала транзакций) - полный путь к папке для файла журнала транзакций. Нельзя использовать подключенные сетевые диски. 5. С помощью элементов управления в разделах Transaction Retention (Время со-хранности транзакций) и History Retention (Время сохранности истории) задайте время сохранения транзакций и истории выполнения репликации для БД распро-странения. 6. Щелкните последовательно кнопки OK в диалоговых окнах New Distribution Database (Новая база данных распространения) и Distributor Properties (Свойства дистрибьютора), чтобы создать базу данных распространения. Созданную БД распространения можно назначить любым новым издателям, ко-торые будут сконфигурированы. Разрешение использования и изменения конфигурации издателей Дистрибьюторы могут работать только с серверами и базами данных, которые раз-решены для использования. Чтобы получить такое разрешение, нужно создать новый дистрибьютор либо выполнить указанную ниже последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, который следует использовать, затем раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Replication (Репликация) выберите команду Distributor Properties (Свойства дистрибьютора). 3. В открывшемся диалоговом окне выберите страницу Publishers (Издатели). В спи-ске Publishers (Издатели) установите или снимите флажки возле имен серверов для разрешения или запрещения использования издателей. Отображаются только зарегистрированные издатели. Если требуется добавить сервер, который, будучи настроен в качестве издателя, имел бы возможность использовать этот дистри-бьютор, щелкните кнопку Add (Добавить). Отобразится меню кнопки, в котором можно следующее. : Выбрать команду Add SQL Server Publisher (Добавить издателя SQL Server), чтобы настроить соединение к SQL Server, используя диалоговое окно Connect 
368 Часть III Управление данными в Microsoft SQL Server 2005 to Server (Подключиться к серверу). Зарегистрированные серверы приведены в раскрывающемся списке Server name (Имя сервера). Чтобы произвести по-иск других серверов, выберите в раскрывающемся списке элемент <Browse for more>. Предлагаемым по умолчанию типом аутентификации является Windows Authentication (Аутентификация Windows), которая использует текущую учет-ную запись и пароль. Щелкните кнопку Connect (Подключиться). : Выбрать команду Add Oracle Publisher (Добавить издателя Oracle) для на-стройки соединения к серверу Oracle с помощью диалогового окна Connect to Server (Подключиться к серверу). Зарегистрированные серверы приведены в раскрывающемся списке Server instance (Экземпляр сервера); также можно произвести поиск других серверов, выбрав в раскрывающемся списке элемент <Browse for more>. Предлагаемым по умолчанию типом аутентификации явля-ется Oracle Standard Authentication (Стандартная аутентификация Oracle), для которой требуется ввести учетную запись и пароль пользователя. Щелкните кнопку Connect (Подключиться). Если доступно более одной БД распростра-нения, поле Distribution Database (База данных распространения) будет иметь раскрывающийся список, позволяющий выбрать необходимую базу данных. 4. Крайний справа столбец в списке зарегистрированных издателей содержит кнопки с многоточием (...). Щелкните одну из них, чтобы установить параметры издателя для связанного сервера. Доступны будут два параметра. : Agent Connection Mode (Режим соединения агента) Дистрибьюторы исполь-зуют для выполнения задач репликации SQL Server Agent (Агент SQL Server), который должен быть настроен для автоматического запуска. По умолчанию агенты репликации подключаются к издателям, используя учетную запись SQL Server Agent (Агент SQL Server). Такая возможность определяется выбором значения Impersonate the agent process account (Олицетворять учетную запись процесса агента) в раскрывающемся списке Agent Connection Mode (Режим соединения агента). Если требуется, чтобы агенты репликации подключались к издателям при помощи конкретной учетной записи, выберите в раскрываю-щемся списке Agent Connection Mode (Режим соединения агента) значение SQL Server Authentication (Аутентификация SQL Server) и введите в ставшие доступными поля Login (Учетная запись) и Password (Пароль) требуемые учет-ную запись и пароль. Этот же пароль можно ввести в поле Password (Пароль), находящееся в разделе Administrative Link Password (Пароль административ-ного соединения). : Agent Connection Mode (Режим соединения агента) Дистрибьюторы исполь-зуют для выполнения задач репликации SQL Server Agent (Агент SQL Server), который должен быть настроен для автоматического запуска. По умолчанию агенты репликации подключаются к издателям, используя учетную запись SQL Server Agent (Агент SQL Server). Такая возможность определяется выбором значения Impersonate the agent process account (Олицетворять учетную запись процесса агента) в раскрывающемся списке Agent Connection Mode (Режим соединения агента). Если требуется, чтобы агенты репликации подключались к издателям при помощи конкретной учетной записи, выберите в раскрываю-щемся списке Agent Connection Mode (Режим соединения агента) значение SQL Server Authentication (Аутентификация SQL Server) и введите в ставшие доступными поля Login (Учетная запись) и Password (Пароль) требуемые учет-ную запись и пароль. Этот же пароль можно ввести в поле Password (Пароль), находящееся в разделе Administrative Link Password (Пароль административ-ного соединения).
Реализация репликации моментальных снимков Глава 12 369 : Default Snapshot Folder (Папка моментальных снимков по умолчанию) Уста-навливает местоположение папки, используемой для хранения моментальных снимков. Папка моментальных снимков размещается на дистрибьюторе, и ее расположение может быть разным для каждого издателя, использующего БД распространения. Разрешение использования БД публикаций После настройки дистрибьюторов и издателей можно разрешить использование баз данных публикаций. Для этого выполните следующее. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, который следует использовать, затем раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Replication (Репликация) выберите команду Publisher Properties (Свойства издателя). Откроется диалоговое окно Publisher Properties (Свойства издателя). 3. Выберите страницу Publication Databases (Базы данных публикаций). Затем в списке Databases (Базы данных) установите флажки возле нужных баз данных. Флажки в столбце Transactional (Транзакции) разрешают использования соответ-ствующей базы данных для репликации транзакций, а флажки в столбце Merge (Сведение) - для репликации сведением. 4. Чтобы разрешить использование БД публикаций для любого типа репликации, установите оба упомянутых флажка. Удаление БД распространения Прежде чем удалить базу данных распространения, необходимо удалить все публи-кации и отключить всех издателей, которые ее используют. После этого выполните перечисленные ниже действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому серверу и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Replication (Репликация) выберите команду Distributor Properties (Свойства дистрибьютора). Откроется диалоговое окно Distributor Properties (Свойства дистрибьютора). 3. На странице General (Общие) в списке Databases (Базы данных) выберите базу данных распространения, которую следует удалить, и щелкните кнопку Delete (Удалить). Это удаляет запись из списка. 4. Чтобы закрыть окно и произвести операцию удаления, щелкните кнопку OK. Отключение публикации и распространения С помощью мастера Disable Publishing and Distribution (Отключение публикации и распространения) в SQL Server Management Studio можно отключить публикацию и распространение данных. При этом: удаляются все публикации на выбранном сер-вере; удаляются все подписки на эти публикации; запрещается использование сервера в качестве дистрибьютора. Чтобы отключить публикацию и распространение, выполните следующую по-следовательность действий. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому серверу и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация).
370 Часть III Управление данными в Microsoft SQL Server 2005 2. В контекстном меню узла Replication (Репликация) выберите команду Disable Publishing and Distribution (Отключить публикацию и распространение). Запу-стится мастер Disable Publishing and Distribution Wizard (Мастер отключения публикации и распространения). 3. Щелкните кнопку Next (Далее), чтобы пропустить стартовую страницу. На стра-нице Disable Publishing (Отключите публикацию) установите переключатель в по-ложение Yes, disable publishing on this server (Да, отключить публикацию на этом сервере). 4. Щелкните кнопку Next (Далее). Просмотрите издателей, которые будут отключены. 5. Щелкните кнопку Next (Далее) еще на двух следующих страницах, затем щелкните кнопку Finish (Готово). Создание публикаций и управление ими После настройки дистрибьютора и разрешения использования издателей, подписчиков и баз данных публикаций можно приступить к созданию самих публикаций. Созданные публикации управляются таким же образом, как и любой другой ресурс SQL Server. Создание публикаций Легче всего создавать публикации, используя SQL Server Management Studio. Для этого выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому серверу и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Local Publications (Локальные публикации) выберите команду New Publication (Создать публикацию). Запустится мастер New Publication Wizard (Мастер создания публикации). Щелкните кнопку Next (Далее), чтобы пропустить стартовую страницу. Примечание Если требуется создать публикацию Oracle, следует выбрать команду New Oracle Publication (Создать публикацию Oracle). Запустится мастер New Oracle Publication Wizard (Мастер создания публикации Oracle), который подобен мастеру New Publication Wizard (Мастер создания публикации). 3. В списке Databases (Базы данных) выберите БД, содержащую данные или объекты, которые следует опубликовать. Можно выбирать только пользовательские базы данных. Щелкните кнопку Next (Далее). 4. В списке Publication type (Тип публикации) укажите тип репликации, необходи-мый для настраиваемой публикации. Существуют такие варианты: Snapshot publication (Публикация репликации моментальных снимков); Transactional publication (Публикация репликации транзакций); Transactional publication with updateable subscriptions (Публикация репликации транзакций с обновляемыми подписками); Merge publication (Публикация репликации сведением). 5. Если создается публикация для репликации моментальных снимков или транзак-ций, используйте дальше последовательность действий, описанную в подразделе "Публикации репликации моментальных снимков и транзакций". 6. При создании публикации для репликации сведением продолжайте выполнять действия, описанные в подразделе "Публикации репликации сведением".
Реализация репликации моментальных снимков Глава 12 371 Публикации репликации моментальных снимков и транзакций Публикации репликации моментальных снимков и транзакций являются наиболее часто используемыми. Работая с ними, издатель периодически заменяет данные под-писчика обновленным моментальным снимком. При использовании публикаций ре-пликации транзакций изменения, вносимые в данные на издателе, посылаются под-писчикам посредством транзакций. После создания новой публикации и выбора для нее типа репликации, как опи-сывалось выше, в разделе "Создание публикаций", публикацию репликации момен-тальных снимков или транзакций можно создать, выполнив следующую последова-тельность действий. 1. Щелкните кнопку Next (Далее), чтобы продолжить. На странице Articles (Статьи), показанной на рис. 12-7, выберите объекты для репликации. В иерархическом списке Objects to publish (Объекты для публикации) отображены объекты и их типы, доступные для репликации. Щелкните значок плюс (+) рядом с именем узла, соответствующего типу объектов, чтобы показать список доступных объектов указанного типа. Рис. 12-7. Страница Articles мастера New Publication Wizard 2. Установите флажок рядом с именем таблицы или представления для выбора всех столбцов. Набор доступных объектов зависит от типов объектов, хранящихся в базе данных, и может включать таблицы, хранимые процедуры, пользовательские функции и представления. Таблицы, не имеющие первичных ключей, не могут быть опубликованы для репликации транзакций, поэтому рядом с именем таких таблиц будет отображен значок перечеркнутого красного кружка. Кроме этого, следует помнить, что таблицы, на которые ссылаются представления, должны существовать на подписчике. Если они не включаются в публикацию, их нужно создать вручную.
372 Часть III Управление данными в Microsoft SQL Server 2005 3. Чтобы выбрать индивидуальные столбцы в таблице или представлении, раскройте соответствующий узел и установите флажки рядом с нужными столбцами. Имей-те, однако, в виду, что при использовании репликации транзакций в публикацию должны быть включены столбцы первичных ключей (отмечены в списке значком ключа с зеленой звездочкой в белом кружке). Если снять флажок рядом с именем столбца, соответствующий столбец не будет реплицирован (в предыдущих версиях это называлось вертикальной фильтрацией таблицы). 4. Для каждого выбранного объекта (статьи) устанавливаются свойства по умолча-нию, включая имя объекта назначения и содержащую его схему; действие, которое нужно выполнить, если объект существует; а также указание, следует ли копи-ровать пользовательские триггеры и расширенные свойства. Можно установить глобальные значения по умолчанию, значения по умолчанию для индивидуальной статьи или и то, и другое. : Чтобы установить значения по умолчанию для индивидуальной статьи, выбе-рите ее в иерархическом списке Objects to publish (Объекты для публикации) и щелкните кнопку Article Properties (Свойства статьи). В меню кнопки вы-берите команду Set Properties of Highlighted type_of_object Article (Установить свойства выделенной статьи типа type_of_object). Подробное описание свойств дано далее, в разделе "Установка свойств публикации". : Чтобы установить значения по умолчанию для всех статей определенного типа, выберите тип объекта (высший уровень иерархии) в иерархическом списке Objects to publish (Объекты для публикации) и щелкните кнопку Article Properties (Свойства статьи). В меню кнопки выберите команду Set Properties of All type_of_object Articles (Установить свойства всех статей типа type_of_object). Подробнее об этом см. раздел "Установка свойств публикации". 5. Выбрав объекты для включения в публикацию, щелкните кнопку Next (Далее). При возникновении проблем относительно внесения изменений в публикацию отобразится окно мастера, подобное показанному на рис. 12-8. Найдите в нем опи-сание вашей проблемы и предлагаемое решение, после чего внесите необходимые изменения. Ниже приведены наиболее часто встречающиеся проблемы и способы их решения. : Таблицы и объекты, на которые ссылаются представления и хранимые про-цедуры соответственно, должны существовать. Если они не были включены в публикацию, их необходимо создать на подписчике вручную. : SQL Server добавляет столбец типа uniqueidentifier во все выбранные для ре-пликации таблицы. Это приводит к тому, что выполнение инструкций INSERT, в которых не указан явно список столбцов, завершается неудачно; кроме того, увеличивается время создания первоначального моментального снимка. : Для столбцов с установленным свойством IDENTITY следует задать параметр NOT FOR REPLICATION, в противном случае инструкции INSERT могут реплицироваться некорректно. 6. Щелкните кнопку Next (Далее). Используйте страницу Filter Table Rows (Опреде-лите фильтр для строк таблицы), чтобы исключить ненужные строки из публи-куемых таблиц. Таблицы, для которых определен фильтр, добавляются в список Filtered Tables (Таблицы с установленным фильтром). После выбора фильтра в поле Filter (Фильтр) внизу страницы выводится соответствующее предложение WHERE. Для определения нового фильтра щелкните кнопку Add (Добавить). Ото-бразится диалоговое окно Add Filter (Добавить фильтр), показанное на рис. 12-9. По умолчанию в публикацию включаются все строки. Чтобы наложить фильтр, 
Реализация репликации моментальных снимков Глава 12 373 в раскрывающемся списке Select the table to filter (Выберите таблицу для наложе-ния фильтра) выберите таблицу, которую следует отфильтровать, и затем создайте инструкцию фильтра, определяющую, какие строки будут отправлены подписчику; для этого в поле Filter statement (Инструкция фильтра) допишите предложение WHERE для соответствующей инструкции SELECT <published_columns> FROM table_name. Рис. 12-8. Диалоговое окно Article Issues Рис. 12-9. Диалоговое окно Add Filter
374 Часть III Управление данными в Microsoft SQL Server 2005 7. Щелкните кнопку Next (Далее). Snapshot Agent (Агент моментальных снимков) инициализирует подписки, создавая моментальный снимок схемы и данных пу-бликации, который можно передать подписчикам принудительно или по их тре-бованию. Чтобы создать моментальный снимок немедленно, установите флажок Create a snapshot immediately and keep the snapshot available to initialize subscribers (Создать моментальный снимок немедленно и сделать его доступным для иници-ализации подписчиков). Если требуется, чтобы Snapshot Agent (Агент моменталь-ных снимков) создавал моментальные снимки периодически, установите флажок Schedule the Snapshot Agent to run at the following times (Назначить расписание Snapshot Agent для запуска в следующее время). По умолчанию моментальные снимки создаются каждый день раз в час. Чтобы изменить это расписание, щел-кните кнопку Change (Изменить). 8. Щелкните кнопку Next (Далее). На странице Agent Security (Параметры безопас-ности агентов) укажите учетную запись для запуска каждого агента, используемого в репликации. Задать параметры безопасности можно для Snapshot Agent (Агент моментальных снимков), Log Reader Agent (Агент чтения журналов) и Queue Reader Agent (Агент чтения очередей). Чтобы настроить учетную запись для Snapshot Agent (Агент моментальных снимков), щелкните кнопку Security Settings (Параметры безопасности) справа от поля Snapshot Agent (Агент моментальных снимков). Отобразится диалоговое окно Snapshot Agent Security (Параметры без-опасности Snapshot Agent), в котором укажите следующее. : Учетную запись Windows, под которой агент запускается на дистрибьюторе. Она называется учетной записью процесса и вводится в поле Process account (Учетная запись процесса). Учетная запись должна быть членом встроенной роли БД db_owner в базе данных распространения и иметь разрешение на за-пись в общем каталоге, где создаются моментальные снимки. Имена учетных записей домена вводятся в виде domain_name\account_name, например cpandl\ sqlserver. Затем введите и подтвердите пароль учетной записи. : Нужно ли агенту подключаться к издателю посредством олицетворения учет-ной записи, указанной в поле Process Account (Учетная запись процесса), или используя заданную учетную запись SQL Server. Если выбрано последнее, вве-дите учетную запись SQL Server и пароль. Рекомендуемой практикой является олицетворение учетной записи Windows, а не использование учетной записи SQL Server. 9. Log Reader Agent (Агент чтения журналов) используется с обновляемыми и не обновляемыми публикациями репликации транзакций. По умолчанию Log Reader Agent (Агент чтения журналов) использует ту же учетную запись, что и Snapshot Agent (Агент моментальных снимков). Чтобы установить отдельные параметры безопасности для Log Reader Agent (Агент чтения журналов), снимите флажок Use the security settings from the Snapshot Agent (Использовать параметры безопас-ности Snapshot Agent) и щелкните кнопку Security Settings (Параметры безопас-ности) справа от поля Log Reader Agent (Агент чтения журналов). Затем можно указать учетную запись процесса и способы подключения к издателю аналогично описанному выше. 10. Queue Reader Agent (Агент чтения очереди) используется с обновляемыми пу-бликациями репликации транзакций. По умолчанию Queue Reader Agent (Агент чтения очереди) имеет отдельный от других агентов контекст безопасности. Что-бы настроить безопасность, щелкните соответствующую кнопку Security Settings (Параметры безопасности) и укажите учетную запись процесса.
Реализация репликации моментальных снимков Глава 12 375 11. Щелкните кнопку Next (Далее). Выберите действие мастера для завершения ра-боты. По умолчанию мастер создает публикацию. Можно также сгенерировать файл сценария с последовательностью действий для создания публикации. Если требуется только сгенерировать сценарий, снимите флажок Create the publication (Создать публикацию) и установите флажок Generate a script file with steps to create the publication (Сгенерировать файл сценария с шагами для создания публикации). Щелкните кнопку Next (Далее). 12. На странице Complete the Wizard (Завершить работу мастера) в поле Publication name (Имя публикации) введите имя публикации и щелкните кнопку Finish (Го-тово). Будет отображено диалоговое окно, показывающее ход процесса создания. При возникновении ошибок необходимо решить все проблемы, прежде чем про-должить, или перезапустить процесс определения публикации. Публикации репликации сведением После создания новой публикации и выбора для нее типа репликации (см. раздел "Создание публикаций") можно приступить к созданию публикации репликации сведением. Для этого повторите указанные ниже действия. 1. Щелкните кнопку Next (Далее), чтобы продолжить. На странице Subscriber Types (Типы подписчиков) выберите установкой соответствующих флажков типы под-писчиков на публикацию. Ниже указано, какие возможности вы будете иметь при использовании того или иного типа подписчика. SQL Server 2005 Файлы моментальных снимков создаются, используя соб-ственный формат SQL Server. SQL Server 2005 Mobile Edition Моментальные снимки создаются в символь-ном формате. SQL Server 2000 Не поддерживаются логические записи и репликация из-менений, вносимых при помощи языка определения данных, а также некоторые способы оптимизации фильтра. SQL Server for Windows CE Моментальные снимки создаются в символьном формате. Кроме того, не поддерживаются логические записи и репликация из-менений, вносимых при помощи языка определения данных, а также некоторые способы оптимизации фильтра. 2. Щелкните кнопку Next (Далее), чтобы продолжить. На странице Articles (Статьи), показанной ранее на рис. 12-7, выберите объекты для репликации. В иерархическом списке Objects to publish (Объекты для публикации) отображены типы объектов и сами объекты, доступные для репликации. Щелкните значок плюс (+) рядом с именем узла, соответствующего типу объектов, чтобы показать список доступных объектов указанного типа. 3. Для выбора всех столбцов в таблице или представлении установите флажок ря-дом с именем таблицы или представления. Набор доступных объектов зависит от типов объектов, хранящихся в базе данных, и может включать таблицы, хранимые процедуры, пользовательские функции и представления. Таблицы, на которые ссылаются представления, должны существовать на подписчике. Если они не включаются в публикацию, их нужно создать вручную. 4. Чтобы выбрать индивидуальные столбцы в таблице или представлении, раскройте соответствующий узел и установите флажки рядом с нужными столбцами. Имей-те, однако, в виду, что в публикацию должны быть включены и первичные клю-чи, и столбцы с установленным свойством ROWGUIDCOL. Столбцы первичных 
376 Часть III Управление данными в Microsoft SQL Server 2005 ключей отмечены в списке значком ключа с зеленой звездочкой в белом кружке. Столбцы с установленным свойством ROWGUIDCOL отмечены значком зеленой звездочки в белом кружке. Если снять флажок рядом с именем столбца, соответ-ствующий столбец не будет реплицирован (в предыдущих версиях это называлось вертикальной фильтрацией таблицы). 5. Далее следует для каждого выбранного объекта (статьи) установить свойства по умолчанию, как это сделано в пункте 4 предыдущего раздела "Публикации репликации моментальных снимков и транзакций". 6. Выбрав объекты для включения в публикацию, щелкните кнопку Next (Далее). Если возникнут проблемы при внесении изменений в публикацию, повторите действия пункта 5 предыдущего раздела. 7. Используйте страницу Filter Table Rows (Определите фильтр для строк таблицы), чтобы исключить ненужные строки из публикуемых таблиц. Таблицы, для которых определен фильтр, добавляются в список Filtered Tables (Таблицы с установлен-ным фильтром). После выбора фильтра в поле Filter (Фильтр) внизу страницы выводится соответствующее предложение WHERE. Фильтры можно определить вручную и затем расширить их применение к другим таблицам, или можно по-пытаться автоматизировать этот процесс. 8. Если требуется определить новый фильтр, сделайте следующее. : Щелкните кнопку Add (Добавить) и в меню кнопки выберите Add Filter (До-бавить фильтр). Отобразится диалоговое окно Add Filter (Добавить фильтр). По умолчанию в публикацию включаются все строки. Чтобы установить фильтр, в раскрывающемся списке Select the table to filter (Выберите таблицу для на-ложения фильтра) выберите таблицу, которую следует отфильтровать, и затем создайте инструкцию фильтра, определяющую, какие строки будут отправлены подписчику; для этого в поле Filter statement (Инструкция фильтра) допишите предложение WHERE для соответствующей инструкции SELECT <published_columns> FROM table_name. : Укажите, сколько подписчиков будут получать данные из этой таблицы: один или больше. Публикации сведением используют статичные или параметризованные фильтры. В случае статичных фильтров все подписчики публикации получают одинаковые данные. Параметризованные фильтры применяются во время синхро-низации БД, поэтому разные подписчики могут получать разные части данных, в зависимости от учетной записи или имени компьютера подписчика. 9. После определения фильтра можно расширить фильтрацию на связанную таблицу, определив соединение таблиц. Для этого создайте фильтр для таблицы, как опи-сано в предыдущем пункте, затем щелкните кнопку Add (Добавить) и в ее меню выберите команду Add Join to Extend the Selected Filter (Добавить соединение для расширения выбранного фильтра). Отобразится диалоговое окно Add Join (Добавить соединение), показанное на рис. 12-10. Здесь вы можете сделать следующее. : Выбрать соединенную таблицу из раскрывающегося списка Joined table (Со-единенная таблица) и затем определить предложение INNER JOIN, написав его вручную или используя конструктор. : Указать параметры соединения. Если между строками таблиц существует отно-шение "один-к-одному" или "один-ко-многим", установите флажок Unique Key (Уникальный ключ). Если строки в связанной таблице не соотносятся строго с одной строкой фильтрованной таблицы, снимите флажок Unique key (Уни-кальный ключ). Дополнительно, когда требуется, чтобы изменения связанных 
Реализация репликации моментальных снимков Глава 12 377 строк обрабатывались как одна логическая запись (при работе с уникальным ключом), установите флажок Logical record (Логическая запись). Рис. 12-10. Диалоговое окно Add Join 10. Альтернативой определению фильтров вручную является автоматическое гене-рирование фильтров. Щелкните кнопку Add (Добавить) и в ее меню выберите команду Automatically Generate Filters (Сгенерировать фильтры автоматически). В диалоговом окне Generate Filters (Генерирование фильтров) необходимо опреде-лить новый фильтр, как описано ранее. Затем SQL Server применит определенные отношения между таблицами, чтобы добавить соединения, расширяющие фильтр на другие таблицы. 11. Щелкните кнопку Next (Далее). Snapshot Agent (Агент моментальных снимков) инициализирует подписки, создавая моментальный снимок схемы и данных пу-бликации, который можно передать подписчикам принудительно или по их тре-бованию. Чтобы создать моментальный снимок немедленно, установите флажок Create a snapshot immediately and keep the snapshot available to initialize subscribers (Создать моментальный снимок немедленно и сделать его доступным для иници-ализации подписчиков). Если требуется, чтобы Snapshot Agent (Агент моменталь-ных снимков) создавал моментальные снимки периодически, установите флажок Schedule the Snapshot Agent to run at the following times (Назначить расписание Snapshot Agent для запуска в следующее время). По умолчанию моментальные снимки создаются раз в две недели. Чтобы изменить это расписание, щелкните кнопку Change (Изменить). 12. Щелкните кнопку Next (Далее). Настройте учетную запись для Snapshot Agent (Агент моментальных снимков). Для этого щелкните соответствующую кнопку 
378 Часть III Управление данными в Microsoft SQL Server 2005 Security Settings (Параметры безопасности). Отобразится диалоговое окно Snapshot Agent Security (Параметры безопасности Snapshot Agent). 13. Укажите учетную запись Windows, под которой агент запускается на дистрибью-торе. Она называется учетной записью процесса и вводится в поле Process account (Учетная запись процесса). Учетная запись должна быть членом встроенной роли БД db_owner в базе данных распространения и иметь разрешение на запись в общем каталоге, где создаются моментальные снимки. Имена учетных записей домена вводятся в виде domain_name\account_name, например cpandl\sqlserver. Затем задайте и подтвердите пароль учетной записи. 14. Укажите, следует ли агенту подключаться к издателю посредством олицетворения учетной записи, указанной в поле Process Account (Учетная запись процесса), или используя заданную учетную запись SQL Server. Если выбрано последнее, введите учетную запись SQL Server и пароль. Рекомендуемой практикой является олице-творение учетной записи Windows, а не использование учетной записи SQL Server. Щелкните кнопку OK, чтобы закрыть диалоговое окно Snapshot Agent Security (Параметры безопасности Snapshot Agent). 15. Щелкните кнопку Next (Далее). Выберите действие мастера для завершения ра-боты. По умолчанию мастер создает публикацию. Можно также сгенерировать файл сценария с последовательностью действий для создания публикации. Если требуется только сгенерировать сценарий, снимите флажок Create the publication (Создать публикацию) и установите флажок Generate a script file with steps to create the publication (Сгенерировать файл сценария с шагами для создания публикации). Щелкните кнопку Next (Далее). 16. На странице Complete the Wizard (Завершить работу мастера) в поле Publication name (Имя публикации) введите имя публикации и щелкните кнопку Finish (Го-тово). Будет отображено диалоговое окно, показывающее ход процесса создания. При возникновении ошибок, их необходимо решить прежде, чем продолжать далее, или перезапустить процесс определения публикации. Просмотр публикаций и обновление их параметров Свойства публикации можно просмотреть или изменить в любое время. Для этого выполните следующую последовательность действий: 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к требуемому серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Раскройте узел Local Publications (Локальные публикации), чтобы отобразить список публикаций для реплицированной базы данных. Значок, связанный с пу-бликацией, показывает следующий тип репликации. Репликация моментальных снимков Значок - фиолетовая книга с синим кружком. Репликация транзакций Значок - синяя книга с зеленой стрелкой, показы-вающей вправо. Репликация сведением Значок - желтая книга с зеленой стрелкой, направ-ленной вправо, и синей стрелкой, указывающей влево. 3. В контекстном меню публикации, выбранной для изменения, щелкните команду Properties (Свойства). Отобразится диалоговое окно Publication Properties (Свой-ства публикации). 4. Настройте все параметры публикации (см. выше раздел "Создание публикаций").
Реализация репликации моментальных снимков Глава 12 379 Установка свойств публикации Свойства публикации управляют поведением репликации. Их можно изменить в лю-бое время. Для редактирования свойств существующей публикации выполните пред-лагаемые действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Чтобы увидеть список публикаций для реплицированной базы данных, раскройте узел Local Publications (Локальные публикации), 3. В контекстном меню публикации, выбранной для изменения, щелкните команду Properties (Свойства). 4. Отобразится диалоговое окно Publication Properties (Свойства публикации). До-ступные свойства публикации зависят от типа репликации. Используйте одну или более указанных ниже страниц, чтобы сделать следующее. : General (Общие) Настроить основные параметры (доступно для всех типов репликации). Просмотреть имя и описание публикации, имя исходной БД и тип используемой репликации. Задать срок действия подписок (по умолчанию он не ограничен) в часах. : Articles (Статьи) Просмотреть и настроить опубликованные статьи. : Filter Rows (Фильтры строк) Просмотреть и далее работать с фильтра-ми строк. : Snapshot (Моментальный снимок) Установить параметры для моментальных снимков, используемых со всеми типами репликации. Задать параметры, кон-тролирующие формат моментального снимка. Для этого следует установить переключатель в соответствующее положение: Native SQL Server (Внутрен-ний формат SQL Server) либо Character (Символьный). Внутренний формат может быть применен, только если все подписчики используют SQL Server. Символьный формат требуется, когда издатель или подписчик не используют SQL Server. Также можно указать, куда сохранять файлы моментальных сним-ков и дополнительные сценарии, которые следует использовать до или после применения моментального снимка. : FTP Snapshot (Моментальный снимок посредством FTP) Скачать файлы моментальных снимков с помощью протокола FTP. Если его использование разрешено, файлы моментальных снимков по умолчанию помещаются в кор-невую папку FTP и для подключения применяется учетная запись anonymous. Можно указать альтернативный путь, заданный относительно корневого ката-лога, а также предоставить учетную запись и пароль. : Subscription Options (Параметры подписки) Настроить параметры для раз-решения или запрещения анонимных подписчиков, присоединяемых БД подпи-ски, подписок с принудительной репликацией, подписчиков, не использующих SQL Server, а также для разрешения или запрещения репликации изменений схемы. По умолчанию анонимные подписчики, подписки с принудительной репликацией и репликация изменений схемы разрешены. : Publication Access List (Список доступа к публикации) Проконтролировать доступ к публикации. По умолчанию к публикации могут получить доступ только учетная запись sa, локальные администраторы, владелец БД, учетные записи процесса и учетная запись distributor_admin.
380 Часть III Управление данными в Microsoft SQL Server 2005 : Agent Security (Параметры безопасности агентов) Просмотреть или изме-нить учетную запись процесса для агентов, используемых публикацией. Установка параметров безопасности агентов и учетных записей процесса Все публикации используют один или несколько агентов репликации, таких как Snapshot Agent (Агент моментальных снимков), Log Reader Agent (Агент чтения жур-налов) и Queue Reader Agent (Агент чтения очереди). Агент моментальных снимков используется со всеми типами публикации, агент чтения журналов - с обновляемыми и необновляемыми подписчиками репликации транзакций; по умолчанию оба агента используют одну и ту же учетную запись. Агент чтения очереди используется с об-новляемыми подписчиками репликации транзакций и по умолчанию имеет контекст безопасности, отличный от других агентов. Если параметры безопасности агентов не настроены должным образом, репликация закончится неудачно. Поэтому выполните указанные ниже действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Чтобы отобразить список публикаций для реплицированной БД, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню публикации, выбранной для изменения, щелкните команду Properties (Свойства). 4. Отобразится диалоговое окно Publication Properties (Свойства публикации). Вы-берите страницу Agent Security (Параметры безопасности агентов). 5. Чтобы настроить учетную запись для агента моментальных снимков или агента чтения журналов, щелкните соответствующую кнопку Security Settings (Параме-тры безопасности) и затем укажите следующее. : Учетную запись Windows, называемую учетной записью процесса, под которой запускается агент на подписчике или дистрибьюторе. Имена учетных запи-сей домена следует вводить в формате domain_name\account_name, например cpandl\sqlserver. Затем введите и подтвердите пароль учетной записи. : Каким способом агент должен подключаться к издателю: посредством олице-творения учетной записи, указанной в поле Process Account (Учетная запись процесса), или с помощью заданной учетной записи SQL Server. Если выбрано последнее, введите учетную запись SQL Server и пароль. Рекомендуемой прак-тикой является олицетворение учетной записи Windows, а не использование учетной записи SQL Server. 6. Чтобы настроить безопасность для Queue Reader Agent (Агент чтения очере-ди), используемого при репликации транзакций с обновляемыми подписчиками, щелкните соответствующую кнопку Security Settings (Параметры безопасности) и затем задайте учетную запись процесса. Контроль доступа подписчиков к публикации Все публикации имеют списки контроля доступа, определяющие, какие учетные за-писи используются подписчиками немедленного обновления или при репликации по запросу для доступа к публикации. По умолчанию только учетная запись sa, ло-кальные администраторы, владелец БД, учетные записи процесса и учетная запись distributor_admin имеют доступ к данным публикации.
Реализация репликации моментальных снимков Глава 12 381 Чтобы добавить или удалить пользователей репликации, выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Чтобы отобразить список публикаций для реплицированной БД, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню публикации, выбранной для изменения, щелкните команду Properties (Свойства). 4. Отобразится диалоговое окно Publication Properties (Свойства публикации). Выбе-рите страницу Publication Access List (Список доступа к публикации). Используйте предоставляемые элементы управления для добавления или удаления учетных записей. Создание сценария для публикации Для того чтобы создать сценарий для публикации, выполните предложенные ниже действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Чтобы отобразить список публикаций для реплицированной БД, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню публикации, выбранной для редактирования, щелкните ко-манду Generate Scripts (Сгенерировать сценарии). 4. В диалоговом окне Generate SQL Script (Сгенерировать сценарий SQL) укажите тип генерируемого сценария. Обычно переключатель устанавливается в положе-ние To create or enable the components (Создать компоненты или разрешить их использование), а не To drop or disable the components (Удалить компоненты или запретить их использование). 5. Для выполнения необходимых задач сценарий вызовет хранимые процедуры ре-пликации, кроме того, во время выполнения создаются все необходимые задания. Чтобы создать сценарии для заданий и запись о них, установите флажок Replication jobs (Задания репликации). 6. Щелкните кнопку Script to file (Сохранить сценарий в файл). Используйте диа-логовое окно Script File Location (расположение файла сценария), если нужно выбрать расположение для сохранения сценария в файл с расширением .sql, затем щелкните кнопку Save (Сохранить). По умолчанию файл сохраняется в кодировке UNICODE. Впоследствии файл может быть выполнен в окне Query (Запрос) для повторного создания или удаления публикации. 7. Щелкните кнопку Close (Закрыть). Совет Чтобы загрузить сценарии в окно Query (Запрос), щелкните кнопку Open File (Открыть файл) в панели инструментов и выберите расположение файла сценария. Удаление публикации Публикацию после использования можно удалить, чтобы освободить используемые ею ресурсы. Но прежде чем сделать это, советуем создать сценарий, который позволит 
382 Часть III Управление данными в Microsoft SQL Server 2005 воссоздать публикацию автоматически, если она потребуется снова. Теперь публика-цию можно удалить, и для этого выполните следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к нужному серверу, раскройте его узел (если он не раскрыт), а затем узел Replication (Репликация). 2. Чтобы отобразить список публикаций для реплицированной БД, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню публикации, которую следует удалить, выберите команду Delete (Удалить). 4. При отображении запроса на подтверждение действий щелкните кнопку Yes (Да). Подписка на публикацию Последним шагом в процессе настройки репликации является подписка серверов на публикацию. Это можно сделать, используя подписку с принудительной репликацией либо подписку с репликацией по запросу. Основы подписки При использовании подписок с принудительной репликацией за репликацию под-писчикам всех изменений ответственен издатель, подписчики при этом сами не запра-шивают изменения. Обычно подписка с принудительной репликацией используется в случае немедленной отправки изменений подписчикам или необходимости выпол-нения обновлений подписчиков периодически по расписанию. Поскольку инициирует репликацию сам издатель, подписка с принудительной репликацией также предостав-ляет более высокий уровень безопасности, чем подписка с репликацией по запросу. Однако возложение всей ответственности за репликацию на издателя увеличивает для него накладные расходы и не является идеальной моделью подписки для сервера с высокой рабочей нагрузкой. Когда используется подписка с репликацией по запросу, подписчики периодически запрашивают от издателя обновления с измененными данными. Как правило, такая подписка применяется, если имеется большое количество подписчиков или когда требуется снизить рабочую нагрузку на издателя. Она является весьма удобной и для независимых мобильных пользователей. Каждая публикация может поддерживать и подписки с репликацией по запросу, и подписки с принудительной репликацией. Кроме того, существует особый тип подписки с репликацией по запросу - аноним-ная подписка. При ее использовании издатель и дистрибьютор не хранят информацию о подписках. За поддержание и синхронизацию подписки ответственен подписчик, что увеличивает нагрузку на подписчика, но уменьшает нагрузку на издателя и дис-трибьютора. Соответственно анонимные подписки наиболее подходят в случаях, когда имеется большое количество подписчиков или требуется разрешить доступ к публикациям через Интернет. Совет Анонимные подписки создаются тем же способом, что и подписки с репликацией по запросу, - с использованием страницы Subscription Options (Параметры подписки) диалогового окна Publication Properties (Свойства публикации). Чтобы запретить анонимные подписки, задайте значение False параметру Allow anonymous subscriptions (Разрешить анонимные подписки). За синхронизацию и переустановку периода сохранности подписок ответственны агенты распространения и сведения. Если эти агенты не работают, подписки становят-ся несовместимыми с публикациями и отмечаются как деактивированные. Деактиви-
Реализация репликации моментальных снимков Глава 12 383 рованной является подписка, которая превысила период сохранности, определенный для публикации. Такие подписки не получают обновления во время синхронизации. Чтобы разрешить использование снова, необходимо пометить их для повторной ини-циализации. Если этого не сделать до окончания срока хранения, они будут удале-ны заданием Expired Subscription Clean Up (Очистка подписок с истекшим сроком хранения). Создание подписок Основное отличие подписок с принудительной репликацией и репликацией по за-просу состоит в способе их инициализации. Первые инициализирует дистрибьютор, вторые - сам подписчик. Для настройки подписок с репликацией по запросу выпол-ните представленные ниже действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, который будет выступать в качестве подписчи-ка, и раскройте его узел (если он не раскрыт), чтобы отобразить узел Replication (Репликация). 2. В контекстном меню узла Local Subscriptions (Локальные подписки) выберите команду New Subscriptions (Создание подписки). Запустится мастер New Subscription Wizard (Мастер создания подписки). 3. Щелкните кнопку Next (Далее). Для указания, где следует искать публикацию, используйте страницу Publication (Публикация), показанную на рис. 12-11. В рас-крывающемся списке Publisher (Издатель) выберите зарегистрированный сервер, либо элемент списка <Find SQL Server Publisher> (Найти издателя SQL Server) или <Find Oracle Publisher> (Найти издателя Oracle) для поиска других издателей. Рис 12-11. Страница Publication мастера New Subscription Wizard 4. После выбора сервера в списке Databases and publications (Базы данных и публика-ции) можно просмотреть доступные на сервере публикации. Укажите публикацию, на которую следует подписаться, и щелкните кнопку Next (Далее).
384 Часть III Управление данными в Microsoft SQL Server 2005 5. Выберите, где будет запускаться агент распространения или агенты, используемые этой публикацией. Когда нужно, чтобы они запускались на дистрибьюторе, то есть создать подписку с принудительной репликацией, установите переключатель в по-ложение Run all agents at the Distributor (Запускать агентов на дистрибьюторе). Если же вы хотите, чтобы агенты запускались на каждом подписчике, то есть соз-дать подписку с репликацией по запросу, установите переключатель в положение Run each agent at its Subscriber (Запускать агентов на подписчиках). 6. Щелкните кнопку Next (Далее). На странице Subscribers (Подписчики), показан-ной на рис. 12-12, выберите один или несколько подписчиков для публикации. Рис. 12-12. Страница Subscribers мастера New Subscription Wizard 7. Если при использовании репликации сведением или репликации транзакций с об-новляемыми подписчиками, сервер, который должен выступить в качестве под-писчика, не приведен в списке Subscribers and subscription databases (Подписчики и базы данных подписки), щелкните кнопку Add SQL Server Subscriber (Добавить подписчика SQL Server). Затем настройте соединение с SQL Server при помощи диалогового окна Connect to Server (Подключиться к серверу). 8. Также и в случае репликации моментальных снимков или репликации транзак-ций с необновляемыми подписчиками, если сервер не выводится в указанном списке, щелкните кнопку Add Subscriber (Добавить подписчика)*. Далее сделайте следующее. : В меню кнопки выберите команду Add SQL Server Subscriber (Добавить под-писчика SQL Server), чтобы настроить соединение с SQL Server при помощи диалогового окна Connect to Server (Подключиться к серверу). Зарегистриро-ванные серверы приведены в раскрывающемся списке Server name (Имя серве-* В зависимости от типа репликации и некоторых других условий может отображаться либо кнопка Add SQL Server Subscriber (Добавить подписчика SQL Server), либо кнопка Add Subscriber (Добавить подписчика). При щелчке на последней отображается не диалоговое окно, а меню из нескольких команд. - Прим. ред.
Реализация репликации моментальных снимков Глава 12 385 ра), кроме того, можно произвести поиск других. Предлагаемый по умолчанию тип аутентификации - Windows Authentication (Аутентификация Windows), которая использует текущую учетную запись и пароль. Щелкните кнопку Connect (Подключиться). После подключения сервер будет добавлен в список Subscribers and subscription databases (Подписчики и базы данных подписки) на странице Subscribers (Подписчики). В столбце Subscription Database (База данных подписки) укажите БД назначения, в которой следует создать подписку, или выберите в связанном с ячейкой раскрывающемся списке элемент <New database> (Создать базу данных), чтобы создать новую БД для подписки. : В меню кнопки выберите команду Add Non-SQL Subscriber (Добавить подпис-чика, не использующего SQL), чтобы настроить соединение к серверу Oracle или IBM DB2. Отобразится диалоговое окно Add Non-SQL Server Subscriber (Добавить подписчика, не использующего SQL). В поле Data source name (Имя источника данных) введите имя источника данных, который может быть ис-пользован для поиска БД в сети. SQL Server сгенерирует строку соединения для БД, используя имя источника данных вместе с учетной записью, паролем и другими параметрами соединения, указанными на странице Distribution Agent Security (Параметры безопасности агента распространения). Имя источника данных и строка соединения не проверяются, пока агент распространения не попытается инициализировать подписку. Щелкните кнопку OK. БД подписки устанавливается в качестве места назначения по умолчанию - это БД, которая была указана в поле источника данных. 9. Щелкните кнопку Next (Далее). На странице Distribution Agent Security (Параме-тры безопасности агента распространения), показанной на рис. 12-13, установите учетную запись процесса и параметры соединения для каждого подписчика (для подписок с репликацией по запросу) или для дистрибьютора (для подписок с при-нудительной репликацией), щелкнув соответствующую кнопку с многоточием (...). Рис. 12-13. Страница Distribution Agent Security мастера New Subscription Wizard
386 Часть III Управление данными в Microsoft SQL Server 2005 В открывшемся диалоговом окне Distribution Agent Security (Параметры безопас-ности агента распространения) можно указать следующее. : Учетную запись Windows, называемую учетной записью процесса, под которой запускается агент на подписчике или дистрибьюторе. Имена учетных записей до-мена следует вводить в формате domain_name\account_name, например cpandl\ sqlserver. Затем введите и подтвердите пароль учетной записи. Учетная запись должна быть включена в Publication Access List (Список доступа к публикации). Совет Чтобы просмотреть или изменить список доступа, в панели Object Explorer (Обо-зреватель объектов) раскройте узел Local Publications (Локальные публикации) сервера-издателя и в контекстном меню публикации выберите команду Properties (Свойства). Отобразится диалоговое окно Publication Properties (Свойства публикации), в котором откройте страницу Publication Access List (Список доступа к публикации). : Каким способом агент должен подключаться к дистрибьютору: посредством олицетворения учетной записи, указанной в поле Process Account (Учетная запись процесса), или с помощью заданной учетной записи SQL Server. Если выбрано последнее, введите учетную запись SQL Server и пароль. Рекомен-дуемой практикой является олицетворение учетной записи Windows, а не ис-пользование учетной записи SQL Server. Учетная запись должна быть включена в Publication Access List (Список доступа к публикациям). : Каким способом агент должен подключаться к подписчику: посредством олице-творения учетной записи, указанной в поле Process Account (Учетная запись процесса), или с помощью заданной учетной записи SQL Server. Если выбрано последнее, введите учетную запись SQL Server и пароль. Рекомендуемой прак-тикой является олицетворение учетной записи Windows, а не использование учетной записи SQL Server. Учетная запись должна быть владельцем базы данных подписки. 10. Закройте диалоговое окно параметров безопасности агента кнопкой OK и щелкните кнопку Next (Далее). Чтобы установить расписание синхронизации для агентов распространения или сведения, выберите один из следующих параметров. Run Continuously (Выполнять непрерывно) Позволяет непрерывно прове-рять наличие обновлений на издателе. Run On Demand Only (Запуск только по требованию) Дает возможность копировать обновления в БД подписки вручную. Define Schedule (Определить расписание) Устанавливает расписание вы-полнения, например один раз в час. 11. Если выбрана публикация с обновляемыми подписками, следующая страница ма-стера будет называться Updatable Subscriptions (Обновляемые подписки). Укажите, требуется ли инициализация БД подписки, сделав следующее. : Снимите флажок Replicate (Реплицировать) для подписчика, если в данный момент не требуется создание обновляемой подписки. : Выберите в раскрывающемся списке Commit at Publisher (Фиксировать из-менения на издателе) значение Simultaneously commit changes (Фиксировать изменения одновременно), чтобы обеспечить немедленное обновление издателя. Изменения фиксируются одновременно и на подписчике, и на издателе, однако для этого требуется выделенное соединение. : Выберите в раскрывающемся списке Commit at Publisher (Фиксировать измене-ния на издателе) значение Queue changes and commit when possible (Помещать 
Реализация репликации моментальных снимков Глава 12 387 изменения в очередь и фиксировать при возможности), чтобы разрешить вне-сение изменений с организацией очереди. Изменения с организацией очереди немедленно фиксируются на подписчике, а на издателе - во время ближайшего сеанса синхронизации. 12. Если создается обновляемая подписка, следующее диалоговое окно позволит на-строить способ, используемый подписчиком для получения доступа к издате-лю (рис. 12-14). Для установки соединения можно использовать существующий связанный или удаленный сервер, если они уже были настроены, как описано в главе 11. Или же применить учетную запись и пароль SQL Server, при условии, что учетная запись включена в список Publication Access List (Список доступа к публикации). Рис. 12-14. Страница Login For Updateable Subscriptions мастера New Subscription Wizard 13. На странице Initialize Subscriptions (Инициализировать подписки) определите, нужно ли инициализировать БД подписки. Для этого в списке Subscription properties (Свойства подписки) выполните перечисленные ниже действия. : Снимите флажок Initialize (Инициализировать), если подписка уже была ини-циализирована, или когда необходимо инициализировать подписку репликации транзакций из резервной копии. : Выберите в раскрывающемся списке Initialize When (Когда инициализировать) значение Immediately (Немедленно), чтобы инициализировать БД подписки моментальным снимком данных и схемы публикации как можно скорее по-сле создания Snapshot Agent (Агент моментальных снимков) моментального снимка. : Выберите в раскрывающемся списке Initialize When (Когда инициализировать) значение At first synchronization (При первой синхронизации), чтобы иници-ализировать базу данных подписки моментальным снимком данных и схемы публикации при первой синхронизации подписки.
388 Часть III Управление данными в Microsoft SQL Server 2005 Примечание Помните, что инициализация выполняется агентом моментальных снимков и агентом распространения. Первый из них создает начальный моментальный снимок схемы и данных, а второй затем применяет моментальный снимок либо немедленно, либо во время первой синхронизации. 14. Щелкните кнопку Next (Далее). Выберите действие мастера для завершения рабо-ты. По умолчанию мастер создает подписку(и). Можно также сгенерировать файл сценария с последовательностью действий для создания подписки(ок). Если тре-буется только сгенерировать сценарий, снимите флажок Create the subscription(s) (Создать подписку(и)) и установите флажок Generate a script file with steps to create the subscription(s) (Сгенерировать файл сценария с шагами для создания подписки(ок)). Щелкните кнопку Next (Далее). 15. Проверьте набор запланированных действий и щелкните кнопку Finish (Готово). Диалоговое окно Creating Subscription(s) (Создание подписки(ок)) показывает ход процесса. Если возникнут ошибки, активизируйте предоставленную ссылку и воспользуйтесь текстом сообщения для их устранения. Просмотр свойств подписки Чтобы просмотреть свойства подписки, выполните следующую последовательность действий. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозрева-тель объектов) подключитесь к серверу, выступающему в качестве издателя или дистрибьютора, затем раскройте узел Replication (Репликация). 2. Чтобы отобразить список публикаций для текущего экземпляра сервера, раскрой-те узел Local Publications (Локальные публикации). Если список публикаций не виден, в контекстном меню этого узла выберите команду Refresh (Обновить) (или нажмите клавишу F5). 3. Раскройте узел публикации, чтобы отобразить ее текущие подписки. 4. Желая просмотреть свойства подписки, выберите в ее контекстном меню команду Properties (Свойства) для вывода диалогового окна Subscription Properties (Свой-ства подписки). Обновление, обслуживание и удаление подписок Чтобы обновить, обслужить или удалить подписку, выполните следующие действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, который выступает в качестве подписчика, за-тем раскройте узел Replication (Репликация). 2. Чтобы отобразить список публикаций для текущего экземпляра сервера, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню подписки выберите одну из представленных ниже команд. : View Synchronization Status (Посмотреть состояние синхронизации) В одно-именном диалоговом окне отображает состояние процесса синхронизации для выбранной подписки. Там же можно начать синхронизацию по запросу, щелкнув кнопку Start (Пуск). : Set Update Method (Установить способ обновления) Позволяет переклю-чаться между немедленным обновлением и обновлением с организацией оче-реди; действительна только для обновляемых подписок. : Delete (Удалить) Удаляет подписку. Подтвердите действие, щелкнув при запросе кнопку Yes (Да).
Реализация репликации моментальных снимков Глава 12 389 4. Теперь проверьте согласованность подписки с публикацией и инициализируйте подписку повторно, что можно сделать через связанную публикацию (более под-робная информация дана в следующих двух разделах). Проверка подписок Желая удостовериться, что подписчики имеют столько же строк реплицированных данных, сколько и издатель, можно проверить согласованность подписки с публи-кацией. После пометки подписки для проверки сама проверка происходит во время следующего запуска Distribution Agent (Агент распространения), и ее результаты становятся доступными в Replication Monitor (Монитор репликации). (Более под-робная информация о работе с Replication Monitor дана в главе 13.). Чтобы проверить одну или несколько подписок, выполните следующую последо-вательность действий. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, вы-ступающему в качестве издателя, и раскройте узел Replication (Репликация). 2. Чтобы отобразить список публикаций для текущего экземпляра сервера, раскройте узел Local Publications (Локальные публикации). 3. Если требуется проверить подписки на публикации репликации транзакций, в кон-текстном меню нужной публикации выберите команду Validate Subscriptions (Про-верить подписки). Отобразится диалоговое окно Validate Subscriptions (Проверить подписки). Проверяются все или только указанные подписки, использующие SQL Server. Подписки на других СУБД не могут быть проверены. Дополнительно мож-но щелкнуть кнопку Validation Options (Параметры проверки), чтобы настроить, каким образом Distribution Agent (Агент распространения) рассчитывает коли-чество строк, сравнивает ли он контрольные суммы и останавливается ли после завершения проверки. 4. При необходимости проверить все подписки на публикации репликации сведением в контекстном меню нужной публикации выберите команду Validate Subscriptions (Проверить подписки). Отобразится диалоговое окно Validate All Subscriptions (Проверить все подписки). По умолчанию дистрибьютор проверяет только ко-личество строк на подписчике. Если на всех подписчиках запущен SQL Server, можно также проверить данные в строках, сравнив значения контрольных сумм. 5. Щелкните кнопку OK. Проверка происходит при следующем запуске агента рас-пространения, и ее результаты становятся доступными в Replication Monitor (Мо-нитор репликации). Повторная инициализация подписок Можно произвести повторную инициализацию моментальных снимков в БД под-писки, используя текущий или новый моментальный снимок. Чтобы повторно ини-циализировать все подписки, выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, высту-пающему в качестве издателя, затем раскройте узел Replication (Репликация). 2. Чтобы отобразить список публикаций для текущего экземпляра сервера, раскройте узел Local Publications (Локальные публикации). 3. В контекстном меню нужной публикации выберите команду Reinitialize All Subscriptions (Повторная инициализация всех подписок). Отобразится диалоговое окно Reinitialize Subscription(s) (Повторная инициализация подписки(ок)).
390 Часть III Управление данными в Microsoft SQL Server 2005 4. Чтобы использовать текущий моментальный снимок для повторной инициали-зации подписок, установите переключатель в положение Use the current snapshot (Использовать текущий моментальный снимок). 5. Чтобы создать новый моментальный снимок для повторной инициализации под-писок, установите переключатель в положение Use a new snapshot (Использовать новый моментальный снимок). Если требуется создать моментальный снимок немедленно, установите флажок Generate the new snapshot now (Сгенерировать новый моментальный снимок немедленно). 6. Щелкните кнопку Mark For Reinitialization (Отметить для повторной инициали-зации). Для повторной инициализации конкретной подписки выполните указанные даль-ше действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, высту-пающему в качестве издателя, затем раскройте узел Replication (Репликация). 2. Чтобы отобразить список публикаций для текущего экземпляра сервера, раскройте узел Local Publications (Локальные публикации). 3. Дважды щелкните мышью на публикации, которую следует использовать, чтобы показать ее текущие подписки. 4. В контекстном меню подписки, которую следует инициализировать повторно, выберите команду Reinitialize (Инициализировать повторно). Отобразится диа-логовое окно Reinitialize the subscription(s) (Повторно инициализировать под-писку(и)). 5. Установите переключатель в положение Use the current snapshot (Использовать текущий моментальный снимок) или Use a new snapshot (Использовать новый моментальный снимок), в зависимости от потребности. Если необходимо создать моментальный снимок немедленно, установите флажок Generate the new snapshot now (Сгенерировать новый моментальный снимок немедленно). 6. Щелкните кнопку Mark For Reinitialization (Пометить для повторной инициали-зации).
Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 В этой части книги обсуждаются средства администрирования, используемые для обслужива-ния Microsoft SQL Server 2005. В главе 13 приведены базовые сведения о работе с файлами журналов сервера. Помимо этого, глава подробно рассказывает о мониторинге производи-тельности SQL Server: причинах его проведения, средствах осуществления, а также о возмож-ностях решения проблем, связанных с производительностью. Глава 14 прежде всего научит вас составлять планы резервного копирования и восстановления, а затем даст рекомендации по устранению наиболее часто встречающихся проблем при создании и восстановлении резервных копий. В главе 15 детально рассмотрена автоматизация администрирования баз данных. Из представленного в ней материала вы узнаете, как производится настройка оповещений, назначение расписаний заданиям и управление операторами БД. Здесь также освещено создание планов обслуживания и разрешение проблем целостности баз данных. Глава 13. Профилирование и мониторинг SQL Server 2005 ............................................ 392 Глава 14. Резервное копирование и восстановление SQL Server 2005 ......................... 425 Глава 15. Автоматизация администрирования и обслуживание БД ............................... 467
Глава 13 Профилирование и мониторинг SQL Server 2005 Мониторинг производительности сервера, сбор информации об активности поль-зователей, а также выявление и устранение неполадок составляют существенную часть администрирования баз данных. Для выполнения этих задач в Microsoft SQL Server существует несколько возможностей. Например, компонент панели управления System Monitor (Системный монитор) - стандартное средство Microsoft Windows для мониторинга серверов - содержит обновленные счетчики для осуществления мониторинга SQL Server. Эти счетчики дают возможность отслеживать множество ресурсов и видов деятельности сервера. Утилита SQL Server Profiler - средство для анализа производительности и профилирования - позволяет отслеживать события сервера. Можно использовать также и другие средства, например хранимые процедуры и журналы SQL Server. Мониторинг производительности и активности сервера К организации мониторинга производительности SQL Server нужно подходить си-стемно, а для этого очень важно составить план действий. Но прежде мы рассмотрим основные причины проведения мониторинга SQL Server и средства, с помощью ко-торых его можно осуществлять. Причины проведения мониторинга SQL Server Одной из основных причин мониторинга производительности SQL Server является поиск и устранение неполадок. Например, если у пользователей возникают проблемы с подключением к серверу, проведение мониторинга позволит всесторонне исследовать проблему, чтобы затем эффективно ее решить. Другая распространенная причина мониторинга SQL Server - поиск путей повы-шения общей производительности сервера. Чтобы добиться оптимальной произво-дительности, следует уменьшить время реакции системы (интервал времени между получением системой запроса пользователя и возвращением ему первой строки ре-зультирующего множества) - с одной стороны, и увеличить пропускную способность (число запросов, которое сервер может обработать в течение определенного време-ни) - с другой. Достичь этого можно несколькими способами. Оптимизируйте работу оборудования, которое может вызывать проблемы. На-пример, если операции чтения и записи на диск выполняются медленнее, чем ожидалось, необходимо работать над улучшением дискового ввода-вывода. Следите за использованием памяти и процессора, предпринимая надлежащие дей-ствия для уменьшения нагрузки на сервер. К примеру, память и ресурсы процессора, необходимые для работы SQL Server, могут использоваться другими процессами, запущенными на сервере. Сократите сетевой трафик на сервере. Так, при реализации репликации можно настроить удаленное выполнение хранимых процедур вместо передачи больших блоков данных с изменениями.
Профилирование и мониторинг SQL Server 2005 Глава 13 393 К сожалению, при совместном использовании ресурсов часто приходится идти на компромисс. По мере увеличения числа пользователей SQL Server сокращение сетевого трафика представляется труднореализуемым на практике, однако остается возможность повысить производительность сервера при помощи оптимизации запро-сов и индексирования данных. Подготовка к мониторингу Перед началом мониторинга SQL Server рекомендуется создать шаблон производи-тельности сервера. Для этого следует измерить производительность сервера в разное время и при различных нагрузках. Это позволит сравнивать базовые данные с по-следующими измерениями, чтобы контролировать производительность SQL Server. Показатели производительности, значительно отличающиеся от базовых значений, будут указывать на области, где необходима оптимизация или изменение конфигу-рации SQL Server. После создания шаблона производительности необходимо подготовить план мо-ниторинга. Полный план должен включать следующие ваши действия. 1. Определите (в зависимости от поставленных целей), какие именно события не-обходимо отслеживать. 2. Установите фильтры, чтобы ограничить объем собираемой информации согласно определенным критериям. 3. Настройте средства мониторинга и оповещения для наблюдения за событиями. 4. Ведите журнал событий. 5. Основываясь на записях журнала, проанализируйте события и воспроизводите записанные в файлы трассировки данные, чтобы найти решение. Эти процедуры подробно будут рассмотрены дальше, в разделе "Мониторинг про-изводительности SQL Server". Хотя план мониторинга рекомендуется разрабатывать в большинстве случаев, иногда все же можно обойтись и без выполнения перечисленных этапов. Например, если необходимо проверить только текущий уровень активности пользователей, вместо System Monitor (Системный монитор) допустимо применить хранимую процедуру sp_who. Или получить ту же информацию в диалоговом окне Activity Monitor (Монитор активности) утилиты SQL Server Management Studio. Примечание Хранимая процедура sp_who выводит сведения о текущих пользовате-лях и процессах. При ее запуске в качестве аргумента передается имя учетной записи, о которой требуется информация, или (когда имя учетной записи не указано) значение NULL и возвращаются данные для всех учетных записей. Если в качестве аргумента передается ключевое слово ACTIVE, возвращается информация только об активных про-цессах, - все процессы, ожидающие следующей команды пользователя, будут исключены. Вместо конкретного имени учетной записи, например sa, можно также использовать числовое значение системного идентификатора процесса (SPID, system process ID). Средства и ресурсы мониторинга Основными средствами мониторинга являются System Monitor (Системный монитор) и утилита SQL Server Profiler. Существуют и другие ресурсы для наблюдения за функционированием SQL Server, которые перечислены ниже: Activity Monitor (Монитор активности) - располагает текущей информацией о пользователях, процессах и блокировках, как описано в разделе "Управление активностью сервера" главы 5;
394 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 утилита Replication Monitor - предоставляет детальную информацию о состоянии репликации SQL Server и позволяет настроить оповещения репликации; журналы SQL Server - содержат информационные уведомления, сообщения ауди-та успехов и отказов, а также предупреждения и сообщения об ошибках, которые могут помочь выявить и устранить проблемы функционирования SQL Server; журналы SQL Server Agent - фиксируют того же рода информацию, что и жур-налы SQL Server, но относительно функционирования SQL Server Agent; Примечание Документация по SQL Server ссылается на журналы SQL Server и SQL Server Agent, как на журналы ошибок. Однако в текущей реализации было бы точнее называть эти журналы журналами событий, и именно такой термин используется в этой главе. Как и журналы событий Windows, журналы SQL Server содержат информационные уведомления, сообщения системы безопасности, а также сообщения об ошибках. журналы событий Windows - располагает информацией, позволяющей обнару-жить и устранить общесистемные проблемы, включая проблемы SQL Server и SQL Server Agent; sp_helpdb - выводит информацию о БД; sp_helpindex - сообщает информацию об индексах таблицы; sp_helpserver - предоставляет информацию об экземплярах SQL Server, настро-енных для удаленного доступа и репликации; sp_lock - выводит информацию о блокировках объекта; sp_monitor - отображает ключевую статистическую информацию об использова-нии SQL Server, включая время (в секундах), которое процессор был занят, и время простоя c момента последнего запуска SQL Server; sp_spaceused - показывает приблизительное количество дискового пространства, занимаемого таблицей или БД; sp_who - выводит текущую информацию о пользователях и процессах SQL Server; инструкции DBCC - позволяет проверять статистические данные, используемые при поиске информации, отслеживать активность и проверять целостность БД. Помимо журналов событий и инструкций Transact-SQL, в распоряжении адми-нистратора находится набор встроенных функций, возвращающих системную ин-формацию. В табл. 13-1 приводится сводка ключевых функций и примеров их ис-пользования. Значения, возвращаемые этими функциями, накапливаются от времени последнего запуска SQL Server. Табл. 13-1. Встроенные функции для мониторинга производительности и активности SQL Server Функция Возвращает Пример @@connections Количество попыток установки соединения (удачных и неудачных) SELECT @@connections AS 'Total Login Attempts' @@cpu_busy Время (выраженное в "тиках" процес-сора)*, которое процессор был занят с момента последнего запуска SQL Server SELECT @@cpu_busy AS 'CPU Busy' @@idle Время (выраженное в "тиках" процессо-ра) простоя процессора с момента послед-него запуска SQL Server SELECT @@idle AS 'Idle Time' * Чтобы получить время в секундах, нужно умножить возвращаемое значение на значение @@timeticks и разделить на миллион. - Прим. ред.
Профилирование и мониторинг SQL Server 2005 Глава 13 395 Функция Возвращает Пример @@io_busy Время (выраженное в "тиках" процессо-ра) выполнения процессором операции ввода-вывода с момента последнего запу-ска SQL Server. SELECT @@io_busy AS 'IO Time' @@pack_received Число входящих пакетов, полученных SQL Server из сети с момента последнего запуска SQL Server SELECT @@pack_received AS 'Packets Received' @@pack_sent Число выходящих пакетов, отправленных SQL Server в сеть с момента последнего запуска SQL Server SELECT @@pack_sent AS 'Packets Sent' @@packet_errors Число ошибок сетевых пакетов для соеди-нений SQL Server с момента последнего запуска SQL Server SELECT @@packet_errors AS 'Packet Errors' @@timeticks Число микросекунд в одном "тике" часов процессора SELECT @@timeticks AS 'Clock Ticks' @@total_errors Число ошибок дискового ввода-вывода с момента последнего запуска SQL Server SELECT @@total_errors AS 'Total Errors' @@total_read Число дисковых операций чтения с мо-мента последнего запуска SQL Server SELECT @@total_read AS 'Reads' @@total_write Число дисковых операций записи с мо-мента последнего запуска SQL Server SELECT @@total_write AS 'Writes' Работа с утилитой Replication Monitor После настройки репликации (см. главу 12) для отслеживания ее состояния по всему предприятию можно использовать утилиту Replication Monitor (sqlmonitor.exe). По умолчанию в окне утилиты выводится только информация о выбранном издателе, но при необходимости можно добавить любых издателей, функционирование которых требуется отслеживать, а также организовать их в группы. Запуск и использование утилиты Replication Monitor Для запуска утилиты Replication Monitor в панели Object Explorer (Обозреватель объектов) из контекстного меню узла Replication (Репликация) выберите команду Launch Replication Monitor (Запустить Replication Monitor). Для отображения общего состояния репликации утилитой используются различные значки. Если какая-либо публикация имеет ошибки, состояние ошибки обозначается красным кружком с впи-санным в него белым крестиком в виде буквы Х на всех уровнях иерархии объектов внутри утилиты. При выборе издателя из иерархического списка, расположенного в левой панели окна утилиты, в правой панели выводится детальная информация о состоянии репли-кации для этого издателя. По умолчанию эти данные обновляются с интервалом 5 с, но их можно обновить принудительно, нажав клавишу F5. Как показано на рис. 13-1, информация об издателе выводится на трех вкладках. Publications (Публикации). Содержит индивидуальные записи для каждой на-строенной публикации. Тип и состояние публикации обозначены следующими значками: : фиолетовая книга с синим кружком внутри - репликация моментальных сни мков; : синяя книга с зеленой стрелкой, направленной вправо, - репликация транзакций; Табл. 13-1. (окончание)
396 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 : желтая книга с зеленой стрелкой, указывающей вправо, и синей стрелкой, на-правленной влево, - репликация сведением; : красный кружок с белым крестиком внутри в виде буквы Х, накладываемый на любой из вышеперечисленных значков, - состояние ошибки. Рис. 13-1. Утилита Replication Monitor Кроме того, здесь выводится общее количество подписок на публикацию, число синхронизируемых подписок, текущая средняя и наихудшая производительность для подписчиков. Subscription Watch List (Список наблюдения за подписками) Показывает со-стояние индивидуальных подписок согласно их типу. В первом раскрывающемся списке (без названия) выбирается тип выводимых подписок, а в списке Show (Вы-вести) нужно указать, выводить ли все подписки этого типа или некоторое под-множество, например 25 подписок с самой низкой производительностью. Следите за состоянием подписки, отображаемом в столбце Status (Состояние), - например Running (Выполняется), Error (Ошибка), за уровнем производительности в столб-це Performance (Производительность) - Excellent (Отличная), Good (Хорошая), Poor (Плохая), а также за задержкой репликации, показанной в столбце Latency (Задержка). Common Jobs (Общие задания) Отображает задания SQL Server Agent (Агент SQL Server), общие для всех публикаций на выбранном издателе. Чтобы знать, существуют ли проблемы репликации, обратите внимание на состояние задания (столбец Status), последнее время запуска (столбец Last Start Time) и длитель-ность выполнения (столбец Duration). Если существуют задания, которые никогда не запускались (состояние Never started) или же выполнялись достаточно долго, выясните, почему это происходит.
Профилирование и мониторинг SQL Server 2005 Глава 13 397 Добавление издателей и групп издателей При первом запуске в окне утилиты Replication Monitor выводится только выбранный в настоящий момент издатель. Но существует возможность добавить других издателей, за которыми следует наблюдать, и при необходимости организовать их в группы. Чтобы начать мониторинг дополнительных издателей и создать их группы, вы-полните следующую последовательность действий. 1. В левой панели утилиты выберите из контекстного меню узла Replication Monitor (Монитор репликации) команду Add Publisher (Добавить издателя). Отобразится диалоговое окно Add Publisher (Добавить издателя), изображенное на рис. 13-2. Рис. 13-2. Диалоговое окно Add Publisher 2. Щелкните кнопку Add (Добавить). Для настройки соединения с SQL Server при помощи диалогового окна Connect to Server (Подключиться к серверу) в меню кнопки можно выбрать указанные ниже команды. : Add SQL Server Publisher (Добавить издателя SQL Server) Зарегистрирован ные серверы приведены в раскрывающемся списке Server name (Имя сервера), кроме того, можно произвести поиск других. Предлагаемый по умолчанию тип аутентификации - Windows Authentication (Аутентификация Windows), кото-рая использует текущую учетную запись и пароль. Щелкните кнопку Connect (Подключиться). : Specify a Distributor and Add Its Publishers (Указать дистрибьютора и доба-вить его издателей) После щелчка на кнопке Connect (Подключиться) Replication Monitor установит соединение с дистрибьютором, получит список ис-пользующих его издателей, а затем подключится также и к этим изда телям. : Add Oracle Publisher (Добавить издателя Oracle) Предлагаемый по умол-чанию тип аутентификации - Oracle Standard Authentication (Стандартная 
398 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 аутентификация Oracle), для использования которой требуется ввести учетную запись пользователя и пароль. Щелкните кнопку Connect (Подключиться). Примечание Для того чтобы иметь возможность добавить издателя Oracle, сначала необходимо настроить соединение с дистрибьютором издателя Oracle, выбрав команду Specify a Distributor and Add Its Publishers (Указать дистрибьютора и добавить его из-дателей). 3. Объединение издателей в группы облегчает управление мониторингом в сложных корпоративных средах. В списке Show this Publisher(s) in the following group (Ото-бражать издателя(ей) в следующей группе) выберите группу издателей, в которую следует добавить издателя(ей). Если необходимо создать новую группу, щелкните кнопку New Group (Создать группу), укажите имя группы и щелкните кнопку OK. Затем выберите вновь созданную группу в списке. 4. Щелкните кнопку OK. Работа с журналами событий Журналы событий предоставляют исторические данные, которые могут помочь деталь-но исследовать проблемы функционирования SQL Server. Существует два журнала событий - SQL Server и SQL Server Agent (Агент SQL Server), а также журнал прило-жений Windows. Все три журнала можно использовать для отслеживания сообщений, имеющих отношение к SQL Server, однако при этом следует помнить следующее. Только журнал приложений предоставляет дополнительную информацию обо всех приложениях, работающих на сервере, и дает возможность фильтровать события согласно их типу. Например, можно отфильтровать события таким образом, чтобы выводились только сообщения об ошибках и предупреждения. Когда служба MSSQLServer или MSSQL$instance_name запускается из команд-ной строки, события записываются в журнал событий SQL Server и выводятся на стандартное устройство вывода, но не записываются в журнал приложений Windows. В Windows существуют дополнительные возможности, которые могут быть полез-ными при поиске проблем. Если отслеживаются проблемы безопасности, начните с журналов событий SQL Server, затем изучите журнал безопасности Windows. Если же источник проблемы, препятствующей правильной работе SQL Server, не удается определить, начните с журналов SQL Server, затем проанализируйте журнал приложений и системный журнал Windows. Чтобы сообщения SQL Server об ошибках были понятными и несложными для про-чтения, нужно знать принцип их форматирования. В чем он состоит, показано ниже. Код ошибки, который уникальным образом определяет сообщение об ошиб-ке Системные коды ошибок имеют длину от одной до пяти цифр; для них за-резервированы коды от 1 до 50 000. Коды ошибок, определяемых пользователями, начинаются с 50 001. Уровень серьезности, показывающий, насколько критическим является со-общение Диапазон уровней серьезности - от 0 до 25. Сообщения с уровнем серьезности от 0 до 10 являются информационными. Уровни серьезности от 11 до 16 используются пользователями. Уровни серьезности от 17 до 25 обозначают программные и аппаратные ошибки. Код состояния ошибки, указывающий на ее источник Коды состояния ошибок имеют длину от одной до трех цифр, а максимальным значением является 127. 
Профилирование и мониторинг SQL Server 2005 Глава 13 399 Обычно код состояния ошибки означает номер строки кода SQL Server, вызвав-шего сообщение. Текстовое сообщение с кратким описанием ошибки Прочтите сообщение, чтобы получить дополнительную информацию об ошибке; это поможет при устранении проблем. Также в журналы записываются ошибки, возвращаемые функциями программных интерфейсов ODBC и OLE DB; эти сообщения содержат информацию, подобную вышеперечисленной. Системное представление sys.messages в базе данных master содержит перечень сообщений об ошибках и их описания. Чтобы просмотреть все сообщения об ошибках, которые может возвращать SQL Server, выполните такую инструкцию Transact-SQL: USE master GO SELECT * FROM sys.messages Просмотр журнала приложений Windows Журнал приложений содержит записи обо всех экземплярах сервера баз данных, работающих на компьютере, а также записи о других приложениях. Доступ к журна-лу приложений можно получить через компонент панели управления Event Viewer (Просмотр событий). Для этого выполните следующие действия. 1. В меню Start (Пуск) выберите Control Panel (Панель управления), затем Administrative Tools (Администрирование)\Event Viewer (Просмотр событий). 2. По умолчанию в Event Viewer (Просмотр событий) показаны только журналы локального компьютера. Если необходимо просмотреть журналы на удаленном компьютере, из контекстного меню узла Event Viewer (Просмотр событий), на-ходящегося в иерархическом списке левой панели, выберите команду Connect to another computer (Подключиться к другому компьютеру). В диалоговом окне Select Computer (Выбор компьютера) введите имя удаленного компьютера и щелкните кнопку OK. 3. В левой панели щелкните правой кнопкой мыши узел Application (Приложение). Отобразится журнал приложений, подобный приведенному на рис. 13-3. Исполь-зуйте информацию в столбце Source (Источник), чтобы определить, какая служба (или экземпляр) сервера БД записала конкретное событие. Записи в окне Event Viewer (Просмотр событий) позволяют быстро просмотреть информацию о том, когда, где и как произошло событие. Тип события и соответству-ющий ему значок указаны в столбце перед датой и временем события. Ниже пере-числены существующие типы событий. Information (Уведомление) Информационное сообщение, которое в основном относится к успешно выполненному действию. Success audit (Аудит успехов) Событие, связанное с успешным выполнением действия. Failure audit (Аудит отказов) Событие, связанное с ошибкой выполнения дей-ствия. Warning (Предупреждение) Некритическая ошибка, выводящая предупреж-дение. Сведения, приводимые в предупреждениях, часто бывают полезными для предотвращения проблем в будущем. Error (Ошибка) Ошибка; например при запуске службы.
400 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Рис. 13-3. Журнал приложений Windows Кроме даты, времени и индикатора типа события, выводится следующая инфор-мация (для получения детальных сведений о каком-либо событии дважды щелкните мышью соответствующую ему запись в списке; откроется диалоговое окно Properties (Свойства) с дополнительной информацией). Source (Источник) Приложение, служба или компонент, источник записи в жур-нале. Category (Категория) Категория события; это поле иногда используется для дальнейшего описания связанного действия. Event (Событие) Идентификатор (код) конкретного события. User (Пользователь) Учетная запись пользователя, зарегистрированная в си-стеме в момент записи события. Computer (Компьютер) Имя компьютера, на котором произошло событие. Description (Описание) Текстовое описание события; доступно только в диа-логовом окне Properties (Свойства). Data (Данные) Любые данные или код ошибки, которые выводятся событием; доступно лишь в диалоговом окне Properties (Свойства). Предупреждения и ошибки являются двумя основными типами событий, на кото-рые следует обратить особо пристальное внимание. Если происходит событие одного из этих типов и причина, вызвавшая его, неясна, дважды щелкните мышью соответ-ствующую ему запись, чтобы просмотреть его детальное описание. При необходимо-сти просматривать только предупреждения и сообщения об ошибках отфильтруйте журнал, выполнив следующую последовательность действий. 1. В меню View (Вид) выберите команду Filter (Фильтр). Откроется диалоговое окно Application Properties (Свойства: Приложение), изображенное на рис. 13-4.
Профилирование и мониторинг SQL Server 2005 Глава 13 401 Рис. 13-4. Вкладка Filter диалогового окна Application Properties 2. Снимите флажки: Information (Уведомления), Success audit (Аудит успехов) и Failure audit (Аудит отказов). 3. Установите флажки Warning (Предупреждения) и Error (Ошибки), если их нет. 4. Щелкните кнопку OK. Теперь в списке должны отображаться только предупреждения и сообщения об ошибках. Помните, что выводимые сведения относятся ко всем приложениям, рабо-тающим на сервере, а не только к SQL Server. Просмотр журналов событий SQL Server В журналы SQL Server заносятся информационные уведомления, предупреждения, сообщения об ошибках и сообщения аудита, относящиеся к функционированию SQL Server. Новые журналы создаются при запуске службы SQL Server или при выполне-нии хранимой процедуры sp_cycle_errorlog. Когда создается новый журнал, текущий передается в архив таким образом, что становится архивной копией № 1, бывшая копия № 1 - копией № 2, и т. д. до установленного предела. По умолчанию SQL Server поддерживает до шести архивных копий журналов. Просматривать журналы SQL Server можно с помощью утилиты SQL Server Management Studio или текстового редактора. Чтобы просмотреть журнал в утилите, выполните указанные дальше действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к нужному сер-веру, затем перейдите к узлу Management (Управление). 2. Раскройте сначала узел Management (Управление), а затем узел SQL Server Logs (Журналы SQL Server). Текущий журнал показан с меткой Current (Текущий). Архивные копии журналов показаны с описательными метками, например Archive #1 (Архив № 1) и т. д.
402 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 3. Дважды щелкните мышью журнал, который необходимо просмотреть. Откроется диалоговое окно Log File Viewer (Просмотр файлов журналов). 4. В этом окне можно добавить другие журналы в перечень файлов журналов, уста-новив соответствующие им флажки, как показано на рис. 13-5. Рис. 13-5. Диалоговое окно Log File Viewer Чтобы просмотреть журналы в текстовом редакторе, сделайте следующее. 1. Запустите текстовый редактор, например WordPad или Notepad (Блокнот), и за-тем используйте его диалоговое окно Open (Открыть), чтобы открыть папку LOG. Обычно она находится в каталоге, где установлен SQL Server, и путь к ней - %ProgramFiles%\Microsoft SQL Server\MSSQL.n\MSSQL\LOG, где n может принимать значения 1, 2 и т. д. 2. Откройте файл журнала, который необходимо просмотреть. Файл текущего журна-ла называется ERRORLOG без расширения. Последняя резервная копия журнала имеет расширение .1, предпоследняя - расширение .2 и т. д. Чтобы изменить количество поддерживаемых SQL Server архивных копий файлов журналов, в панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Logs (Журналы SQL Server) выберите команду Configure (Настро-ить). В диалоговом окне Configure SQL Server Error Logs (Настройка журналов оши-бок SQL Server) установите флажок Limit the number of error log files before they are recycled (Предельное количество файлов журналов ошибок, по достижении которого они будут повторно использоваться), а затем в поле Maximum number of error log files (Максимальное количество файлов журналов ошибок) задайте максимальное коли-чество сохраняемых архивных копий файлов журналов (общее число плюс текущий журнал - на один больше). Допустимый диапазон - от 6 до 99.
Профилирование и мониторинг SQL Server 2005 Глава 13 403 Просмотр журналов событий SQL Server Agent В журналы SQL Server Agent заносятся информационные уведомления, предупрежде-ния, сообщения об ошибках и сообщения аудита, относящиеся к функционированию SQL Server Agent (Агент SQL Server). Новые журналы создаются при запуске службы SQL Server Agent. При создании нового журнала текущий передается в архив таким образом, что он становится архивной копией № 1, бывшая копия № 1 - копией № 2, и т. д. до установленного предела. По умолчанию SQL Server поддерживает девять архивных копий журналов SQL Server Agent (Агент SQL Server). Чтобы просмотреть журнал SQL Server Agent (Агент SQL Server) в SQL Server Management Studio, выполните указанные действия. 1. С помощью панели Object Explorer (Обозреватель объектов) подключитесь к нуж-ному серверу. 2. Раскройте узлы SQL Server Agent (Агент SQL Server) и Error Logs (Журналы оши-бок). Текущий журнал показан с меткой Current (Текущий). Архивные копии журна-лов показаны с описательными метками, например Archive #1 (Архив № 1) и т. д. 3. Дважды щелкните мышью журнал, который необходимо просмотреть. Откроется диалоговое окно Log File Viewer (Просмотр файлов журналов). 4. В этом окне добавьте другие журналы в перечень файлов журналов, установив соответствующие им флажки. Чтобы просмотреть журналы в текстовом редакторе, сделайте следующее. 1. В диалоговом окне Open (Открыть) откройте папку LOG. Обычно она находится в каталоге, где установлен SQL Server, и путь к ней - %ProgramFiles%\Microsoft SQL Server\MSSQL.n\MSSQL\LOG, где n может принимать значения 1, 2 и т. д. 2. Откройте файл журнала, который необходимо просмотреть. Файл текущего жур-нала называется SQLAGENT.OUT. Последняя резервная копия журнала имеет расширение .1, предпоследняя - расширение .2, и т. д. Существует несколько способов управления журналами SQL Server Agent (Агент SQL Server). Можно принудительно отправить текущий журнал в архив, щелкнув в контекстном меню узла SQL Server Agent Error Logs (Журналы ошибок SQL Server Agent), находящегося в панели Object Explorer (Обозреватель объектов), команду Recycle (Повторно использовать) и кнопку OK для подтверждения действия. При этом SQL Server закроет текущий журнал агента, переместит его в архивный журнал и начнет вести новый журнал агента. Также можно контролировать тип сообщений, записываемых в журнал, или задать размещение файла журнала. Для этого выполните следующие действия. 1. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Agent Error Logs (Журналы ошибок SQL Server Agent) выберите команду Configure (Настроить). Откроется диалоговое окно Configure SQL Server Agent Error Logs (Настроить параметры журналов ошибок SQL Server Agent). 2. Задайте в поле Error log file (Файл журнала ошибок) путь и имя файла агента. По умолчанию - это %ProgramFiles%\Microsoft SQL Server\MSSQL.n\MSSQL\ LOG\SQLAGENT.OUT, где n может принимать значения 1, 2, и т. д. Новые архив-ные файлы также будут создаваться в папке, указанной как часть полного имени файла. 3. Используйте флажки в разделе Agent Log Level (Уровень журнала агента), чтобы контролировать тип сообщений, записываемых в журнал. По умолчанию в журнал 
404 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 заносятся только сообщения об ошибках и предупреждения. Если необходимо также вносить в журнал информационные уведомления, установите флажок Information (Уведомления). 4. Щелкните кнопку OK. Мониторинг производительности Microsoft SQL Server Компонент панели управления Performance (Производительность), составной частью которого является System Monitor (Системный монитор), - рекомендуемое средство для мониторинга производительности SQL Server. System Monitor (Системный мо-нитор) в графическом виде выводит статистику для выбранного набора параметров производительности. Контролируемые параметры производительности называются счетчиками. При установке SQL Server в систему System Monitor (Системный монитор) обнов-ляется набором счетчиков для отслеживания параметров производительности SQL Server. Эти счетчики также могут обновляться при установке служб и дополнений к SQL Server. Например, когда на сервере настраивается репликация, в SQL Server Management Studio становится доступной утилита Replication Monitor, а в System Monitor (Системный монитор) добавляется комплект объектов и счетчиков для от-слеживания производительности репликации. System Monitor (Системный монитор) строит диаграмму, отображающую показа-ния различных счетчиков, за которыми производится наблюдение. Интервал обновле-ния диаграммы может настраиваться, но по умолчанию он равен трем секундам. При работе с System Monitor (Системный монитор) отслеживаемая информация наиболее полезна в случаях, когда данные записываются в журнал, а также когда запрограм-мированы оповещения, информирующие о наступлении определенных событий или о достижении определенных предельных значений, например когда в файле журнала транзакций базы данных заканчивается свободное пространство. В следующих разделах рассмотрены процедуры, используемые при работе с System Monitor (Системный монитор). Выбор счетчиков для мониторинга System Monitor (Системный монитор) выводит информацию только для счетчиков, за которыми производится наблюдение. Для SQL Server существует более сотни счетчиков, а если была настроена репликация, то это количество еще увеличивается. Эти счетчики организованы в группы. Например, все счетчики, связанные с блоки-ровками, ассоциированы с объектом SQLServer:Locks. Чтобы определить, мониторинг каких счетчиков следует осуществлять, выполните указанные дальше действия. 1. В меню Start (Пуск) выберите Control Panel (Панель управления), затем Administrative Tools\Performance (Администрирование\Производительность). 2. В левой панели выберите узел System Monitor (Системный монитор), как это сделано на рис. 13-6. Все счетчики по умолчанию показаны в таблице в нижней части окна. Чтобы удалить счетчик по умолчанию, щелкните его в таблице и затем нажмите клавишу Delete. 3. System Monitor (Системный монитор) имеет несколько режимов просмотра. Убе-дитесь, что вы находитесь в режимах View Current Activity (Просмотр текущей активности) и View Graph (Просмотр диаграммы), щелкнув одноименные кноп-ки в панели инструментов. Также можно нажать сочетание клавиш Ctrl+T и за-тем Ctrl+G.
Профилирование и мониторинг SQL Server 2005 Глава 13 405 Рис. 13-6. Компонент панели управления System Monitor 4. Чтобы добавить счетчики, щелкните кнопку Add (Добавить) в панели инстру-ментов или нажмите сочетание клавиш Ctrl+I. Откроется диалоговое окно Add Counters (Добавить счетчики), показанное на рис. 13-7. При добавлении счетчиков элементы управления диалогового окна используются следующим образом. : Use local computer counters (Использовать локальные счетчики) Установите переключатель в это положение, чтобы настроить наблюдение за производи-тельностью для локального компьютера. Рис. 13-7. Диалоговое окно Add Counters
406 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 : Select counters from computer (Выбрать счетчики с компьютера) Установка переключателя в это положение позволяет ввести (в формате UNC) в поле имя сервера, с которым требуется работать, например \\WZETA. : Performance object (Объект) В этом раскрывающемся списке выберите объект, содержащий требуемые счетчики, например SQLServer:Locks. : All counters (Все счетчики) Установите переключатель в это положение, чтобы выбрать для мониторинга все счетчики текущего объекта. : Select counters from list (Выбрать счетчики из списка) Переключатель в этом положении дает возможность выбрать из списка один или более счетчиков, связанных с текущим объектом. Например, можно выбрать счетчики Lock Requests/sec (Запросов на блокировку/с), Lock Timeouts/sec (Истечение времени блокировки/с) и Number of Deadlocks/sec (Число тупиковых блокировок/с). Совет Самый простой способ узнать, какие параметры можно отслеживать, - это просмотреть все объекты и счетчики, доступные в диалоговом окне Add Counters (До-бавить счетчики). Для этого выберите объект в раскрывающемся списке Performance Object (Объект), установите переключатель в положение Select counters from list (Выбрать счетчики из списка) и щелкните кнопку Explain (Объяснение). Отобразится окно Explain Text (Объяснение), содержащее объяснение текущего счетчика. Не закрывая это окно, просмотрите список счетчиков, при этом будет отображаться объяснительный текст для каждого выбранного счетчика. : All instances (Все вхождения) Установите переключатель в это положение, чтобы выбрать для мониторинга все экземпляры счетчиков. : Select instances from list (Выбрать вхождения из списка) Установка пере-ключателя в это положение позволяет выбрать для мониторинга один или более экземпляров счетчиков, например наблюдение за экземплярами счетчика Lock Requests/sec (Запросов на блокировку/сек) для Database (База данных), Extent (Экстент) и Page (Страница). Совет Не пытайтесь одновременно выводить в виде диаграммы слишком много счетчи-ков или экземпляров счетчиков. С возрастанием их количества становится все труднее воспринимать показания счетчиков, к тому же при этом используются системные ресур-сы - время процессора и оперативная память, что может сказаться на времени реакции сервера. 5. После выбора всех параметров щелкните кнопку Add (Добавить), чтобы добавить счетчики к диаграмме. Повторите этот процесс для добавления других параметров наблюдения за производительностью. 6. По завершении закройте диалоговое окно Add Counters (Добавить счетчики), щелкнув кнопку Close (Закрыть). Работа с журналами производительности Для отслеживания производительности SQL Server используются журналы произво-дительности, которые при необходимости можно воспроизвести позже. При работе с журналами помните, что запись отслеживаемых параметров в файлы журналов и их вывод в окне System Monitor (Системный монитор) производятся раздельно, причем можно назначить различные наборы счетчиков. Существует возможность настроить автоматическое обновление значений счетчиков в файлах журналов либо обновлять их вручную. При автоматическом ведении журнала моментальный снимок значений ключевых параметров записывается через определенные промежутки времени (напри-
Профилирование и мониторинг SQL Server 2005 Глава 13 407 мер, 10 с). При ручном ведении журнала вы сами определяете, когда создавать момен-тальные снимки параметров. Существует два типа журналов производи тельности. Counter Logs (Журналы счетчиков) Содержат данные о производительности для выбранных счетчиков; запись производится по истечении предварительно определенного интервала времени. Trace Logs (Журналы трассировки) Запись данных о производительности вы-полняется, когда происходит соответствующее событие. Создание журналов производительности и управление ими Для создания журналов производительности и управления их ведением выполните следующие действия. 1. В меню Start (Пуск) выберите Control Panel (Панель управления), затем Administrative Tools (Администрирование)\Performance (Производительность). 2. В левой панели раскройте узел Performance Logs and Alerts (Журналы и опове-щения производительности). Если нужно настроить журнал счетчика, щелкните узел Counter Logs (Журналы счетчиков). В противном случае - узел Trace Logs (Журналы трассировки). 3. Как показано на рис. 13-8, в панели справа будет отображен список текущих жур-налов (если они существуют). Зеленый значок журнала рядом с его названием указывает на то, что ведение журнала активно, красный - что оно остановлено. Рис. 13-8. Сводная информация о текущих журналах производительности в окне Performance 4. Новый журнал можно создать, щелкнув правой кнопкой мыши свободную об-ласть в правой панели и затем выбрав в контекстном меню команду New Log Settings (Новые параметры журнала). В диалоговом окне New Log Settings (Новые 
408 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 параметры журнала) укажите описательное имя для параметров нового журнала, затем щелкните кнопку OK. Теперь можно настроить ведение журнала, используя диалоговое окно свойств. 5. Чтобы управлять существующим журналом, выберите из его контекстного меню одну из представленных ниже команд. : Start (Запуск) Активирует ведение журнала. : Stop (Остановка) Прекращает ведение журнала. : Delete (Удалить) Удаляет журнал. : Properties (Свойства) Выводит диалоговое окно Properties (Свойства) Создание журналов счетчиков В журналы счетчиков записываются данные о производительности для выбранных счетчиков; запись выполняется через указанный интервал времени, например про-изводительность центрального процессора можно измерять каждые 15 минут. Для создания журнала счетчика выполните следующую последовательность действий. 1. Откройте компонент панели управления Performance (Производительность). В ле-вой панели выберите узел Counter Logs (Журналы счетчиков), затем щелкните правой кнопкой мыши свободное место в правой панели и в контекстном меню выберите команду New Log Settings (Новые параметры журнала). 2. В диалоговом окне New Log Settings (Новые параметры журнала) введите опи-сательное имя журнала, например "Мониторинг блокировок SQL Server" или "Мониторинг памяти SQL Server" (без кавычек). Щелкните кнопку OK. Откроется диалоговое окно свойств журнала. 3. Чтобы добавить все счетчики для конкретных объектов, на вкладке General (Об-щие) щелкните кнопку Add Objects (Добавить объекты) и затем используйте диа-логовое окно Add Objects (Добавить объекты) для добавления объектов. В журнал будут записываться показания всех счетчиков для выбранных объектов. 4. Чтобы добавить конкретные счетчики для объектов, щелкните кнопку Add Counters (Добавить счетчики) и выберите их в диалоговом окне Add Counters (Добавить счетчики). 5. В разделе Sample data every (Снимать показания каждые) в поле Interval (Интер-вал) введите периодичность снятия показаний счетчиков, а в поле Units (Единицы) укажите единицу времени в секундах, минутах, часах или днях. 6. В поле Run As (От имени) введите имя учетной записи, под которой будет выпол-няться журнал счетчика, и затем щелкните кнопку Set Password (Задать пароль). В диалоговом окне Set Password (Установка пароля) задайте и подтвердите пароль для учетной записи; по окончании щелкните кнопку OK. Чтобы журнал велся под системной учетной записью по умолчанию, значение в поле Run As (От имени) должно быть <Default> (<По умолчанию>). 7. Щелкните вкладку Log Files (Файлы журнала), как показано на рис. 13-9. По умолчанию журналы счетчиков сохраняются в виде последовательно пронуме-рованных бинарных файлов в каталоге %SystemDrive%\PerfLogs. Параметры по умолчанию для файлов журнала можно изменить, используя следующие элементы управления. : Log file type (Тип файла журнала) Меняется тип файла журнала по умол-чанию. При выборе значения Text File (Comma delimited) (Текстовый файл (разделитель - запятая)) создается файл журнала с записями, разделенными 
Профилирование и мониторинг SQL Server 2005 Глава 13 409 запятыми; значения Text File (Tab delimited) (Текстовый файл (разделение та-буляцией)) - файл журнала с записями, разделенными символами табуляции; значения Binary File (Двоичный файл) - двоичный файл, который может быть прочитан System Monitor (Системный монитор); значения Binary Circular File (Двоичный циклический файл) - двоичный файл, в котором при достижении файлом заданного размера новые данные записываются поверх старых. При выборе значения SQL Database (База данных SQL) данные о производитель-ности записываются в базу данных. Рис. 13-9. Вкладка Log Files Совет Если для анализа и просмотра журнала предполагается использовать только System Monitor (Системный монитор), выберите один из бинарных форматов. : End file names with (Имена файлов оканчиваются на) Вводится суффикс, автоматически добавляемый к каждому новому файлу, создаваемому при за-пуске журнала счетчика. Журналы могут иметь суффикс в виде числа или в различных форматах даты. : Start numbering at (Нумерация начинается с) Задается первое число для журнала, использующего автоматический числовой суффикс. : Comment (Комментарий) Задается дополнительное описание журнала, ко-торое выводится в столбце Comment (Комментарий). : Overwrite existing log file (Перезаписывать существующий файл журна-ла) Установка флажка перезаписывает все существующие файлы журналов с таким же именем. 8. После выбора типа файла журнала для его размещения щелкните кнопку Configure (Настроить). Если в качестве типа файла был определен SQL Database (База данных SQL), откроется диалоговое окно Configure SQL Logs (Настройка журна-лов SQL), в котором следует задать предварительно настроенное имя источника данных (DSN, data source name) системы. Имя источника данных используется для установления соединения с SQL-совместимой базой данных через программный 
410 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 интерфейс ODBC. При определении другого типа файла откроется диалоговое окно Configure Log Files (Настройка файлов журналов), где нужно задать имя файла и размещение папки. В обоих диалоговых окнах можно ограничить размер файла журнала конкретным значением. Щелкните кнопку OK, а в случае появле-ния запроса на создание папки журнала щелкните кнопку Yes (Да). Совет Файлы журналов могут быстро увеличиваться в размерах. Если планируется вести журнал данных в течение длительного периода, убедитесь, что файл журнала расположен на диске, где есть достаточно свободного места. Кроме того, помните, что чем меньше интервал обновления файла журнала, тем больше используется дискового пространства и ресурсов процессора. 9. Щелкните вкладку Schedule (Расписание), показанную на рис. 13-10, и укажите, когда ведение журнала должно начинаться и прекращаться. Можно настроить, чтобы ведение журнала включалось или вручную, или автоматически в указанное время. Рис. 13-10. Вкладка Schedule 10. Остановка ведения файла журнала также настраивается как вручную, так и после истечения указанного периода времени, например семи дней; в качестве альтерна-тивы можно указать конкретную дату остановки или остановку при заполнении файла (если был задан предельный размер файла). Кроме того, можно задать дей-ствие, выполняемое после закрытия файла журнала: начать новый файл журнала и/или выполнить команду операционной системы. 11. Задав расписание ведения журнала, щелкните кнопку OK. Будет создан журнал, которым можно управлять (см. раздел "Создание журналов производительности и управление ими"). Создание журналов трассировки В журналы трассировки записываются данные о производительности при возникно-вении событий, связанных с их поставщиками. Поставщик события - это приложение или служба операционной системы, события которых можно трассировать.
Профилирование и мониторинг SQL Server 2005 Глава 13 411 Чтобы создать журнал трассировки, выполните следующую последовательность действий. 1. Откройте компонент панели управления Performance (Производительность). В левой панели из контекстного меню узла Trace Logs (Журналы трассировки) выберите команду New Log Settings (Новые параметры журнала). 2. В диалоговом окне New Log Settings (Новые параметры журнала) введите имя журнала, например "Трассировка блокировок базы данных" или "Трассировка SQL Server" (без кавычек). Щелкните кнопку OK. Откроется диалоговое окно, изображенное на рис. 13-11. Рис. 13-11. Диалоговое окно свойств нового журнала трассировки 3. Если необходимо отслеживать системные события, установите переключатель в положение Events logged by system provider (События, протоколируемые систем-ным поставщиком), как показано на рис. 13-11. Теперь можно выбрать системные события для трассировки, устанавливая соответствующие флажки. Внимание! Установка флажков Page faults (Ошибки страницы) и File details (Файловые операции) приводит к значительной нагрузке на сервер и быстрому увеличению файла журнала, поэтому данные события следует отслеживать только в течение ограниченного периода времени. 4. Если необходимо трассировать другого (несистемного) поставщика, установите переключатель в положение Nonsystem providers (Несистемные поставщики) и щелкните кнопку Add (Добавить). Откроется диалоговое окно Add Nonsystem Providers (Добавление несистемных поставщиков), где следует выбрать постав-щиков для трассировки, например MSSQLServer Trace. 5. В поле Run As (От имени) введите имя учетной записи, под которой будет вестись журнал трассировки, и затем щелкните кнопку Set Password (Задать пароль). В диалоговом окне Set Password (Установка пароля) введите и подтвердите па-роль для учетной записи, затем щелкните кнопку OK. Чтобы журнал велся под системной учетной записью по умолчанию, значение в поле Run As (От имени) должно быть <Default> (<По умолчанию>).
412 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 6. После выбора поставщиков и событий для трассировки щелкните вкладку Log Files (Файлы журнала). Теперь можно настроить файл трассировки, как объяснялось в пунктах 7 и 8 раздела "Создание журналов счетчиков". Есть одно отличие - в до-ступных типах файлов журнала. Существует только два типа файлов журналов трассировки, указанные ниже. : Sequential Trace File (Файл последовательной трассировки) События по-следовательно записываются в файл до достижения им максимального размера (если он задан). : Circular Trace File (Файл циклической трассировки) Новые данные начина-ют записываться поверх старых, когда файл достигает заданного максимального размера. 7. Выберите вкладку Schedule (Расписание) и укажите, когда трассировка начинается и прекращается (см. раздел "Создание журналов счетчиков"). 8. Можно настроить ведение журналов таким образом, чтобы оно начиналось или вручную, или автоматически в указанную дату. Выберите соответствующий вари-ант, а затем укажите дату начала, если это необходимо. 9. Также и остановка ведения файла журнала настраивается или вручную, или после истечения указанного периода времени, например семи дней; в качестве альтерна-тивы можно указать конкретную дату остановки или остановку при заполнении файла (если был задан предельный размер файла). Кроме того, можно задать дей-ствие, выполняемое после закрытия файла журнала: начать новый файл журнала и/или выполнить команду операционной системы. 10. Задав расписание ведения журнала, щелкните кнопку OK. Будет создан журнал, которым можно управлять (см. раздел "Создание журналов производительности и управление ими"). Воспроизведение журналов производительности При поиске и устранении неполадок часто приходится в течение длительного времени записывать данные о производительности в журнал и позже их анализировать. Для этого выполните следующие действия. 1. Настройте автоматическое ведение журналов, как объяснялось выше, в разделе "Работа с журналами производительности". 2. Откройте компонент панели управления Performance (Производительность). В ле-вой панели выберите узел System Monitor (Системный монитор), затем в панели справа выберите из контекстного меню команду Properties (Свойства). Откроется диалоговое окно System Monitor Properties (Свойства: Системный монитор). 3. Щелкните вкладку Source (Источник). Теперь можно настроить источник, следуя указаниям ниже. : Если данные записывались в файл, установите переключатель в положение Log Files (Файлы журнала) и щелкните кнопку Add (Добавить). Отобразится диа-логовое окно Select Log File (Выбор файла журнала). Выберите файл журнала, который необходимо анализировать. : Если же данные записывались в БД, установите переключатель в положение Database (База данных) и в раскрывающемся списке System DSN (DSN систе-мы) выберите предварительно настроенное имя источника данных системы, который используется для подключения к конкретной БД, а также выберите набор записей журнала для базы данных.
Профилирование и мониторинг SQL Server 2005 Глава 13 413 4. Укажите временной интервал, который необходимо анализировать. Щелкните кнопку Time Range (Диапазон времени), затем используйте полосу прокрутки Total Range (Весь диапазон) с двумя ползунками, чтобы указать подходящее время начала и конца. 5. Выберите вкладку Data (Данные). Щелкните кнопку Add (Добавить). Откроется диалоговое окно Add Counters (Добавить счетчики), которое используется при выборе счетчиков для анализа. Примечание Доступны только счетчики, выбранные для ведения журнала. Если не по-казан счетчик, который необходимо использовать, следует изменить свойства журнала, перезапустить процесс его ведения, а затем проверить журналы. 6. Щелкните кнопку OK. В System Monitor (Системный монитор) используйте кноп-ки панели инструментов View Graph (Просмотр диаграммы), View Histogram (Про-смотр гистограммы) и View Report (Просмотр отчета) для вывода информации, основанной на выбранных счетчиках. Настройка оповещений для счетчиков производительности Существует возможность настроить оповещения, уведомляющие о наступлении не-которого события или о достижении определенного порогового значения параметров производительности. Такие оповещения отправляются в виде сетевых сообщений или событий, которые заносятся в журнал приложений. Кроме того, можно настроить опове-щения, чтобы они запускали приложения и ведение журналов производительности. Чтобы добавить оповещения для счетчиков производительности, выполните сле-дующую последовательность действий. 1. Запустите компонент панели управления Performance (Производительность). В левой панели из контекстного меню узла Alerts (Оповещения) выберите команду New Alert Settings (Новые параметры оповещений). 2. В открывшемся диалоговом окне введите имя оповещения, например "Оповеще-ние БД" или "Оповещение блокировок SQL Server" (без кавычек), затем щелкните кнопку OK. Откроется диалоговое окно, изображенное на рис. 13-12. Рис. 13-12. Диалоговое окно свойств нового оповещения
414 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 3. На вкладке General (Общие) введите дополнительное описание оповещения. Потом щелкните кнопку Add (Добавить), чтобы открыть диалоговое окно Add Counters (Добавить счетчики). 4. Выберите в этом окне счетчики, инициирующие оповещение. По завершении щелкните кнопку Close (Закрыть). 5. В списке Counters (Счетчики) выберите первый счетчик, а затем используйте раскрывающийся список Alert when the value is (Оповещать, когда значение), чтобы задать условие, которое инициирует оповещение на данном компьютере. Оповещения могут инициироваться, если счетчик больше или меньше указанного значения. Выберите значение Over (Больше) или Under (Меньше), затем в поле Limit (Порог) задайте пороговое значение для инициализации. Единица измерения не указывается, поскольку она зависит от выбранного счетчика или счетчиков. На-пример, чтобы инициировать оповещение, когда время загруженности процессора превышает 95 %; в раскрывающемся списке Alert when the value is (Оповещать, когда значение) следует выбрать параметр Over (Выше) и ввести значение 95 в поле Limit (Порог). Повторите эти действия, чтобы настроить другие выбранные счетчики. 6. В разделе Sample data every (Снимать показания каждые) в поле Interval (Ин-тервал) введите интервал съема показаний счетчиков, а в поле Units (Едини-цы) - единицу времени в секундах, минутах, часах или днях. Если показания снимаются каждые 10 минут, то и журнал будет обновляться через этот проме-жуток времени. Внимание! Не снимайте показания счетчиков слишком часто. Данная процедура ис-пользует системные ресурсы, что может сказаться на времени реакции сервера. 7. В поле Run As (От имени) введите имя учетной записи, под которой будет вы-полняться журнал, и затем щелкните кнопку Set Password (Задать пароль). В диа-логовом окне Set Password (Установка пароля) введите и подтвердите пароль для учетной записи; после чего щелкните кнопку OK. Чтобы журнал велся под системной учетной записью по умолчанию, значение в поле Run As (От имени) должно быть <Default> (<По умолчанию>). 8. Выберите вкладку Action (Действие), показанную на рис. 13-13. Теперь установкой соответствующего флажка можно указать любое из следующих действий, которое будет выполняться при инициировании оповещения. : Log an entry in the application event log (Сделать запись в журнал событий приложений) Создает в журнале записи для оповещений. : Send a network message to (Послать сетевое сообщение) Посылает сетевое сообщение указанному компьютеру. : Start performance data log (Запустить журнал производительности) Пред-писывает запустить журнал счетчика (выбранный в связанном раскрывающемся списке), когда происходит оповещение. : Run this program (Запустить программу) Задает полный путь к программе или пакетному файлу, который следует выполнить при оповещении. 9. На вкладке Schedule (Расписание) укажите, когда отслеживание оповещений начинается и прекращается (например, настройте начало отслеживания на вечер пятницы, а окончание на утро понедельника). В этом случае, если в указанный период происходит событие, инициирующее оповещение, будут выполняться со-ответствующие действия.
Профилирование и мониторинг SQL Server 2005 Глава 13 415 Рис. 13-13. Вкладка Action диалогового окна свойств оповещений Совет Оповещения можно настроить таким образом, чтобы при их инициализации за-пускались программы с расширением .exe либо пакетные файлы с расширениями .bat или .cmd. Обязательно задавайте полный путь к программе или пакетному файлу. Поле Run this program (Запустить программу) принимает только правильные пути к файлам. Если ввести недопустимый путь к файлу и щелкнуть кнопку OK или попытаться выбрать другую вкладку, появится предупреждение о том, что путь неверен. Чтобы передать аргументы программе или пакетному файлу, используйте диалоговое окно Command line arguments (Аргументы командной строки), щелкнув одноименную кнопку. Обычно аргументы передаются в виде отдельных символьных строк. Однако если установить флажок Single argument string (Строка одиночного аргумента), аргументы будут переданы в виде разделенного запятыми списка внутри одной символьной строки. В поле Example command line arguments (Образец аргументов командной строки) выводится образец, как будут переданы аргументы. 10. Оповещения можно настроить и так, чтобы их отслеживание начиналось вручную (с помощью контекстного меню) или же автоматически в указанную дату. Выберите соответствующий вариант (если необходимо, укажите дату начала). 11. Существуют и другие возможности настройки: назначить остановку работы опо-вещений вручную или автоматически после истечения указанного периода времени (например, семи дней) или же задать остановку в конкретную дату и время. 12. По окончании назначения расписания щелкните кнопку OK. Теперь можно управ-лять оповещениями таким же образом, как и журналами счетчиков и трассировки. Решение проблем производительности с помощью утилиты SQL Server Profiler Приходится ли вам наблюдать за активностью пользователей, устранять проблемы с подключением или же оптимизировать работу SQL Server - утилита SQL Server Profiler является одним из лучших средств для решения подобных задач. С помощью этой 
416 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 специализированной утилиты можно проводить трассировку событий, возникающих в SQL Server. События, отслеживаемые в утилите SQL Server Profiler, подобны счет-чикам, мониторинг которых ведется в System Monitor (Системный монитор). Они организованы в группы, называемые категориями событий, благодаря чему можно от-слеживать одно или больше событий для каждой из доступных категорий. Сильными сторонами утилиты SQL Server Profiler являются дополнительная функциональность и широкие возможности настройки. Трассировки утилиты SQL Server Profiler можно записывать и затем воспроизво-дить, когда возникает необходимость анализировать данные, - это одна из сфер, где утилита проявляет себя с наилучшей стороны. Она позволяет: использовать предоставляемую информацию, чтобы обнаружить медленно вы-полняющиеся запросы и выяснить причину этого; выполнять инструкции пошагово; отследить ряд запросов, которые приводят к какой-либо проблеме, и затем вос-произвести трассировку на тестовом сервере для выяснения причины; использовать информацию трассировок, чтобы установить причину тупиковых блокировок; вести мониторинг активности пользователей и приложений для выявления дей-ствий, занимающих время процессора, или запросов, обработка которых требует длительного времени. В следующих разделах рассматриваются возможности работы с утилитой SQL Server Profiler, а также вопросы создания трассировок и управления ими. Использование утилиты SQL Server Profiler Утилиту SQL Server Profiler можно запустить двумя способами. 1. Выберите в меню Start (Пуск) команду Programs (Программы) или All Programs (Все программы), далее Microsoft SQL Server 2005\Performance Tools, где щелкните SQL Server Profiler. 2. В SQL Server Management Studio выберите команду SQL Server Profiler в меню Tools (Сервис). На рис. 13-14 показана утилита SQL Server Profiler в процессе выполнения трас-сировки. Перечень столбцов, выводимых для трассировки, полностью настраивается во время задания параметров трассировки; столбцы можно добавлять и удалять по мере необходимости. Два столбца, на которые следует обратить особое внимание при анализе проблемы, - это Duration (Длительность) и CPU (Процессор). В столбце Duration (Длительность) показана (в миллисекундах) продолжительность конкретного события. В столбце CPU (Процессор) выводится количество времени (в миллисе-кундах), которое требуется процессору на обработку этого события. Хранимые процедуры являются альтернативой утилите SQL Server Profiler. Их использование дает некоторые дополнительные возможности, недоступные в утилите SQL Server Profiler. Например, можно: сохранять трассировки в журнале приложений Windows; автоматически запускать трассировку при запуске SQL Server; передавать данные о событиях на другой компьютер, где запущен SQL Server (только для Windows).
Профилирование и мониторинг SQL Server 2005 Глава 13 417 Рис. 13-14. Диалоговое окно утилиты SQL Server Profiler Чтобы создать трассировки при помощи хранимых процедур, выполните следу-ющие действия. 1. Создайте определение трассировки, воспользовавшись хранимой процедурой sp_trace_create. 2. Укажите события, которые следует фиксировать, применив хранимую процедуру sp_trace_setevent. 3. Задайте фильтры событий с помощью хранимой процедуры sp_trace_setfilter. Создание новых трассировок Трассировки для записи событий создаются как на локальном, так и на удаленных SQL Server. Запустив процесс в окне утилиты SQL Server Profiler, трассировку можно сохранить для дальнейшего анализа. Чтобы начать новую трассировку, выполните следующую последовательность действий. 1. Щелкните кнопку New Trace (Создать трассировку) в панели инструментов или выберите в меню команду File\New Trace (Файл\Создать трассировку). 2. При помощи диалогового окна Connect to Server (Подключиться к серверу) уста-новите соединение с сервером, трассировку которого необходимо произвести. 3. Откроется диалоговое окно Trace Properties (Свойства трассировки). 4. В поле Trace name (Имя трассировки) введите имя трассировки, например "Трас-сировка данных" или "Трассировка тупиковых блокировок в CustomerDB" (без кавычек).
418 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 5. Можно задать сохранение трассировок по мере их создания, установив флажки Save to file (Сохранять в файл) или Save to table (Сохранять в таблицу), либо оба. Желая сохранить выполняемую трассировку, выберите в меню File (Файл) команду Save As (Сохранить как), а затем команду Trace File (Файл трассировки) либо Trace Table (Таблица трассировки). Совет Существует ряд преимуществ и недостатков при использовании как файлов, так и таблиц трассировки. Файлы позволяют сохранять трассировки быстро и эффективно, за действуя при этом минимум системных ресурсов. С помощью таблиц легко сохранять трас сировки непосредственно в таблице на другом сервере, но будет затрачено значитель-но больше системных ресурсов и увеличится время реакции сервера. При со хранении трассировки сохраняются только ее данные. Определение трассировки не сохра няется. Для повторного использования определения трассировки нужно его экспортировать. 6. Для сохранения определений трассировки применяются шаблоны SQL Server Profiler, содержащие события, столбцы данных и фильтры, которые используются в трассировке. Такой шаблон можно выбрать в раскрывающемся списке Use the template (Использовать шаблон). Для воспроизведения трассировки выберите шаблон TSQL_Replay. Примечание Файлы шаблонов SQL Server Profiler имеют расширение .tdf. 7. Щелкните вкладку Events Selection (Выбор событий). Указанный ранее шаблон определяет события, выбранные по умолчанию для трассировки. Лучший способ узнать, какие типы событий можно трассировать, - это прочитать их описание внизу вкладки Events Selection (Выбор событий). Для этого переместите указатель мыши на событие или конкретный столбец трассируемых данных - и вы увидите детальное описание этого события и/или столбца трассируемых данных. 8. По умолчанию выводится только подмножество трассируемых событий и кате-горий событий. Чтобы увидеть все доступные категории событий, установите флажок Show all events (Показать все события). Предоставляются следующие категории трассируемых событий: Broker (Брокер), CLR (Общеязыковая испол-няющая среда), Cursors (Курсоры), Database (База данных), Deprecation (Устарев-шие возможности), Errors and Warnings (Ошибки и предупреждения), Full text (Полнотекстовый поиск), Locks (Блокировки), OLEDB (Программный интерфейс OLEDB), Objects (Объекты), Performance (Производительность), Progress Report (Отчет о ходе выполнения), Query Notifications (Уведомления о запросах), Scans (Сканирование), Security Audit (Аудит безопасности), Server (Сервер), Sessions (Сеансы), Stored Procedures (Хранимые процедуры), TSQL (Transact-SQL), Transactions (Транзакции) и User Configurable (Настраиваемые пользователем). 9. По умолчанию выводится только подмножество столбцов трассируемых данных. Для того чтобы увидеть все доступные столбцы, установите флажок Show all columns (Показать все столбцы). 10. Выберите подкатегории событий (установив соответствующие флажки возле их имен), которые следует добавить в трассировку. Для выбираемой подкатегории будут трассироваться все столбцы данных. 11. В случае необходимости выберите для трассировки конкретные столбцы данных для подкатегории событий (если не требуется трассировать все столбцы данных подкатегории). Рекомендуется трассировать как минимум такие столбцы (первый элемент до двоеточия - имя категории событий): : Cursors:CursorExecute; : Cursors:CursorOpen;
Профилирование и мониторинг SQL Server 2005 Глава 13 419 : Cursors:CursorPrepare; : Sessions:ExistingConnection; : Stored Procedures:RPC:OutputParameter; : Stored Procedures:RPC:Starting; : TSQL:Exec Prepared SQL; : TSQL:Prepare SQL; : TSQL:SQL:BatchStarting. Совет Когда производится трассировка распределенных запросов, убедитесь, что выбран столбец HostName (ИмяКомпьютера). Для трассировки транзакций не забудьте включить столбец TransactionID (Идентификатор транзакции). Если планируется воспроизводить трассировку для устранения неполадок, обратитесь к разделу "Воспроизведение трас-сировок" далее в этой главе. 12. Чтобы сосредоточить выполнение трассировки на получении специальной инфор-мации, можно установить критерии для исключения определенных типов собы-тий. Выберите в списке категорию событий, для которой необходимо установить фильтр, и щелкните кнопку Column Filters (Фильтры столбцов). Откроется диа-логовое окно Edit Filter (Редактировать фильтр), где укажите критерии фильтра. Для каждой категории событий можно указать разные критерии фильтра. Чтобы их использовать, в иерархическом списке критериев раскройте соответствующий узел и в появившемся поле задайте нужное значение. Существуют следующие критерии фильтра. : Equals (Равно), Not equal to (Не равно), Greater than or equal (Больше или равно) или Less than or equal (Меньше или равно) Используйте эти крите-рии, чтобы задать значения, инициирующие события. События со значениями, не попадающими в указанный диапазон, исключаются. Например, для катего-рии событий CPU (Процессор) можно указать, чтобы фиксировались только события, использующие не меньше 1000 мс времени процессора. Остальные события при этом будут исключаться. : Like (Подобно) или Not like (Не подобно) Введите символьные строки, которые следует включать или исключать для этой категории событий. Ис-пользуйте символ-заместитель "%" для замещения произвольного количества символов и точку с запятой (;), чтобы разделить несколько строк. Например, для столбца ApplicationName (ИмяПриложения) можно указать, чтобы ис-ключались из трассировки все приложения, имя которых начинается с "MS" и "SQL Server", введя MS%;SQL Server%. 13. По окончании настройки щелкните кнопку Run (Выполнить), чтобы начать вы-полнение трассировки. Работа с трассировками Утилита SQL Server Profiler выводит информацию о нескольких трассировках в от-дельных окнах, которые можно разместить каскадом, сверху вниз или слева направо. Для работы с трассировками используйте кнопки в панели инструментов. Чтобы создать новую трассировку, щелкните кнопку New Trace (Создать трассировку) и в диалоговом окне Trace Properties (Свойства трассировки) выполните ее настройку. Для создания нового шаблона трассировки щелкните кнопку New Template (Создать шаблон) и в диалоговом окне Trace Template Properties (Свойства шаблона трассиров-ки) задайте параметры шаблона; по окончании щелкните кнопку Save (Сохранить). После создания трассировки можно сделать следующее.
420 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Запустить трассировку, щелкнув кнопку Start Selected Trace (Запуск выбранной трассировки). Приостановить трассировку кнопкой Pause Selected Trace (Приостановка вы-бранной трассировки). Чтобы возобновить трассировку с точки, в которой она была приостановлена, используйте кнопку Start Selected Trace (Запуск выбранной трассировки). Остановить трассировку, щелкнув кнопку Stop Selected Trace (Остановка выбран-ной трассировки). Если опять начать трассировку кнопкой Start Selected Trace (Запуск выбранной трассировки), SQL Server Profiler будет показывать данные с самого начала процесса трассировки; новые данные добавляются в конце файлов и таблиц. Изменить свойства трассировки с помощью кнопки Properties (Свойства). Сохранение трассировки При создании трассировки создаются данные и определение трассировки. Данные трассировки выводятся в окне утилиты SQL Server Profiler, а сохраняются в файле, таблице либо и там, и там. Записи трассировки отображают историю отслеживаемых событий, которую можно использовать для воспроизведения событий при дальней-шем анализе. В диалоговом окне Trace Properties (Свойства трассировки) выводится определение трассировки. Его можно использовать, чтобы создать новую трассировку на основе уже существующей. Для сохранения данных трассировки выполните предложенные действия. 1. Сделайте активным окно утилиты SQL Server Profiler, где выведена трассировка, которую необходимо сохранить. 2. Выберите в меню File (Файл) команду Save As (Сохранить как), затем команду Trace File (Файл трассировки) либо Trace Table (Таблица трассировки). 3. Используя диалоговое окно Save As (Сохранить как), разместите файл. Введите имя файла и щелкните кнопку Save (Сохранить). Файлы трассировки имеют рас-ширение .trc. Чтобы сохранить определение трассировки, выполните следующие действия. 1. Сделайте активным окно утилиты SQL Server Profiler, где выведена трассировка с определением, которое необходимо сохранить. 2. Выберите в меню File (Файл) команду Save As (Сохранить как), а затем команду Trace Template (Шаблон трассировки). 3. В диалоговом окне Select Template Name (Выбор имени шаблона) введите имя шаблона и щелкните кнопку OK (выбрать размещение файла нельзя). Файлы шаблонов трассировки имеют расширение .tdf. Воспроизведение трассировок Одна из главных причин создания трассировок - возможность их сохранения и по-следующего воспроизведения. При воспроизведении трассировки утилита SQL Server Profiler может имитировать подключение и аутентификацию пользователей, что по-зволяет восстановить активность, записанную в трассировке. В зависимости от типа проблем, трассировку можно воспроизводить разными способами: пошагово, чтобы иметь возможность внимательно анализировать каждый шаг; используя исходную шкалу времени для имитации пользовательской нагрузки; с высокой скоростью, чтобы создать большую тестовую нагрузку на серверы.
Профилирование и мониторинг SQL Server 2005 Глава 13 421 В ходе наблюдения за выполнением трассировки можно искать проблемные об-ласти, а после идентификации причин, исправить и перезапустить определение ис-ходной трассировки. Если проблемы все же останутся, нужно либо сделать повторный анализ данных трассировки, либо попытаться найти другие области, которые могут вызывать проблемы. Помните, что в последующую трассировку можно включить другие события. Требования для воспроизведения трассировок Трассировки должны содержать определенный минимальный набор событий и столб-цов данных. В противном случае ее воспроизвести не удастся. Обязательные элементы являются дополнением к любым другим элементам, наблюдаемым или выводимым с помощью трассировки. Для того чтобы правильно воспроизводить и анализировать трассировку, следует фиксировать такие события: Connect; CursorExecute (требуется только при воспроизведении курсоров сервера); CursorOpen (только при воспроизведении курсоров сервера); CursorPrepare (при воспроизведении курсоров сервера); Disconnect; Exec Prepared SQL (требуется только при воспроизведении подготовленных SQL-команд); ExistingConnection; Prepare SQL (только при воспроизведении подготовленных SQL-команд); RPC:OutputParameter; RPC: Starting; SQL:BatchStarting. С той же целью необходимо фиксировать следующие столбцы данных: ApplicationName; BinaryData; ConnectionID или SPID; DatabaseID; EventSubClass; HostName; IntegerData; ServerName; LoginName; StartTime; TextData. Воспроизведение трассировок на другом сервере Можно воспроизвести трассировку на сервере, отличном от того, который трассиро-вался. Когда трассировка воспроизводится на другом сервере, такой сервер называется целевой системой. Чтобы воспроизвести трассировку на целевой системе, убедитесь, что все учетные записи, содержащиеся в трассировке: были созданы на целевой системе и находятся в той же базе данных, что и на ис-ходной системе;
422 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 имеют те же права доступа, что и на исходной системе; имеют те же пароли, что и на исходной системе; настроены на использование такой же БД по умолчанию, как и на исходной си-стеме. Если указанные настройки на этих двух системах не идентичны, появятся со-общения об ошибках, но процесс воспроизведения будет продолжен. Кроме того, идентификаторы баз данных (поле DatabaseID) на целевой системе должны совпадать с идентификаторами на исходной. Чтобы настроить БД на целевой системе, используя самый простой способ, выполните следующее. 1. Создайте резервную копию базы данных master и всех пользовательских БД, при-меняемых в трассировке. 2. Восстановите резервную копию на целевой системе, как объясняется в разделе "Восстановление БД в другое место" главы 14. Воспроизведение и анализ трассировок Воспроизведение трассировки полезно при анализе проблемы. Запустите утилиту SQL Server Profiler, затем щелкните в панели инструментов кнопку Open Trace File (Открыть файл трассировки) или Open Trace Table (Открыть таблицу трассировки), в зависимости от типа трассировки, которую необходимо воспроизвести. После вы-бора трассировки она загружается в окно утилиты SQL Server Profiler. События и инструкции, записанные в трассировке, выводятся в окне утилиты SQL Server Profiler в сводном виде, как показано на рис. 13-15. Чтобы увидеть полный список выполнен-ных команд, щелкните соответствующую запись в окне трассировки. Рис. 13-15. Окно воспроизведения трассировки утилиты SQL Server Profiler
Профилирование и мониторинг SQL Server 2005 Глава 13 423 Как видно из рис. 13-15, панель инструментов в окне воспроизведения несколько отличается от стандартной. Следующие кнопки обеспечивают все необходимые ко-манды для отладки трассировки. Start Replay (Запуск воспроизведения) Запускает выполнение трассировки. Pause Replay (Приостановка воспроизведения) Приостанавливает выполнение трассировки. Stop Replay (Остановка воспроизведения) Останавливает выполнение трасси-ровки. Execute One Step (Выполнить один шаг) Позволяет пошагово проходить трас-сировку. Run to Cursor (Выполнить до курсора) Позволяет проходить трассировку, ис-пользуя позиции курсора. Toggle Breakpoint (Установить\Снять точку прерывания) Дает возможность установить точки прерывания для выполнения трассировки. Прежде чем запустить воспроизведение трассировки, необходимо подключиться к серверу. Затем в начальном диалоговом окне Replay Configuration (Настройка вос-произведения), показанном на рис. 13-16, следует установить параметры, задающие, где и как будет проходить воспроизведение. Начните с указания сервера назначения для операции воспроизведения. По умолчанию установлен текущий (локальный) сервер. Щелкните кнопку Change (Изменить), если для воспроизведения нужно ис-пользовать другой сервер. Рис. 13-16. Диалоговое окно Replay Configuration Следующие параметры воспроизведения определяют, насколько точно воспроиз-ведение отражает исходное выполнение. Replay events in the order they were traced (Воспроизводить события в порядке их трассировки) Если установить переключатель в это положение, воспроизве-дение событий начинается в том порядке, в котором они происходили в исходной трассировке. Это позволяет отлаживать трассировку, но не гарантирует соблюде-ния временных рамок событий. События могут выполняться раньше или позже их исходного времени выполнения, в зависимости от уровня текущей активности, скорости установления соединения и других факторов.
424 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Replay events using multiple threads (Воспроизводить события, используя мно-жественные потоки) При таком положении переключателя события воспро-изводятся с максимально возможной скоростью. Временные рамки событий не соблюдаются. Когда одно событие завершается, другое начинается немедленно. Это оптимизирует производительность, но делает отладку невозможной. Display replay results (Выводить результаты воспроизведения) Данный флажок контролирует вывод результатов воспроизведения в окне утилиты SQL Server Profiler. Установите его для вывода результатов. Снимите флажок, если в отобра-жении результатов нет необходимости. Можно указать выходной файл для сохранения результатов воспроизведения и их последующего просмотра. Выходной файл позволяет просматривать результаты вос-произведения таким же образом, как и в случае с файлом трассировки.
Глава 14 Резервное копирование и восстановление SQL Server 2005 Информация - своего рода топливо, движущее предприятие, причем наиболее крити-ческая информация зачастую хранится в БД. Это могут быть счета клиентов, каталоги партнеров, базы знаний о товарах, а также другие важные данные. Для защиты данных организации и для обеспечения доступности ее баз данных необходимо иметь хорошо продуманный план резервного копирования и восстановления БД. Резервное копирование баз данных может обеспечить защиту от их повреждения, случайной потери информации, отказов оборудования и даже природных катаклиз-мов. В обязанности администратора БД входит выполнение резервного копирования и хранение созданных резервных копий в безопасном месте. Составление плана резервного копирования и восстановления Составление и внедрение плана резервного копирования и восстановления является одной из наиболее важных задач администратора БД. Резервное копирование БД сле-дует рассматривать как план страхования на будущее (а также как гарантию вашего трудоустройства). Данные могут быть удалены случайно, критически важная инфор-мация повреждена, а ваш офис вследствие природных катаклизмов превратиться в руины. Однако существует возможность восстановиться после таких ситуаций, если составлен надежный план резервного копирования и восстановления. В противном случае восстановить данные будет просто не из чего. Начальное планирование резервного копирования и восстановления Для создания и внедрения плана резервного копирования и восстановления требуется время. Следует выяснить, резервные копии каких баз данных нужно создавать, как часто это стоит делать и т. д. Необходимую информацию можно получить, ответив на следующие вопросы. Каков тип БД, резервные копии которых будут создаваться? Зачастую требова-ния к резервному копированию и восстановлению у системных и пользовательских баз данных разные. Например, БД master является ключевой для функциониро-вания SQL Server - в случае ее сбоя или повреждения сервер остановится. Но создавать резервные копии базы данных master каждый час, как для критически важных пользовательских БД, записывающих транзакции в реальном времени, все же нет необходимости. Это требуется делать только в таких ситуациях: после создания новой базы данных, изменения значений параметров конфигурации, на-стройки учетных записей SQL Server или выполнения подобных задач, которые вносят изменения в системные базы данных на сервере. Насколько важной является информация в БД? Ответ на этот вопрос поможет вам определить, когда и как следует создавать резервные копии той или иной 
426 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 БД. Например, для баз данных, разрабатывающих приложения, достаточно бу-дет производить этот процесс раз в неделю, а для БД, задействованных в произ-водстве, - как минимум ежедневно. Важность данных влияет также на решение о ти пе резервного копирования. Для сохранности данных БД разработки обычно достаточно полного резервного копирования один раз в неделю. В то же время полная копия БД заказов клиентов, обновляемая ежедневно, может создаваться два раза в неделю и дополняться ежедневными дифференциальными резервными копиями, а также ежечасными резервными копиями журналов транзакций. Может даже понадобиться устанавливать в журналах именованные метки, позволяющие провести восстановление до конкретной точки. Как часто вносятся изменения в БД? От этого напрямую зависит и частота резервного копирования. Поскольку базы данных, доступные только для чтения, обычно не изменяются, нет необходимости и в их регулярном резервном копирова-нии. А вот для БД, которая обновляется, скажем, каждую ночь, требуется создавать резервную копию после каждого такого ночного внесения изменений. Само собой понятно, что база данных, обновляемая круглосуточно, должна резервироваться непрерывно. Насколько быстрым должно быть восстановление данных? При создании плана резервного копирования важно учесть количество времени, требуемое на восста-новление данных. Поэтому в отношении критически важных БД, требующих бы-строго возвращения в рабочее состояние, вместо накопителя на магнитных лентах стоит запланировать использование жесткого диска или нескольких устройств резервного копирования. Имеется ли необходимое оборудование для создания резервных копий? Для своевременного создания резервных копий требуется специализированное обо-рудование: несколько устройств резервирования и несколько наборов носителей для хранения резервных копий. Устройствами резервного копирования выступают накопители на магнитных лентах, оптические накопители, съемные дисковые на-копители, а также старые добрые дисковые накопители. В какое время оптимально назначить проведение резервного копирования? Луч-ше всего для этого подходит время минимального использования БД, поскольку тогда процесс создания резервных копий будет выполняться быстрее. Однако на практике назначить проведение резервного копирования на время наименьшей активности не всегда удается, поэтому к планированию расписания резервного копирования важных баз данных следует подойти очень внимательно. Нужно ли хранить резервные копии вне предприятия? Именно хранение ре-зервных копий вне компании позволит восстановить системы после стихийного бедствия. За пределами фирмы следует также хранить копии программного обеспе-чения, которое потребуется для возобновления работы воссоздаваемых систем. Примечание Возможности обеспечения доступности БД, например передача журналов, не заменяют резервного копирования. Даже при использовании передачи журналов, зер-кального отображения Бд и организации кластера создание резервных копий необходимо. Резервное копирование баз данных отличается от резервного копирования сервера или рабочей станции. Главное различие состоит в том, что для обеспечения полной восстанавливаемости БД часто приходится объединять все (или почти все) доступные возможности. Ниже указаны основные типы резервного копирования БД. Полное резервное копирование Создаются полные копий БД - все объекты, системные таблицы и данные. Когда процесс резервного копирования начинается, 
Резервное копирование и восстановление SQL Server 2005 Глава 14 427 SQL Server копирует все содержание БД, а также включает части журнала транзак-ций, используемые во время создания резервных копий. Таким образом, полную резервную копию можно использовать, чтобы полностью восстановить состояние, которое база данных имела на момент завершения процесса резервирования. Дифференциальное резервное копирование. Копируются данные, которые изме-нились с момента последнего полного резервного копирования. Так как сохраняют-ся только изменения, резервное копирование этого типа является более быстрым и его можно проводить чаще. Как и полные резервные копии, дифференциальные копии содержат части журналов транзакций, необходимые для восстановления базы данных в состояние, которое она имела на момент завершения резервного копирования. Примечание Дифференциальное резервное копирование используется только в соче-тании с полным резервным копированием; дифференциальные копии БД master создать невозможно. Не следует путать дифференциальное и инкрементное резервное копи-рование. В первом случае записываются все изменения, произошедшие с момента по-следнего полного копирования (что влечет за собой увеличение объема каждой после-дующей дифференциальной копии). Инкрементное резервное копирование записывает изменения после последнего полного или инкрементного резервного копирования (то есть объем инкрементной копии обычно значительно меньше, чем при полном резервном копировании). Резервное копирование журналов транзакций Журналы транзакций - это по-следовательные записи всех изменений в БД; они используются в процессе вос-становления для фиксации завершенных транзакций и отката незавершенных. При создании резервной копии журнала транзакций в нее записываются изменения, произошедшие после последнего резервного копирования журнала транзакций, а затем журнал усекается, что очищает его от транзакций, которые были завершены или прерваны. В отличие от полного и дифференциального резервного копирова-ния, в этом случае записывается состояние журнала транзакций на момент начала операции резервного копирования, а не на момент ее завершения. Резервное копирование файлов и групп файлов Создаются резервные копии отдельных файлов и групп файлов БД, а не базы данных целиком. Это позволяет сэкономить время, поэтому данный тип резервного копирования полезен при ра-боте с большими БД. Однако здесь существует ряд факторов, о которых нельзя забывать, например о необходимости создания также и резервных копий журнала транзакций. В связи с этим, если установлен параметр базы данных trunc. log on chkpt, данный метод резервного копирования использовать нельзя. Кроме этого, если объекты БД физически распределены по нескольким файлам или группам файлов, их следует резервировать одновременно. Примечание Полнотекстовые каталоги трактуются как файлы базы данных и связывают-ся с определенной группой файлов. Расположение полнотекстового каталога указывается при его создании. Когда связанная группа файлов резервируется или восстанавливается, полнотекстовый каталог включается в эту резервную копию. Для планирования резервного копирования SQL Server 2005 использует модели восстановления БД. На решение о выборе модели восстановления влияют типы ре-зервируемых баз данных и выполняемого резервного копирования. Ниже указаны три существующие модели восстановления. Simple (Простая) Предназначена для баз данных, которые нужно восстанав-ливать до точки последнего резервного копирования. При использовании этой модели стратегия резервного копирования должна предусматривать создание 
428 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 полной и дифференциальной резервных копий. Следует помнить, что резервное копирование журналов транзакций в этом случае невозможно. SQL Server 2005 автоматически включает для БД параметр trunc. log on chkpt, поэтому при вы-полнении контрольной точки журнал транзакций очищается от неактивных за-писей. Так как эта модель чистит журналы транзакций, она идеально подходит большинству системных БД. Full (Полная) Применяется для баз данных, которые необходимо восстанавли-вать до точки отказа либо до конкретной точки во времени. Все операции в БД вносятся в журнал, включая массивную загрузку данных. Стратегия резервного копирования при использовании этой модели возможна в двух вариантах: создание полных и дифференциальных резервных копий в сочетании с копиями журналов транзакций или же только полных копий и копий журналов транзакций. Bulk-Logged (Минимальное ведение журнала) Сокращает использование про-странства в журналах, но сохраняет большую часть возможностей полного резерв-ного копирования. Массовые операции с данными заносятся в журнал минимально, что не позволяет контролировать каждую такую операцию в отдельности. Поэтому если сбой базы данных произойдет перед созданием очередной полной или диф-ференциальной копии, операции массовой загрузки придется повторить вручную. Стратегия резервного копирования при использовании этой модели возможна в двух вариантах: создание полных и дифференциальных резервных копий в со-четании с копиями журналов транзакций или же только полных копий и копий журналов транзакций. Для каждой базы данных может быть задана своя модель восстановления. По умол-чанию для БД master, msdb и tempdb используется простая модель восстановления, а для БД model - полная. Как вы помните, БД model является шаблоном для всех создаваемых баз данных, поэтому по умолчанию они будут использовать ее модель восстановления. Чтобы задать модель восстановления, выполните указанные дальше действия. 1. Запустите SQL Server Management Studio. В панели Object Explorer (Обозреватель объектов) установите соединение с нужным сервером. 2. Если нужно переключиться с модели минимального ведения журнала на простую модель восстановления, сначала создайте резервную копию журнала транзакций, а затем внесите изменения в стратегию резервного копирования таким образом, чтобы резервные копии журнала транзакций больше не создавались. 3. Раскройте папку Databases (Базы данных). Если изменяется модель восстановле ния системной БД, раскройте папку System Databases (Системные базы данных). 4. В контекстном меню необходимой базы данных выберите команду Properties (Свой-ства). Откроется диалоговое окно Database Properties (Свойства базы данных ). 5. Чтобы изменить модель восстановления, используйте раскрывающийся список Recovery model (Модель восстановления) на странице Options (Параметры), затем щелкните кнопку OK. 6. При переключении с простой модели восстановления на полную или на модель с минимальным ведением журнала в стратегию резервного копирования следует добавить создание резервной копии журнала транзакций. SQL Server 2005 предоставляет несколько возможностей для создания резервных серверов. В общем случае существует три типа резервных серверов. Сервер "горячего резерва" Автоматически обновляемый сервер, начинающий работу немедленно после сбоя основного сервера или БД.
Резервное копирование и восстановление SQL Server 2005 Глава 14 429 Сервер "теплого резерва" Автоматически обновляемый сервер, который в случае отказа основного сервера или БД нужно перевести в рабочий режим вручную. Сервер "холодного резерва" Сервер, обновляемый вручную, который в случае отказа основного сервера или БД переводится в рабочий режим вручную. Создавать резервные серверы позволяют такие возможности SQL Server, как зер-кальное отображение баз данных, передача журналов транзакций и копирование БД. Зеркальное отображение баз данных используется для создания сервера "горячего резерва", называемого зеркальным сервером, на котором БД обновляется непрерывно, а система, в случае отказа основной базы данных, переключается на него автомати-чески. Передача журналов транзакций используется для создания сервера "теплого резерва", называемого дополнительным сервером. На нем база данных обновляется с помощью резервных копий журналов транзакций автоматически, но в случае отказа основной БД такой сервер нужно перевести в рабочий режим вручную. И, наконец, копирование базы данных применяется для сервера "холодного резерва", где и БД обновляется вручную, и перевод сервера в рабочий режим в случае отказа основной базы данных также осуществляется вручную. Планирование зеркального отображения и резервного копирования зеркальной БД Зеркальное отображение* позволяет создавать серверы "горячего резерва". Отобра-зить таким образом можно любую базу данных, кроме master, msdb, tempdb и model. Настраивается и включается зеркальное отображение с помощью страницы Mirro ring (Зеркальное отображение) диалогового окна Database Properties (Свойства базы данных). Как обсуждалось в разделе "Обеспечение доступности и масштабируемости системы" главы 2, для зеркального отображения требуется три сервера: основной, зеркальный и сервер-свидетель. Для зеркальных БД резервное копирование выполняется не так, как для других. Когда настроено зеркальное отображение, резервные копии основной БД используются для инициализации зеркальной БД на зеркальном сервере. Как часть создания зеркаль-ной копии, можно создать резервные копии отдельных файлов и групп файлов и затем восстановить их. Однако перед началом зеркального отображения следует восстано-вить все файлы и группы файлов. Если необходимо работать только с подмножеством базы данных и ее объектов, используйте репликацию, как описано в главе 12. При зеркальном отображении баз данных помните следующее. Если зеркальное отображение БД активировано, нельзя создавать резервные копии и восстанавливать их для зеркальной БД. При создании резервных копий основной БД нельзя использовать инструкцию BACKUP LOG с параметром NORECOVERY. Резервную копию основной БД нельзя восстанавливать (ведь именно для этого и используется зеркальное отображение). После переключения на зеркальный сервер он сам скорректирует зеркальную БД. Планирование резервного копирования реплицированных БД Реплицированные базы данных представляют отдельную проблему при планировании резервного копирования и восстановления, в основном по причине того, что традицион ная * Как уже упоминалось ранее, зеркальное отображение баз данных было оставлено в оконча-тельной версии SQL Server 2005 лишь в целях ознакомления, поэтому применяя эту возможность для промышленных баз данных, вы рискуете остаться без технической поддержки. - Прим. ред.
430 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 архитектура баз данных расширяется: серверы - участники репликации - выполня-ют функции издателя, дистрибьютора и подписчика, хранящих, соответственно, БД публикаций, распространения и подписки, для каждой из которых требуется отдель-ный подход к созданию и восстановлению резервных копий (подробнее об издателях, дистрибьюторах и подписчиках см. в главе 12). Как и в случае других системных БД, нужно регулярно создавать резервные копии БД публикаций, распространения и подписки. Кроме того, одновременно с проведе-нием резервного копирования реплицированных баз данных необходимо создавать и резервные копии системных БД master и msdb. При восстановлении БД публикаций на издателе, БД распространения на дистрибьюторе и БД подписки на подписчике следует восстанавливать также БД master и msdb.ter. Резервные копии базы данных подписки должны быть не старше самого краткого периода сохранности всех публикаций для подписчика. То есть если самый короткий период сохранности составляет 10 дней, то восстанавливаемая резервная копия тоже должна быть не старше 10 дней. Чтобы обеспечить успешное восстановление базы данных подписки, перед созданием ее резервной копии подписчик должен синхрони-зироваться с издателем. Также они должны синхронизироваться после восстановления БД подписки. Синхронизация перед резервным копированием гарантирует, что если база данных подписки восстановлена из резервной копии, подписка будет находиться в пределах периода сохранности публикации. Реплицированные базы данных могут восстанавливаться как на тот же сервер и в ту же базу данных, с которых создана резервная копия, так и на другой сервер в другую БД. Если реплицированная база данных восстанавливается на другой сервер или в другую БД, параметры репликации не сохраняются, поэтому после восстановления из резервной копии потребуется повторно создать все публикации и подписки, за ис-ключением использования передачи журналов транзакций. В этом случае параметры репликации сохранятся. При использовании репликации сведением все изменения, касающиеся реплика-ции, должны отображаться в резервных копиях журнала транзакций. Если резерви-рование журнала транзакций не ведется, после изменения параметров репликации необходимо немедленно проводить резервное копирование базы данных публикаций. После восстановления БД публикаций из резервной копии следует либо синхрони-зировать БД публикаций с БД подписки, либо повторно инициализировать все под-писки на публикации в базе данных публикаций. Синхронизация БД публикаций и повторная инициализация подписок описаны в разделе "Подписка на публикацию" главы 12. После восстановления базы данных нужно обязательно проверить диапазоны значений в столбцах IDENTITY. Примечание При репликации сведением роль БД распространения ограничена. Она не хранит данных, используемых для отслеживания изменений, и не предоставляет до-полнительное место для хранения изменений, которые передаются в БД подписки (как это происходит при репликации транзакций). В случае репликации транзакций следует установить параметр sync with backup для баз данных распространения и публикаций (это можно сделать с помощью хранимой процедуры sp_replicationdboption). Установка параметра для базы данных распространения гарантирует, что не про-изойдет усечения транзакций в журнале БД публикаций до тех пор, пока не будет создана их резервная копия в БД распространения. Это позволит восстановить базу данных распространения до состояния последнего резервного копирования, а все недостающие транзакции затем могут быть переданы в БД распространения из БД 
Резервное копирование и восстановление SQL Server 2005 Глава 14 431 публикаций, если репликация выполняется без проблем. Хотя это и не влияет на время задержки репликации, однако выполнение усечения журнала транзакций БД публикаций может быть отложено до того момента, когда будет создана резервная копия соответствующих транзакций в БД распространения. Включение параметра для базы данных публикаций (если приложение допускает дополнительную задержку) означает, что транзакции не будут доставляться в БД распространения до создания их резервной копии в БД публикаций. Это позволяет восстановить на издателе последнюю резервную копию базы данных публикаций и не допустить ситуации, когда в БД распространения могут храниться транзакции, которых нет в БД публикаций. Кроме того, установка данного параметра оказывает влияние на время задержки репликации и пропускную способность, поскольку транзакции не могут быть переданы в базу данных распространения, пока на из-дателе не создана их резервная копия. Планирование резервного копирования очень больших БД Если необходимо разработать план резервного копирования и восстановления очень больших баз данных, следует воспользоваться преимуществами параллельного резерв-ного копирования и восстановления, при котором SQL Server применяет несколько потоков для чтения и записи данных и может работать со многими источниками данных. Процессы резервного копирования и восстановления по-разному используют параллельные операции ввода-вывода. Резервное копирование для чтения данных использует по одному потоку на каждое дисковое устройство, если файлы БД расположены на нескольких дисках. Восстановление использует по одному потоку на каждое дисковое устройство, если БД была определена с файлами, расположенными на разных дисках. Как резервное копирование, так и восстановление используют по одному потоку на каждое устройство резервного копирования, когда набор резервных копий со-храняется на разные устройства резервного копирования. Исходя из вышесказанного, стратегия резервного копирования должна быть реа-лизована таким образом, чтобы БД использовали: несколько дисковых накопителей для хранения данных; несколько устройств резервного копирования для сохранения резервных копий и восстановления данных. После того как вы определитесь с операциями резервного копирования для каж-дой базы данных, а также с частотой создания резервных копий, можно приступать к выбору устройств и носителей резервного копирования, которые бы соответствовали этим требованиям. Выбор устройств и носителей для резервного копирования Для создания резервных копий данных существует множество решений. Некоторые из них высокопроизводительны и дороги. Другие - медленны, но очень надежны. Ре-шение для резервного копирования, соответствующее индивидуальным требованиям каждой организации, зависит от нижеперечисленных факторов. Емкость Касается объема данных, резервные копии которых необходимо созда-вать регулярно. Следует ответить на вопрос: может ли оборудование для резерв-ного копирования поддерживать требуемую нагрузку при заданных ограничениях времени и системных ресурсов?
432 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Надежность Надежность носителей и оборудования для резервного копирования определяет, удастся ли использовать созданные резервные копии при необходимо-сти восстановить утерянные данные. Задайтесь вопросом: можно ли пожертвовать надежностью, чтобы не выйти за рамки бюджета или времени? Расширяемость Расширяемость решения резервного копирования означает воз-можность расширять его за пределы исходной емкости. Будет ли решение соот-ветствовать требованиям, если организация увеличится? Скорость При выборе приемлемого решения следует рассмотреть скорость соз-дания резервных копий и восстановления. Можно ли пожертвовать скоростью ради снижения затрат? Стоимость Стоимость решения для резервного копирования, вне всякого со-мнения, повлияет на принятие решения. Вписывается ли решение в смету рас-ходов? Емкость, надежность, расширяемость, скорость и стоимость - основные вопро-сы, которые влияют на выбор плана резервного копирования. После того как будет определена значимость каждого из этих пунктов для конкретной организации, можно выбрать решение для резервного копирования, адекватное в данной ситуации. Наибо-лее часто встречающиеся решения требуют использования следующего оборудования и носителей. Накопители на магнитных лентах Являются самыми распространенными устрой-ствами резервного копирования. Они используют картриджи с магнитной лентой для хранения данных. Средняя емкость картриджа составляет от 4 до 10 Гбайт. По сравнению с другими решениями для резервного копирования накопители на магнитных лентах довольно медленны, недостаточно надежны (рвутся или вытяги-ваются, а информация на них через некоторое время теряется), но их наибольшим преимуществом является низкая стоимость. Накопители DAT Работают с картриджами в формате DAT (digital audio tape, цифровая лента для записи звука). Являются более предпочитаемым типом устройств резервного копирования, пришедшим на смену стандартным накопи-телям на магнитных лентах. Существует множество форматов DAT и самый по-пулярный среди них - DLT (digital linear tape, цифровая лента с последовательной записью) или Super DLT. В формате DLT IV картриджи имеют емкость 35 или 40 Гбайт (70 или 80 Гбайт в сжатом виде). Крупные организации могут заинтересо-ваться технологиями LTO (linear tape open, открытый стандарт последовательной записи на ленту) с емкостью 100 Гбайт (200 Гбайт в сжатом виде) или AIT-3 (advanced intelligent tape, улучшенная интеллектуальная лента) с емкостью 100 Гбайт (260 Гбайт в сжатом виде). Совет Чтобы операции резервного копирования и восстановления выполнялись быстрее, вы можете использовать несколько устройств одновременно. Так, если обычно для та-ких операций требуется четыре часа, то при использовании двух устройств резервного копирования время операции сократится вдвое, а задействуя четыре устройства, вы справитесь с выполнением операции в течение часа. Системы на магнитных лентах с автозагрузчиком Используют магазин лент для создания расширенных томов резервного копирования, способных обеспечивать высокую емкость для любой корпорации. В системах на магнитных лентах с авто-загрузчиком картриджи в магазине автоматически заменяются по мере надобности в процессе резервного копирования или восстановления. Большинство систем на магнитных лентах с автозагрузчиком используют картриджи DAT в формате DLT, 
Резервное копирование и восстановление SQL Server 2005 Глава 14 433 LTO или AIT. Типичные накопители DLT записывают до 45 Гбайт в час, однако эту производительность можно повысить за счет хранилищ на магнитных лентах, использующих несколько накопителей, - таким способом можно вести запись на несколько картриджей одновременно. Большинство накопителей LTO и AIT записывают более 100 Гбайт в час, а при использовании нескольких накопителей в системе реально записывать сотни гигабайтов в час. Оптические дисководы с автоматической заменой дисков Эти устройства по-хожи на предыдущие, только вместо картриджей DAT они используют оптические магнитные диски, что позволяет обеспечить высокую емкость. Данные системы для операций резервного копирования и восстановления загружают и выгружают диски, хранящиеся внутри. Основным недостатком оптических дисководов явля-ется их высокая стоимость. Съемные диски Все чаще в качестве устройств резервного копирования исполь-зуются съемные диски, например Iomega Jaz емкостью 1 или 2 Гбайт. Съемные диски обеспечивают хорошую скорость и простоту использования в ситуациях, когда необходимо резервное копирование одного накопителя или одной системы. Однако они, как правило, более дороги, чем стандартные решения с накопителями на магнитных лентах или картриджах DAT. Дисковые накопители Использование дисковых накопителей - самый быстрый способ резервного копирования и восстановления файлов. В течение минут могут выполняться операции, которые занимают часы при использовании накопителей на магнитных лентах. Ничто не может сравниться с дисковыми накопителями, если быстрое восстановление является обязательным требованием. Однако, опять же, стоимость дисковых накопителей по сравнению с системами хранилищ на магнитных лентах намного выше. Выбор устройства резервного копирования является важным, но не единственным, шагом при внедрении плана резервного копирования и восстановления. Необходимо еще приобрести картриджи или диски, или и то, и другое. Количество картриджей, дисков и накопителей зависит от: объема данных, подлежащих резервному копированию; частоты выполнения резервного копирования данных; продолжительности хранения дополнительных наборов данных. Обычно резервное копирование реализуется с применением графика циклического использования двух или более наборов картриджей, дисков или файлов на одном на-копителе. Это, с одной стороны, продлевает срок годности носителей, а с другой - со-кращается количество картриджей, дисков или файлов, требуемых для обеспечения доступности данных. Совет Для важных баз данных рекомендуется использовать четыре набора носителей. Два набора задействуйте в обычном режиме, поочередно записывая то на один, то на другой. Третий набор применяйте для первого резервного копирования в начале каждого месяца, а четвертый - для первого резервного копирования в начале каждого квартала. Этот метод позволит восстановить БД практически в любых ситуациях. Выбор стратегии резервного копирования В табл. 14-1 приведен перечень стратегий, которые можно использовать в БД. Как видно из таблицы, эти стратегии зависят от типа БД и характера данных. При пла-нировании стратегии резервного копирования важно помнить следующее.
434 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 В БД master хранится важная информация о структуре других баз данных, вклю-чая размеры БД. При изменениях в данных или структуре БД меняется и БД master, хотя вы можете об этом и не подозревать. Например, размер большинства баз данных увеличивается автоматически, и, когда это происходит, БД master об-новляется. Вследствие этого, часто лучшей стратегией резервного копирования для базы данных master является назначение ежедневного создания резервных копий и циклическое использование нескольких наборов носителей с резервны-ми копиями, чтобы в случае необходимости можно было восстановить несколько вариантов БД master. Журналы транзакций можно использовать для восстановления базы данных до точки отказа или до рабочей точки. Для восстановления до рабочей точки необ-ходимо вставлять именованные метки в журнал транзакций на основе инструкции BEGIN TRANSACTION WITH MARK. И далее выполнять восстановление до метки в журнале, используя инструкции RESTORE LOG WITH STOPATMARK или RESTORE LOG WITH STOPBEFOREMARK. Таб. 14-1. Стратегии резервного копирования для системных и пользовательских БД Тип БД Стратегия Детальная информация Пользова-тельская Восстанов-ление до ми-нуты Полное резервное копирование желательно производить дваж-ды в неделю. Выполняйте дифференциальное резервное копиро-вание по ночам, а в рабочее время создавайте резервные копии журнала транзакций через каждые 10 мин. Не используйте параметр БД trunc. log on chkpt, так как в этом случае некоторые транзакции восстановить не удастся. Для повышения скорости резервного копирования и восстановления используйте по возможности несколько устройств резервного копирования Восстановле-ние до рабо-чей точки Производите полное резервное копирование дважды в неделю. Выполняйте дифференциальное резервное копирование по ночам, а в рабочее время создавайте резервные копии журнала транзакций через каждые 10 мин. Не используйте параметр БД trunc. log on chkpt. Применяйте именованные транзакции для добавления именованных меток в журнал транзакций. Чтобы повысить скорость резервного копирования и восстанов-ления, следует использовать несколько устройств резервного копирования Восстановле-ние до часа Производите полное резервное копирование дважды в неделю. Выполняйте дифференциальное резервное копирование по ночам, а в рабочее время создавайте резервные копии журнала транзакций через каждые 30 мин. Не используйте параметр БД trunc. log on chkpt. Для повышения скорости резервного копи-рования и восстановления желательно задействовать несколько устройств резервного копирования Восстановле-ние ежеднев-ных измене-ний Выполняйте полное резервное копирование по крайней мере раз в неделю. Производите дифференциальное резервное копирование по ночам, а в рабочее время создавайте резер-вные копии журнала транзакций каждые четыре часа. Не используйте параметр БД trunc. log on chkpt Восстанов-ление БД "только для чтения" Назначьте для выполнения полного резервного копирования периодичность в 30 дней и дополните его резервным копирова-нием при каждом изменении в БД
Резервное копирование и восстановление SQL Server 2005 Глава 14 435 Тип БД Стратегия Детальная информация Системная БД master Выполняйте полное резервное копирование сразу же после создания или удаления БД, изменения размера какой-либо БД, добавления или удаления учетных записей или изменения па-раметров конфигурации сервера. Не забывайте использовать несколько наборов носителей для БД master БД msdb Если назначаются расписания для выполнения заданий через SQL Server Agent (Агент SQL Server), следует регулярно соз-давать резервные копии этой БД, так как в ней хранится распи-сание и история выполнения заданий, а также поддерживается история резервного копирования БД model Ее следует трактовать как БД "только для чтения" (см. выше) БД tempdb Обычно резервное копирование не требуется. Эта БД создается заново при каждом запуске SQL Server БД распро-странения Доступна при настроенной репликации, в которой сервер высту-пает дистрибьютором. Назначьте выполнение полного резерв-ного копирования после создания моментальных снимков. Если используется репликация транзакций, назначьте регулярное резервное копирование журнала транзакций БД публика-ций Доступна при настроенной репликации, в которой сервер высту-пает издателем. Если резервные копии журнала транзакций не создаются, при любом изменении параметров репликации необ-ходимо проводить резервное копирование БД публикаций БД подписки Доступна при настроенной репликации, в которой сервер вы-ступает подписчиком. Резервные копии БД подписки должны быть не старше самого краткого периода сохранности среди всех публикаций, на которые подписан подписчик Создание устройства резервного копирования В ранних версиях SQL Server требовалось настроить устройство резервного копиро-вания перед выполнением резервного копирования баз данных. В SQL Server 2005 не требуется явно определять устройства резервного копирования. Тем не менее, это простейший способ обеспечить создание резервных копий, которые расположены в одном и том же месте и имеют одно и то же имя файла. Такое применение постоян-ных имен и расположений облегчает управление процессом резервного копирования и восстановления. Чтобы создать устройство резервного копирования с помощью SQL Server Management Studio, выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером и раскройте его папку Server Objects (Объекты сервера). 2. В контекстном меню узла Backup Devices (Устройства резервного копирования) выберите команду New Backup Device (Создать устройство резервного копирова-ния). Откроется диалоговое окно Backup Device (Устройство резервного копиро-вания), изображенное на рис. 14-1. 3. В поле Device name (Имя устройства) введите имя логического устройства резерв-ного копирования. Используйте краткое, но информативное название, например "Устройство для БД Customer" или "Главное устройство" (без кавычек). Табл. 14-1. (окончание)
436 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 4. Если установлен накопитель на магнитных лентах и резервное копирование не-обходимо выполнять на него, установите переключатель в положение Tape (Лента) и затем в раскрывающемся списке выберите накопитель назначения. Рис. 14-1. Диалоговое окно Backup Device 5. Если резервное копирование выполняется в файл, установите переключатель в положение File (Файл) и введите полный путь к файлу, который нужно связать с этим устройством, например e:\mssql\backup\personnel.bak. 6. Щелкните кнопку ОК. SQL Server проверит расположение файла резервной копии. В случае возникновения проблем будет выведено соответствующее сообщение. Чтобы создать устройство резервного копирования средствами Transact-SQL, применяется хранимая процедура sp_addumpdevice. В примере 14-1 показаны ее синтаксис и использование. Аргумент device_type определяет тип используемого устройства - диск или лента. Аргумент logical_name - это имя устройства резервного копирования. Аргумент physical_name - полный путь к файлу резервной копии. Ар-гумент controller_type равен 2 для диска и 5 для ленты. Аргумент device_status может принимать значение либо noskip, чтобы читать ANSI-заголовки ленты, либо skip, чтобы пропускать ANSI-заголовки ленты. Пример 14-1. Синтаксис и использование хранимой процедуры sp_addumpdevice Синтаксис: sp_addumpdevice [ @devtype = ]'device_type', [ @logicalname = ] 'logical_name', [ @physicalname = ] 'physical_name' [ , { [ @cntrltype = ] controller_type | [ @devstatus = ] 'device_status' } ]
Резервное копирование и восстановление SQL Server 2005 Глава 14 437 Использование: EXEC sp_addumpdevice 'disk', 'Customer', 'c:\mssql\backup\cust.bak' EXEC sp_addumpdevice 'disk', 'Customer на резервный сервер', '\\omega\backups\cust.bak' EXEC sp_addumpdevice 'tape', 'Customer на магнитную ленту', '\\.\tape0' Выполнение резервного копирования Резервное копирование является важнейшей частью администрирования баз дан-ных. Оно настолько значимо, что в SQL Server предусмотрено множество процедур резервного копирования и несколько способов создания резервных копий - все для того, чтобы обеспечить простое и эффективное управление резервным копированием и восстановлением. В этом разделе объясняются несколько стандартных процедур ре-зервного копирования и процесс резервного копирования с использованием Transact-SQL. Еще одна процедура успешной стратегии резервного копирования задействует планы обслуживания баз данных, о которых говорится в главе 15. Создание резервных копий в SQL Server Management Studio Чтобы начать процесс резервного копирования в SQL Server Management Studio, в контекстном меню базы данных, для которой нужно создать резервную копию, выбе-рите команду Tasks\Back Up (Задачи\Резервное копирование). Далее объясняются де-тали использования диалогового окна Back Up Database (Резервное копирование базы данных) для выполнения резервного копирования в следующих двух ситуациях : при создании нового набора резервных копий; когда необходимо дополнить существующий набор резервных копий. Создание нового набора резервных копий Каждый раз, создавая первую резервную копию базы данных или начиная очередной цикл в использовании существующего набора резервных копий, выполняйте пред-ставленные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером. 2. Раскройте папку Databases (Базы данных). В контекстном меню базы данных, для которой нужно создать резервную копию, выберите команду Tasks\Back Up (Задачи\Резервное копирование). Откроется диалоговое окно Back Up Database (Резервное копирование базы данных), изображенное на рис. 14-2. 3. В раскрывающемся списке Database (База данных) выберите БД, резервную копию которой необходимо создать. В поле Recovery model (Модель восстановления) будет показана текущая модель восстановления выбранной базы данных, но это поле недоступно для выбора, поскольку модель восстановления нельзя изменить в этом диалоговом окне. Если установлена модель восстановления Simple (Про-стая), резервное копирование журналов транзакций выполнить невозможно. 4. Поскольку создается новый набор резервных копий, в раскрывающемся списке Backup type (Тип резервного копирования) выберите требуемый тип резервного копирования. Обычно при первом резервном копировании выполняется полное резервное копирование. Потом набор резервных копий можно будет дополнить, используя другие типы резервного копирования.
438 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Рис. 14-2. Диалоговое окно Back Up Database 5. Существует возможность создать резервную копию всей базы данных или подмно-жества ее файлов и групп файлов. По умолчанию переключатель Backup component (Компонент резервного копирования) установлен в положение Database (База данных) для создания резервной копии всей БД. Если требуется создать резервную копию файла или группы файлов, установите переключатель в положение Files and filegroups (Файлы и группы файлов) для открытия диалогового окна Select Files and Filegroups (Выбор файлов и групп файлов), где их можно выбрать. По завершении выбора щелкните кнопку ОК. Примечание Для БД master единственным допустимым типом резервного копирования является Full (Полное). 6. В разделе Backup set (Набор резервных копий) в поле Name (Имя) введите имя создаваемого набора резервных копий. Это должно быть обычное описательное имя, позволяющее с первого взгляда сказать, что содержится в резервной копии. Например, первый набор резервных копий для БД Customer можно назвать "Customer - Набор резервных копий 1" (без кавычек), а затем добавить к этому набору другие полные и дифференциальные резервные копии, а также копии журнала транзакций. 7. В поле Description (Описание) введите описание резервной копии, например "На-бор 1 содержит еженедельную полную, ежедневную дифференциальную резервные копии и ежечасную резервную копию журнала транзакций. Это полный недельный набор резервных копий" (без кавычек). 8. Используйте параметры в разделе Backup set will expire (Срок действия набора резервных копий закончится), чтобы задать период или дату истечения срока действия резервной копии. Это позволит процедуре резервного копирования пере-записать носитель по окончании указанного периода или даты.
Резервное копирование и восстановление SQL Server 2005 Глава 14 439 9. Если набор резервных копий существует и перечислен в списке, отображаемом в разделе Destination (Место назначения), выделите его и щелкните кнопку Remove (Удалить). 10. Щелкните кнопку Add (Добавить), чтобы открыть диалоговое окно Select Backup Destination (Выбрать место назначения резервной копии), показанное на рис. 14-3. Если вы хотите, чтобы в качестве места назначения резервной копии использовал-ся новый файл, установите переключатель в положение File name (Имя файла) и введите полный путь к файлу, например: E:\DATA\ BACKUPS\CUST.BAK или \\OMEGA\BACKUPS\CUST.BAK. Установите переключатель в положение Backup device (Устройство резервного копирования) и выберите устройство на-значения в раскрывающемся списке. Щелкните кнопку ОК, когда будете готовы продолжать. Рис. 14-3. Диалоговое окно Select Backup Destination 11. Чтобы назначить выполнение резервного копирования по расписанию, в меню кнопки Script (Сценарий), находящейся в верхней части диалогового окна Back Up Database (Резервное копирование базы данных), выберите команду Script Action to Job (Создать сценарий действия в виде задания). Теперь можно назначить выполнение этого задания, как описано в главе 15. 12. На странице Options (Параметры) можно установить дополнительные параметры резервного копирования. Ниже представлены доступные там параметры и возмож-ности по их использованию. : Back up to the existing media set (Резервное копирование на существующий набор носителей) Установите переключатель в это положение, если исполь-зуется существующий набор носителей. Укажите, следует ли добавить данные к существующему набору резервных копий или перезаписать существующие наборы резервных копий. : Check media set name and backup set expiration (Проверить имя набора носи-телей и срок действия набора резервных копий) Если вы хотите быть уве-рены, что используется правильный набор магнитных лент и их срок действия не истек, установите флажок, а в поле Media set name (Имя набора носителей) введите имя набора носителей, которое следует проверять. : Back up to a new media set, and erase all existing backup sets (Создать резерв-ную копию на новом наборе носителей и стереть все существующие наборы резервных копий) Установите переключатель в это положение, если требуется создать новый набор носителей и стереть все существующие наборы резервных копий. Затем введите имя и дополнительное описание набора носителей.
440 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 : Verify backup when finished (Проверить резервную копию после завершения) Флажок ставится, когда нужно полностью проверить резервную копию на нали-чие ошибок. В большинстве случаев это является рекомендуемой практикой. : Perform checksum before writing to media (Вычислить контрольную сумму перед записью на носитель) Установкой данного флажка вы гарантируе-те проверку сохраняемых данных перед записью. Это эквивалентно исполь-зованию ключевых слов CHECKSUM или NOCHECKSUM с инструкцией BACKUP. Связанный с ним флажок Continue on error (Продолжать в случае ошибки) подтверждает необходимость продолжения работы при возникновении ошибки вычисления контрольной суммы. : Truncate the transaction log (Усечение журнала транзакций) Чтобы после резервного копирования удалить ненужные записи транзакций, установите переключатель в это положение (по умолчанию параметр установлен для ре-зервного копирования журналов транзакций). : Back up the tail of the log, and leave the database in the restoring state ( Создать резервную копию конца журнала транзакций и оставить базу данных в со-стоянии восстановления) Выберите такое положение переключателя для обеспечения резервного копирования активной части журнала транзакций (незавершенные транзакции находятся в конце журнала). Если используется полная модель восстановления или модель с минимальным ведением журнала, необходимо создать резервную копию активной части журнала транзакций перед тем, как восстанавливать БД с помощью SQL Server Management Studio. Совет Обычно перед восстановлением поврежденной базы данных нужно выполнить ре-зервное копирование ее журнала транзакций. Для этого установите последнее положение переключателя и выполните резервное копирование без усечения журнала транзакций. Данный параметр эквивалентен использованию инструкции BACKUP LOG с параметрами NO_TRUNCATE, NORECOVERY. : Unload the tape after backup (Выгрузить ленту после резервного копиро-вания). Установите этот флажок, чтобы извлечь картридж после резервного копирования (только для накопителей на магнитных лентах). 13. Для начала резервного копирования щелкните кнопку ОК. Если задана проверка данных, ее выполнение начнется сразу же по завершении резервного копирова-ния. Дополнение существующего набора резервных копий При необходимости дополнить существующий набор резервных копий выполните указанные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) установите соединение с нуж-ным сервером. 2. Раскройте папку Databases (Базы данных). В контекстном меню базы данных, для которой нужно создать резервную копию, выберите команду Tasks\Back Up (Задачи\Резервное копирование). Откроется диалоговое окно Back Up Database (Резервное копирование базы данных), изображенное на рис. 14-2. 3. В раскрывающемся списке Database (База данных) выберите БД, резервную копию которой необходимо создать. 4. В раскрывающемся списке Backup type (Тип резервного копирования) выберите тип выполняемого резервного копирования: Full (Полное), Differential (Диффе-ренциальное) или Transaction Log (Журнал транзакций). Обычно при дополнении 
Резервное копирование и восстановление SQL Server 2005 Глава 14 441 существующего набора используется дифференциальное резервное копирование или резервное копирование журнала транзакций. Когда установлена модель вос-становления Simple (Простая), резервное копирование журналов транзакций вы-полнить невозможно. 5. Существует возможность создать резервную копию всей базы данных или подмно-жества ее файлов и групп файлов. По умолчанию переключатель Backup сomponent (Компонент резервного копирования) установлен в положение Database (База данных) для создания резервной копии всей БД. Если требуется создать резервную копию файла или группы файлов, установите переключатель в положение Files and filegroups (Файлы и группы файлов) для открытия диалогового окна Select Files and Filegroups (Выбор файлов и групп файлов), где их можно выбрать. По завершении выбора щелкните кнопку ОК. 6. В разделе Backup Set (Набор резервных копий) в поле Name (Имя) введите имя на-бора резервных копий, а в поле Description (Описание) - описание резервной ко-пии, например "Ежедневная дифференциальная резервная копия" (без кавычек). 7. Используйте параметры в разделе Backup set will expire (Срок действия набора резервных копий закончится), чтобы задать период или дату истечения срока действия резервной копии. Это позволит процедуре резервного копирования пере-записать носитель по окончании указанного периода или даты. 8. Набор резервных копий должен быть указан в списке в разделе Destination (Место назначения). В этом случае щелкните кнопку Contents (Содержание) и просмо-трите содержание этого набора. Если же набор не указан, щелкните кнопку Add (Добавить), чтобы открыть диалоговое окно Select Backup Destination (Выбрать место назначения резервной копии) и ввести место назначения существующей резервной копии. Щелкните ОК, когда будете готовы продолжать. 9. Выберите страницу Options (Параметры). Поскольку добавляются новые данные к существующему набору резервных копий, следует установить переключатели в положения Back up to the existing media set (Резервное копирование на суще-ствующий набор носителей) и Append to the existing backup set (Добавить данные к существующему набору резервных копий). Совет Если резервные копии создаются на дисковом накопителе или накопителе на магнитных лентах, стоит применить метод циклического использования носителей. Соз-дайте несколько наборов, а затем записывайте на них по очереди. Например, при ис-пользовании дискового накопителя создайте файлы резервных копий на разных сетевых дисках и задействуйте их, как показано ниже. \\omega\data1drive\backups\cust_set1.bak - записывается на 1-й, 3-й, 5-й и т. д. неделе для полной и дифференциальной резервной копии БД Customer. \\omega\data2drive\backups\cust_set2.bak - на 2-й, 4-й, 6-й и т. д. неделе для полного и дифференциального резервного копирования БД Customer. \\omega\data3drive\backups\cust_set3.bak - на 1-й неделе месяца для полного резервного копирования БД Customer. \\omega\data4drive\backups\cust_set4.bak - на 1-й неделе квартала для полного резервного копирования БД Customer. Помните, что начиная новый цикл для набора носителей, следует перезаписывать суще-ствующий. Например, на 1-й неделе резервные копии будут добавляться. Далее, в начале следующего цикла, данные первой резервной копии перезапишутся, а затем добавятся остальные резервные копии в течение недели.
442 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 10. При резервном копировании журнала транзакций обычно используется параметр Truncate the transaction log (Усечение журнала транзакций). Это удаляет неактив-ные записи из журнала транзакций после создания резервной копии. 11. Чтобы назначить выполнение резервного копирования по расписанию, в меню кнопки Script (Сценарий), находящейся в верхней части диалогового окна Back Up Database (Резервное копирование базы данных), выберите команду Script Action to Job (Создать сценарий действия в виде задания) и назначьте выполнение этого задания, как описано в главе 15. 12. Щелкните кнопку ОК для начала резервного копирования. Если задана провер-ка данных, ее выполнение начнется сразу же по завершении резервного копи-рования. Использование чередующегося резервного копирования с несколькими устройствами SQL Server может выполнять одновременное резервное копирование на несколько устройств при помощи процесса, называемого параллельным чередующимся резерв-ным копированием. Как нетрудно догадаться, одновременная запись файлов резерв-ных копий значительно ускоряет выполнение операций резервного копирования. Ключевым моментом, однако, является наличие отдельных физических устройств, используемых для резервного копирования, например трех отдельных накопителей на магнитных лентах или трех дисковых накопителей. Осуществлять параллельное резервное копирование на одном устройстве нельзя. Несколько устройств, используемых для операций резервного копирования, на-зываются набором носителей (media set). SQL Server позволяет использовать в наборе от 2 до 32 носителей. Эти устройства должны быть одного типа. Например, чередую-щееся резервное копирование невозможно проводить, имея устройство на магнитных лентах и дисковый накопитель. При параллельном чередующемся резервном копировании используются две основные операции: создание нового набора носителей; дополнение существующего набора носителей. Создание нового набора носителей Чтобы создать новый набор носителей с использованием нескольких устройств, вы-полните следующую последовательность действий. 1. Выберите сервер и создайте на нем каждое из устройств резервного копирования, входящее в набор, как описано выше, в разделе "Создание устройства резервного копирования". 2. В контекстном меню базы данных, для которой нужно выполнить резервное ко-пирование, выберите команду Tasks\Back Up (Задачи\Резервное копирование). Будет выведено диалоговое окно Back Up Database (Резервное копирование базы данных). 3. Далее выполняйте действия, указанные в разделе "Создание нового набора ре-зервных копий", начиная с пункта 3. Пункт 10 повторите для каждого устройства, которое будет использоваться в наборе носителей.
Резервное копирование и восстановление SQL Server 2005 Глава 14 443 Дополнение существующего набора носителей Если необходимо дополнить существующий набор носителей, выполните указанные ниже действия. 1. В контекстном меню базы данных, для которой нужно выполнить резервное ко-пирование, выберите команду Tasks\Back Up (Задачи\Резервное копирование). Будет выведено диалоговое окно Back Up Database (Резервное копирование базы данных). 2. Далее следуйте инструкциям из раздела "Дополнение существующего набора резервных копий", начиная с пункта 3. Единственным различием является то, что при выполнении пункта 8 перечень всех устройств, используемых в наборе носителей, должен быть перечислен в разделе Destination (Место назначения). Если же он отсутствует, нужно добавить устройства по очереди, используя кноп-ку Add (Добавить) и соответственное диалоговое окно Select Backup Destination (Выбрать место назначения резервной копии). Выполнение резервного копирования средствами Transact-SQL Альтернативой SQL Server Management Studio при резервном копировании являет-ся инструкция BACKUP. Для баз данных используйте инструкцию BACKUP DATABASE, а для журналов транзакций - BACKUP LOG. Совет Если резервные копии БД создаются с помощью Transact-SQL, теряется одно из наибольших преимуществ SQL Server - процесс автоматического восстановления. При его применении пользователю обычно не приходится беспокоиться о том, какую резерв-ную копию или параметры инструкций следует применить в данной ситуации. Поскольку резервное копирование можно выполнять автоматически по расписанию без участия пользователей, отпадает необходимость выполнять резервное копирование средствами SQL так часто, как это было в прошлом. Поэтому рекомендуем использовать процедуры резервного копирования и восстановления в SQL Server Management Studio. Инструкция BACKUP DATABASE имеет два варианта синтаксиса. Синтаксис и использование для выполнения полного и дифференциального резервного копи-рования приводится в примере 14-2. По умолчанию выполняется полное резервное копирование. Пример 14-2. Синтаксис и использование инструкции BACKUP DATABASE для выполнения полного и дифференциального резервного копирования Синтаксис: BACKUP DATABASE { database_name | @database_name_variable } TO <backup_device> [ ,...n ] [ [ MIRROR TO <backup_device> [ ,...n ] ] [ ...next-mirror ] ] [ WITH [ BLOCKSIZE = { blocksize | @blocksize_variable } ] [ [ , ] { CHECKSUM | NO CHECKSUM } ] [ [ , ] { STOP ON ERROR | CONTINUE_AFTER_ERROR } ] [ [ , ] DESCRIPTION = { 'description' | @description_variable } ] [ [ , ] DIFFERENTIAL ] [ [ , ] EXPIREDATE = { date | @date_variable } | RETAINDAYS = { days | @days_variable } ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] { FORMAT | NOFORMAT } ] [ [ , ] { INIT | NOINIT } ]
444 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 [ [ , ] { NOSKIP | SKIP } ] [ [ , ] MEDIADESCRIPTION = { 'media_desc' | @media_desc_variable } ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] NAME = { backup_set_name | @backup_set_name_variable } ] [ [ , ] { NOREWIND | REWIND } ] [ [ , ] { NOUNLOAD | UNLOAD } ] [ [ , ] RESTART ] [ [ , ] STATS [ = percentage ] ] [ [ , ] COPY_ONLY ] ] [ ; ] <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } Использование: USE master BACKUP DATABASE Customer TO DISK = 'f:\data\backup\Cust1.bak' В примере 14-3 приводится синтаксис и использование инструкции BACKUP DATABASE для выполнения резервного копирования файлов и групп файлов. Пример 14-3. Синтаксис и использование инструкции BACKUP DATABASE для выполнения резервного копирования файлов и групп файлов Синтаксис: BACKUP DATABASE { database_name | @database_name_variable } <file_or_filegroup> [ ,...n ] TO <backup_device> [ ,...n ] [ [ MIRROR TO <backup_device> [ ,...n ] ] [ ...next-mirror ] ] [ WITH [ BLOCKSIZE = { blocksize | @blocksize_variable } ] [ [ , ] { CHECKSUM | NO CHECKSUM } ] [ [ , ] { STOP ON ERROR | CONTINUE_AFTER_ERROR } ] [ [ , ] DESCRIPTION = { 'description' | @description_variable } ] [ [ , ] DIFFERENTIAL ] [ [ , ] EXPIREDATE = { date | @date_variable } | RETAINDAYS = { days | @days_variable } ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] { FORMAT | NOFORMAT } ] [ [ , ] { INIT | NOINIT } ] [ [ , ] { NOSKIP | SKIP } ] [ [ , ] MEDIADESCRIPTION = { 'media_desc' | @media_desc_variable } ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] NAME = { backup_set_name | @backup_set_name_variable } ] [ [ , ] { NOREWIND | REWIND } ] [ [ , ] { NOUNLOAD | UNLOAD } ] [ [ , ] RESTART ]
Резервное копирование и восстановление SQL Server 2005 Глава 14 445 [ [ , ] STATS [ = percentage ] ] [ [ , ] COPY_ONLY ] ] [ ; ] <file_or_filegroup> ::= { FILE = { logical_file_name | @logical_file_name_variable } | FILEGROUP = { logical_filegroup_name | @logical_filegroup_name_variable } | READ_WRITE_FILEGROUPS } <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } Использование: USE master EXEC sp_addumpdevice 'disk', N'Customer - Набор резервных копий 2', 'f:\data\backup\Cust2.bak' BACKUP DATABASE Customer FILE = 'Customer_data' TO [Customer - Набор резервных копий 2] В примере 14-4 приведен синтаксис инструкции BACKUP LOG. По умолчанию журнал транзакций после выполнения резервного копирования усекается. Пример 14-4. Синтаксис и использование инструкции BACKUP LOG Синтаксис для создания резервной копии журнала транзакций: BACKUP LOG { database_name | @database_name_variable } { TO <backup_device> [ ,...n ] [ [ MIRROR TO <backup_device> [ ,...n ] ] [ ...next-mirror ] ] [ WITH [ BLOCKSIZE = { blocksize | @blocksize_variable } ] [ [ , ] { CHECKSUM | NO CHECKSUM } ] [ [ , ] { STOP ON ERROR | CONTINUE_AFTER_ERROR } ] [ [ , ] DESCRIPTION = { 'description' | @description_variable } ] [ [ , ] EXPIREDATE = { date | @date_variable } | RETAINDAYS = { days | @days_variable } ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] { FORMAT | NOFORMAT } ] [ [ , ] { INIT | NOINIT } ] [ [ , ] { NOSKIP | SKIP } ] [ [ , ] MEDIADESCRIPTION = { 'media_desc' | @media_desc_variable } ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] NAME = { backup_set_name | @backup_set_name_variable } ] [ [ , ] NO_TRUNCATE ] [ [ , ] { NORECOVERY | STANDBY = undo_file_name } ] [ [ , ] { NOREWIND | REWIND } ] [ [ , ] { NOUNLOAD | UNLOAD } ] [ [ , ] RESTART ]
446 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 [ [ , ] STATS [ = percentage ] ] [ [ , ] COPY_ONLY ] ] } [ ; ] <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } Синтаксис для усечения журнала транзакций: USE master BACKUP LOG { database_name | @database_name_variable } { WITH { NO_LOG | TRUNCATE_ONLY } ] } Использование: USE master EXEC sp_addumpdevice 'disk', 'Customer_log1', 'f:\data\backup\Cust_log.bak' BACKUP LOG Customer TO Customer_log1 Выполнение резервного копирования журналов транзакций Журналы транзакций чрезвычайно важны для своевременного восстановления баз данных. В отличие от резервных копий БД, которые могут быть полными или диф-ференциальными, резервные копии журналов транзакций обычно являются инкре-ментными. Это означает, что каждая резервная копия журнала транзакций содержит записи транзакций в течение некоторого отрезка времени. Журналы транзакций всегда применяются последовательно - со времени завер-шения последнего полного или дифференциального резервного копирования. Следо-вательно, чтобы восстановить базу данных, необходимо использовать по очереди все журналы транзакций до точки отказа. Например, если полное резервное копирование было выполнено в 13:00, а сбой БД произошел в 13:46, необходимо восстановить последнюю полную резервную копию, а затем применить все журналы транзакций, созданные после этого времени, например в 13:15, 13:30 и 13:45. Как видно из примера, если бы инкрементное резервное копирование журнала транзакций не проводилось, все транзакции, которые состоялись после создания полной копии в 13:00, были бы утеряны. Резервное копирование журналов транзакций выполняется в основном так же, как и любое другое резервное копирование. Однако некоторые нюансы все же существуют и они обсуждаются в следующих разделах. Операции, прерывающие последовательность копий журнала транзакций Хотя резервное копирование журналов транзакций не представляет особых слож-ностей, в SQL Server имеются некоторые возможности, которые способны неявным образом повлиять на использование резервных копий журнала транзакций, сделав их последовательность недействительной.
Резервное копирование и восстановление SQL Server 2005 Глава 14 447 Усечение журнала в контрольной точке (параметр базы данных trunc. log on chkpt) В контрольной точке журнал транзакций очищается от неактивных за-писей. Операции с минимальным ведением журнала транзакций (массового копирова-ния) Команды, которые обходят журнал транзакций, делают недействительной последовательность копий журналов транзакций. Инструкция ALTER DATABASE Добавление или удаление файлов с помощью инструкции ALTER DATABASE делает недействительной последовательность копий журналов транзакций. Совет Как упоминалось выше, время завершения последнего дифференциального или полного резервного копирования означает начало неразрывной последовательности жур-налов транзакций. Если пришлось использовать какую-либо из вышеперечисленных воз-можностей и последовательность копий журналов транзакций стала недействительной, выполните полное или дифференциальное резервное копирование, чтобы начать новую последовательность. Усечение журналов транзакций При резервном копировании журналов транзакций используется несколько пара-метров, определяющих способ создания резервной копии. В диалоговом окне Back Up Database (Резервное копирование базы данных) утилиты SQL Server Management Studio воспользуйтесь параметром Truncate the transaction log (Усечение жур-нала транзакций). При этом завершенные транзакции будут удалены из журнала транзакций после создания его резервной копии. Обычно инструкция BACKUP LOG после резервного копирования также очищает журнал транзакций от завершенных и прерванных транзакций. Однако ее поведение можно изменить, использовав пере-численные ниже параметры. TRUNCATE_ONLY Удаляет неактивные записи из журнала, не создавая резерв-ной копии. Последовательность копий журналов становится недействительной. NO_LOG То же, что и предыдущий, но он не создает запись для инструкции BACKUP LOG в журнале транзакций. Этот параметр задуман для ситуаций, когда журнал транзакций или его диск заполнен, и нужно произвести усечение журнала без записи на устройство. NO_TRUNCATE Сохраняет все записи из журнала транзакций - от последнего резервного копирования до точки отказа. К этому прибегают, когда база данных повреждена. Совет После использования параметров TRUNCATE_ONLY или NO_LOG всегда выполняй-те полное или дифференциальное резервное копирование. Таким образом, можно начать новую последовательность копий журнала. Ситуации, когда приходится усекать журнал транзакций без создания записи об этом, довольно редки, поскольку в большинстве случаев настраивается автоматическое увеличение журнала. Свободное пространство в журнале транзакций может закончиться только в случае, если задан его максимальный размер, либо когда закончится свободное место на диске (дисках), используемом журналом. Резервное копирование полнотекстовых каталогов В SQL Server 2005 полнотекстовые каталоги трактуются как файлы и включены в на-бор файлов БД с целью резервного копирования и восстановления. При резервном копировании базы данных резервные копии полнотекстовых каталогов создаются автоматически. Когда выполняется резервное копирование группы файлов, которые связаны с полнотекстовыми каталогами, каталоги также копируются. Изменения 
448 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 в полнотекстовых каталогах резервируются с помощью стандартного дифференци-ального копирования базы данных или связанной группы файлов. С помощью Тransact-SQL можно создать резервную копию непосредственно са-мого полнотекстового каталога. Для этого необходимо указать логическое имя файла полнотекстового каталога, используя ключевое слово FILE инструкции BACKUP. Рассмотрим следующий пример: USE master EXEC sp_addumpdevice 'disk', 'Customer_Catalog', '\\omega\backups\cust.bak' BACKUP DATABASE Customer FILE = 'CustomerDB_cat' TO Customer_Catalog В приведенном примере создается устройство резервного копирования Customer_ Catalog, а затем - полная резервная копия полнотекстового каталога CustomerDB_cat. Если позже нужно сохранять только изменения в полнотекстовом каталоге, следует создать его дифференциальную резервную копию: USE master BACKUP DATABASE Customer FILE = 'CustomerDB_cat' TO Customer_Catalog WITH DIFFERENTIAL Можно выполнять резервное копирование нескольких полнотекстовых каталогов, используя резервное копирование групп файлов. Например, если существует группа файлов под именем Catalogs_Primary и с ней связаны несколько каталогов, выполните полное резервное копирование группы файлов, как показано дальше: USE master BACKUP DATABASE Customer FILEGROUP = 'Catalogs_Primary' TO Customer_Catalog Восстановление БД Повреждения баз данных, отказы оборудования и даже стихийные бедствия, к со-жалению, время от времени происходят, поэтому администратор баз данных должен быть готов восстановить БД в любом из этих случаев. Однако не стоит забывать, в том числе и опытным специалистам, что восстановление БД отличается от вос-становления операционной системы или приложений других типов. Использование полных и дифференциальных резервных копий в сочетании с копиями журналов транзакций дает возможность восстановить базу данных до минуты, но процесс этот довольно сложный. В следующем разделе даются советы и рекомендации по устранению проблем в случае повреждения БД. А далее приведены пошаговые инструкции для восстанов-ления базы данных в различных ситуациях, а именно: восстановление БД с помощью резервных копий, созданных в SQL Server Management Studio; восстановление файла или группы файлов; восстановление БД в другом месте; восстановление БД с использованием Transact-SQL.
Резервное копирование и восстановление SQL Server 2005 Глава 14 449 Повреждение БД и решение проблем Все знания, накопленные администратором баз данных, будут ему как нельзя кстати в один решающий момент - при восстановлении БД. Выбор способов восстановления зависит от использованных параметров резервного копирования и состояния базы данных. Вы уже знаете, что существуют следующие методы резервного копирования: полное, дифференциальное, журналов транзакций и файлов или групп файлов. Далее будет рассказано, как можно восстановить базу данных, комбинируя эти методы. В табл. 14-2 приведены некоторые рекомендуемые стратегии восстановления по-врежденной БД. Эти стратегии демонстрируют способы восстановления с помощью различных сочетаний существующих операций резервного копирования. Если для резервного копирования и восстановления используется SQL Server Management Studio, то в большинстве случаев эти процедуры выполняются автоматически. По-шаговое выполнение процесса описано ниже в этой главе. Табл. 14-2. Стратегии восстановления БД Тип резервного копирования Процесс восстановления Только полные резервные копии Загрузить последнюю полную резервную копию Полные и дифференциаль-ные резервные копии Загрузить последнюю полную резервную копию с параметром NORECOVERY, затем - последнюю дифференциальную копию с параметром RECOVERY Полные резервные копии и резервные копии журнала транзакций Создать резервную копию текущего журнала транзакций с параметром NO_TRUNCATE. Загрузить последнюю полную резервную копию с параметром NORECOVERY, затем, также с параметром NORECOVERY, последовательно применить все копии журнала транзакций, созданные с момента последнего полного копирования, последнюю из них - с параметром RECOVERY Полные, дифференциаль-ные резервные копии и резервные копии журнала транзакций Произвести резервное копирование текущего журнала транзак ций с параметром NO_TRUNCATE. Загрузить последнюю пол ную резервную копию с параметром NORECOVERY, затем по след-нюю дифференциальную копию с параметром NORECOVERY. Далее с параметром NORECOVERY последовательно применить все копии журнала транзакций, созданные с момента последнего дифференциального копирования, последнюю из них - с пара-метром RECOVERY Теперь вы теоретически вполне подкованы для восстановления базы данных. Но перед тем как начать восстановление, следует убедиться, что БД действительно повреждена и не может быть восстановлена другим способом. Для устранения про-блем с базой данных и определения возможного повреждения выполните следующие действия. 1. Начните с журналов SQL Server. Выясните, какие типы сообщений об ошибках находятся в журналах, обращая особое внимание на ошибки, возникающие при запуске БД. Также просмотрите ошибки, генерируемые пользователями. Коды ошибок можно найти в электронной документации или на сайте справки и под-держки Microsoft (http://search.support.microsoft.com). Доступ к журналам сервера можно получить через SQL Server Management Studio, раскрыв узел Management (Управление) в панели Object Explorer (Обозреватель объектов), как объяснялось в главе 14.
450 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 2. Проверьте состояние базы данных. При каждом запуске SQL Server проходит через собственно процесс восстановления (recovery) для каждой БД. Если в процессе восстановления обнаружены проблемы, режим или состояние базы данных может быть некорректным. Для их проверки воспользуйтесь функцией databaseproperty(), как показано в примере 14-5. Ниже перечислены состояния, в которых находится база данных, когда указанное свойство имеет значение 1. : IsShutDown - остановлена в связи с проблемами при запуске. : IsEmergencyMode - находится в аварийном режиме, который позволяет ис-пользовать ее как подозрительную. : IsSingleUser, IsDboOnly, IsReadOnly или IsOffline - недоступна или нахо-дится в режиме ограниченного доступа; для получения доступа ее необходимо сделать рабочей. : IsSuspect - отмечена как подозрительная, что означает повреждение. : IsInLoad - в процессе загрузки. : IsInRecovery - в процессе восстановления. : IsNotRecovered - находится в нестабильном состоянии после неудачного процесса восстановления. 3. По возможности используйте инструкцию DBCC для дальнейшего устранения проблем и исправления БД (см. главу 15). 4. Если эти процедуры указывают на повреждение, которое исправить невозможно, восстановите базу данных из резервной копии. Пример 14-5. Синтаксис и использование функции databaseproperty() Синтаксис: databaseproperty( 'database_name', 'property' ) Использование: SELECT databaseproperty( 'Customer', 'IsEmergencyMode' ) Восстановление БД из обычной резервной копии SQL Server Management Studio сохраняет информацию обо всех резервных копи-ях, создаваемых для БД. Когда необходимо восстановить базу данных, SQL Server Management Studio автоматически конфигурирует восстановление. Для этого ис-пользуются установки по умолчанию, а при необходимости операция настраивается вручную. Чтобы восстановить базу данных выполните следующую последовательность дей-ствий. 1. Если стратегия резервного копирования предусматривает применение копий жур-нала транзакций и с базой данных все еще производится работа, нужно создать резервную копию текущего журнала транзакций с параметром NO_TRUNCATE. Для этого в диалоговом окне Back Up Database (Резервное копирование базы данных) установите флажок Back up the tail of the log, and leave the database in the restoring state (Создать резервную копию конца журнала транзакций и оставить базу данных в состоянии восстановления) на странице Options (Параметры).
Резервное копирование и восстановление SQL Server 2005 Глава 14 451 2. Раскройте узел Databases (Базы данных) нужного сервера. В контекстном меню восстанавливаемой БД выберите команду Tasks\Restore\Database (Задачи\Вос-становление\База данных). Откроется диалоговое окно Restore Database (Вос-становление базы данных), изображенное на рис. 14-4. Рис. 14-4. Диалоговое окно Restore Database 3. Имя выбранной базы данных выводится в поле To database (В базу данных) в раз-деле Destination for restore (Место назначения для восстановления). Если БД восстанавливается в исходное расположение, оставьте ее имя без изменений. При восстановлении в другое место введите имя новой базы данных или выберите его из связанного с полем раскрывающегося списка. Примечание Эта возможность предоставлена для того, чтобы можно было восстановить БД в другом месте (см. дальше раздел "Восстановление БД в другое место"). В рас-крывающийся список включены все БД сервера, кроме master и tempdb. 4. По умолчанию база данных восстанавливается до ближайшей возможной точки во времени. Если в наличии есть несколько резервных копий, существует возмож-ность выбрать момент времени для восстановления. Например, когда известно, что некий пользователь случайно удалил таблицу Accounts в 12:16, можно вос-становить базу данных до момента перед самым удалением, то есть в 12:15. Для этого щелкните кнопку с многоточием (.) справа от текстового поля To a point in time (До точки во времени). Откроется диалоговое окно Point In Time Restore (Восстановление до точки во времени). Установите переключатель в положение A specific date and time (Конкретная дата и время), укажите дату и время и щелкните кнопку ОК.
452 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Примечание Восстановление базы данных с накопителя на магнитных лентах либо другого устройства резервного копирования отличается от обычного тем, что приходится работать с магнитными лентами, содержащими по несколько резервных копий, а также наборами носителей (наборами кассет). Если необходимо провести восстановление с устройства, установите переключатель в положение From device (С устройства), а затем щелкните кнопку с многоточием (.). Откроется диалоговое окно Specify Backup (Указать резервную копию), в котором укажите носитель резервной копии и ее расположение для операции восстановления. Можно задать несколько расположений, а также просмотреть содержание выбранных наборов резервных копий. 5. Имя выбранной базы данных выводится в раскрывающемся списке From database (Из базы данных). Если необходимо восстановить другую БД, укажите ее. В списке присутствуют только те БД, история резервного копирования которых хранится в msdb. 6. Используйте список Select the backup sets to restore (Выберите набор резервных копий для восстановления), чтобы выбрать набор резервных копий для восстанов-ления. По умолчанию указан последний полный набор резервных копий, включаю-щий полные, дифференциальные и копии журналов транзакций после последнего полного копирования. Выбранный набор может также быть последним набором резервных копий (согласно плану восстановления), который соответствует тре-бованиям восстановления до точки во времени. Совет Как правило, начинать следует с последнего полного набора резервных копий. Однако если он вас не удовлетворяет или содержит транзакции, которые нельзя приме-нять, например массовое удаление таблиц, вернитесь к предыдущему набору, выбрав в качестве начальной точки другую полную копию и соответственные дифференциальные копии и копии журналов транзакций. 7. В списке Select the backup sets to restore (Выберите набор резервных копий для восстановления) отображена история резервного копирования выбранной БД. Выводятся следующие столбцы. : Restore (Восстановить) Флажки в этом столбце позволяют выбрать набо-ры резервных копий для восстановления. По умолчанию указаны последняя полная копия и следующие за ней дифференциальные копии и копии журнала транзакций. Изменять установки по умолчанию приходится довольно редко. : Name(Имя) Имя набора резервных копий. : Component (Компонент) Показывает сохраненный компонент как Database (База данных), File (Файл) или пустое поле. Пустое поле означает резервную копию журнала транзакций. : Type (Тип) Тип выполненного резервного копирования: Full (Полное), Differential (Дифференциальное) или Transaction Log (Журнал транзакций). : Server (Сервер) Экземпляр ядра базы данных, выполнивший резервное копиро вание. : Database (База данных) Имя БД, резервная копия которой была создана. : Position (Позиция). Позиция набора резервных копий в томе. : First LSN (Первый LSN) Это номер первой транзакции в наборе резервных копий журналов транзакций. Помогает упорядочить их для операций восста-новления. : Last LSN (Последний LSN) Номер последней транзакции в наборе резервных копий журналов транзакций. Помогает упорядочить их для операций восста-новления.
Резервное копирование и восстановление SQL Server 2005 Глава 14 453 : Checkpoint LSN (LSN контрольной точки) Для резервных копий журналов транзакций это номер последней контрольной точки на момент создания ре-зервной копии. Помогает упорядочить копии журнала транзакций для операций восстановления. : Start Date (Дата начала) Дата и время начала резервного копирования. : Finish Date (Дата завершения) Дата и время завершения резервного копи-рования. : Size (Размер) Размер резервной копии. : User Name (Имя пользователя) Имя пользователя, выполнившего резервное копирование. : Expiration (Действительна до) Дата и время истечения срока действия ре-зервной копии. 8. Чтобы настроить параметры восстановления, выберите страницу Options (Пара-метры), показанную на рис. 14-5. Ниже перечислены параметры, которые можно задать, и их назначения. Рис. 14-5. Страница Options диалогового окна Restore Database : Overwrite the existing database (Перезаписать существующую базу данных) Если установить этот флажок, при загрузке резервной копии БД и связанные с ней файлы будут перезаписаны. Эквивалентно использованию инструкции RESTORE с параметром REPLACE. : Preserve the replication settings (Сохранить установки репликации) Обе-спечивает сохранение установок репликации при восстановлении базы данных на сервер, отличный от того, где БД была создана изначально. Также необхо-димо установить переключатель в положение Leave the database ready for use by rolling back uncommitted transactions (Произвести откат незавершенных 
454 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 транзакций и оставить базу данных готовой к использованию). Эквивалентно применению инструкции RESTORE с параметром PRESERVE_REPLICATION. : Prompt before restoring each backup (Запрашивать подтверждение перед восстановлением каждой резервной копии) Автоматически выводит запрос после успешной загрузки резервной копии и перед началом следующей загруз-ки. Кнопка Cancel (Отмена) используется для отмены операции после загрузки конкретной резервной копии. Это удобно в случае, когда необходимо заменить картриджи для различных наборов носителей. : Restrict access to the restored database (Ограничить доступ к восстановлен-ной базе данных) Переводит БД в режим ограниченного доступа - только для владельца и членов ролей сервера dbcreator и sysadmin. Эквивалентно использованию инструкции RESTORE с параметром RESTRICTED_USER. : Restore database files as (Восстановить файлы базы данных как) Позволяет изменить размещение файлов БД. 9. Задайте состояние восстановления, установив переключатель в одно из следующих положений. : Leave the database ready for use by rolling back uncommitted transactions (Про-извести откат незавершенных транзакций и оставить базу данных готовой к использованию) Процесс восстановления полностью завершается; при-меняются все выбранные резервные копии, которые могут содержать полную и дифференциальную копии, а также несколько копий журнала транзакций. Все завершенные транзакции применяются, а незавершенные - откатываются. По окончании процесса восстановления БД готова к использованию. Эквива-лентно применению инструкции RESTORE с параметром RECOVERY. : Leave database non-operational, and do not roll back uncommitted transactions (Не производить откат незавершенных транзакций; оставить базу данных в неоперативном состоянии) По сути, это ручное восстановление, которое позволяет пошагово использовать резервные копии. Процесс восстановления полностью завершается; применяются все выбранные резервные копии, кото-рые могут содержать полную и дифференциальную копии, а также несколько копий журнала транзакций. По окончании процесса восстановления БД не возвращается в состояние готовности, поэтому использовать ее для обычных операций невозможно. Все транзакции не обработаны, ожидается применение к базе данных дополнительных копий журнала транзакций. Примените их все, кроме последней. (Эквивалентно использованию инструкции RESTORE с па-раметром NORECOVERY.) При загрузке последней копии журнала транзакций установите параметр Leave the database ready for use by rolling back uncommitted transactions (Произвести откат незавершенных транзакций и оставить базу данных готовой к использованию). Теперь все завершенные транзакции будут применены, а для незавершенных выполнен откат. : Leave database in read-only mode (Оставить базу данных в режиме "только для чтения") Подобен предыдущему положению переключателя, но есть некоторые отличия. По завершении процесса восстановления БД находится в режиме "только для чтения" и готова к применению дополнительных копий журнала транзакций. В режиме "только для чтения" можно просмотреть данные и проверить базу данных. Если есть необходимость, примените дополнитель-ные копии журнала транзакций. (Эквивалентно использованию инструкции 
Резервное копирование и восстановление SQL Server 2005 Глава 14 455 RESTORE с параметром STANDBY.) При загрузке последней копии журнала транзакций установите параметр Leave the database ready for use by rolling back uncommitted transactions (Произвести откат незавершенных транзакций и оставить базу данных готовой к использованию). Теперь все завершенные транзакции будут применены, а для незавершенных выполнен откат. Совет Когда применяется параметр Leave database in read-only mode (Оставить базу данных в режиме "только для чтения"), SQL Server создает специальный файл отмены, который можно использовать для отмены операции восстановления. Чтобы завершить операцию восстановления без восстановления оставшихся копий журнала транзакций, примените инструкцию RESTORE DATABASE с параметром RECOVERY. При этом фик-сируются последние транзакции (если это возможно), удаляется файл отмены и БД воз-вращается в оперативный режим. Не используйте на этом этапе параметр NORECOVERY, поскольку вы рискуете отменить все изменения, сделанные в процессе восстановления, и остаться с пустой базой данных. 10. Щелкните кнопку ОК, когда будете готовы начать восстановление. Операцию можно остановить в любой момент, активизировав ссылку Stop action now (Не-медленно прекратить операцию) в левом нижнем углу диалогового окна Restore Database (Восстановление базы данных). В случае возникновения ошибки об этом будет выведено сообщение. Восстановление файлов и групп файлов Восстанавливать файлы и группы файлов из резервных копий базы данных или ре-зервных копий файлов можно по отдельности, в сочетании с другими или все вместе. Если в них вносились изменения, необходимо также восстановить все резервные копии журналов транзакций, созданные после резервного копирования файлов или групп файлов. Хотя в большинстве случаев восстановление отдельных файлов или групп файлов не представляет сложностей, нужно помнить о некоторых моментах. Когда таблицы и индексы распределены более чем по одной группе файлов, все связанные группы файлов должны быть восстановлены вместе. При отсутствии недостающей группы SQL Server выдаст сообщение об ошибке перед началом восстановления. Кроме того, если БД повреждена, придется восстановить все файлы и группы файлов в ней. В обо-их случаях нужно применять резервные копии журналов транзакций, созданные после наличных копий файла или группы файлов, которые восстанавливаются. Для восстановления файлов и групп файлов выполните указанные ниже дей-ствия. 1. Если стратегия резервного копирования предусматривает применение копий жур-нала транзакций и с базой данных все еще производится работа, нужно создать резервную копию текущего журнала транзакций с параметром NO_TRUNCATE. Для этого на странице Options (Параметры) диалогового окна Back Up Database (Резервное копирование базы данных) установите флажок Back up the tail of the log, and leave the database in the restoring state (Создать резервную копию конца журнала транзакций и оставить базу данных в состоянии восстановления). 2. Раскройте узел Databases (Базы данных) нужного сервера. В контекстном меню восстанавливаемой БД выберите команду Tasks\Restore\Files and Filegroups (За-дачи\Восстановление\Файлы и группы файлов). Отобразится диалоговое окно Restore Files and Filegroups (Восстановление файлов и групп файлов), изобра-женное на рис. 14-6.
456 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Рис. 14-6. Диалоговое окно Restore Files and Filegroups 3. Имя выбранной базы данных выводится в поле To database (В базу данных) в раз-деле Destination to restore (Место назначения для восстановления). Если файл или группа файлов восстанавливаются в исходное положение, оставьте имя базы данных без изменений. При восстановлении их в другую БД введите имя новой базы данных или выберите его из связанного с полем раскрывающегося списка. 4. Имя указанной базы данных выводится в раскрывающемся списке From database (Из базы данных). Если необходимо восстановить файлы и группы файлов из другой БД, выберите ее. В списке присутствуют только базы данных, история резервного копирования которых хранится в msdb. 5. В списке Select the backup sets to restore (Выберите набор резервных копий для восстановления) отображена история резервного копирования файлов и групп файлов выбранной базы данных. Выводятся следующие столбцы. : Restore (Восстановить) По умолчанию флажки в столбце не установлены, файлы следует выбирать вручную. : Name (Имя) Имя набора резервных копий. : Type (Тип) Тип выполненного резервного копирования: Full (Полное), Differential (Дифференциальное) или Transaction Log (Журнал транзакций). : Server (Сервер) Экземпляр ядра базы данных, выполнивший резервное ко-пирование. : File Logical Name (Логическое имя файла) Логическое имя файла. : Database (База данных) Имя БД, где расположен тот файл, резервная копия которого была создана. : Start Date (Дата начала) Дата и время начала резервного копирования.
Резервное копирование и восстановление SQL Server 2005 Глава 14 457 : Finish Date (Дата завершения) Дата и время завершения резервного копи-рования. : Size (Размер) Размер резервной копии. : User Name (Имя пользователя) Имя пользователя, выполнившего резервное копирование. 6. Выберите файлы резервных копий для восстановления, установив флажки в столб-це Restore (Восстановить). 7. Для настройки параметров выберите страницу Options (Параметры). Доступные варианты описаны выше, в разделе "Восстановление БД из обычной резервной копии". 8. Щелкните кнопку ОК, когда будете готовы начать операцию восстановления. Восстановление БД в другое место Когда восстанавливаемая БД устанавливается в другом месте, она копируется туда из резервных копий. Если новое местоположение БД находится на том же компьютере, то создается копия базы данных, которая может иметь отдельные от исходной файлы и другое имя. Процесс восстановления БД в другом месте похож на восстановление файлов и групп файлов, рассмотренное раньше. Однако есть и отличия, которые вы увидите, выполнив следующие действия. 1. На странице General (Общие) в разделе Destination for restore (Место назначения для восстановления) введите новое имя базы данных в поле To database (В базу данных). Например, если в новом месте восстанавливается БД Customer, назовите копию Customer2 или CustomerCopy. 2. На странице Options (Параметры) задайте новые пути назначения для всех вос-станавливаемых файлов вместо существующих путей. Для этого в списке Restore the database files as (Восстановить файлы базы данных как) щелкните соответству-ющую ячейку в столбце Restore As (Восстановить как) и в ставшем доступным поле введите новое имя файла. В качестве альтернативы можно щелкнуть кнопку с многоточием (.) в соответствующей ячейке, чтобы в диалоговом окне Locate Database Files (Поиск файлов базы данных) выбрать файлы для восстановления. Таким же образом создается рабочая копия базы данных на другом сервере. При этом не нужно создавать новую БД или выполнять какие-либо предварительные операции, кроме одного случая - если на сервере назначения предполагается исполь-зовать устройства резервного копирования, их следует предварительно установить. Также перед началом восстановления необходимо убедиться, что сервер назначения использует ту же кодовую страницу, порядок сортировки, сопоставление Unicode и языковые настройки, что и исходный сервер. Если эти параметры конфигурации не идентичны, восстановленная база данных работать не будет. Восстановление потерянных данных Если возникло обоснованное предположение, что часть базы данных повреждена или отсутствует, можно выполнить частичное восстановление в новом месте, чтобы извлечь потерянные или поврежденные данные. Для этого нужно использовать па-раметр PARTIAL инструкции RESTORE DATABASE, которая обсуждается далее, в разделе "Использование для восстановления инструкций Transact-SQL". Частичное восстановление возможно только на уровне групп файлов. Вместе с выбранными для восстановления файлами и соответствующими им группами файлов всегда вос-станавливается основной файл и основная группа файлов. Файлы и группы файлов, которые не восстанавливаются, отмечаются как недоступные.
458 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Для загрузки резервной копии и извлечения из нее необходимых данных повто-рите следующие действия. 1. Выполните частичное восстановление БД. Задайте новое имя и место для базы данных в инструкции RESTORE DATABASE и используйте параметры MOVE/TO, чтобы переместить исходные файлы БД в новое место, например: RESTORE DATABASE new_custdb_partial FILEGROUP = 'Customers2' FROM DISK = 'g:\cust.bak' WITH FILE = 1, NORECOVERY, PARTIAL, MOVE 'cust' TO 'g:\cu2.pri', MOVE 'cust_log' TO 'g:\cu2.log', MOVE 'cust_data_2' TO 'g:\cu2.dat2' 2. Извлеките все необходимые данные из частично восстановленной базы данных и вставьте их в БД, откуда они были удалены. Создание резервных серверов Для восстановления резервной копии на другой компьютер можно создать автоном-ный резервный сервер, который приводится в рабочее состояние в случае отказа основного сервера. При этом существуют две возможности: создать сервер "холодного резерва", синхронизируемый с основным вручную; создать сервер "теплого резерва", который SQL Server синхронизирует с основным автоматически. Создание сервера "холодного резерва" Чтобы создать резерв, синхронизируемый вручную, выполните указанные ниже дей-ствия. 1. Установите SQL Server на новой серверной системе, используя конфигурацию, идентичную основному серверу. Это означает, что сервер назначения должен ис-пользовать ту же кодовую страницу, порядок сортировки, сопоставление Unicode и языковые настройки Unicode, что и исходный. 2. Скопируйте все базы данных основного сервера на эту новую систему; укажите в диалоговом окне Restore Database (Восстановление базы данных) другое место-расположение при восстановлении БД. 3. Периодически применяйте резервные копии журналов транзакций основного сер-вера на резервном. 4. Резервный сервер можно оставить в режиме Standby (Ждущий); при этом базы данных будут доступны только для чтения. Это позволит пользователям получить доступ к БД, но не вносить в них изменения. Если на основном сервере произойдет сбой одной или больше БД, можно сделать доступными для использования соответствующие базы данных на резервном сервере. Однако перед этим необходимо синхронизировать основной и резервный серверы, выполнив следующие действия. 1. Примените на резервном сервере все резервные копии журналов транзакций основ-ного сервера, которые еще не использовались. Это необходимо делать в правильной временной последовательности. 2. Создайте на основном сервере резервную копию активной части журнала тран-закций и примените эту резервную копию к БД на резервном сервере. Это обе-
Резервное копирование и восстановление SQL Server 2005 Глава 14 459 спечит синхронизацию данных до минуты. Проследите, чтобы после применения последней резервной копии не оставить БД в состоянии восстановления. Совет Если вам нужно, чтобы резервный сервер выглядел основным, отключите основной сервер от сети и переименуйте его, а затем переименуйте резервный, присвоив ему имя основного. 3. После устранения проблем на основном сервере все изменения в БД на резервном сервере необходимо восстановить на основной. В противном случае, когда начнется использование основного сервера, эти изменения будут утеряны. Примечание Резервные серверы - это не то же, что и отказоустойчивый кластер SQL Server, который создается с использованием мастера SQL Server Failover Cluster Wizard (Мастер создания отказоустойчивого кластера SQL Server) и службы Microsoft Cluster Service. Резервные серверы хранят на своих жестких дисках отдельную копию баз дан-ных. Виртуальные серверы используют одну копию БД, доступ к которой осуществляется через общий накопитель. Создание сервера "теплого резерва" В редакцию SQL Server 2005 Enterprise Edition включена функция, называемая пере-дачей журналов. Передачу журналов транзакций можно использовать для создания резервного сервера, синхронизируемого с основным автоматически. Для этого вы-полните следующие действия. 1. Установите SQL Server на новой серверной системе, используя конфигурацию, идентичную основному серверу. Это означает, что сервер назначения должен ис-пользовать ту же кодовую страницу, порядок сортировки, сопоставление Unicode и языковые настройки Unicode, что и исходный. 2. Скопируйте все базы данных основного сервера на эту новую систему; в диа-логовом окне Restore Database (Восстановление базы данных) укажите другое месторасположение при восстановлении БД. 3. Настройте передачу журналов на основном сервере, как описано в разделе "На-стройка передачи журналов" главы 15. Основной сервер называется исходным. Серверы, получающие журналы, называ-ются серверами назначения. После настройки передачи журналов необходимо пери-одически проверять состояние передачи журналов на исходном сервере и серверах назначения. Если на основном сервере произойдет сбой одной или нескольких баз данных, можно сделать доступными для использования соответствующие БД на резервном сервере. Для этого выполните указанные действия. 1. Убедитесь, что применены последние журналы, проверив статус передачи журналов на сервере назначения. 2. Отключите основной сервер от сети и переименуйте его. 3. Затем переименуйте резервный сервер, присвоив ему имя основного. 4. Проверьте соединение с новым основным сервером. После восстановления работоспособности основного сервера, на нем необходи-мо восстановить все изменения, сделанные в БД на резервном сервере. В против-ном случае эти изменения будут утеряны, когда начнется использование основного сервера.
460 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Использование для восстановления инструкций Transact-SQL Можно восстанавливать базы данных средствами Тransact-SQL с помощью инструк-ций RESTORE DATABASE и RESTORE LOG. Инструкция RESTORE DATABASE применяется для восстановления всей базы данных, отдельных файлов и групп фай-лов или части поврежденной БД. Синтаксис и использование этой инструкции для выполнения полного восстановления базы данных приводятся в примере 14-6. По умолчанию используется параметр RECOVERY. Пример 14-6. Синтаксис и использование инструкции RESTORE DATABASE для выполнения полного восстановления Синтаксис: RESTORE DATABASE { database_name | @database_name_variable } [ FROM <backup_device> [ ,...n ] ] [ WITH [ { CHECKSUM | NO_CHECKSUM } ] [ [ , ] { CONTINUE_AFTER_ERROR | STOP ON ERROR } ] [ [ , ] FILE = { file_number | @file_number } ] [ [ , ] KEEP_REPLICATION ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] MOVE 'logical_file_name' TO 'os_file_name' ] [ ,...n ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] { RECOVERY | NORECOVERY | STANDBY = { standby_file_name | @standby_file_name_variable } } ] [ [ , ] REPLACE ] [ [ , ] RESTART ] [ [ , ] RESTRICTED_USER ] [ [ , ] { REWIND | NOREWIND } ] [ [ , ] STATS [ = percentage ] ] [ [ , ] { STOPAT = { date_time | @date_time_var } | STOPATMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] | STOPBEFOREMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] } ] [ [ , ] { UNLOAD | NOUNLOAD } ] ] [ ; ] <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } Использование: RESTORE DATABASE Customer FROM TAPE = '\\.\tape0'
Резервное копирование и восстановление SQL Server 2005 Глава 14 461 Использование: RESTORE DATABASE Customer FROM Customer_1 WITH NORECOVERY, MOVE 'CustomerData1' TO 'F:\mssql7\data\NewCust.mdf', MOVE 'CustomerLog1' TO 'F:\mssql7\data\NewCust.ldf RESTORE LOG Customer FROM CustomerLog1 WITH RECOVERY При помощи инструкции RESTORE DATABASE можно также восстанавливать файлы и группы файлов. Ее синтаксис и использование приводятся в примере 14-7. Пример 14-7. Синтаксис и использование инструкции RESTORE DATABASE для восстановления файлов и групп файлов Синтаксис: RESTORE DATABASE { database_name | @database_name_variable } <file_or_filegroup_or_pages> [ ,...n ] [ FROM <backup_device> [ ,...n ] ] [ WITH [ { CHECKSUM | NO_CHECKSUM } ] [ [ , ] { CONTINUE_AFTER_ERROR | STOP ON ERROR } ] [ [ , ] FILE = { file_number | @file_number } ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] MOVE 'logical_file_name' TO 'os_file_name' ] [ ,...n ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] NORECOVERY ] [ [ , ] REPLACE ] [ [ , ] RESTART ] [ [ , ] RESTRICTED_USER ] [ [ , ] { REWIND | NOREWIND } ] [ [ , ] STATS [ = percentage ] ] [ [ , ] { UNLOAD | NOUNLOAD } ] ] [ ; ] <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } <file_or_filegroup_or_pages> ::= { FILE = { logical_file_name | @logical_file_name_variable } | FILEGROUP = { logical_filegroup_name | @logical_filegroup_name_variable }} | PAGE = 'file_id:page_id [ ,...n ]' } Использование: RESTORE DATABASE Customer FILE = 'Customerdata_1', FILE = 'Customerdata_2'
462 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 FROM Customer_1 WITH NORECOVERY RESTORE LOG Customer FROM CustomerLog1 Синтаксис и использование этой инструкции RESTORE DATABASE для частич-ного восстановления базы данных приводятся в примере 14-8. При этом создается новая БД на основе частичной копии. Параметр database_name содержит новое имя базы данных, а предложение MOVE/TO используется, чтобы переместить исходные файлы БД в новое место. Пример 14-8. Синтаксис и использование инструкции RESTORE DATABASE для частичного восстановления Синтаксис: RESTORE DATABASE { database_name | @database_name_variable } <files_or_filegroups> [ ,...n ] [ FROM <backup_device> [ ,...n ] ] [ WITH PARTIAL [ [ , ] { CHECKSUM | NO_CHECKSUM } ] [ [ , ] { CONTINUE_AFTER_ERROR | STOP ON ERROR } ] [ [ , ] FILE = { file_number | @file_number } ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] MOVE 'logical_file_name' TO 'os_file_name' ] [ ,...n ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] NORECOVERY ] [ [ , ] REPLACE ] [ [ , ] RESTART ] [ [ , ] RESTRICTED_USER ] [ [ , ] { REWIND | NOREWIND } ] [ [ , ] STATS [ = percentage ] ] [ [ , ] { STOPAT = { date_time | @date_time_var } | STOPATMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] | STOPBEFOREMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] } ] [ [ , ] { UNLOAD | NOUNLOAD } ] ] [ ; ] <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } <files_or_filegroups> ::= { FILE = { logical_file_name | @logical_file_name_variable } | FILEGROUP = { logical_filegroup_name | @logical_filegroup_name_variable } | READ_WRITE_FILEGROUPS }
Резервное копирование и восстановление SQL Server 2005 Глава 14 463 Использование: RESTORE DATABASE cust_part FILEGROUP = 'Customers2' FROM DISK 'g:\cust.bak' WITH FILE = 1, NORECOVERY, PARTIAL, MOVE 'cust' TO 'g:\cu2.pri', MOVE 'cust_log' TO 'g:\cu2.log', MOVE 'cust_data_2' TO 'g:\cu2.dat2' RESTORE LOG cust_part FROM DISK = 'g:\cust.bak' WITH FILE = 2, RECOVERY В примере 14-9 показаны синтаксис и использование инструкции RESTORE LOG для восстановления журнала транзакций. Пример 14-9. Синтаксис и использование инструкции RESTORE LOG Синтаксис: RESTORE LOG { database_name | @database_name_variable } [ <file_or_filegroup_or_pages> [ ,...n ] ] [ FROM <backup_device> [ ,...n ] ] [ WITH [ { CHECKSUM | NO_CHECKSUM } ] [ [ , ] { CONTINUE_AFTER_ERROR | STOP_ON_ERROR } ] [ [ , ] FILE = { file_number | @file_number } ] [ [ , ] KEEP_REPLICATION ] [ [ , ] MEDIANAME = { media_name | @media_name_variable } ] [ [ , ] MEDIAPASSWORD = { media_password | @media_password_variable } ] [ [ , ] MOVE 'logical_file_name' TO 'os_file_name' ] [ ,...n ] [ [ , ] PASSWORD = { password | @password_variable } ] [ [ , ] { RECOVERY | NORECOVERY | STANDBY = { standby_file_name | @standby_file_name_variable } } ] [ [ , ] REPLACE ] [ [ , ] RESTART ] [ [ , ] RESTRICTED_USER ] [ [ , ] { REWIND | NOREWIND } ] [ [ , ] STATS [ = percentage ] ] [ [ , ] { STOPAT = { date_time | @date_time_var } | STOPATMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] | STOPBEFOREMARK = { 'mark_name' | 'lsn:lsn_number' } [ AFTER date_time ] } ] [ [ , ] { UNLOAD | NOUNLOAD } ] ][ ; ]
464 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 <backup_device> ::= { { logical_backup_device_name | @logical_backup_device_name_variable } | { DISK | TAPE } = { 'physical_backup_device_name' | @physical_backup_device_name_variable } } <file_or_filegroup_or_pages> ::= { FILE = { logical_file_name | @logical_file_name_variable } | FILEGROUP = { logical_filegroup_name | @logical_filegroup_name_variable }} | PAGE = 'file_id:page_id [ ,...n ]' } Использование: RESTORE DATABASE Customer FROM Customer_1, Customer_2 WITH NORECOVERY RESTORE LOG Customer FROM CustomerLog1 WITH NORECOVERY RESTORE LOG Customer FROM CustomerLog2 WITH RECOVERY, STOPAT = 'Dec 11, 2006 3:30 PM' Восстановление полнотекстовых каталогов В SQL Server 2005 полнотекстовые каталоги включены в набор файлов базы данных с целью резервного копирования и восстановления. При восстановлении БД полно-текстовые каталоги восстанавливаются автоматически; то же самое происходит при восстановлении группы файлов, содержащей один или несколько полнотекстовых каталогов. Изменения в полнотекстовых каталогах резервируются с помощью стан-дартных дифференциальных резервных копий базы данных или группы файлов. Хотя резервные копии полнотекстовых каталогов создаются и восстанавливаются вместе с файлами БД, существуют также способы осуществить резервное копирование и вос-становление только полнотекстовых каталогов. Восстановить полнотекстовый каталог можно с помощью Тransact-SQL. Для это-го необходимо указать логическое имя файла полнотекстового каталога, используя параметр FILE инструкции RESTORE. Рассмотрим следующий пример: RESTORE DATABASE Customer FILE = 'customerdb_cat' FROM Customer_Catalog WITH NORECOVERY RESTORE DATABASE Customer FILE = 'customerdb_cat' FROM Customer_Catalog2 В этом примере как Customer_Catalog указано устройство резервного копирования, которое будет использоваться. Сначала восстанавливается последняя полная резерв-ная копия полнотекстового каталога, которой было присвоено имя customerdb_cat. Затем - дифференциальная резервная копия полнотекстового каталога. Важно пом-нить, что первое восстановление происходит с параметром NORECOVERY, чтобы обеспечить недоступность базы данных, при этом служба полнотекстового поиска 
Резервное копирование и восстановление SQL Server 2005 Глава 14 465 отключена. Однако после восстановления второй копии БД переводится в оператив-ный режим и запускается служба полнотекстового поиска. Несколько каталогов можно восстанавливать как часть группы файлов. Для этого укажите логическое имя восстанавливаемой группы файлов, используя параметр FILEGROUP, например: RESTORE DATABASE Customer FILEGROUP = 'Catalogs_Primary' FROM Customer_Catalog Параметры MOVE/TO позволяют восстанавливать каталоги в альтернативное ме-стоположение. Можно задать расположение корневой папки для хранения каталогов, как в следующем примере: RESTORE DATABASE Customer FROM Customer_Catalog WITH MOVE 'customerdb_cat' TO 'C:\Data\Catalogs' В этом примере как Customer_Catalog указано устройство резервного копирования. Восстанавливается последняя полная резервная копия полнотекстового каталога под именем customerdb_cat в папку C:\Data\Catalogs. Восстановление БД master БД master является самой важной базой данных в SQL Server. В ней хранится инфор-мация обо всех базах данных на сервере, его конфигурации, учетных записях и пр. Повреждение БД master может привести к остановке сервера. Для восстановления базы данных существует два способа. Если удается запустить SQL Server, для восстановления БД master используется процесс, подобный восстановлению любой другой базы данных. Он выполняется следующим образом. 1. Можно создавать только полные резервные копии БД master, поэтому дифферен-циальные копии и копии журналов транзакций применить нельзя. Это означает, что не всегда удастся восстановить базу данных master точно в том виде, в котором она находилась перед сбоем, вследствие этого лучше оставлять базу данных в ра-бочем состоянии, используя положение переключателя Leave the database ready for use by rolling back uncommitted transactions (Произвести откат незавершенных транзакций и оставить базу данных готовой к использованию) или параметр RECOVERY инструкции RESTORE DATABASE. 2. После восстановления БД master может понадобиться внести все изменения, вы-полненные после последнего полного резервного копирования, вручную. 3. Проверив сервер и убедившись, что все в порядке, выполните полное резервное копирование БД master. Если же SQL Server запустить не удается и причина, как вы думаете, заключается в БД master, для ее восстановления выполните указанные дальше действия. 1. Запустите программу установки для перестройки БД master, чтобы проверить и исправить экземпляр SQL Server и его системные базы данных. 2. После этого следует восстановить последнюю резервную копию БД master для возвращения сервера в актуальное состояние. 3. Поскольку перестройка базы данных master сказывается на БД msdb и model, может понадобиться восстановить из резервных копий также и эти базы данных. 4. Повторно создайте все устройства резервного копирования.
466 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 5. Если необходимо, повторно создайте учетные записи и другие настройки безопас-ности. 6. В случае необходимости восстановите реплицированные БД. 7. Восстановите или присоедините пользовательские БД, если нужно. 8. Восстановите другие настройки конфигурации сервера, если в этом есть необхо-димость. Как видно из этой пошаговой процедуры, для восстановления базы данных master может понадобиться много времени и усилий, поэтому очень важно регулярно соз-давать ее резервные копии. После завершения восстановления сервера обязательно создайте полную резервную копию базы данных master.
Глава 15 Автоматизация администрирования и обслуживание БД Автоматизация администрирования и обслуживание баз данных идут рука об руку. Автоматизировать можно множество рутинных задач администрирования, большин-ство из которых относятся к обслуживанию БД, например резервное копирование или проверка целостности баз данных. Автоматизация увеличивает продуктивность работы администратора, давая возможность выполнять операции администрирования, не на-ходясь непосредственно у компьютера. В частности, настроить сервер таким образом, чтобы выполнялось отслеживание процессов сервера и активности пользователей и при возникновении ошибок или наступлении определенных событий генерировались оповещения. Если надлежащим образом настроить оповещения, SQL Server способен сам производить мониторинг функционирования, позволяя администратору скон-центрироваться на других задачах. И, наконец, основным средством автоматизации рутинных задач администрирования является возможность назначить выполнение заданий по расписанию: запланировать либо однократный запуск заданий, либо пе-риодический, например раз в неделю или в третий вторник каждого месяца. Обзор автоматизации администрирования и обслуживания БД SQL Server 2005 имеет четыре основных компонента автоматизации и обслуживания базы данных. Database Mail (Почта базы данных) Посылает оповещения и уведомления по электронной почте. SQL Server Agent (Агент SQL Server) Наблюдает за активностью сервера при помощи оповещений, уведомлений и заданий, выполняемых по расписанию. Планы обслуживания БД Организует автоматизированное обслуживание. Передача журналов Производит автоматическую синхронизацию с резервными серверами. Для использования перечисленных возможностей автоматизации и обслуживания необходимо произвести настройку, как указано ниже. 1. Компонент Database Mail (Почта базы данных) настраивается для базы данных msdb и других БД. База данных msdb используется SQL Server Agent (Агент SQL Server) для хранения расписаний оповещений и заданий и информации об опе-раторах. Объекты почты базы данных также создаются в БД msdb, которая играет ключевую роль в отправке почтой оповещений, уведомлений и других типов со-общений. 2. Как правило, чтобы настроить службу SQL Server Agent (Агент SQL Server), следует обеспечить ее автоматический запуск при старте операционной системы, 
468 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 пользуясь для этого надлежащей учетной записью и правильным почтовым про-филем для использования с Database Mail (Почта базы данных). 3. Для разрешения автоматического выполнения оповещений и заданий нужно на-строить оповещения, задания и операторов. Оповещения - это автоматически генерируемые сообщения, которые доносят информацию об ошибке или проблеме до администратора или другого пользователя. Задания - это последовательность действий по администрированию сервера, запускаемых автоматически при насту-плении инициирующего события или через определенные промежутки времени. Операторы - это пользователи, которым отправляются оповещения и уведом-ления. 4. Чтобы автоматизировать рутинную оптимизацию и обслуживание базы данных, настройте планы обслуживания БД. Даже если рутинные задачи автоматизирова-ны, следует регулярно просматривать журналы отчетов для контроля выполнения плана обслуживания. Иногда необходимо производить некоторые операции опти-мизации и обслуживания вручную, что также можно сделать с помощью планов обслуживания базы данных. 5. Если необходимо, настройте передачу журналов для разрешения другим серверам SQL Server выступать в роли резервных. Это позволит при сбое основного сервера привести их в оперативное состояние. Использование Database Mail Компонент Database Mail (Почта базы данных) играет ключевую роль в автомати-зации администрирования базы данных. С его помощью оповещения и другие типы сообщений отправляются администраторам или пользователям. Также SQL Server использует Database Mail (Почта базы данных) в качестве почтового клиента для создания и отправки сообщений электронной почты при помощи протокола SMTP. Настройка почты базы данных производится таким образом: в БД msdb устанавливаются объекты обмена сообщениями базы данных; настраиваются учетные записи и почтовые профили; настраивается безопасность. Компонент Database Mail (Почта базы данных) является полнофункциональной заменой службы SQL Mail (Почта SQL) и выступает в качестве почтового клиента для отправки сообщений назначенным серверам SMTP. Любой SMTP-сервер, вклю-чая Microsoft Exchange, может получать и доставлять сообщения, генерируемые этим компонентом. Начальная настройка Database Mail Как и большинство почтовых клиентов, Database Mail (Почта базы данных) исполь-зует почтовые профили и учетные записи для отправки сообщений электронной почты. Профиль определяет конфигурацию, используемую Database Mail (Почта базы данных), и может быть связан с одной или несколькими учетными записями SMTP. Поскольку учетные записи почты используются в порядке приоритетности, в случае сбоя сервера или проблем сети в качестве страховки можно настроить не-сколько учетных записей на разных почтовых серверах, а затем настроить профиль Database Mail (Почта базы данных) для их использования. Это приведет к тому, что при невозможности доставить почту первой учетной записи, приведенной в спи-ске, будет производиться попытка доставить почту второй учетной записи, третьей и так далее.
Автоматизация администрирования и обслуживание БД Глава 15 469 Профили Database Mail (Почта базы данных) бывают двух видов. Public (Общие) Доступны всем пользователям или приложениям для любого настроенного узла почты базы данных на текущем экземпляре сервера. Private (Личные) Доступны только определенным явным образом пользователям и приложениям. При настройке Database Mail (Почта базы данных) для SQL Server Agent (Агент SQL Server) или определенного приложения следует использовать личный профиль. Если же почта базы данных настраивается для общего использования, тогда приме-няется общий профиль. Прежде чем приступить к настройке Database Mail (Почта базы данных), необхо-димо создать учетные записи SMTP, которые она будет использовать. При настройке почты базы данных для SQL Server Agent (Агент SQL Server) хорошо бы отразить это в адресе электронной почты и имени учетной записи. Например, установить имя пользователя как SQL Agent и адрес электронной почты как sqlagent@company_name. com. Для настройки Database Mail (Почта базы данных) необходимо имя учетной записи, адрес электронной почты и имя сервера SMTP. Если сервер SMTP требует аутентификации, то для учетной записи также потребуются имя пользователя и па-роль для входа на SMTP сервер. Совет Некоторые задачи обслуживания базы данных могут требовать монопольного доступа к SQL Server. В этом случае, если БД на текущем экземпляре сервера находит-ся в однопользовательском режиме и существует активное соединение с ней, задание обслуживания выполнить не удастся. Попробуйте перевести БД в многопользовательский режим. Если не удается получить доступ к базе данных для ее возвращения в много-пользовательский режим, можно изменить режим БД, указанным ниже способом. 1. Войдите на сервер и откройте окно командной строки. Командой net stop остановите экземпляр SQL Server, который нужно настроить. Например, если требуется оста-новить экземпляр SQL Server по умолчанию, следует выполнить команду net stop mssqlserver. 2. С помощью команды CD перейдите в каталог Binn экземпляра SQL Server. Например, выполните команду cd C:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Binn или cd C:\Progra~1\Micros~1\MSSQL.1\MSSQL\Binn. 3. Переведите базу данных в однопользовательский режим командой sqlservr -m. 4. Запустите вторую командную строку и установите с SQL Server выделенное соедине-ние администратора с помощью команды sqlcmd -A. При необходимости предоставьте имя пользователя и пароль, используя параметры -U и -P. 5. Произведите необходимые задачи обслуживания с помощью утилиты sqlcmd. 6. Установите базу данных, находящуюся в однопользовательском режиме, в много-пользовательский, используя хранимую процедуру sp_dboption. Например, если БД называется cust, следует ввести: USE master EXEC sp_dboption 'cust', 'single user', 'FALSE'; GO 7. В первой командной строке (в которой запущен SQL Server) нажмите клавиши Ctrl+C, чтобы остановить SQL Server. При появлении запроса на подтверждение действия, нажмите клавишу Y. 8. Командой net start запустите экземпляр SQL Server, с которым производится работа. Например, если требуется запустить экземпляр SQL Server по умолчанию, следует использовать команду net start mssqlserver.
470 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Для первой настройки Database Mail (Почта базы данных) можно также исполь-зовать SQL Server Management Studio, выполнив следующие действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к необходимому экземпляру сервера, затем раскройте узел Management (Управление). 2. В контекстном меню узла Database Mail (Почта базы данных) выберите команду Configure Database Mail (Настроить почту базы данных). Запустится мастер Database Mail Configuration Wizard (Мастер настройки почты базы данных). Щелкните кнопку Next (Далее). 3. Если Database Mail (Почта базы данных) настраивается в первый раз, оставьте переключатель в положении по умолчанию Setup Database Mail (Установка почты базы данных), затем щелкните кнопку Next (Далее). 4. При выводе запроса о включении возможности Database Mail (Почта базы данных), щелкните кнопку Yes (Да). 5. На странице New Profile (Создать профиль) мастера введите имя и описание по-чтового профиля, например "Почтовый профиль для SQL Server" (без кавычек). Профиль нужен для определения конфигурации почты, используемой Database Mail (Почта базы данных). 6. Чтобы указать учетную запись SMTP, которую профиль будет использовать для отправки сообщений электронной почты, щелкните кнопку Add (Добавить). Ото-бразится диалоговое окно New Database Mail Account (Новая учетная запись Database Mail), показанное на рис. 15-1. Рис. 15-1. Диалоговое окно New Database Mail Account 7. В поле Account name (Имя учетной записи) введите имя, а в поле Description (Описание) - описание учетной записи. Эта информация используется только 
Автоматизация администрирования и обслуживание БД Глава 15 471 с Database Mail (Почта базы данных) и отображается в диалоговых окнах SQL Server. 8. В поле E-mail address (Адрес электронной почты) наберите адрес электронной по-чты учетной записи Database Mail (Почта базы данных), например sqlagent@cpandl. com. 9. Задайте имя, которое будет показано в поле From (От) в исходящих сообщениях. Для этого введите его в поле Display name (Отображаемое имя). 10. Адрес электронной почты, куда будут отправляться ответы на сообщения Database Mail (Почта базы данных), наберите в поле Reply e-mail (Адрес для ответа). 11. В поле Server name (Имя сервера) введите имя узла почтового сервера, например smtp, или же полное доменное имя почтового сервера, допустим smtp.cpandl.com. Использование последнего гарантирует успешное соединение, если почтовый сер-вер находится в другом домене. 12. Для отправки сообщений Database Mail (Почта базы данных) подключается к почтовому серверу. В разделе SMTP Authentication (Аутентификация SMTP) выберите, установив соответствующий переключатель, подходящий тип аутенти-фикации SMTP, в зависимости от настроек почтового сервера. : Windows Authentication using Database Engine services credentials (Аутенти фи-кация Windows, используя учетные данные службы ядра базы данных) Почта базы данных подключается, используя учетные данные службы SQL Server для текущего экземпляра ядра базы данных. : Basic authentication (Основная аутентификация) Подключение происхо-дит на основе учетной записи и пароля, которые задаются в предоставленных полях. : Anonymous authentication (Анонимная аутентификация) Database Mail (По-чта базы данных) подключается как анонимный пользователь. На почтовом сервере должен быть настроен анонимный вход (что не является хорошей практикой безопасности). 13. Щелкните кнопку OK, чтобы закрыть диалоговое окно New Database Mail Account (Создать учетную запись Database). 14. Повторите пункты 6-13, чтобы указать другие почтовые учетные записи, которые следует связать с профилем Database Mail (Почта базы данных). Учетная запись, приведенная в списке первой, будет почтой базы данных использоваться в пер-вую очередь. С помощью кнопок Move Up (Переместить вверх) и Move Down (Переместить вниз) можно установить приоритет использования учетных записей. Щелкните кнопку Next (Далее). 15. Если создается общий профиль, на вкладке Public Profiles (Общие профили) установите флажок в столбце Public (Общий). Чтобы сделать его профилем по умолчанию для всех баз данных и пользователей узла почты, в раскрывающемся списке в столбце Default Profile (Профиль по умолчанию) выберите значение Yes (Да), как показано на рис. 15-2. 16. При создании личного профиля выберите вкладку Private Profiles (Личные про-фили). В раскрывающемся списке User name (Имя пользователя) назначьте поль-зователя; по умолчанию таковым является учетная запись службы SQL Server Agent (Агент SQL Server). После этого установите флажок в столбце Access (До-ступ), чтобы предоставить пользователю доступ к профилю. Для предоставления доступа другим пользователям повторите действия. Если вы хотите назначить этот профиль для выбранной базы данных и пользователя узла почты профилем 
472 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 по умолчанию, в раскрывающемся списке в столбце Default Profile (Профиль по умолчанию) выберите значение Yes (Да). Рис. 15-2. Вкладка Public Profiles 17. Отобразится окно мастера Configure System Parameters (Настройте системные параметры). Системные параметры используются всеми узлами почты базы дан-ных, настроенными для экземпляра SQL Server. После настройки указанных ниже параметров щелкните кнопку Next (Далее). : Account Retry Attempts (Количество повторных попыток) Устанавливает количество повторных попыток отправки сообщения. По умолчанию - 1. Если было настроено несколько учетных записей, этого достаточно. Однако при настройке почты для SQL Server Agent (Агент SQL Server) обычно требуется установить количество повторных попыток для отправки сообщения от трех до пяти. : Account Retry Delay (seconds) (Задержка между повторными попытка ми) Уста-навливает задержку (в секундах) между попытками. По умолчанию - 60 с, что слишком долго, если нужно доставить критические предупреждения. При настройке почты для SQL Server Agent (Агент SQL Server) предпочтительнее установить задержку попыток от 30 до 60 с. : Maximum File Size (Bytes) (Максимальный размер файла) Устанавлива-ет максимальный размер (в байтах) для любого генерируемого сообщения, включая заголовки, текст сообщения и прикрепленные файлы. По умолча-нию - 1 000 000 байтов (976 Кбайт). При настройке почты для SQL Server Agent (Агент SQL Server) этого обычно бывает достаточно. Однако если при-
Автоматизация администрирования и обслуживание БД Глава 15 473 ложения генерируют сообщения с графикой или мультимедиа, то данного объ-ема может оказаться мало. : Prohibited Attachment File Extensions (Запрещенные расширения прикре-пленных файлов) Устанавливает, в соответствии с расширением, такие типы файлов, которые не могут быть посланы в качестве прикрепленных. Во избежа-ние использования почты базы данных злоумышленниками, включите в список все расширения файлов, назначенные в Group Policy (Групповая политика) как расширения повышенного риска, а именно: .ade, .adp, .app, .asp, .bas, .bat, .cer, .chm, .cmd, .com, .cpl, .crt,.csh, .exe, .fxp, .hlp, .hta, .inf, .ins, .isp, .its, .js, .jse, .ksh, .lnk, .mad, .maf, .mag, .mam, .maq, .mar, .mas, .mat, .mau, .mav, .maw, .mda, .mdb, .mde, .mdt, .mdw, .mdz, .msc, .msi, .msp, .mst, .ops, .pcd, .pif, .prf, .prg, .pst, .reg, .scf, .scr, .sct, .shb, .shs, .tmp, .url, .vb, .vbe, .vbs, .vsmacros, .vss, .vst,.vsw, .ws, .wsc, .wsf, и .wsh. : Database Mail Executable Minimum Lifetime (seconds) (Минимальное время выполнения исполняемого файла Database Mail) Минимальное время вы-полнения должно быть установлено для оптимизации использования исполня-емого файла Database Mail (Почта базы данных). Нежелательно, чтобы сервер создавал соответствующие объекты в памяти и затем удалял их снова и снова. Следует, чтобы соответствующие объекты очищались из памяти, если в них нет необходимости. 600 с (10 мин) по умолчанию обычно вполне достаточно. : Logging Level (Уровень ведения журнала) Определяет уровень ведения журнала для Database Mail (Почта базы данных). Значение по умолчанию Extended (Расширенный) настраивает почту базы данных на расширенную запись в журнал соответствующих событий. Можно установить уровень как Normal (Обычный), чтобы в журнал записывались только важные события, такие как предупреждения и ошибки. Примечание Уровень ведения журнала также может быть установлен как Verbose (До-полнительные сведения). Однако эта установка должна использоваться только для устра-нения ошибок, после чего следует восстановить уровень ведения журнала как Extended (Расширенный) или Normal (Обычный). 18. В последнем диалоговом окне мастера перечислены действия, которые следует выполнить по установке. Щелкните кнопку Finish (Готово). Страница Configuring (Настройка) показывает успешное или неуспешное завершение каждого действия. Активизируйте ссылку, предоставленную для каждого сообщения об ошибке, про-смотрите информацию и произведите действия, необходимые для ее устранения. Щелкните кнопку Close (Закрыть). Совет Когда Database Mail (Почта базы данных) включается для использования со служ-бой SQL Server Agent (Агент SQL Server), необходимо убедиться, что служба запущена и настроена на автоматический запуск (см. далее раздел "Настройка службы SQL Server Agent"). Состояние SQL Server Agent (Агент SQL Server) можно проверить в панели Object Explorer (Обозреватель объектов). Если служба не запущена, в контекстном меню узла SQL Server Agent (Агент SQL Server) выберите команду Start (Пуск). Управление почтовыми профилями и учетными записями Database Mail Database Mail (Почта базы данных) настраивается для использования как одного, так и нескольких почтовых профилей, каждый из которых может иметь одну или несколь-ко связанных с ними учетных записей. Для управления профилями и их учетными записями в SQL Server Management Studio, а также при их добавлении, необходимо выполнить следующую последовательность действий.
474 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 1. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому экземпляру сервера, затем раскройте узел Management (Управление). 2. В контекстном меню узла Database Mail (Почта базы данных) выберите команду Configure Database Mail (Настроить почту базы данных), чтобы отобразить мастер Database Mail Configuration Wizard (Мастер настройки почты базы данных). При появлении страницы приветствия щелкните кнопку Next (Далее). 3. Установите переключатель в положение Manage Database Mail accounts and profiles (Управлять учетными записями и профилями почты базы данных). Щелкните кнопку Next (Далее). 4. Если на этом экземпляре сервера было настроено несколько узлов почты базы данных и требуется определить для них отдельные профили, установите пере-ключатель в положение Create a new profile (Создать новый профиль) и щелкните кнопку Next (Далее). Чтобы определить новый профиль и учетные записи, свя-занные с ним, повторите действия пунктов 5-13 из раздела "Начальная настройка Database Mail". 5. Желая изменить существующий профиль или добавить к нему учетную запись, установите переключатель в положение View, change, or delete an existing profile (Просмотреть, изменить или удалить существующий профиль), затем щелкните кнопку Next (Далее). В раскрывающемся списке Profile name (Имя профиля) вы-берите профиль для изменения. Если вы хотите добавить, удалить или установить приоритет учетных записей для этого профиля, повторите пункты 6-13 из раздела "Начальная настройка Database Mail". 6. Щелкните кнопку Next (Далее), а потом кнопку Finish (Готово). Страница Configuring (Настройка) показывает успешное или неуспешное завершение каждого действия. Активизируйте ссылку, предоставленную для каждого сообщения об ошибке, просмотрите информацию и произведите действия, необходимые для ее устранения. Щелкните кнопку Close (Закрыть). Чтобы установить почтовый профиль в качестве общего или личного, выполните приведенные дальше действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к необходимому экземпляру сервера, затем раскройте узел Management (Управление). 2. Щелкните правой кнопкой мыши узел Database Mail (Почта базы данных) и в кон-текстном меню выберите команду Configure Database Mail (Настроить почту базы данных), чтобы отобразить мастер Database Mail Configuration Wizard (Мастер настройки почты базы данных). При появлении страницы приветствия щелкните кнопку Next (Далее). 3. Установите переключатель в положение Manage Database Mail accounts and profiles (Управлять учетными записями и профилями почты базы данных). Щелкните кнопку Next (Далее). 4. Вкладка Public Profiles (Общие профили) показывает общие профили. Снимите флажок Public (Общий), если следует сделать профиль личным. Чтобы публичный профиль сделать профилем по умолчанию для всех узлов баз данных и пользова-телей, в столбце Default Profile (Профиль по умолчанию) выберите в раскрываю-щемся списке значение Yes (Да). 5. Вкладка Private Profiles (Личные профили) показывает личные профили, доступ-ные только определенной базе данных и пользователю. Выберите БД и пользовате-ля, для которых следует настроить личный профиль. После выбора пользователя установите флажок Access (Доступ) для предоставления доступа к профилю; по-
Автоматизация администрирования и обслуживание БД Глава 15 475 вторите действия, если нужно предоставить доступ другим пользователям. Чтобы сделать личный профиль профилем по умолчанию для выбранной БД и пользо-вателя узла, в столбце Default Profile (Профиль по умолчанию) выберите в рас-крывающемся списке значение Yes (Да). 6. Щелкните кнопку Next (Далее), а потом кнопку Finish (Готово). Страница Configuring (Настройка) показывает успешное или неуспешное завершение каждого действия. Активизируйте ссылку, предоставленную для каждого сообщения об ошибке, просмотрите информацию и произведите действия, необходимые для ее устранения. Щелкните кнопку Close (Закрыть). Просмотр или изменение системных параметров Database Mail Системные параметры Database Mail (Почта базы данных) устанавливаются гло-бально для каждого экземпляра SQL Server. Если требуется изменить глобальные системные параметры почты базы данных, выполните следующую последователь-ность действий. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к необходимому экземпляру сервера, затем раскройте узел Management (Управление). 2. Из контекстного меню узла Database Mail (Почта базы данных) выберите команду Configure Database Mail (Настроить почту базы данных), чтобы отобразить мастер Database Mail Configuration Wizard (Мастер настройки почты базы данных). При появлении страницы приветствия щелкните кнопку Next (Далее). 3. Установите переключатель в положение View or change system parameters (Про-смотреть или изменить системные параметры). Щелкните кнопку Next (Далее). 4. Внесите необходимые изменения в системные параметры. Подробные сведения о настройке каждого параметра смотрите в разделе "Начальная настройка Database Mail". 5. Щелкните кнопку Next (Далее), а потом кнопку Finish (Готово). Страница Configuring (Настройка) показывает успешное или неуспешное завершение каждого действия. Активизируйте ссылку, предоставленную для каждого сообщения об ошибке, просмотрите информацию и произведите действия, необходимые для ее устранения. Щелкните кнопку Close (Закрыть). Использование SQL Server Agent Движущей силой автоматизации администрирования баз данных является SQL Server Agent (Агент SQL Server). Он ответственен за обработку оповещений и запуск заданий, выполняющихся по расписанию. Когда при инициировании оповещений выполняемые задания дают сбой, выполняются успешно или завершаются вне зависимости от воз-можных ошибок, можно уведомить операторов SQL Server. Уведомления операторов также обрабатываются с помощью SQL Server Agent (Агент SQL Server). Доступ к оповещениям, операторам и заданиям Чтобы при помощи SQL Server Management Studio получить доступ к ресурсам, от-носящимся к SQL Server Agent (Агент SQL Server), выполните указанные дальше действия. 1. В панели Object Explorer (Обозреватель объектов) подключитесь к требуемому экземпляру сервера, затем раскройте узел службы SQL Server Agent (Агент SQL Server), которая при этом должна быть запущена.
476 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 2. Отобразятся узлы Alerts (Оповещения), Operators (Операторы) и Jobs (Зада-ния). Чтобы увидеть содержащиеся в них элементы, откройте клавишей F7 окно Summary (Сводная информация). Затем в панели Object Explorer (Обозреватель объектов) щелкните мышью один из узлов Alerts (Оповещения), Operators (Опе-раторы) или Jobs (Задания). В окне Summary (Сводная информация) отобразится содержание узла, как показано на рис. 15-3. Рис. 15-3. Список оповещений SQL Server Agent 3. Значки задач или оповещений, которые настроены, но не включены, имеют крас-ную стрелку, указывающую вниз. Дважды щелкните мышью оповещение, опера-тора или задание, чтобы открыть соответствующее диалоговое окно Properties (Свойства). Примечание Если на сервере была настроена репликация, отобразится множество опо-вещений и заданий, настроенных для работы с ней. Чтобы запустить эти оповещения или задания, следует включить их и установить соответствующие параметры свойств. Настройка службы SQL Server Agent Служба SQL Server Agent (Агент SQL Server) запускает назначенные задания, ини-циирует оповещения и выполняет другие задачи автоматизации. Каждый экземпляр ядра базы данных имеет собственную службу SQL Server Agent (Агент SQL Server). Управление соответствующей службой (SQLServerAgent или SQLAgent$instance_ name) производится таким же образом, как и службой SQL Server. Для корректной работы SQL Server Agent (Агент SQL Server) следует настроить ее автоматический запуск. Учетная запись, используемая для запуска, определяет права доступа для службы. Если учетная запись не имеет соответствующих разрешений, SQL Server 
Автоматизация администрирования и обслуживание БД Глава 15 477 Agent (Агент SQL Server) будет работать некорректно. В большинстве случаев следует использовать учетную запись домена Windows, являющуюся членом роли сервера sysadmin. Это гарантирует, что SQL Server Agent (Агент SQL Server) сможет генери-ровать оповещения, запускать задания и перезапускать службы. Чтобы настроить службу SQL Server Agent (Агент SQL Server), выполните при-веденные ниже действия. 1. В левой панели SQL Server Configuration Manager выберите узел SQL Server 2005 Services (Службы SQL Server 2005), чтобы в правой панели отобразить соответ-ствующие службы SQL Server. 2. В контекстном меню службы SQL Server Agent для настраиваемого экземпляра ядра базы данных выберите команду Properties (Свойства). 3. SQL Server Agent (Агент SQL Server) может запускаться, используя встроенную системную учетную запись или назначенную учетную запись Windows. В диало-говом окне Properties (Свойства) сделайте следующее. : Установите переключатель в положение Built-in account (Встроенная учетная запись), чтобы использовать одну из встроенных системных учетных записей в качестве учетной записи для запуска. Раскрывающееся меню включает три варианта: Local System (Локальная система), Local Service (Локальная служба) и Network Service (Сетевая служба). Первый предоставляет доступ к локальной системе и определенным системным привилегиям, например Act As Part Of Operating System (Работа в режиме операционной системы). Во втором случае можно получить доступ к локальной системе как к обычной учетной записи службы. Сетевая служба дает доступ к локальной системе, а также позволяет SQL Server Agent (Агент SQL Server) получить доступ к сети, например для подключения к удаленным системам. : Выберите положение This account (С учетной записью), чтобы управлять раз-решениями и привилегиями, используя учетную запись Windows. Введите имя пользователя и пароль для учетной записи домена Windows. Также можно щелкнуть кнопку Browse (Обзор) для поиска учетной записи в диалоговом окне Select User or Group (Выбор: Пользователь или группа). 4. Когда учетная запись службы была изменена, необходимо остановить и снова запустить службу, щелкнув кнопку Restart (Перезапустить). Если служба уже остановлена, щелкните кнопку Start (Пуск). 5. На вкладке Service (Служба) параметр Start Mode (Тип запуска) должен быть установлен как Automatic (Авто). Если это не так, в раскрывающемся списке Start Mode (Тип запуска) выберите значение Automatic (Авто). 6. Щелкните кнопку OK. Настройка почтового профиля SQL Server Agent Служба SQL Server Agent посылает оповещения и уведомления с помощью сообще-ний электронной почты. Существует две возможности: Database Mail (Почта базы данных) и несколько устаревшая SQL Mail (Почта SQL). При начальной установке почты базы данных следует настроить одну или несколько БД в качестве почтовых узлов и определить параметры клиента, чтобы пользователи и приложения, например SQL Server Agent (Агент SQL Server), могли отправлять сообщения электронной по-чты SMTP через почтовый сервер SMTP вашей организации. Перед использованием 
478 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Database Mail (Почта базы данных) для оповещений и уведомлений SQL Server Agent (Агент SQL Server) необходимо сделать следующее. 1. Настроить БД msdb в качестве узла почты. 2. Назначить профиль для этой базы данных. 3. Предоставить профилю доступ к учетной записи службы SQL Server Agent (Агент SQL Server). SQL Mail (Почта SQL) настраивает SQL Server Agent (Агент SQL Server) в ка-честве почтового клиента для отправки почты, пользуясь интерфейсом MAPI (messaging application programming interface, интерфейс программирования приложений для обмена сообщениями) и совместимым с ним почтовым сервером организации. Однако прежде необходимо настроить SQL Mail (Почта SQL), создать в системе про-филь MAPI (например, почтовый профиль Outlook) и изменить свойства SQL Server Agent (Агент SQL Server), чтобы профиль SQL Mail (Почта SQL) был включен для профиля MAPI. Для назначения профиля SQL Mail (Почта SQL) выполните указанные дей-ствия. 1. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Agent (Агент SQL Server) выберите команду Properties (Свойства). 2. На странице Alert System (Система оповещений) установите флажок Enable mail profile (Включить почтовый профиль). 3. В раскрывающемся списке Mail system (Система почты) укажите элемент SQL Mail (Почта SQL), а затем из раскрывающегося списка Mail profile (Почтовый профиль) выберите соответствующий почтовый профиль. Если требуется про-верить настройки, щелкните кнопку Test (Проверить). 4. Щелкните кнопку OK. Совет В случае использования Database Mail (Почта базы данных) с SQL Server Agent (Агент SQL Server) обязательно снимите флажок Enable mail profile (Включить профиль почты). Использование SQL Server Agent для автоматического перезапуска служб Можно настроить SQL Server Agent (Агент SQL Server) таким образом, чтобы иметь возможность автоматически перезапускать службы SQL Server и SQL Server Agent (Агент SQL Server) при их неожиданной остановке. Настройка автоматического пере-запуска этих служб избавит вас от получения сообщения об остановке сервера, на-пример в три часа утра. Для этого сделайте следующее. 1. Из контекстного меню узел SQL Server Agent (Агент SQL Server), расположенного в папке Management (Управление), выберите команду Properties (Свойства). 2. Установите флажок Auto restart SQL Server if it stops unexpectedly (Автоматиче-ский перезапуск SQL Server при неожиданной остановке). 3. Щелкните кнопку OK. Управление оповещениями Оповещения можно посылать по электронной почте, пейджеру или командой net send в случае возникновения ошибки или достижения параметрами производительности определенных значений, например при активации оповещения об ошибке Log File Is 
Автоматизация администрирования и обслуживание БД Глава 15 479 Full (Файл журнала переполнен) или когда количество тупиковых блокировок в се-кунду больше пяти. Существует также возможность назначить задание, выполняемое при возникновении ошибки. Использование оповещений по умолчанию Оповещения по умолчанию настраиваются при конфигурировании репликации. Имена оповещений, которые настраиваются при этом, начинаются с Replication: (Репликация:). Ниже представлены эти оповещения и содержащиеся в них сооб-щения. Replication: agent success (Репликация: Успешное завершение агента) Об успешном завершении агента репликации. Replication: agent failure (Репликация: Сбой агента) О сбое агента реплика-ции. Replication: agent retry (Репликация: Повторная попытка агента) О сбое агента репликации и повторной попытке его выполнения. Replication: expired subscription dropped (Репликация: Удаление подписки с ис-текшим сроком действия) Об удалении подписки с истекшим сроком действия; подписчик больше не обновляется. Replication: Subscriber has failed data validation (Репликация: Подписчик не прошел проверку данных) О невозможности проверки данных подписчика. Replication: Subscriber has passed data validation (Репликация: Подписчик успешно прошел проверку на достоверность данных) О том, что данные под-писчика были проверены. Replication: Subscriber reinitialized after validation failure (Репликация: Подпис-чик повторно инициализирован после ошибки проверки данных) О повторной инициализации данных подписчика с помощью нового моментального снимка. Представленные репликации отключены (значок с красной стрелкой вниз) и не имеют назначенных операторов, поэтому для их использования следует включить и назначить операторов. Другие оповещения репликации по умолчанию применяются для вывода предупреждений и в стандартной настройке включены. Создание оповещений для сообщений об ошибках Оповещения для сообщений об ошибках инициализируются при генерировании SQL Server сообщения об ошибке. Чтобы их создать, выполните следующую последова-тельность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). 2. В контекстном меню узла Alerts (Оповещения) выберите команду New Alert (Соз-дать оповещение). Отобразится диалоговое окно New Alert (Новое оповещение), показанное на рис. 15-4. 3. В поле Name (Имя) введите короткое, но информативное имя оповещения. 4. В раскрывающемся списке Type (Тип) выберите SQL Server event alert (Опове-щение о событии SQL Server). Далее можно установить для оповещения код или уровень серьезности ошибки, при которых оно активируется. 5. Используйте раскрывающийся список Database name (Имя базы данных) для выбора БД, ошибка в которой инициирует оповещение. Чтобы указать все базы данных на сервере, назначьте параметр <All databases> (<Все базы данных>).
480 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 6. Если нужно настроить активацию оповещения по коду ошибки, установите пере-ключатель в положение Error number (Код ошибки) и в связанном с ним поле введите код ошибки. Чтобы увидеть все сообщения об ошибках, которые могут быть возвращены SQL Server, используйте запрос SELECT * FROM sys.messages к базе данных master, как описано в главе 13. Рис. 15-4. Диалоговое окно New Alert 7. Если же вам требуется настроить активацию оповещения по уровню серьезности ошибки, установите переключатель в положение Severity (Серьезность) и в рас-положенном рядом раскрывающемся списке выберите уровень серьезности, при котором инициируется оповещение. Обычно он выбирается в пределах от 19 до 25, где находятся уровни для критических ошибок. 8. Чтобы оповещение активировалось только для сообщений об ошибках, содержа-щих определенные текстовые строки, установите флажок Raise alert when message contains (Активировать оповещение, если сообщение об ошибке содержит) и в по ле Message text (Текст сообщения об ошибке) введите строку фильтра. 9. На странице Response (Ответ) настройте ответ на оповещение, как описано в сле-дующем разделе. Щелкните кнопку OK, чтобы создать оповещение. Настройка ответов на оповещения В ответ на оповещение можно выполнять задания или посылать уведомление связан-ным с оповещением операторам, либо делать и то, и другое. Чтобы настроить ответ на оповещение, выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). 2. Раскройте узел Alerts (Оповещения).
Автоматизация администрирования и обслуживание БД Глава 15 481 3. Дважды щелкните мышью оповещение, которое нужно настроить. В диалоговом окне 'alert_name' alert properties (Свойства оповещения 'alert_name') выберите страницу Response (Ответ), как показано на рис. 15-5. Рис. 15-5. Страница Response диалогового окна свойств оповещения 4. Чтобы назначить выполнение задания в ответ на оповещение, установите флажок Execute job (Выполнить задание). 5. При назначении выполнения уже существующего задания щелкните кнопку с многоточием (...) для отображения диалогового окна Locate Job (Поиск зада-ния). Введите имя задания. Можно задать неполное имя, а затем щелкнуть кнопку Check Names (Проверить имена), чтобы дополнить его. (Если будет найдено не-сколько совпадений, появится диалоговое окно Multiple Objects Found (Найдено множество объектов). Выберите в нем задание, которое следует запустить, затем щелкните кнопку OK.) Закройте диалоговое окно Locate Job (Поиск задания) кнопкой OK. Чтобы убедиться в выборе нужного задания, откройте диалоговое окно Job Properties (Свойства задания) кнопкой View Job (Просмотреть работу), где будут представлены свойства задания. 6. Если требуется создать новое задание, щелкните кнопку New Job (Создать зада-ние), затем настройте задание, как описано дальше, в разделе "Создание заданий и управление ими". 7. Чтобы уведомить назначенных операторов об активации оповещения, вместо за-писи в журнал установите флажок Notify operators (Оповестить операторов). 8. Операторы, настроенные для оповещений и заданий, показаны в списке Operators list (Список операторов). Доступные способы уведомления зависят от настрой-ки оператора. Можно послать уведомление на адрес электронной почты, пейд-жер, с помощью команды net send или всеми тремя способами. Щелкните кнопку 
482 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 New Operator (Создать оператора) для настройки нового оператора или же кнопку View Operator (Просмотреть оператор), если нужно просмотреть свойства опера-тора, выбранного в данный момент в списке Operator list (Список операторов). 9. Выберите страницу Options (Параметры). 10. Используйте флажки в разделе Include alert error text in (Включить текст опо-вещения в), чтобы указать, следует ли отправлять вместе с уведомлением текст сообщения об ошибке. 11. Установите дополнительное сообщение операторам, используя поле Additional notification message to send (Дополнительное сообщение, которое следует включить в уведомление). 12. Укажите время задержки между последовательными уведомлениями в полях Minutes (Минуты) и Seconds (Секунды) раздела Delay between responses (Задержка между ответами). Совет Чтобы ограничить количество инициированных ответов на оповещение, установите значение задержки ответа в пять или более минут. 13. Щелкните кнопку OK для завершения настройки. Удаление, включение и отключение оповещений При удалении оповещение удаляется из списка оповещений. Поскольку старые опо-вещения могут понадобиться в будущем, иногда лучше просто отключить их вместо удаления. Отключенные оповещения не инициируются при наступлении соответ-ствующих событий. Чтобы удалить, включить или отключить оповещение, выполните указанные дей-ствия. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). 2. Раскройте узел Alerts (Оповещения). 3. Все оповещения, значок которых содержит стрелку, направленную вниз, настрое-ны, но не включены. Чтобы включить или отключить оповещение, выберите в его контекстном меню команду Enable (Включить) или Disable (Отключить) соответ-ственно. Появится окно, где отображается ход выполнения процесса включения или выключения. По его завершении щелкните кнопку Close (Закрыть). 4. Чтобы удалить оповещение, выберите в его контекстном меню команду Delete (Удалить). В диалоговом окне Delete Object щелкните кнопку OK для подтверж-дения удаления. Управление операторами Операторы - это специальные учетные записи, которые уведомляются при иници-ализации оповещения, а также при сбое, успешном завершении или окончании за-даний, выполняющихся по расписанию. Прежде чем операторы станут доступны для использования, следует их зарегистрировать. После регистрации операторов можно включить или отключить их уведомление. Регистрация операторов Зарегистрируйте операторы, следуя предложенным ниже действиям. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server).
Автоматизация администрирования и обслуживание БД Глава 15 483 2. В контекстном меню узла Operators (Операторы) выберите команду New Operator (Создать оператора), чтобы отобразить диалоговое окно New Operator (Новый оператор), показанное на рис. 15-6. Рис. 15-6. Диалоговое окно New Operator 3. Введите имя оператора в поле Name (Имя). 4. Укажите адреса электронной почты, пейджера или команды net send (или все три), которые следует использовать для уведомления. Совет Если для оператора задается адрес пейджера, вы можете установить расписание рабочего времени, используя поля и флажки в разделе Pager on duty schedule (Рабочее время для пейджера). Это особенно удобно при наличии операторов, которые уведом-ляются только в рабочее время. Также на странице Alert System (Система оповещений) диалогового окна SQL Server Agent Properties (Свойства SQL Server Agent) для пейджеров устанавливаются некоторые параметры настройки по умолчанию. 5. Выберите страницу Notifications (Уведомления), чтобы указать оповещения, кото-рые будут инициировать уведомление этому оператору (если таковые имеются). Существующие оповещения приведены в списке Alert list (Список оповещений). Установите флажки в столбцах E-mail (Электронная почта), Pager (Пейджер) и Net send. 6. Щелкните кнопку OK, чтобы зарегистрировать оператора. Удаление или отключение уведомлений для операторов Если администраторы базы данных увольняются с работы или идут в отпуск, может потребоваться удалить или отключить соответствующие учетные записи операторов. Для этого выполните следующие действия.
484 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). 2. Раскройте папку Operators (Операторы). 3. Чтобы отключить оператора, дважды щелкните его мышью. Отобразится диало-говое окно operator_name Properties (Свойства operator_name). Снимите флажок Enabled (Включен) на странице General (Общие). Щелкните кнопку OK. 4. Чтобы удалить оператора, в его контекстном меню выберите команду Delete (Уда-лить). Появится диалоговое окно Delete Object (Удаление объекта). 5. Если оператор был выбран для получения уведомлений об оповещениях или за-даниях, в этом окне отобразится поле Reassign to (Переназначить). Чтобы пере-назначить уведомления, выберите оператора, используя раскрывающийся список Reassign to (Переназначить). Можно просмотреть или изменить свойства этого оператора, щелкнув кнопку Properties (Свойства). 6. Для удаления оператора щелкните кнопку OK. Настройка оператора последней надежды Если уведомления не доходят до операторов, проблемы вовремя не будут устранены. Чтобы избежать этого, следует назначить оператора последней надежды. Ему посы-лается уведомление, когда: SQL Server Agent (Агент SQL Server) не может получить доступ к системным та-блицам в БД msdb, где хранятся определения операторов и списки уведомлений; все уведомления по пейджеру назначенным операторам закончились неудачей или назначенные операторы находятся не на работе (в зависимости от расписания пейджера). Примечание Использование оператора последней надежды при сбое уведомления по пейджеру может показаться неуместным, но этот способ гарантирует обработку оповеще-ний надлежащим образом. Сообщения электронной почты или команды net send обычно доходят по назначению, но соответствующие работники не всегда следят за своей почтой или ожидают сообщений от net send, поэтому оператор последней надежды является гарантией того, что уведомление прочтут. Для настройки оператора последней надежды выполните следующую последова-тельность действий. 1. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Agent (Агент SQL Server) выберите команду Properties (Свойства). 2. В диалоговом окне SQL Server Agent Properties (Свойства SQL Server Agent) активизируйте страницу Alert System (Система оповещений). 3. Установите флажок Enable fail-safe operator (Включить оператор последней на-дежды). 4. В раскрывающемся списке Operator (Оператор) выберите оператора. Впослед-ствии при необходимости можно будет поменять оператора или отключить эту возможность, сняв флажок Enable fail-safe operator (Включить оператор последней надежды). 5. Используйте флажки Notify using (Оповестить, используя), чтобы определить, как оповещается оператор последней надежды (электронная почта, пейджер, команда net send или комбинация этих возможностей). 6. Щелкните кнопку OK.
Автоматизация администрирования и обслуживание БД Глава 15 485 Создание заданий и управление ими Задания, выполняемые по расписанию, играют ключевую роль в автоматизации ад-министрирования, поскольку задания SQL Server можно настроить для выполнения практически любой операции по обслуживанию базы данных. Создание заданий Задания создаются в виде определенной последовательности шагов, где при каждом шаге выполняется какое-то действие. Когда выполнение заданий назначается при настройке других функциональных возможностей SQL Server, например резервного копирования БД или операций импорта-экспорта данных, необходимые инструкции для этого создаются автоматически. Обычно эти инструкции устанавливаются как шаг 1 задания и от администратора требуется только назначение заданию расписания. К этим заданиям можно добавить дополнительные шаги, а значит, и производить другие действия. Например, после импорта данных может потребоваться создать ре-зервную копию соответствующей базы данных. В этом случае в мастере SQL Server Import and Export Wizard (Мастер импорта и экспорта SQL Server) следует создать задание для импорта, а затем отредактировать его в SQL Server Management Studio, чтобы добавить дополнительный шаг для резервного копирования БД. Объединив оба процесса, вы гарантируете завершение операции импорта перед началом резервного копирования. Другой причиной, по которой может потребоваться редактировать задание, создан-ное другим средством SQL Server, является добавление в него рассылки уведомлений, сообщающих о его успешном завершении, сбое или окончании. Таким образом, при выполнении определенных условий появляется возможность оповещать операторов, без необходимости искать в журналах результат выполнения задания. При назначении заданий для оповещений, весь процесс создания и настройки состоит из таких этапов: создание определения задания; установка шагов, которые следует выполнить; назначение расписания задания; настройка уведомлений об окончании, успешном завершении и ошибке выпол-нения. Создание или изменение заданий При создании нового или редактировании существующего задания действия, необ-ходимые для работы с определением задания, одинаковые. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). 2. Раскройте узел Jobs (Задания). Отобразятся существующие задания. 3. Дважды щелкните задание мышью. Появится диалоговое окно Job Properties (Свой-ства задания), подобное диалоговому окну New Job (Новое задание), показанному на рис. 15-7. Теперь можно изменять определение существующего задания. 4. Если же нужно создать новое задание, в контекстном меню узла Jobs (Задания) выберите команду New Job (Создать задание). Отобразится диалоговое окно New Job (Новое задание). 5. В поле Name (Имя) введите описательное имя задания, которое может включать до 128 символов. При его изменении задание будет отображаться с новым именем, 
486 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 но все ссылки в журналах или файлах истории выполнения сохраняются на ста-рое имя. Рис. 15-7. Вкладка General диалогового окна New Job 6. Категории заданий выступают в качестве групп, позволяющих организовать зада-ния для облегчения их поиска. Категория по умолчанию - Uncategorized (Local) (Без категории (Локальная)). В раскрывающемся списке Category (Категория) можно выбрать для задания другую категорию. Примечание Для создания и управления категориями используется отдельная последова-тельность действий, описанная дальше, в разделе "Управление категориями заданий". 7. По умолчанию владельцем задания является текущий пользователь. Администра-торы могут переназначать задания другим пользователям, используя для этого поле Owner (Владелец). Можно применять только предопределенные учетные записи. Если учетная запись, которую предполагалось использовать, недоступна, следует создать новую. 8. В поле Description (Описание) введите описание задания. Здесь допускается до 512 символов. 9. Если настроено выполнение заданий в многосерверной среде, выберите страницу Targets (Серверы назначения), затем определите сервер назначения. Таковым является сервер, для которого запускается задание. Чтобы запустить задание для сервера, выбранного в данный момент, установите переключатель в положение Target local server (Назначение - локальный сервер). Для запуска на нескольких серверах устанавливается положение Target multiple servers (Назначение - мно-жество серверов), а затем выбираются серверы назначения.
Автоматизация администрирования и обслуживание БД Глава 15 487 10. На страницах Steps (Шаги), Schedules (Расписания) и Notifications (Уведомления) настройте для задания шаги, расписание и уведомления, как объясняется в следу-ющих разделах. Определение шагов задания Задания могут состоять из одного или нескольких шагов. SQL Server Agent (Агент SQL Server) всегда пытается выполнить шаг, определенный как начальный, то есть выбранный в раскрывающемся списке Start step (Начальный шаг), но при некоторых условиях (например, если начальный шаг завершился удачно) можно выполнить и дополнительные шаги. Работа с шагами производится на странице Steps (Шаги) диа-логового окна New Job (Новое задание), как показано на рис. 15-8. Здесь, в списке Job step list (Список шагов задания), отображены все существующие шаги задания. Рис. 15-8. Страница Steps диалогового окна New Job Ниже представлены элементы управления этого диалогового окна при работе с ша-гами. New (Создать) Эта кнопка используется для создания нового шага. Insert (Вставить) С ее помощью можно вставить новый шаг перед шагом, вы-бранным в данный момент. Edit (Редактировать) Редактируется определение текущего шага. Delete (Удалить) Удаляется выбранный шаг. Move step (Переместить шаг) Используется для изменения порядка выбранного шага в списке. Start step (Начальный шаг) В данном раскрывающемся списке можно выбрать, какой шаг выполняется в первую очередь.
488 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 При создании или редактировании шага отображается диалоговое окно, подобное показанному на рис. 15-9. Чтобы настроить параметры этого диалогового окна, вы-полните следующую последовательность действий. Рис. 15-9. Диалоговое окно New Job Step 1. В поле Step name (Имя шага) введите короткое, но информативное имя шага. 2. Используйте раскрывающийся список Type (Тип), чтобы выбрать тип шага из указанных ниже вариантов. Transact-SQL script (T-SQL) (Сценарий Transact-SQL (T-SQL)) Выполняет инструкции Transact-SQL. Введите инструкции Transact-SQL в поле Command или загрузите их из файла сценария Transact-SQL. Чтобы загрузить инструк-ции из файла, щелкните кнопку Open (Открыть), затем выберите сценарий Transact-SQL, который следует использовать. Содержимое файла сценария копируется в шаг задания. ActiveX Script (Сценарий ActiveX) Запускает сценарий ActiveX.. Сцена-рии ActiveX можно написать на VBScript, Jscript или другом активном языке сценариев, настроенном для использования в системе. Введите инструкции сценария напрямую в поле Command (Команда) или загрузите инструкции из файла сценария. Опять таки, все содержимое сценария копируется в шаг задания и при дальнейших изменениях в файле они не отображаются в шаге автоматически. Operating System (CmdExec) (Операционная система (CmdExec)) Выполняет команды операционной системы. Введите команды операционной системы в поле Command (Команда), каждую в отдельной строке; для самого исполня-емого файла команды и для его возможных параметров следует обязательно 
Автоматизация администрирования и обслуживание БД Глава 15 489 указывать полные пути. Можно запускать пакетные файлы, сценарии Windows, утилиты командной строки или приложения. Replication agent_name (Репликация agent_name) Передает инструкции Transact-SQL назначенным агентам репликации. Можно писать сценарии Transact-SQL для Distributor Agent (Агент распространения), Snapshot Agent (Агент моментальных снимков), Merge Agent (Агент сведения), Queue Reader Agent (Агент чтения очереди) и Log Reader Agent (Агент чтения журналов). За примерами кода SQL обратитесь к существующим заданиям, настроенным на сервере на обработку процессов репликации, распространения и подписки (если таковые имеются). SQL Server Analysis Services Command и SQL Server Analysis Services Query (Команда SQL Server Analysis и Запрос SQL Server Analysis) При выборе одного из этих типов шага инструкции или запросы передаются SQL Server Analysis Services (Аналитические службы SQL Server). Введите инструкции или запросы в поле Command или загрузите их из файла. Для загрузки из файла щелкните кнопку Open (Открыть), затем выберите файл команды аналитиче-ского сервера (расширение .xmla) или файл запросов аналитического сервера (расширение .mdx). При этом все содержимое файла копируется в шаг. SQL Server Integration Services Package (Пакет служб интеграции SQL Server) Выполняет пакеты SQL Server Integration Services (Службы интеграции SQL Server), хранящиеся на определенном сервере. Совет Последующие изменения в файле сценария не отражаются в шагах автомати-чески. Необходимо отредактировать свойства шага и вновь загрузить файл сценария. Также не следует напрямую редактировать существующие задания репликации. Вместо этого для настройки репликации используйте инструкции, описанные в главе 12. 3. При выполнении инструкций или сценариев Transact-SQL используйте раскрыва-ющийся список Database (База данных), чтобы указать базу данных, для которой выполняются команды. 4. Выберите страницу Advanced (Дополнительно), как показано на рис. 15-10. 5. В раскрывающемся списке On success action (Действие при успешном завершении) установите действие, выполняющееся при успешном завершении шага. Можно: : перейти к следующему шагу, чтобы продолжить последовательное выполнение задания; : перейти к другому (не следующему) шагу для дальнейшего выполнения задания на другом шаге; : закончить выполнение задания и послать сообщение об успешном завершении или сбое. 6. По умолчанию для параметра Retry attempts (Количество повторных попыток) установлено значение 0, и SQL Server Agent (Агент SQL Server) не пытается повторно выполнить шаг. Это можно изменить, указав количество повторных попыток и интервал между ними в полях Retry attempts (Количество повторных попыток) и Retry interval (minutes) (Интервал между попытками (минут)) соот-ветственно. 7. Если задание завершается сбоем при всех повторных попытках (когда таковые имеются), выполняется действие, указанное в раскрывающемся списке On failure action (Действие при сбое). Доступны те же варианты, что и для успешного за-вершения.
490 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Рис. 15-10. Страница Advanced диалогового окна New Job Step 8. При необходимости можно настроить файл журнала для сообщений, выводимых инструкциями Transact-SQL и командами операционной системы. Введите имя файла и путь к нему в поле Output file (Файл вывода) или используйте кнопку с многоточием (...), чтобы произвести поиск имеющегося файла. Совет Существует возможность создать общий файл журнала для записи сообщений всех заданий или всех заданий в определенной категории. В этом случае установите флажок Append output to existing file (Добавить вывод к существующему файлу), чтобы файл не перезаписывался. В качестве альтернативы можно включить вывод шага в исто-рию задания. 9. Щелкните кнопку с многоточием (...), находящуюся справа от поля Run as user (От имени пользователя), чтобы установить учетную запись, которую следует использовать при выполнении инструкций. По умолчанию команды запускаются, используя текущую учетную запись. 10. Щелкните кнопку OK, чтобы завершить настройку шага. Назначение расписаний для заданий Расписания для выполнения задания определяются на странице Schedules (Распи-сания) диалогового окна New Job (Новое задание), как показано на рис. 15-11. По-скольку каждое задание имеет от одного до нескольких связанных с ним расписаний, настраиваемых на включение и отключение, автоматическое выполнение заданий можно назначить почти для всех мыслимых ситуаций. Например, определить одно расписание для выполнения задания в рабочие дни недели в два часа ночи, дру-гое - каждое воскресенье в восемь утра и еще одно - в десять вечера и только при необходимости. При создании нового или редактировании существующего задания 
Автоматизация администрирования и обслуживание БД Глава 15 491 на странице Schedules (Расписание) предоставлены следующие возможности для работы с расписаниями. Создание Выполняется кнопкой New (Создать). Редактирование После выбора нужного расписания из списка Schedule list (Спи-сок расписаний) щелкните кнопку Edit (Редактировать), чтобы просмотреть или изменить его свойства. Удаление Выбрав расписание в списке Schedule list (Список расписаний), щел-кните кнопку Delete (Удалить). Рис. 15-11. Страница Schedules диалогового окна New Job Чтобы создать новое или редактировать существующее расписание, выполните перечисленные ниже действия. 1. В зависимости от задачи, щелкните кнопку New (Создать) или Edit (Редактиро-вать). Откроется, соответственно выбранной кнопке, одно из диалоговых окон - New Job Schedule (Новое расписание задания) или Edit Job Schedule (Редактиро-вать расписание задания), которые отличаются только названием. На рис. 15-12 приведено диалоговое окно New Job Schedule (Новое расписание задания). 2. В поле Name (Имя) введите имя расписания, затем в раскрывающемся списке Schedule type (Тип расписания) выберите один из представленных ниже типов расписания. : Start automatically when SQL Server Agent starts (Автоматический запуск при запуске SQL Server Agent) Автоматически запускает задание при запуске SQL Server Agent (Агент SQL Server).
492 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 : Start whenever the CPUs become idle (Запуск при простое процессора) За-пускает задание при простое процессора. Состояние процессора, при котором он считается простаивающим, задается на странице Advanced диалогового окна SQL Server Agent Properties (Свойства SQL Server Agent). : One time (Однократно) Запускает задание однократно согласно дате и вре-мени, указанным в полях Data (Дата) и Time (Время). : Recurring (Периодически) Запускает задание в соответствии с расписанием. Рис. 15-12. Диалоговое окно New Job Schedule 3. Задания, выполняемые периодически, требуют наиболее подробного объяснения. Можно составить расписание выполнения задания по дням, неделям и месяцам. Для запуска задания по дням в раскрывающемся списке Occurs (Выполняется) выберите значение Daily (По дням). Затем используйте поле Recurs every (По-вторяется каждые), чтобы установить интервал запуска. Задания могут быть за-пущены ежедневно, через день или каждые несколько дней. 4. Для запуска задания по неделям в раскрывающемся списке Occurs (Выполняется) выберите значение Weekly (По неделям). Затем настройте задание, используя поле Recurs every N week(s) on (Происходит каждую(ые) N неделю(и) в) и флажки, соответствующие дням недели. 5. Чтобы запускать задание по месяцам, в раскрывающемся списке Occurs (Вы-полняется) выберите значение Monthly (По месяцам). Затем настройте задание, используя предоставляемые элементы управления. 6. В разделе Daily Frequency (Частота в день) установите частоту запуска задания в день. Можно настроить задания для однократного или многократного запуска в день, указанный в расписании. Чтобы запустить задание однократно, выберите положение переключателя Occurs once at (Выполняется однократно в), затем 
Автоматизация администрирования и обслуживание БД Глава 15 493 установите время. Для многократного запуска задания выберите положение Occurs every (Выполняется каждые) и укажите единицу времени - часы или минуты. После этого установите время начала и окончания интервала, в который будет выполняться задание, например с 7:30 до 17:30. 7. По умолчанию расписания начинаются в текущую дату без указания конечной. Если это необходимо изменить, в разделе Duration (Длительность) установите переключатель в положение End date (Конечная дата), а затем в полях Start date (Начальная дата) и End date (Конечная дата) назначьте период, на протяжении которого расписание будет выполняться. 8. Щелкните кнопку OK, чтобы завершить процесс создания расписания. Управление оповещениями заданий Оповещения могут инициироваться при выполнении заданий. Определять и управ-лять относящимися к заданиям оповещениями можно, используя страницу Alerts (Оповещения). Для настройки оповещений выполните следующие действия. 1. Перейдите на страницу Alerts (Оповещения) диалогового окна New Job (Новое задание) или Job Properties (Свойства задания) для задания, которое требуется настроить. 2. Все текущие оповещения приведены в списке Alert list (Список оповещений) и упо-рядочены по имени и типу. Пользуясь этим списком, можно выполнить указанные ниже операции. : Отредактировать оповещение, выбрав его в списке и щелкнув кнопку Edit (Редактировать). : Добавить оповещение, щелкнув кнопку Add (Добавить). В открывшемся диа-логовом окне New Alert (Новое оповещение) оповещение при необходимости можно определить, используя описанные ранее возможности этого окна. : Удалить оповещение, выбрав его в списке и щелкнув кнопку Remove (Уда-лить). Управление уведомлениями Уведомления посылаются при удачном завершении, сбое или просто окончании за-дания. Во всех трех случаях можно выполнить следующие действия: послать уведом-ление оператору, занести соответствующее событие в журнал, автоматически удалить задание или использовать все три варианта. Чтобы настроить уведомление, выполните следующую последовательность действий. 1. Перейдите на страницу Notifications (Уведомления) диалогового окна New Job (Новое задание) или Job Properties (Свойства задания) для задания, которое сле-дует настроить. Эта страница показана на рис. 15-13. 2. Для уведомления операторов можно использовать электронную почту, пейджер или сообщение, отправленное с помощью команды net send. Установите флажок, соответствующий предпочитаемому способу, и в связанных раскрывающихся спи-сках выберите оператора. 3. Чтобы записывать сообщения определенного типа уведомлений в журнал собы-тий, установите флажок Write to the Windows Application event log (Записывать в журнал приложений Windows), затем в ставшем доступным раскрывающемся списке выберите тип уведомления. Поскольку обычно запись производится при сбое выполнения, выберите тип When the job fails (При сбое задания).
494 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Рис. 15-13. Страница Notifications диалогового окна New Job 4. Для удаления задания после уведомления установите флажок Automatically delete job (Удалить задание автоматически) и в ставшем доступным раскрывающемся списке выберите тип уведомления, инициирующий удаление. 5. Щелкните кнопку OK. Управление существующими заданиями В SQL Server Management Studio задания управляются через SQL Server Agent (Агент SQL Server). Выполните с этой целью указанные действия. 1. Раскройте узел SQL Server Agent (Агент SQL Server), а затем узел Jobs (Задания). Отобразятся текущие задания. 2. Откройте диалоговое окно свойств задания, дважды щелкнув его мышью, или отобразите контекстное меню задания. В обоих случаях доступными станут пере-численные ниже команды. : Delete (Удалить) Удаляет определение задания. Прежде чем удалить сложное задание, можно создать сценарий, который пригодится для повторного создания задания. : Disable (Отключить) Отключает задание, предотвращая его запуск. : Enable (Включить) Включает задание, позволяя его запуск. : Rename (Переименовать) Позволяет переименовать задание. Введите новое имя, затем нажмите клавишу Enter или Tab. : Script Job as (Создать сценарий для задания как) Выберите команду CREATE To\File (CREATE в\Файл) для создания файла сценария Transact-SQL, который может использоваться при повторном создании задания.
Автоматизация администрирования и обслуживание БД Глава 15 495 : Start Job (Запустить задание) Запускает выбранное задание, если это не было сделано ранее. : Stop Job (Остановить задание) Останавливает выбранное задание, при усло-вии, что оно запущено. : View History (Просмотреть историю) Отображает диалоговое окно Log File Viewer (Просмотр файла журнала), позволяющее просмотреть сводную или подробную информации о выполнении задания. Управление категориями заданий Категории заданий используются для организации заданий в тематические группы. При установке SQL Server категории заданий по умолчанию создаются автоматиче-ски. Добавлять новые и изменять существующие категории заданий можно в любое время. Работа с категориями заданий Для создания категории задания или обновления существующей выполните указан-ные действия. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел SQL Server Agent (Агент SQL Server). В контекстном меню узла Jobs (Задания) выберите команду Manage Job Categories (Настроить категории заданий). Отобразится диа-логовое окно Manage Jobs Categories (Настройка категорий заданий) со списком существующих категорий заданий. 2. Чтобы удалить категорию, выберите ее в списке и нажмите клавишу Delete. 3. Для просмотра задания выберите в списке связанную с ним категорию и щелкните кнопку View Jobs (Просмотреть задания). 4. Если вы хотите добавить категории или изменить свойства для какой-нибудь из них, следуйте указаниям, данным в разделах "Создание категорий заданий" и "Обновление категорий заданий" соответственно. Создание категорий заданий Чтобы создать категорию заданий, выполните представленные дальше действия. 1. Отобразите диалоговое окно Manage Job Categories (Настройка категорий за-даний), как объяснялось ранее. Щелкните кнопку Add (Добавить). Появится до-чернее диалоговое окно свойств. 2. Введите имя категории в поле Name (Имя), затем установите флажок Show all jobs (Показать все задания). 3. В списке отобразятся все задания, определенные на текущем сервере. Добавьте за-дание для новой категории, установив соответствующий флажок в столбце Select (Выбрать). Удалите задание из новой категории, сняв соответствующий флажок в столбце Select (Выбрать). 4. По окончании щелкните кнопку OK. Обновление категорий заданий Для изменения свойств у существующей категории задания повторите предложенные ниже действия. 1. Отобразите диалоговое окно Manage Job Categories (Настроить категории зада-ний), как объяснялось ранее. Щелкните кнопку View Jobs (Просмотреть задания). Появится дочернее диалоговое окно свойств.
496 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 2. Установите флажок Show all jobs (Показать все задания). В списке отобразятся все задания, определенные на текущем сервере. 3. Добавьте задание для категории, установив соответствующий флажок в столбце Select (Выбрать). Удалите задание из категории, сняв соответствующий флажок в столбце Select (Выбрать). 4. По окончании щелкните кнопку OK. Автоматизация основных задач администрирования в многосерверных средах При управлении многосерверными средами часто требуется настроить задания, в вы-полнении которых задействовано несколько серверов. SQL Server 2005 позволяет ав-томатизировать основные задачи администрирования многосерверных сред с помощью сценариев. Можно разрабатывать сценарии в окне Query (Запрос) или сохранять их в файле для дальнейшего использования. Задания администрирования в многосерверных средах, поддающиеся автомати-зированию, включают: копирование пользователей, таблиц, представлений и других объектов из одной БД в другую; копирование оповещений и заданий с одного сервера на другой. Следующие разделы объясняют, как можно автоматизировать эти операции ад-министрирования. Копирование пользователей, таблиц, представлений и других объектов из одной БД в другую При помощи мастера Script Wizard (Мастер сценариев) можно создать сценарии Transact-SQL по воссозданию объектов, содержащихся в определенной базе данных. Созданные сценарии либо копируются в окно Query (Запрос) для немедленного запу-ска либо сохраняются в файлы для последующего использования. Запуская сценарий для базы данных, отличной от той, на которой он был сгенерирован, можно создать копии объектов в других БД. Чтобы создать копии объектов, выполните следующую последовательность дей-ствий. 1. Запустите SQL Server Management Studio, затем подключитесь к необходимому серверу. 2. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла Management (Управление) выберите команду Generate Scripts (Сгенерировать сценарии). Запустится мастер Script Wizard (Мастер сценариев). Щелкните кнопку Next (Далее). 3. Выберите базу данных, для которой требуется создать сценарий, снова щелкните кнопку Next (Далее). 4. Установите параметры сценария (см. табл. 15-1), чтобы определить характеристики операции копирования, и щелкните кнопку Next (Далее). 5. Выберите типы объектов, для которых следует создать сценарий, установив флаж-ки возле названий, затем щелкните кнопку Next (Далее). Сценарии можно создать для ролей базы данных, схем, таблиц, пользовательских функций, хранимых про-цедур, пользователей и представлений.
Автоматизация администрирования и обслуживание БД Глава 15 497 6. Для каждого выбранного типа объектов будет отображена страница Choose object_type (Выберите object_type). Выберите на ней объекты, для которых создается сценарий. 7. Укажите параметры вывода. Существуют такие возможности: создать сценарий как файл, скопировать его в буфер обмена Windows или отправить в новое окно Query (Запрос). Для продолжения воспользуйтесь кнопкой Next (Далее). 8. Щелкните кнопку Finish (Готово) - сценарий будет создан и скопирован в вы-бранное назначение. Щелкните кнопку Close (Закрыть). Теперь сценарий можно запустить для указанной базы данных. Например, при копировании пользователей из БД Customer в БД Projects следует в начало сценария вставить USE PROJECTS, прежде чем запустить его на сервере, содержащем БД Projects. Табл. 15-1. Параметры сценария для мастера Script Wizard Параметр сценария Значение по умолчанию Если True... Append to File (Добавлять в файл) False Добавляет к существующему файлу вме-сто перезаписи Continue Scripting on Error (Продолжать генерирование сценария при возникновении ошибки) False Продолжает запись сценария при возник-новении ошибки Convert UDDTs to Base Types (Преобразовать пользователь-ские типы во встроенные) False Преобразует пользовательские типы дан-ных во встроенные типы Generate Script for Dependent Objects (Генерировать сцена-рий для зависимых объектов) True Создает сценарий для зависимых объ-ектов Include Descriptive Headers (Включать описательные ком-ментарии) False Включает описательные комментарии в отношении каждого объекта, для кото-рого создается сценарий. (Не влияет на последующее создание объектов, только устанавливает комментарии) Include If NOT EXISTS (Включать инструкцию If NOT EXISTS) True Проверка существования объекта перед попыткой создать его Script Behavior (Поведение сценария) Generate CREATE statements only (Генерировать только инструк-ции CREATE) Сценарий создает назначенные объекты (альтернативный вариант - удалить объекты) Script Check Constraints (Включить в сценарий ограничения CHECK) True Создает сценарии по воссозданию огра-ничений CHECK в отношении каждой таблицы или представления, для которых создается сценарий Script Collation (Включить в сценарий сопоставление) False Сохраняет в сценарии параметры сопо-ставления объекта (см. след. стр.)
498 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Параметр сценария Значение по умолчанию Если True... Script Defaults (Включить в сценарий значения по умолчанию) True Включает в сценарий значения по умол-чанию для объекта Script Extended Properties (Включить в сценарий расши-ренные свойства) True Включает в сценарий расширенные свой-ства объектов Script for Server Version (Сце-нарий для версии сервера) SQL Server 2005 Создает сценарий, совместимый с указан-ной версией SQL Server Script Foreign Keys (Вклю-чить в сценарий внешние ключи) True Создает сценарий по использованию внешних ключей в таблицах или пред-ставлениях, для которых создается сце-нарий Script Full-Text Indexes (Включить в сценарий полно-текстовые индексы) False Включает в сценарий полнотекстовые индексы, имеющие отношение к таблицам или представлениям, для которых созда-ется сценарий Script Indexes (Включить в сценарий индексы) False Включает в сценарий индексы, касающи-еся таблиц или представлений, для кото-рых создается сценарий Script Logins (Включить в сценарий учетные записи) False Включает в сценарий все учетные записи, доступные на сервере. Пароли не вклю-чаются Script Object-Level Permissions (Включить в сценарий разрешения объекта) False Включает в сценарий разрешения объекта согласно исходной БД Script Owner (Включить в сценарий пользователя) True Включает в сценарий владельца объекта Script Primary Keys (Вклю-чить в сценарий первичные ключи) True Включает в сценарий первичные ключи, касающиеся таблиц или представлений, для которых создается сценарий Script Statistics (Включить в сценарий статистическую информацию) Do not script statistics (Не создавать сценарии для ста-тистики) Контролирует, создаются ли сценарии для статистической информации таблиц или объектов индексированного пред-ставления Script Triggers (Включить в сценарий триггеры) True Включает в сценарий триггеры, касающи-еся таблиц или представлений, для кото-рых создается сценарий Script Unique Keys (Вклю-чить в сценарий уникальные ключи) True Включает в сценарий уникальные ключи, относящиеся к таблицам или представле-ниям, для которого создается сценарий Script USE DATABASE (Включить в сценарий ин-струкцию USE) False Устанавливает инструкцию USE с именем начальной БД в начале сценария Копирование оповещений, операторов и заданий с одного сервера на другой Оповещения, операторы и задания, созданные на одном сервере, можно повторно ис-пользовать на другом. Для этого следует создать сценарий для оповещения, оператора Табл. 15-1. (окончание)
Автоматизация администрирования и обслуживание БД Глава 15 499 или задания, которое требуется скопировать, затем запустить сценарий на сервере назначения. Необходимо отредактировать свойства задания, чтобы они имели смысл для сервера назначения. Например, если был создан набор заданий для периодичной проверки БД Support, а затем добавлены дополнительные шаги, касающиеся обработки различных состояний базы данных, эти шаги можно скопировать на другой сервер и только потом отредактировать свойства задания для применения его к БД Customer на сервере назначения. Для того чтобы скопировать оповещения, операторы или задания с одного сервера на другой, выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) сначала раскройте узел SQL Server Agent (Агент SQL Server), а затем узел Alerts (Оповещения), Jobs (Задания) или Operators (Операторы), в зависимости от типа копируемого объекта. 2. В контекстном меню оповещения, оператора или задания выберите команду Script object As\CREATE To\File (Создать сценарий для object как\CREATE в\Файл), где object может быть Alert, Job или Operator. В диалоговом окне Select a File (Вы-берите файл) укажите место назначения для сохранения и имя для файла сценария Transact-SQL. 3. В панели Object Explorer (Обозреватель объектов) подключитесь к серверу, на котором будет создано новое оповещение, оператор или задание. Затем из его контекстного меню выберите команду New Query (Создать запрос). 4. Щелкните в панели инструментов кнопку Open File (Открыть файл) или нажмите сочетание клавиш Ctrl+O. Выберите созданный ранее файл сценария. 5. Сценарий использует БД msdb, потому что в ней хранятся объекты оповещений, заданий и операторов. 6. Щелкните в панели инструментов кнопку Execute (Выполнить) или нажмите клавишу F5, чтобы запустить сценарий и создать объект в БД msdb. Администрирование группы серверов При групповом администрировании один сервер используется для управления опо-вещениями и заданиями, хранящимися централизованно. Оповещения управляются посредством пересылки событий. Задания управляются путем назначения главных серверов и серверов назначения. Пересылка событий Если в сети имеется множество экземпляров SQL Server, пересылка событий со-храняет время и ресурсы. С ее помощью можно направить события журнала прило-жения на центральный сервер и обработать их события там. Таким образом, вместо настройки оповещения, допустим на 12 разных экземплярах сервера, пересылка со-бытий настраивается на 11 серверах и обработка всех входящих событий назначается одному серверу. Затем с помощью поля Computer (Компьютер) журнала приложений определяется система, на которой произошло событие, и предпринимаются соот-ветствующие корректирующие действия на основании сценариев или удаленных вызовов процедур. Для настройки пересылки событий выполните следующую последовательность действий. 1. Подключитесь к серверу, на котором запущен SQL Server Agent (Агент SQL Server).
500 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 2. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Agent (Агент SQL Server) выберите команду Properties (Свойства). 3. Перейдите на страницу Advanced (Дополнительно) диалогового окна SQL Server Agent Properties (Свойства агента SQL Server), как показано на рис. 15-14. Рис. 15-14. Диалоговое окно SQL Server Agent Properties 4. Установите флажок Forward events to a different server (Пересылать события дру-гому серверу). 5. В раскрывающемся списке Server (Сервер) выберите зарегистрированный сер-вер, который будет обрабатывать события. Если требуемый сервер не приведен в списке, необходимо зарегистрировать его и затем снова открыть диалоговое окно SQL Server Properties (Свойства агента SQL Server). 6. Установите тип пересылаемых событий, выбрав положение переключателя Unhandled events (Необработанные события) или All Events (Все события). Необ-работанным является событие, для которого не были настроены оповещения для текущего сервера. 7. Из раскрывающегося списка If event has severity at or above (Если событие имеет уровень серьезности, равный или более, чем) выберите порог уровня серьезности для пересылаемых событий. Совет Чтобы уменьшить сетевой трафик, вызванный пересылкой событий, установите для порога уровня серьезности достаточно высокое значение. Фатальные ошибки имеют уровень серьезности от 19 до 25. 8. Щелкните кнопку OK.
Автоматизация администрирования и обслуживание БД Глава 15 501 Многосерверные задания Для управления выполнением заданий централизованно необходимо создать главный сервер и один или несколько серверов назначения. Тогда SQL Server Agent (Агент SQL Server), запущенный на главном сервере, сможет: централизованно управлять заданиями для серверов назначения; при этом соз-данные на главном сервере задания будут выполняться на серверах назначения (подробнее см. раздел "Создание или изменение заданий"); загружать задания на сервер назначения (см. раздел "Управление существующими заданиями"). Требования к многосерверным заданиям Для корректной работы главного сервера с серверами назначения, необходимо: убедиться, что на главном сервере, а также всех серверах назначения запущен SQL Server 2005; при настройке всех вовлеченных серверов использовать учетные записи доменов, а не локальные учетные записи; убедиться, что на главном сервере и всех серверах назначения запущен SQL Server Agent (Агент SQL Server). Настройка серверов назначения Для создания сервера назначения выполните следующую последовательность дей-ствий. 1. Подключитесь к серверу, на котором запущена служба SQL Server Agent (Агент SQL Ser ver). 2. В панели Object Explorer (Обозреватель объектов) из контекстном меню узла SQL Server Agent (Агент SQL Server) выберите команду Multi Server Administration\ Make this a Master (Администрирование группы серверов\Сделать этот сервер главным). Запустится мастер Master Server Wizard (Мастер настройки главного сервера). 3. Щелкните кнопку Next (Далее) в окне приветствия. 4. Создайте специальный оператор для обработки уведомлений многосерверных заданий, как показано на рис. 15-15. Этот оператор, называющийся Master Server Operator (Оператор главного сервера), создается на главном сервере и на всех серверах назначения, использующих главный сервер. Укажите электронную почту, пейджер и адрес для команды net send. Эти данные можно изменить позже, редак-тируя свойства Master Server Operator (Оператор главного сервера) на главном сервере. 5. Выберите серверы назначения, которые следует связать с главным. Если сервер не зарегистрирован, добавьте для него соединение, щелкнув кнопку Add Connection (Добавить соединение). Позже можно удалить связь, щелкнув в контекстном меню узла SQL Server Agent (Агент SQL Server) команду Multi Server Administration\ Manage Target Servers (Администрирование группы серверов\Настроить серверы назначения). 6. Щелкните кнопку Next (Далее). Мастер проверит совместимость версий SQL Server, запущенных на главном сервере и серверах назначения. Если на последних запущены разные версии SQL Server, обратите внимание на проблемы совместимо-сти, список которых при этом отобразится. Щелкните кнопку Close (Закрыть).
502 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 7. Укажите учетную запись, которую будет использовать сервер назначения для подключения к главному серверу и загрузки заданий. Если на главном сервере разрешена аутентификация Windows, то новая учетная запись создается автома-тически. 8. Щелкните кнопку Next (Далее), затем кнопку Finish (Готово). Мастер выполнит все необходимые настройки и выведет информацию о ходе операции. Также будут отображены сообщения об ошибках (при наличии таковых). 9. По окончании настройки щелкните кнопку Close (Закрыть). Рис. 15-15. Страница Master Server Operator Настройка серверов назначения Можно настроить один или несколько серверов назначения для каждого главного сервера. Для этого выполните следующие действия. 1. Подключитесь к серверу, на котором запущена служба SQL Server Agent (Агент SQL Ser ver). 2. В панели Object Explorer (Обозреватель объектов) из контекстного меню узла SQL Server Agent (Агент SQL Server) выберите команду Multi Server Administration\Make this a Target (Администрирование группы серверов\Сделать этот сервер местом назначения). Запустится мастер Target Server Wizard (Мастер настройки сервера назначения). 3. Щелкните кнопку Next (Далее) в окне приветствия. 4. Выберите главный сервер, щелкнув кнопку Pick Server (Выбрать сервер), и с помо-щью диалогового окна Connect to Server (Подключиться к серверу) подключитесь к нему. Главный сервер является сервером, из которого загружаются задания. 5. Щелкните кнопку Next (Далее). Мастер проверит совместимость версий SQL Server, запущенных на главном и настраиваемом серверах. Если на них запущены 
Автоматизация администрирования и обслуживание БД Глава 15 503 разные версии SQL Server, обратите внимание на проблемы совместимости, список которых при этом отобразится. Щелкните кнопку Close (Закрыть). 6. Укажите учетную запись, которую будет использовать сервер назначения для под-ключения к главному серверу и для загрузки заданий. Если на главном сервере разрешена аутентификация Windows, то новая учетная запись создается автома-тически. 7. Щелкните кнопку Next (Далее), а затем кнопку Finish (Готово). Мастер выполнит все необходимые настройки и выведет информацию о ходе операции. Также будут отображены сообщения об ошибках (при наличии таковых). 8. По окончании настройки щелкните кнопку Close (Закрыть). Обслуживание БД Обслуживание базы данных включает различные задачи администрирования, о чем подробно рассказывалось в предыдущих главах. Теперь вашему вниманию предла-гается перечень операций, с которого можно начать планирование обслуживания. В остальной части раздела даны указания по настройке планов обслуживания и вы-полнению проверки целостности БД. Перечень основных задач обслуживания БД В представленных ниже перечнях даны рекомендации в отношении ежедневных, еженедельных или ежемесячных задач обслуживания БД, а также вызванных не-обходимостью. Ежедневные Наблюдение за журналами приложений, сервера и агентов. Настройка оповещений для важных ошибок, для которых не настроена отправка уведомлений. Проверка сообщения производительности и оповещений об ошибках. Наблюдение за состоянием заданий, особенно тех, которые производят резервное копирование БД и репликацию. Просмотр отображения заданий в истории задания или файле вывода (или того и другого). Резервное копирование БД и журналов транзакций (при необходимости и если не настроено в качестве автоматические задания). Еженедельные Мониторинг свободного пространства на дисках. Мониторинг состояния связанных и удаленных серверов, главных серверов и сер-веров назначения. Проверка отчетов и истории планов обслуживания для определения состояния операций плана обслуживания. Создание обновленной записи информации о параметрах конфигурации с помощью хранимой процедуры sp_configure. Ежемесячные Мониторинг производительности сервера, настройка параметров производитель-ности для улучшения времени отклика. Управление учетными записями и ролями сервера.
504 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Отслеживание разрешений сервера, БД и объекта доступа только авторизирован-ных пользователей. Просмотр настроек оповещений, заданий и операторов. По необходимости Резервное копирование данных реестра SQL Server. Обновление диска аварийного восстановления. Проверка БД на целостность и обновление статистики (в большинстве случаев SQL Server 2005 выполняет это автоматически). Использование планов обслуживания Планы обслуживания позволяют автоматизировать важные задачи при работе с базами данных. Можно запустить план обслуживания по отношению к одной или нескольким БД, находящимся на определенном сервере назначения. Или же генерировать отчеты о выполнении плана обслуживания. Планы обслуживания создаются как с помощью Maintenance Plan Wizard (Мастер планов обслуживания), так и Maintenance Plan Package Designer (Конструктор пакетов плана обслуживания). Оба способа похожи. В случае применения мастера на его страницах выбираются серверы и задачи обслуживания, настраивается ведение журнала истории и устанавливается рас-писание выполнения. По завершении работы мастера генерируется пакет SSIS, который будет осуществлять назначенные задачи обслуживания. При использовании конструктора пакетов требуется самостоятельно указывать серверы, добавлять из предопределенного списка задачи обслуживания и при не-обходимости выполнять настройку ведения журнала истории. После настройки соединений с сервером, для обслуживания которого создается план, следует создать план обслуживания, перетащив мышью задачи обслуживания из панели Toolbox (Инструментарий) в окно разработчика. Последовательность добавления задач соответствует последовательности их выполнения. Если задача требует допол-нительного ввода, например имен серверов или БД, двойным щелчком мыши на задаче откройте диалоговое окно свойств, которое позволит указать необходимую информацию. Набор задач, входящих в планы обслуживания, также одинаков при использовании и мастера, и конструктора. Back Up Database (Резервное копирование базы данных) Позволяет указать исходные базы данных, файлы или магнитные ленты назначения, а также пара-метры перезаписи для полного или дифференциального резервного копирования БД и журналов транзакций. В интерфейсе мастера существуют отдельные списки задач для каждого типа резервного копирования. Check Database Integrity (Проверка целостности базы данных) Производит проверку внутренней целостности всех страниц данных и индексов у назначен-ных БД. Execute SQL Server Agent Job (Выполнение задания SQL Server Agent) Позволяет указать задания SQL Server Agent (Агент SQL Server), которые следует выполнить как часть плана обслуживания. Execute T-SQL Statement (Выполнение инструкции T-SQL) Дает возможность запустить любой сценарий Transact-SQL как часть плана обслуживания (доступно 
Автоматизация администрирования и обслуживание БД Глава 15 505 только в Maintenance Plan Package Designer (Конструктор пакетов плана обслу-живания)). Cleanup History (Очистка истории) Удаляет исторические данные о резервном копировании и восстановлении, SQL Server Agent (Агент SQL Server) и операциях Maintenance Plan (План обслуживания). Maintenance Cleanup (Очистка после обслуживания) Удаляет файлы, создан-ные при выполнении планов обслуживания (доступно только в Maintenance Plan Package Designer (Конструктор пакетов плана обслуживания)). Notify Operator (Уведомление оператора) Посылает назначенному оператору SQL Server Agent (Агент SQL Server) сообщение электронной почты (доступно только в Maintenance Plan Package Designer (Конструктор пакетов плана обслу-живания)). Rebuild Index (Перестройка индекса) Перестраивает индексы для повышения производительности сканирования индексов и поиска в индексе. Эта задача также оптимизирует распределение данных и свободного пространства на страницах индекса, что позволяет оптимально увеличить его размер в будущем. Reorganize Index (Упорядочение индекса) Дефрагментирует и сжимает кла-стерные и некластерные индексы в таблицах и представлениях, чтобы повысить производительность поиска по индексу. Shrink Database (Сжатие базы данных) Уменьшает количество дискового про-странства, занимаемого назначенными БД, удаляя пустые страницы данных и жур-налов. Update Statistics (Обновление статистики) Обновляет статистику оптимизатора запросов, отражающую распределение значений данных в таблицах. Выполнение данной задачи улучшает возможности оптимизатора запросов по определению стратегий доступа к данным, что позволяет значительно повысить производитель-ность запросов. При работе с планами обслуживания может потребоваться запустить мастер Maintenance Plan Wizard (Мастер плана обслуживания) для создания необходимого пакета. После этого в него можно вносить дальнейшие изменения с помощью Maintenance Plan Package Designer (Конструктор пакетов плана обслуживания). Совет В большинстве случаев рекомендуется настройка отдельных планов обслуживания для системы и БД пользователей. Это позволяет точнее определять способ и время, когда производятся операции обслуживания. Иногда есть смысл иметь отдельные планы обслуживания для каждой базы данных, чтобы можно было организовать обслуживание различных БД в разные дни или в разное время суток. Создание планов обслуживания Для создания плана обслуживания выполните следующую последовательность дей-ствий. 1. В панели Object Explorer (Обозреватель объектов) раскройте папку Management (Управление) для сервера, на котором следует создать план обслуживания. Это может быть сервер, отличный от того, на котором план обслуживания будет за-пускаться. 2. В контекстном меню узла Maintenance Plans (Планы обслуживания) выбери-те команду Maintenance Plan Wizard (Мастер плана обслуживания). Запустится Maintenance Plan Wizard (Мастер плана обслуживания).
506 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 3. Щелкните кнопку Next (Далее) в окне приветствия. Введите имя и описание для плана обслуживания, например "План обслуживания БД сервера разработчиков" (без кавычек). 4. В поле Server (Сервер) укажите сервер, на котором следует выполнить задачи обслуживания. По умолчанию отображается сервер, используемый в данный мо-мент. Чтобы выбрать другой сервер, щелкните кнопку с многоточием (...) справа от поля и выберите доступный SQL Server. 5. Выберите тип аутентификации для подключения к серверу, указанному в пункте 4, затем щелкните кнопку Next (Далее). Выбор производится установкой переклю-чателя в положение Use Windows Authentication (Использовать аутентификацию Windows) или Use SQL Server Authentication (Использовать аутентификацию SQL Server). 6. На следующей странице, показанной на рис. 15-16, выберите задачи обслуживания, которые требуется произвести, затем щелкните кнопку Next (Далее). Порядок, в котором задания приведены на странице Select Maintenance Task Order (Выбор последовательности задач обслуживания), определяют последовательность их выполнения. Выберите задачу в списке, затем щелкните кнопку Move Up (Пере-местить вверх) или Move Down (Переместить вниз), чтобы изменить положение задачи. После этого щелкните кнопку OK. Рис. 15-16. Страница Select Maintenance Tasks мастера Maintenance Plan Wizard 7. Для каждой задачи, применяемой к нескольким базам данных, эти БД необходимо выбрать. Можно задать выполнение задачи для всех БД - системных, пользова-тельских или для одной или нескольких конкретных БД. Также может потребо-ваться (в зависимости от задачи) настроить ее индивидуальные параметры. По окончании настройки задач щелкните кнопку Next (Далее). Ниже перечислены принципы, которыми следует руководствоваться при настройке каждой задачи.
Автоматизация администрирования и обслуживание БД Глава 15 507 : Back Up Database (Резервное копирование базы данных) Выберите БД, для которых требуется осуществить полное или дифференциальное резервное копирование или резервное копирование журналов транзакций. Резервное копирование производится на диск или магнитную ленту, при этом данные до-бавляются к существующим файлам резервной копии или перезаписываются. Как правило, резервную копию следует создавать для каждой выбранной базы данных. Если используется резервное копирование на диски, необходимо за-дать определенный каталог и создать подкаталоги для каждой базы данных, для которой выполняется резервное копирование. Также следует установить расширение файла для резервных копий. Расширением по умолчанию является .bak. Чтобы по завершении резервного копирования можно было проверять целостность резервных копий, установите флажок Verify backup integrity (Про-верить целостность резервной копии). : Check Database Integrity (Проверка целостности базы данных) Выберите БД, для которых нужно произвести проверку внутренней целостности. По умолчанию проверяются страницы данных и индексов. Если требуется про-верить только страницы данных, снимите флажок Include indexes (Включить индексы). : Execute SQL Server Agent Job (Выполнение задания SQL Server Agent) Вы-берите задания, которые следует запустить как часть плана обслуживания. В списке приведены все доступные на сервере задания; можно установить соответствующий флажок, чтобы выполнить задание при выполнении плана обслуживания. : Cleanup History (Очистка истории) Исторические данные о резервном копи-ровании и восстановлении, SQL Server Agent (Агент SQL Server) и операциях плана обслуживания хранятся в БД msdb. При запуске задания очистки исто-рии все исторические данные на сервере назначения, которым больше четырех недель, по умолчанию удаляются. Можно изменить тип очищаемых историче-ских данных, а также установить для критерия актуальности данных другие значения. Например, для сохранения исторических данных на протяжении квартала следует указать значение 3 в поле Remove historical data older than (Удалять исторические данные, старше чем) и в связанном раскрывающемся списке выбрать элемент Months (Месяцы). : Rebuild Index (Перестройка индекса) Укажите БД, в которых следует пере-строить индексы. При выборе конкретных баз данных можно указать, как пере-страиваются индексы: всех или только определенных таблиц и представлений. Например, если требуется перестроить индексы представления NWCustomer в БД Orders, следует щелкнуть раскрывающийся список Databases (Базы данных), установить переключатель в положение These databases (Конкретные базы данных), выбрать БД Orders, затем щелкнуть кнопку OK. Далее, в раскрыва-ющемся списке Object (Объект) выбрать положение View (Представление) и щелкнуть раскрывающийся список Selection (Выбор). В нем установить пере-ключатель в положение These objects (Конкретные объекты), выбрать значение dbo.NWCustomers и щелкнуть кнопку OK. Выбранные индексы будут удалены и вновь созданы с новым фактором заполнения. Если установить переключатель в положение Reorganize pages with the default amount of free space (Упорядочить страницы, оставив заданное по умолчанию количество свободного простран-ства), индексы будут воссозданы с исходным фактором заполнения, указан-ным при их определении. При выборе положения Change free space per page percentage (Изменить процентное соотношение свободного пространства на) 
508 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 можно задать новый фактор заполнения. Чем выше процентное соотношение, тем большее количество свободного пространства резервируется на страницах индекса и тем больше размер индекса. Значение по умолчанию равно 10 %. Диапазон допустимых значений - от 0 до 100. Примечание Различные факторы заполнения описываются в главе 6, в разделе "Уста-новка фактора заполнения индексов". Упорядочив страниц изменяет индексы таблиц, что делает недействительной существующую статистику. Нельзя упорядочивать данные и обновлять статистику в одном и том же плане обслуживания, поэтому для таких случаев следует создать отдельные планы обслуживания для обработки каждой из этих задач. : Reorganize Index (Упорядочение индекса) Выберите БД, в которых следует дефрагментировать и сжать индексы. Если выбираются конкретные базы дан-ных, можно указать, упорядочиваются ли индексы всех или только определен-ных таблиц и представлений. Например, если требуется упорядочить индексы таблицы Customer в БД Orders, следует щелкнуть раскрывающийся список Databases (Базы данных), установить переключатель в положение These databases (Конкретные базы данных), выбрать БД Orders, затем щелкнуть кнопку OK. Далее, в раскрывающемся списке Object (Объект) выберите элемент Table (Таблица), щелкните раскрывающийся список Selection (Выбор), установите переключатель в положение These objects (Конкретные объекты), выберите значение dbo.Customers и щелкните кнопку OK. : Shrink Database (Сжатие базы данных) Выберите БД, для которых нужно уменьшить занимаемое дисковое пространство (производится путем удаления пустых страниц данных и журналов транзакций). Используйте поле Shrink database when it grows beyond (Сжать базу данных, если ее размер больше), чтобы задать размер БД, при превышении которого задача инициируется. По умолчанию это 50 Мбайт. В поле Amount of free space to remain after shrink (Количество свободного пространства после сжатия) установите количество свободного пространства, которое должно быть зарезервировано в базе данных после ее сжатия. По умолчанию - 10 %. Диапазон допустимых значений - от 0 до 100. Свободное пространство может быть возвращено операционной системе или оставлено для дальнейшего использования базой данных. : Update Statistics (Обновление статистики) Выберите БД, в которых сле-дует обновить статистику оптимизатора запросов. При выборе конкретных баз данных имеет смысл указать, будет ли статистика обновлена для всех или только для выбранных таблиц и представлений. По умолчанию обновляется статистическая информация и для столбцов, и для индексов. Можно указать обновление только для столбца или только для индексов. 8. По окончании настройки заданий отобразится страница Select Plan Properties (Выберите свойства плана), показанная на рис. 15-17. По умолчанию планы обслу-живания настроены на запуск вручную (по требованию). Можно задать автомати-ческое выполнение плана обслуживания, назначив расписание запуска. Для этого щелкните кнопку Change (Изменить), затем установите расписание в диалоговом окне New Job Schedule (Новое расписание задания). Для подтверждения нового расписания щелкните кнопку OK, а в окне мастера - кнопку Next (Далее). 9. Используйте страницу Select Report Options (Выберите параметры отчета), по-казанную на рис. 15-18, чтобы определить, как образом обрабатываются отчеты плана обслуживания. По умолчанию при запуске плана обслуживания генериру-ется отчет, который может быть сохранен в файл в любой назначенной папке или 
Автоматизация администрирования и обслуживание БД Глава 15 509 послан по электронной почте оператору, либо и то, и другое. Щелкните кнопку Next (Далее). Рис. 15-17. Страница Select Plan Properties мастера Maintenance Plan Wizard Рис. 15-18. Страница Select Report Options мастера Maintenance Plan Wizard 10. Просмотрите план обслуживания. Щелкните кнопку Finish (Готово), чтобы завер-шить процесс и создать задание для обработки назначенных задач обслуживания. 
510 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Заданию присваивается имя согласно плану обслуживания. Щелкните кнопку Close (Закрыть). Проверка отчетов и истории обслуживания Создание плана обслуживания является только началом. Далее необходимо периоди-чески проверять отчеты и историю обслуживания. Отчеты обслуживания могут хра-ниться в виде текстовых файлов в назначенном каталоге, посылаться по электронной почте назначенным операторам или и то, и другое. Отчеты, сохраненные в файлах, просматриваются в стандартном текстовом редакторе. Для получения доступа к исто-рии обслуживания с помощью SQL Server Management Studio следует выполнить предложенные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Management (Управление) для выбранного сервера. 2. В контекстном меню узла Maintenance Plans (Планы обслуживания) выберите команду View History (Просмотреть историю). Отобразится диалоговое окно Log File Viewer (Просмотр файлов журналов), показанное на рис. 15-19. Рис. 15-19. Диалоговое окно Log File Viewer 3. По умолчанию в иерархическом списке Select logs (Выберите журналы), располо-женном в левой панели, указан элемент Maintenance Plans (Планы обслуживания), а также отображен журнал для каждого настроенного на сервере плана обслу-живания. 4. Выберите планы обслуживания, для которых требуется просмотреть историю вы-полнения заданий. 5. Используйте сводную информацию в правой панели, чтобы просмотреть историю задания. По окончании щелкните кнопку Close (Закрыть).
Автоматизация администрирования и обслуживание БД Глава 15 511 Просмотр, изменение, запуск и удаление планов обслуживания Чтобы просмотреть, изменить, запустить или удалить планы обслуживания, выпол-ните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Management (Управление) для выбранного сервера. 2. Раскройте узел Maintenance Plans (Планы обслуживания). Отобразятся существу-ющие планы обслуживания. 3. Теперь вы можете сделать следующее. : Просмотреть или изменить план обслуживания, дважды щелкнув его мышью. План откроется в Maintenance Plan Package Designer (Конструктор пакетов плана обслуживания). : Удалить план обслуживания, выбрав его и нажав клавишу Delete. Щелкните кнопку OK в диалоговом окне Delete Object (Удаление объекта), чтобы под-твердить удаление. : Выполнить план обслуживания, выбрав в его контекстном меню команду Execute (Выполнить). Проверка и поддержание целостности БД В SQL Server 2005 производить проверку целостности базы данных приходится довольно редко, при этом наиболее разумно воспользоваться функциональностью, предоставляемой планами обслуживания. В некоторых случаях, когда проверку це-лостности требуется произвести вручную, следует применить группу инструкций DBCC (database consistency check, проверка целостности базы данных). Существует множество различных инструкций DBCC; наиболее часто используемые описываются в следующих разделах. Использование инструкции DBCC CHECKDB Инструкция DBCC CHECKDB проверяет целостность всей базы данных и является основным методом проверки БД на наличие повреждений. Проверяется (и при не-обходимости исправляется) следующее: индексы и страницы данных связаны правильно; индексы обновлены и правильно отсортированы; указатели согласованы с данными; данные на каждой странице обновлены; смещения страниц обновлены. В примере 15-1 показаны синтаксис и использование инструкции DBCC CHECKDB. При запуске команды без параметра исправления об ошибках сообщается, но они не исправляются. Чтобы исправить ошибки, следует перевести базу данных в одно-пользовательский режим, затем выполнить инструкцию с параметром исправления. После исправления базы данных создайте ее резервную копию. Пример 15-1. Синтаксис и использование инструкции DBCC CHECKDB Синтаксис: DBCC CHECKDB [ ( { 'database_name' | database_id | 0 } [ , { NOINDEX | REPAIR_ALLOW_DATA_LOSS
512 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 | REPAIR_FAST | REPAIR_REBUILD } ] ) ] [ WITH { [ ALL_ERRORMSGS ] [ , NO_INFOMSGS ] [ , TABLOCK ] [ , ESTIMATEONLY ] [ , { PHYSICAL_ONLY | DATA_PURITY } ] } ] Использование: DBCC CHECKDB ( 'customer', NOINDEX ) DBCC CHECKDB ( 'customer', REPAIR_REBUILD ) При задании параметра REPAIR_FAST производятся минимальные исправления, которые не займут много времени и не приведут к потере данных. В случае назначения параметра REPAIR_REBUILD выполняется полная проверка и исправление оши-бок, что потребует больше времени, но без потери данных (БД должна находиться в однопользовательском режиме). Указание параметра REPAIR_ALLOW_DATA_LOSS означает - произвести все действия REPAIR_REBULID и добавить другие операции, которые могут привести к потере данных. Эти операции включают добавление и уда-ление строк для исправления структурных проблем и ошибок на страницах, а также удаление поврежденных объектов типа данных text. Совет Чтобы устранить проблемы базы данных, начните с параметра REPAIR_FAST или REPAIR_REBUILD. Если это не поможет решить проблему, используйте параметр REPAIR_ALLOW_DATA_LOSS, но помните, что он может привести к нежелательной потере важных данных. Если вы хотите гарантировать восстановление БД в исходное состояние, включите инструкцию DBCC в транзакцию, чтобы можно было просмотреть результаты и по необходимости сделать откат транзакции. Использование инструкции DBCC CHECKTABLE Чтобы исправить проблемы индивидуальных таблиц, можно использовать инструкцию DBCC CHECKTABLE. Ее синтаксис и использование демонстрируются в примере 15-2. База данных, с которой требуется работать, должна быть текущей. Пример 15-2. Синтаксис и использование инструкции DBCC CHECKTABLE Синтаксис: DBCC CHECKTABLE ( { 'table_name' | 'view_name' } [ , { { NOINDEX | index_id } | REPAIR_ALLOW_DATA_LOSS | REPAIR_FAST | REPAIR_REBUILD } ] )
Автоматизация администрирования и обслуживание БД Глава 15 513 [ WITH { [ ALL_ERRORMSGS ] [ , NO_INFOMSGS ] [ , TABLOCK ] [ , ESTIMATEONLY ] [ , { PHYSICAL_ONLY | DATA_PURITY } ] } ] Использование: DBCC CHECKTABLE ( 'receipts' ) DBCC CHECKTABLE ( 'receipts', REPAIR_REBUILD ) Использование инструкции DBCC CHECKALLOC Для проверки целостности страниц базы данных используется инструкция DBCC CHECKALLOC, синтаксис которой подобен вышеприведенным. Обратите внимание, что хотя в примере 15-3 приведен параметр NOINDEX, он поддерживается только для обеспечения обратной совместимости с предыдущими версиями SQL Server. Эта инструкция всегда проверяет целостность страниц индексов. Пример 15-3. Синтаксис и использование инструкции DBCC CHECKALLOC Синтаксис: DBCC CHECKALLOC [ ( { 'database_name' | database_id | 0 } [ , { NOINDEX | REPAIR_ALLOW_DATA_LOSS | REPAIR_FAST | REPAIR_REBUILD } ] ) ] [ WITH { [ ALL_ERRORMSGS ] [ , NO_INFOMSGS ] [ , TABLOCK ] [ , ESTIMATEONLY ] } ] Использование: DBCC CHECKALLOC ( 'customer' ) DBCC CHECKALLOC ( 'customer', REPAIR_REBUILD ) Использование инструкции DBCC CHECKCATALOG Еще одной полезной инструкцией является DBCC CHECKCATALOG. Применяйте ее для проверки целостности системных таблиц базы данных. В примере 15-4 показаны синтаксис и использование этой инструкции.
514 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 Пример 15-4. Синтаксис и использование DBCC CHECKCATALOG Синтаксис: DBCC CHECKCATALOG [ ( 'database_name' | database_id | 0 ) ] [ WITH NO_INFOMSGS ] Использование: DBCC CHECKCATALOG ( 'customer' ) Использование инструкции DBCC DBREINDEX Для перестройки в БД одного или нескольких индексов лучше всего применять ин-струкцию DBCC DBREINDEX, синтаксис и использование которой показаны в при-мере 15-5. Пример 15-5. Синтаксис и использование инструкции DBCC DBREINDEX Синтаксис: DBCC DBREINDEX ( 'table_name' [ , 'index_name' [ , fillfactor ] ] ) [ WITH NO_INFOMSGS ] Использование: DBCC DBREINDEX ( 'customer.dbo.customers', 'PK_cust', 75) DBCC DBREINDEX ( customers, '', 85) Управление передачей журналов Передача журналов используется для создания одной или нескольких резервных баз данных, которые при сбое основной БД могут быть приведены в оперативное состоя-ние вручную. В этом разделе сначала представлен обзор передачи журналов, а затем подробно объясняется реализация этой возможности. Передача журналов: принцип работы Для организации передачи журналов требуется наличие как минимум двух отдельных экземпляров SQL Server: основного экземпляра сервера, на котором настроена основная БД для передачи журналов; резервного экземпляра сервера, на котором была настроена резервная БД для передачи журналов. Администрирование передачи журналов производится на основном сервере. Пере-дачу журналов можно расширить, применив для этого следующие способы. Настройка нескольких резервных баз данных позволит реализовать несколько резервных серверов, которые будут переведены в оперативное состояние в слу-чае сбоя основной БД. Можно представить каждый резервный сервер как сервер "теплого резерва". Если настроить необязательный сервер мониторинга, это даст возможность отсле-живать историю и состояние передачи журналов. На сервере мониторинга может быть также настроена инициализация оповещений в тех случаях, когда операцию передачи журналов не удается выполнить.
Автоматизация администрирования и обслуживание БД Глава 15 515 Настройка резервных серверов для обработки запросов позволит перенаправлять на них запросы с основного сервера. Передача журналов использует каталог резервного копирования. Поскольку все серверы, участвующие в передаче журналов, должны иметь доступ к этому каталогу, его следует поместить на сетевой или распределенный общий ресурс. Кроме того, на этот каталог должны иметь разрешения для записи и чтения прокси учетных записей резервных серверов (по умолчанию - учетные записи, используемые SQL Server Agent (Агент SQL Server) на резервных серверах). SQL Server Agent (Агент SQL Server) является ключевым компонентом всего про-цесса передачи журналов. С помощью задания SQL Server Agent (Агент SQL Server), выполняемого по расписанию, журнал транзакций основного сервера копируется в каталог резервного копирования. Это задание называется заданием резервного ко-пирования. Другое задание используется для копирования журнала транзакций из общего каталога на резервный сервер, и еще одно - для восстановления журналов транзакций на резервном сервере. Оба задания называются заданиями копирования и восстановления. По умолчанию все три задания выполняются каждые 15 минут. При включении и настройке передачи журналов соответствующие задания созда-ются автоматически. На сервере существует только один экземпляр каждого задания, даже если передача журналов была настроена для нескольких баз данных. Не следует изменять свойства задания напрямую. Вместо этого измените параметры резервного копирования для основной БД. Совет Если база данных обновляется часто, короткий интервал между операциями резервного копирования, копирования резервной копии и ее восстановления гарантирует синхронизацию резервных БД с основной. Однако в некоторых случаях лучше установить более длинный интервал, например с целью снизить рабочую нагрузку и использова-ние ресурсов, связанное с операциями резервирования, копирования и восстановления. Также стоит установить более длинный интервал для каждого задания, когда основной сервер перегружен и имеет мало свободных ресурсов или если основная база данных обновляется нечасто. При настройке передачи журналов в БД msdb на серверах, выступающих в роли основного, резервных и сервера мониторинга, создаются рабочие таблицы, а также хранимые процедуры, применяемые для проведения необходимых операций, очистки и мониторинга. Связанные оповещения, задействованные в мониторинге передачи журналов, настраиваются автоматически. Подготовка к передаче журналов Для правильного функционирования передачи журналов требуется особая настройка. Чтобы подготовить серверы для передачи журналов, выполните следующие общие действия. 1. Передача журналов устанавливается для каждой базы данных в отдельности. От-кройте диалоговое окно Database Properties (Свойства базы данных) для основной БД. На странице Options (Параметры) убедитесь, что для параметра Recovery model (Модель восстановления) установлено значение Full (Полная) или Bulklogged (Минимальное ведение журнала). Передача журналов не может применять-ся совместно с моделью восстановления Simple (Простая). 2. Создайте общедоступный ресурс, который будет использоваться в качестве ката лога резервного копирования для передачи журналов. Настройте разрешения таким об-разом, чтобы прокси учетных записей резервных серверов (по умолчанию - учетные 
516 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 записи, используемые SQL Server Agent (Агент SQL Server)) имели разрешения для чтения и записи в этой папке. 3. Включите передачу журналов для основной БД, как описывается дальше, в разделе "Включение передачи журналов для основной БД". 4. Укажите резервные БД передачи журналов (см. об этом раздел "Добавление ре-зервных БД при передаче журналов"). 5. Добавьте также сервер мониторинга, чтобы отслеживать оповещения и историю заданий. Сервер мониторинга активирует оповещения, если операции резервного копирования не были завершены успешно в определенные интервалы. Обновление передачи журналов SQL Server 2000 для использования в SQL Server 2005 В отличие от SQL Server 2000, где передача журналов осуществлялась с помощью планов обслуживания, в SQL Server 2005 она настраивается как часть стандартных свойств базы данных. Поэтому невозможно напрямую обновить передачу журналов, реализованную в версии SQL Server 2000, на передачу журналов SQL Server 2005. Однако можно мигрировать настройку передачи журналов в SQL Server 2000 для ее применения в SQL Server 2005. Чтобы обновить настройку передачи журналов, выполните указанные дальше действия. 1. Обновите все экземпляры резервных серверов до SQL Server 2005. При этом все БД, участвующие в передаче журналов, останутся базами данных SQL Server 2000, поскольку они находятся в автономном состоянии. 2. Обновите основной сервер до SQL Server 2005. Основная база данных будет не-доступна при выполнении обновления, а значит, в это время нельзя передать управление резервному серверу. 3. Включите передачу журналов для основной БД. Чтобы гарантировать применение резервных копий журналов транзакций должным образом, используйте тот же общий ресурс для сохранения резервных копий, что и в SQL Server 2000. 4. Укажите резервные серверы. В диалоговом окне Secondary Database Settings (Па-раметры резервной базы данных) необходимо во время настройки установить переключатель в положение No, the secondary database is initialized (Нет, резерв-ная база данных уже инициализирована). Резервная база данных автоматически обновляется до БД SQL Server 2005, когда начнется передача журналов. SQL Server 2005 не использует таблиц передачи журналов SQL Server 2000. По-этому после миграции можно удалить следующие таблицы, применяемые SQL Server 2000: log_shipping_databases; log_shipping_monitor; log_shipping_plan_databases; log_shipping_plan_history; log_shipping_plans; log_shipping_primaries; log_shipping_secondaries. Также можно удалить все задания передачи журналов, созданные в SQL Server 2000.
Автоматизация администрирования и обслуживание БД Глава 15 517 Включение передачи журналов для основной БД Для разрешения передачи журналов выполните следующую последовательность дей-ствий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных) для основного сервера. 2. В контекстном меню БД, которую следует сделать основной, выберите команду Properties (Свойства). Откроется диалоговое окно Database Properties (Свойства базы данных). 3. На странице Transaction Log Shipping (Передача журналов транзакций) установите флажок Enable this as a primary database in a log shipping configuration (Устано-вить эту базу данных в качестве основной в передаче журналов), как показано на рис. 15-20. Рис. 15-20. Страница Transaction Log Shipping диалогового окна Database Properties 4. Щелкните кнопку Backup Settings (Параметры резервного копирования), чтобы отобразить диалоговое окно Transaction Log Backup Settings (Параметры резерв-ного копирования журналов транзакций), показанное на рис. 15-21. 5. Введите путь в формате UNC для общего сетевого ресурса, где создаются журналы транзакций на основном сервере, например \\engsql\data\logs. 6. Если местоположение общего сетевого ресурса является в действительности пап-кой на локальном сервере, можно указать для использования локальный путь. В противном случае оставьте соответствующее поле пустым. 7. Используйте поле Delete files older than (Удалить файлы, старше), чтобы указать, сколько должны сохраняться резервные копии журнала транзакций. 8. По умолчанию задание, выполняющее резервное копирование, запускается каждые 15 минут. Если резервное копирование не происходит в течение определенного 
518 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 времени, можно активировать оповещение. В поле Alert if no backup occurs within (Инициировать оповещение, если резервное копирование не происходит на про-тяжении) укажите время, которое следует ждать, прежде чем инициировать опо-вещение для невыполненных операций копирования. 9. Щелкните кнопку OK, чтобы завершить настройку параметров резервного копи-рования. Закройте диалоговое окно Database Properties (Свойства базы данных) кнопкой OK. Рис. 15-21. Диалоговое окно Transaction Log Backup Settings Добавление резервных БД при передаче журналов После включения передачи журналов можно добавить резервную базу данных, вы-полнив указанную дальше последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных) для основного сервера. 2. В контекстном меню основной БД выберите команду Properties (Свойства). От-кроется диалоговое окно Database Properties (Свойства базы данных). 3. На странице Transaction Log Shipping (Передача журналов транзакций) в разделе Secondary databases (Резервные базы данных) щелкните кнопку Add (Добавить). Отобразится диалоговое окно Secondary Database Settings (Параметры резервной базы данных), показанное на рис. 15-22. 4. Щелкните кнопку Connect (Подключиться). Используйте диалоговое окно Connect to Server (Подключиться к серверу) для подключения к резервному серверу. 5. Для инициализации базы данных резервного сервера необходимо загрузить полную резервную копию БД основного сервера с параметром NORECOVERY. Если это 
Автоматизация администрирования и обслуживание БД Глава 15 519 уже было сделано ранее, установите переключатель в положение No, the secondary database is initialized (Нет, резервная база данных уже инициализирована). Рис. 15-22. Диалоговое окно Secondary Database Settings В противном случае для инициализации резервной БД переключатель можно установить в одно из следующих положений. : Yes, generate a full backup of the primary database and restore it into the secondary database (Да, создать полную резервную копию основной базы данных и восстановить ее в резервную базу данных) Создается полная резервная копия основной БД и восстанавливается в резервную БД с параметром NORECOVERY. Щелкните кнопку Restore options (Параметры восстановления), чтобы установить пути к папкам файлов данных и журналов. : Yes, restore an existing backup of the primary database into the secondary database (Да, восстановить существующую резервную копию основной базы дан-ных в резервную базу данных) Используется существующая полная копия базы данных, путь к которой указывается в поле Backup file (Файл резервной копии). Щелкните кнопку Restore options (Параметры восстановления), чтобы установить пути к папкам файлов данных и журналов. Примечание Операция восстановления не удастся, если на резервном сервере суще-ствует база данных с тем же именем, что и основная БД. 6. На вкладке Copy Files (Копирование файлов) укажите локальный каталог, который следует использовать в качестве каталога назначения для операций копирования журналов транзакций. Эту операцию копирования выполняет специализированное задание, запускаемое на резервном сервере. Служба SQL Server Agent (Агент SQL Server) должна иметь доступ к указанному каталогу.
520 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 7. В поле Delete copied files after (Удалять скопированные файлы после) установите срок сохранения для копий журналов транзакций. Обычно следует хранить копии не менее 24 часов. 8. По умолчанию задание копирования запускается каждые 15 минут. Щелкните кнопку Schedule (Расписание), чтобы изменить расписание запуска. 9. На вкладке Restore Transaction Log (Восстановление журнала транзакций) ука-жите состояние базы данных при восстановлении резервных копий как No Recovery Mode (Не осуществлять процесс восстановления) или Standby Mode (Режим ожидания). При использовании No Recovery Mode (Режим без восстановления) резервные копии журналов транзакций применяются с параметром NORECOVERY, и база данных остается в неоперативном состоянии. В случае Standby Mode (Режим ожидания) БД остается в состоянии, позволяющем ее немедленное ис-пользование. 10. По умолчанию резервные копии загружаются при выполнении задания восстанов-ления. Если требуется отложить восстановление резервных копий, можно уста-новить определенную задержку в минутах, часах или днях. Задержка не должна быть больше значения, указанного в поле Delete copied files after (Удалять скопи-рованные файлы после). 11. В поле Alert if no restore occurs within (Инициировать оповещение, если восстанов-ление не происходит на протяжении) укажите время, которое следует подождать, прежде чем инициировать оповещение о неудачной операции восстановления. 12. Щелкните кнопку OK, чтобы начать настройку резервной БД. Будет отображен ход операции. При возникновении ошибки щелкните соответствующую ссылку, чтобы прочитать о ней сообщение, и по возможности устраните проблему. 13. Завершив настройку, щелкните кнопку Close (Закрыть). Закройте диалоговое окно Database Properties (Свойства базы данных) кнопкой OK. Изменение интервала резервного копирования журнала транзакций По умолчанию резервная копия журнала транзакций создается каждые 15 минут. Чтобы изменить частоту создания резервной копии, выполните предложенные ниже действия. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных) для основного сервера. 2. В контекстном меню основной БД выберите команду Properties (Свойства). От-кроется диалоговое окно Database Properties (Свойства базы данных). 3. На странице Log Shipping (Передача журналов) щелкните кнопку Backup Settings (Параметры резервного копирования). Отобразится диалоговое окно Transaction Log Backup Settings (Параметры резервного копирования журналов тран-закций). 4. Щелкните кнопку Schedule (Расписание), чтобы отобразить диалоговое окно Job Schedules Properties (Свойства расписания задания). 5. Установите частоту запуска задания резервного копирования. 6. Последовательно щелкните кнопки OK во всех открытых диалоговых окнах, чтобы закрыть их и применить установки.
Автоматизация администрирования и обслуживание БД Глава 15 521 Изменение интервалов копирования и восстановления По умолчанию резервные копии журнала транзакций копируются на резервный сервер и восстанавливаются там каждые 15 минут. Чтобы изменить частоту операций копи-рования и восстановления, выполните следующую последовательность действий. 1. В панели Object Explorer (Обозреватель объектов) раскройте узел Databases (Базы данных) для основного сервера. 2. В контекстном меню основной БД выберите команду Properties (Свойства). От-кроется диалоговое окно Database Properties (Свойства базы данных). 3. На странице Transaction Log Shipping (Передача журналов транзакций) резервные серверы и базы данные отображены в списке Secondary server instances and databases (Резервные серверы и базы данных) и упорядочены по экземпляру сервера и имени БД. Выберите резервную базу данных, которую следует изменить, затем щелкните соответствующую кнопку с многоточием (...). Отобразится диалоговое окно Secondary Database Settings (Параметры резервной базы данных). 4. На вкладке Copy Files (Копирование файлов) щелкните кнопку Schedule (Рас-писание), чтобы отобразить диалоговое окно Job Properties (Свойства задания). Установите частоту запуска задания копирования, затем щелкните кнопку OK. 5. На вкладке Restore Transaction Log (Восстановление журнала транзакций) щелкни-те кнопку Schedule (Расписание) для отображения диалогового окна Job Properties (Свойства задания). Установите частоту запуска задания восстановления, затем щелкните кнопку OK. Переход на резервную БД при сбое В большинстве случаев при переходе на резервную базу данных в случае сбоя основ-ной обе БД не будут полностью синхронизированы. Это, как правило, происходит из-за того, что: 1) последние резервные копии журнала транзакций, созданные на основном сервере, еще не скопированы на резервный сервер или не применены к нему; 2) в базы данных на основном сервере были внесены изменения со времени последнего резервного копирования; 3) и первое, и второе. Поэтому, прежде чем приступить к использованию резервной базы данных, следует синхронизировать основную БД с резервной и только затем перевести резервный сервер в рабочее состояние. Для этого выполните следующие действия. 1. Скопируйте оставшиеся файлы резервных копий журнала транзакций из обще-доступного местоположения резервной копии в назначенную папку копии на ре-зервном сервере. Можно сделать это вручную или запустив задание копирования на каждом резервном сервере. 2. Примените все непримененные резервные копии журналов транзакций. Сделай-те это либо вручную, либо запустив задание восстановления на резервных сер-верах. 3. По возможности произведите резервное копирование активной части (конца) журнала транзакций на основном сервере с параметром NO_TRUNCATE. Для осуществления резервного копирования журнала транзакций в диалоговом окне Back Up Database (Резервное копирование базы данных) установите флажок Back up the tail of the log, and leave the database in the restoring state (Создать резервную копию конца журнала транзакций и оставить базу данных в состоянии восстанов-ления) на странице Options (Параметры).
522 Часть IV Оптимизация и обслуживание Microsoft SQL Server 2005 4. Если удалось создать резервную копию активной части журнала транзакций, при-мените ее к БД на резервном сервере. Это будет гарантировать наличие на резерв-ном сервере наиболее свежей версии данных. Несмотря на это, незафиксированные транзакции основного сервера теряются. 5. Сделайте резервную базу данных доступной для использования, произведя с ней процесс восстановления. Для этого выполните инструкцию RESTORE DATABASE с параметром RECOVERY, например: RESTORE DATABASE Customer WITH RECOVERY После проведения вышеперечисленных действий можно настроить резервную базу данных таким образом, чтобы она играла роль основной. Затем при необходимости можно менять базы данных. Действия, требуемые для первоначального изменения ролей, отличаются от тех, которые требуются для последующих изменений. Если переход на резервную БД выполняется в первый раз, необходимо сделать следующее. 1. Вручную перейти от основной базы данных к резервной, как описано выше. 2. Отключить задание, создающее резервную копию журнала транзакций на перво-начальном основном сервере, а также задания копирования и восстановления на первоначальном резервном сервере. 3. Настроить передачу журналов для бывшей резервной базы данных, которая теперь играет роль основной. Необходимо использовать тот же общедоступный ресурс для сохранения резервных копий журнала транзакций, что использовал бывший основной сервер; при этом бывшую основную БД нужно добавить в качестве ре-зервной при настройке передачи журналов и установить параметр No, the secondary database is initialized (Нет, резервная база данных уже инициализирована). После выполнения действий для начального изменения ролей, последующие их изменения делайте, следуя указанным ниже действиям. 1. Выполните переход на резервную базу данных вручную и приведите ее в оператив-ное состояние. При резервном копировании активной части журнала транзакций на основном сервере необходимо использовать параметр NORECOVERY. 2. Отключите задание резервного копирования на первоначальном основном сервере и задания копирования и восстановления на первоначальном резервном сервере. 3. Создайте или включите задание, создающее резервные копии для передачи жур-налов на бывшем резервном сервере, который теперь выступает в роли основно-го, и создайте или включите задания копирования и восстановления на бывшем основном сервере, выступающем отныне в роли резервного.
